# SubnetMgr contract class generated from [ABI](contracts/SubnetManager.abi)
# Do not edit this file directly, it is generated from the ABI.

from web3 import Web3

class SubnetMgr:
    def __init__(self, address, provider, abi):
        self.web3 = Web3(provider)
        self.contract = self.web3.eth.contract(address=address, abi=abi)

    def activateSubnet(self, netuid):
        """
        Call activateSubnet(netuid)
        :param netuid: uint16 (solidity name: 'netuid')
        :return: []
        """
        return self.contract.functions.activateSubnet(netuid).call()

    def ammFactory(self, ):
        """
        Call ammFactory()
        :return: [{'internalType': 'contract SubnetAMMFactory', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.ammFactory().call()

    def getNetworkLockCost(self, ):
        """
        Call getNetworkLockCost()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.getNetworkLockCost().call()

    def getNetworkParams(self, ):
        """
        Call getNetworkParams()
        :return: [{'internalType': 'uint256', 'name': 'minLock', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'lastLock', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'lastLockBlock', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'rateLimit', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'reductionInterval', 'type': 'uint256'}, {'internalType': 'uint16', 'name': 'totalNets', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'nextId', 'type': 'uint16'}]
        """
        return self.contract.functions.getNetworkParams().call()

    def getNextNetuid(self, ):
        """
        Call getNextNetuid()
        :return: [{'internalType': 'uint16', 'name': '', 'type': 'uint16'}]
        """
        return self.contract.functions.getNextNetuid().call()

    def getSubnetDetails(self, netuid):
        """
        Call getSubnetDetails(netuid)
        :param netuid: uint16 (solidity name: 'netuid')
        :return: [{'components': [{'internalType': 'uint16', 'name': 'netuid', 'type': 'uint16'}, {'internalType': 'address', 'name': 'owner', 'type': 'address'}, {'internalType': 'address', 'name': 'alphaToken', 'type': 'address'}, {'internalType': 'address', 'name': 'ammPool', 'type': 'address'}, {'internalType': 'uint256', 'name': 'lockedAmount', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'poolInitialTao', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'burnedAmount', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'createdAt', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'isActive', 'type': 'bool'}, {'internalType': 'string', 'name': 'name', 'type': 'string'}, {'internalType': 'string', 'name': 'description', 'type': 'string'}], 'internalType': 'struct SubnetTypes.SubnetInfo', 'name': 'subnetInfo', 'type': 'tuple'}, {'internalType': 'uint256', 'name': 'currentPrice', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'totalVolume', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'hetuReserve', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'alphaReserve', 'type': 'uint256'}]
        """
        return self.contract.functions.getSubnetDetails(netuid).call()

    def getSubnetHyperparams(self, netuid):
        """
        Call getSubnetHyperparams(netuid)
        :param netuid: uint16 (solidity name: 'netuid')
        :return: [{'components': [{'internalType': 'uint16', 'name': 'rho', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'kappa', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'immunityPeriod', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'tempo', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'maxValidators', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'activityCutoff', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'maxAllowedUids', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'maxAllowedValidators', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'minAllowedWeights', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'maxWeightsLimit', 'type': 'uint16'}, {'internalType': 'uint256', 'name': 'baseBurnCost', 'type': 'uint256'}, {'internalType': 'uint64', 'name': 'currentDifficulty', 'type': 'uint64'}, {'internalType': 'uint16', 'name': 'targetRegsPerInterval', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'maxRegsPerBlock', 'type': 'uint16'}, {'internalType': 'uint64', 'name': 'weightsRateLimit', 'type': 'uint64'}, {'internalType': 'bool', 'name': 'registrationAllowed', 'type': 'bool'}, {'internalType': 'bool', 'name': 'commitRevealEnabled', 'type': 'bool'}, {'internalType': 'uint64', 'name': 'commitRevealPeriod', 'type': 'uint64'}, {'internalType': 'uint64', 'name': 'servingRateLimit', 'type': 'uint64'}, {'internalType': 'uint16', 'name': 'validatorThreshold', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'neuronThreshold', 'type': 'uint16'}], 'internalType': 'struct SubnetTypes.SubnetHyperparams', 'name': '', 'type': 'tuple'}]
        """
        return self.contract.functions.getSubnetHyperparams(netuid).call()

    def getSubnetInfo(self, netuid):
        """
        Call getSubnetInfo(netuid)
        :param netuid: uint16 (solidity name: 'netuid')
        :return: [{'components': [{'internalType': 'uint16', 'name': 'netuid', 'type': 'uint16'}, {'internalType': 'address', 'name': 'owner', 'type': 'address'}, {'internalType': 'address', 'name': 'alphaToken', 'type': 'address'}, {'internalType': 'address', 'name': 'ammPool', 'type': 'address'}, {'internalType': 'uint256', 'name': 'lockedAmount', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'poolInitialTao', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'burnedAmount', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'createdAt', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'isActive', 'type': 'bool'}, {'internalType': 'string', 'name': 'name', 'type': 'string'}, {'internalType': 'string', 'name': 'description', 'type': 'string'}], 'internalType': 'struct SubnetTypes.SubnetInfo', 'name': '', 'type': 'tuple'}]
        """
        return self.contract.functions.getSubnetInfo(netuid).call()

    def getSubnetParams(self, netuid):
        """
        Call getSubnetParams(netuid)
        :param netuid: uint16 (solidity name: 'netuid')
        :return: [{'components': [{'internalType': 'uint16', 'name': 'rho', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'kappa', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'immunityPeriod', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'tempo', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'maxValidators', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'activityCutoff', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'maxAllowedUids', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'maxAllowedValidators', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'minAllowedWeights', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'maxWeightsLimit', 'type': 'uint16'}, {'internalType': 'uint256', 'name': 'baseBurnCost', 'type': 'uint256'}, {'internalType': 'uint64', 'name': 'currentDifficulty', 'type': 'uint64'}, {'internalType': 'uint16', 'name': 'targetRegsPerInterval', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'maxRegsPerBlock', 'type': 'uint16'}, {'internalType': 'uint64', 'name': 'weightsRateLimit', 'type': 'uint64'}, {'internalType': 'bool', 'name': 'registrationAllowed', 'type': 'bool'}, {'internalType': 'bool', 'name': 'commitRevealEnabled', 'type': 'bool'}, {'internalType': 'uint64', 'name': 'commitRevealPeriod', 'type': 'uint64'}, {'internalType': 'uint64', 'name': 'servingRateLimit', 'type': 'uint64'}, {'internalType': 'uint16', 'name': 'validatorThreshold', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'neuronThreshold', 'type': 'uint16'}], 'internalType': 'struct SubnetTypes.SubnetHyperparams', 'name': '', 'type': 'tuple'}]
        """
        return self.contract.functions.getSubnetParams(netuid).call()

    def getUserSubnets(self, user):
        """
        Call getUserSubnets(user)
        :param user: address (solidity name: 'user')
        :return: [{'internalType': 'uint16[]', 'name': '', 'type': 'uint16[]'}]
        """
        return self.contract.functions.getUserSubnets(user).call()

    def hetuToken(self, ):
        """
        Call hetuToken()
        :return: [{'internalType': 'contract IERC20', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.hetuToken().call()

    def lockReductionInterval(self, ):
        """
        Call lockReductionInterval()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.lockReductionInterval().call()

    def networkLastLock(self, ):
        """
        Call networkLastLock()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.networkLastLock().call()

    def networkLastLockBlock(self, ):
        """
        Call networkLastLockBlock()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.networkLastLockBlock().call()

    def networkMinLock(self, ):
        """
        Call networkMinLock()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.networkMinLock().call()

    def networkRateLimit(self, ):
        """
        Call networkRateLimit()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.networkRateLimit().call()

    def nextNetuid(self, ):
        """
        Call nextNetuid()
        :return: [{'internalType': 'uint16', 'name': '', 'type': 'uint16'}]
        """
        return self.contract.functions.nextNetuid().call()

    def owner(self, ):
        """
        Call owner()
        :return: [{'internalType': 'address', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.owner().call()

    def ownerSubnets(self, arg0, arg1):
        """
        Call ownerSubnets(arg0, arg1)
        :param arg0: address (solidity name: 'arg0')
        :param arg1: uint256 (solidity name: 'arg1')
        :return: [{'internalType': 'uint16', 'name': '', 'type': 'uint16'}]
        """
        return self.contract.functions.ownerSubnets(arg0, arg1).call()

    def registerNetwork(self, name, description, tokenName, tokenSymbol):
        """
        Call registerNetwork(name, description, tokenName, tokenSymbol)
        :param name: string (solidity name: 'name')
        :param description: string (solidity name: 'description')
        :param tokenName: string (solidity name: 'tokenName')
        :param tokenSymbol: string (solidity name: 'tokenSymbol')
        :return: [{'internalType': 'uint16', 'name': 'netuid', 'type': 'uint16'}]
        """
        return self.contract.functions.registerNetwork(name, description, tokenName, tokenSymbol).call()

    def registerNetworkWithPartialCustom(self, name, description, tokenName, tokenSymbol, customHyperparams, useCustomFlags):
        """
        Call registerNetworkWithPartialCustom(name, description, tokenName, tokenSymbol, customHyperparams, useCustomFlags)
        :param name: string (solidity name: 'name')
        :param description: string (solidity name: 'description')
        :param tokenName: string (solidity name: 'tokenName')
        :param tokenSymbol: string (solidity name: 'tokenSymbol')
        :param customHyperparams: tuple (solidity name: 'customHyperparams')
        :param useCustomFlags: bool[21] (solidity name: 'useCustomFlags')
        :return: [{'internalType': 'uint16', 'name': 'netuid', 'type': 'uint16'}]
        """
        return self.contract.functions.registerNetworkWithPartialCustom(name, description, tokenName, tokenSymbol, customHyperparams, useCustomFlags).call()

    def registerNetworkWithPartialCustomAndPermit(self, name, description, tokenName, tokenSymbol, customHyperparams, useCustomFlags, deadline, v, r, s):
        """
        Call registerNetworkWithPartialCustomAndPermit(name, description, tokenName, tokenSymbol, customHyperparams, useCustomFlags, deadline, v, r, s)
        :param name: string (solidity name: 'name')
        :param description: string (solidity name: 'description')
        :param tokenName: string (solidity name: 'tokenName')
        :param tokenSymbol: string (solidity name: 'tokenSymbol')
        :param customHyperparams: tuple (solidity name: 'customHyperparams')
        :param useCustomFlags: bool[21] (solidity name: 'useCustomFlags')
        :param deadline: uint256 (solidity name: 'deadline')
        :param v: uint8 (solidity name: 'v')
        :param r: bytes32 (solidity name: 'r')
        :param s: bytes32 (solidity name: 's')
        :return: [{'internalType': 'uint16', 'name': 'netuid', 'type': 'uint16'}]
        """
        return self.contract.functions.registerNetworkWithPartialCustomAndPermit(name, description, tokenName, tokenSymbol, customHyperparams, useCustomFlags, deadline, v, r, s).call()

    def registerNetworkWithPermit(self, name, description, tokenName, tokenSymbol, deadline, v, r, s):
        """
        Call registerNetworkWithPermit(name, description, tokenName, tokenSymbol, deadline, v, r, s)
        :param name: string (solidity name: 'name')
        :param description: string (solidity name: 'description')
        :param tokenName: string (solidity name: 'tokenName')
        :param tokenSymbol: string (solidity name: 'tokenSymbol')
        :param deadline: uint256 (solidity name: 'deadline')
        :param v: uint8 (solidity name: 'v')
        :param r: bytes32 (solidity name: 'r')
        :param s: bytes32 (solidity name: 's')
        :return: [{'internalType': 'uint16', 'name': 'netuid', 'type': 'uint16'}]
        """
        return self.contract.functions.registerNetworkWithPermit(name, description, tokenName, tokenSymbol, deadline, v, r, s).call()

    def renounceOwnership(self, ):
        """
        Call renounceOwnership()
        :return: []
        """
        return self.contract.functions.renounceOwnership().call()

    def resetNetworkLockState(self, ):
        """
        Call resetNetworkLockState()
        :return: []
        """
        return self.contract.functions.resetNetworkLockState().call()

    def subnetExists(self, arg0):
        """
        Call subnetExists(arg0)
        :param arg0: uint16 (solidity name: 'arg0')
        :return: [{'internalType': 'bool', 'name': '', 'type': 'bool'}]
        """
        return self.contract.functions.subnetExists(arg0).call()

    def subnetHyperparams(self, arg0):
        """
        Call subnetHyperparams(arg0)
        :param arg0: uint16 (solidity name: 'arg0')
        :return: [{'internalType': 'uint16', 'name': 'rho', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'kappa', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'immunityPeriod', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'tempo', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'maxValidators', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'activityCutoff', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'maxAllowedUids', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'maxAllowedValidators', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'minAllowedWeights', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'maxWeightsLimit', 'type': 'uint16'}, {'internalType': 'uint256', 'name': 'baseBurnCost', 'type': 'uint256'}, {'internalType': 'uint64', 'name': 'currentDifficulty', 'type': 'uint64'}, {'internalType': 'uint16', 'name': 'targetRegsPerInterval', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'maxRegsPerBlock', 'type': 'uint16'}, {'internalType': 'uint64', 'name': 'weightsRateLimit', 'type': 'uint64'}, {'internalType': 'bool', 'name': 'registrationAllowed', 'type': 'bool'}, {'internalType': 'bool', 'name': 'commitRevealEnabled', 'type': 'bool'}, {'internalType': 'uint64', 'name': 'commitRevealPeriod', 'type': 'uint64'}, {'internalType': 'uint64', 'name': 'servingRateLimit', 'type': 'uint64'}, {'internalType': 'uint16', 'name': 'validatorThreshold', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'neuronThreshold', 'type': 'uint16'}]
        """
        return self.contract.functions.subnetHyperparams(arg0).call()

    def subnets(self, arg0):
        """
        Call subnets(arg0)
        :param arg0: uint16 (solidity name: 'arg0')
        :return: [{'internalType': 'uint16', 'name': 'netuid', 'type': 'uint16'}, {'internalType': 'address', 'name': 'owner', 'type': 'address'}, {'internalType': 'address', 'name': 'alphaToken', 'type': 'address'}, {'internalType': 'address', 'name': 'ammPool', 'type': 'address'}, {'internalType': 'uint256', 'name': 'lockedAmount', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'poolInitialTao', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'burnedAmount', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'createdAt', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'isActive', 'type': 'bool'}, {'internalType': 'string', 'name': 'name', 'type': 'string'}, {'internalType': 'string', 'name': 'description', 'type': 'string'}]
        """
        return self.contract.functions.subnets(arg0).call()

    def totalNetworks(self, ):
        """
        Call totalNetworks()
        :return: [{'internalType': 'uint16', 'name': '', 'type': 'uint16'}]
        """
        return self.contract.functions.totalNetworks().call()

    def transferOwnership(self, newOwner):
        """
        Call transferOwnership(newOwner)
        :param newOwner: address (solidity name: 'newOwner')
        :return: []
        """
        return self.contract.functions.transferOwnership(newOwner).call()

    def updateNetworkParams(self, _networkMinLock, _networkRateLimit, _lockReductionInterval):
        """
        Call updateNetworkParams(_networkMinLock, _networkRateLimit, _lockReductionInterval)
        :param _networkMinLock: uint256 (solidity name: '_networkMinLock')
        :param _networkRateLimit: uint256 (solidity name: '_networkRateLimit')
        :param _lockReductionInterval: uint256 (solidity name: '_lockReductionInterval')
        :return: []
        """
        return self.contract.functions.updateNetworkParams(_networkMinLock, _networkRateLimit, _lockReductionInterval).call()

    def updateSubnetHyperparams(self, netuid, newHyperparams):
        """
        Call updateSubnetHyperparams(netuid, newHyperparams)
        :param netuid: uint16 (solidity name: 'netuid')
        :param newHyperparams: tuple (solidity name: 'newHyperparams')
        :return: []
        """
        return self.contract.functions.updateSubnetHyperparams(netuid, newHyperparams).call()

    def updateSubnetInfo(self, netuid, newName, newDescription):
        """
        Call updateSubnetInfo(netuid, newName, newDescription)
        :param netuid: uint16 (solidity name: 'netuid')
        :param newName: string (solidity name: 'newName')
        :param newDescription: string (solidity name: 'newDescription')
        :return: []
        """
        return self.contract.functions.updateSubnetInfo(netuid, newName, newDescription).call()