# NeuronMgr contract class generated from [ABI](contracts/NeuronManager.abi)
# Do not edit this file directly, it is generated from the ABI.

from web3 import Web3

class NeuronMgr:
    def __init__(self, address, provider, abi):
        self.web3 = Web3(provider)
        self.contract = self.web3.eth.contract(address=address, abi=abi)

    def batchUpdateStakeAllocations(self, netuid, accounts, newStakes):
        """
        Call batchUpdateStakeAllocations(netuid, accounts, newStakes)
        :param netuid: uint16 (solidity name: 'netuid')
        :param accounts: address[] (solidity name: 'accounts')
        :param newStakes: uint256[] (solidity name: 'newStakes')
        :return: []
        """
        return self.contract.functions.batchUpdateStakeAllocations(netuid, accounts, newStakes).call()

    def canRegisterNeuron(self, user, netuid, isValidatorRole):
        """
        Call canRegisterNeuron(user, netuid, isValidatorRole)
        :param user: address (solidity name: 'user')
        :param netuid: uint16 (solidity name: 'netuid')
        :param isValidatorRole: bool (solidity name: 'isValidatorRole')
        :return: [{'internalType': 'bool', 'name': '', 'type': 'bool'}]
        """
        return self.contract.functions.canRegisterNeuron(user, netuid, isValidatorRole).call()

    def deregisterNeuron(self, netuid):
        """
        Call deregisterNeuron(netuid)
        :param netuid: uint16 (solidity name: 'netuid')
        :return: []
        """
        return self.contract.functions.deregisterNeuron(netuid).call()

    def distributeRewards(self, netuid, accounts, amounts):
        """
        Call distributeRewards(netuid, accounts, amounts)
        :param netuid: uint16 (solidity name: 'netuid')
        :param accounts: address[] (solidity name: 'accounts')
        :param amounts: uint256[] (solidity name: 'amounts')
        :return: []
        """
        return self.contract.functions.distributeRewards(netuid, accounts, amounts).call()

    def getNeuronInfo(self, netuid, account):
        """
        Call getNeuronInfo(netuid, account)
        :param netuid: uint16 (solidity name: 'netuid')
        :param account: address (solidity name: 'account')
        :return: [{'components': [{'internalType': 'address', 'name': 'account', 'type': 'address'}, {'internalType': 'uint16', 'name': 'uid', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'netuid', 'type': 'uint16'}, {'internalType': 'bool', 'name': 'isActive', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isValidator', 'type': 'bool'}, {'internalType': 'uint256', 'name': 'stake', 'type': 'uint256'}, {'internalType': 'uint64', 'name': 'registrationBlock', 'type': 'uint64'}, {'internalType': 'uint256', 'name': 'lastUpdate', 'type': 'uint256'}, {'internalType': 'string', 'name': 'axonEndpoint', 'type': 'string'}, {'internalType': 'uint32', 'name': 'axonPort', 'type': 'uint32'}, {'internalType': 'string', 'name': 'prometheusEndpoint', 'type': 'string'}, {'internalType': 'uint32', 'name': 'prometheusPort', 'type': 'uint32'}], 'internalType': 'struct SubnetTypes.NeuronInfo', 'name': '', 'type': 'tuple'}]
        """
        return self.contract.functions.getNeuronInfo(netuid, account).call()

    def getSubnetNeuronCount(self, netuid):
        """
        Call getSubnetNeuronCount(netuid)
        :param netuid: uint16 (solidity name: 'netuid')
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.getSubnetNeuronCount(netuid).call()

    def getSubnetNeurons(self, netuid):
        """
        Call getSubnetNeurons(netuid)
        :param netuid: uint16 (solidity name: 'netuid')
        :return: [{'internalType': 'address[]', 'name': '', 'type': 'address[]'}]
        """
        return self.contract.functions.getSubnetNeurons(netuid).call()

    def getSubnetValidatorCount(self, netuid):
        """
        Call getSubnetValidatorCount(netuid)
        :param netuid: uint16 (solidity name: 'netuid')
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.getSubnetValidatorCount(netuid).call()

    def getSubnetValidators(self, netuid):
        """
        Call getSubnetValidators(netuid)
        :param netuid: uint16 (solidity name: 'netuid')
        :return: [{'internalType': 'address[]', 'name': '', 'type': 'address[]'}]
        """
        return self.contract.functions.getSubnetValidators(netuid).call()

    def globalStaking(self, ):
        """
        Call globalStaking()
        :return: [{'internalType': 'contract IGlobalStaking', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.globalStaking().call()

    def isNeuron(self, netuid, account):
        """
        Call isNeuron(netuid, account)
        :param netuid: uint16 (solidity name: 'netuid')
        :param account: address (solidity name: 'account')
        :return: [{'internalType': 'bool', 'name': '', 'type': 'bool'}]
        """
        return self.contract.functions.isNeuron(netuid, account).call()

    def isValidator(self, netuid, account):
        """
        Call isValidator(netuid, account)
        :param netuid: uint16 (solidity name: 'netuid')
        :param account: address (solidity name: 'account')
        :return: [{'internalType': 'bool', 'name': '', 'type': 'bool'}]
        """
        return self.contract.functions.isValidator(netuid, account).call()

    def neuronList(self, arg0, arg1):
        """
        Call neuronList(arg0, arg1)
        :param arg0: uint16 (solidity name: 'arg0')
        :param arg1: uint256 (solidity name: 'arg1')
        :return: [{'internalType': 'address', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.neuronList(arg0, arg1).call()

    def neurons(self, arg0, arg1):
        """
        Call neurons(arg0, arg1)
        :param arg0: uint16 (solidity name: 'arg0')
        :param arg1: address (solidity name: 'arg1')
        :return: [{'internalType': 'address', 'name': 'account', 'type': 'address'}, {'internalType': 'uint16', 'name': 'uid', 'type': 'uint16'}, {'internalType': 'uint16', 'name': 'netuid', 'type': 'uint16'}, {'internalType': 'bool', 'name': 'isActive', 'type': 'bool'}, {'internalType': 'bool', 'name': 'isValidator', 'type': 'bool'}, {'internalType': 'uint256', 'name': 'stake', 'type': 'uint256'}, {'internalType': 'uint64', 'name': 'registrationBlock', 'type': 'uint64'}, {'internalType': 'uint256', 'name': 'lastUpdate', 'type': 'uint256'}, {'internalType': 'string', 'name': 'axonEndpoint', 'type': 'string'}, {'internalType': 'uint32', 'name': 'axonPort', 'type': 'uint32'}, {'internalType': 'string', 'name': 'prometheusEndpoint', 'type': 'string'}, {'internalType': 'uint32', 'name': 'prometheusPort', 'type': 'uint32'}]
        """
        return self.contract.functions.neurons(arg0, arg1).call()

    def owner(self, ):
        """
        Call owner()
        :return: [{'internalType': 'address', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.owner().call()

    def registerNeuron(self, netuid, isValidatorRole, axonEndpoint, axonPort, prometheusEndpoint, prometheusPort):
        """
        Call registerNeuron(netuid, isValidatorRole, axonEndpoint, axonPort, prometheusEndpoint, prometheusPort)
        :param netuid: uint16 (solidity name: 'netuid')
        :param isValidatorRole: bool (solidity name: 'isValidatorRole')
        :param axonEndpoint: string (solidity name: 'axonEndpoint')
        :param axonPort: uint32 (solidity name: 'axonPort')
        :param prometheusEndpoint: string (solidity name: 'prometheusEndpoint')
        :param prometheusPort: uint32 (solidity name: 'prometheusPort')
        :return: []
        """
        return self.contract.functions.registerNeuron(netuid, isValidatorRole, axonEndpoint, axonPort, prometheusEndpoint, prometheusPort).call()

    def renounceOwnership(self, ):
        """
        Call renounceOwnership()
        :return: []
        """
        return self.contract.functions.renounceOwnership().call()

    def rewardDistributor(self, ):
        """
        Call rewardDistributor()
        :return: [{'internalType': 'address', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.rewardDistributor().call()

    def setRewardDistributor(self, _rewardDistributor):
        """
        Call setRewardDistributor(_rewardDistributor)
        :param _rewardDistributor: address (solidity name: '_rewardDistributor')
        :return: []
        """
        return self.contract.functions.setRewardDistributor(_rewardDistributor).call()

    def subnetManager(self, ):
        """
        Call subnetManager()
        :return: [{'internalType': 'contract ISubnetManager', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.subnetManager().call()

    def transferOwnership(self, newOwner):
        """
        Call transferOwnership(newOwner)
        :param newOwner: address (solidity name: 'newOwner')
        :return: []
        """
        return self.contract.functions.transferOwnership(newOwner).call()

    def updateService(self, netuid, axonEndpoint, axonPort, prometheusEndpoint, prometheusPort):
        """
        Call updateService(netuid, axonEndpoint, axonPort, prometheusEndpoint, prometheusPort)
        :param netuid: uint16 (solidity name: 'netuid')
        :param axonEndpoint: string (solidity name: 'axonEndpoint')
        :param axonPort: uint32 (solidity name: 'axonPort')
        :param prometheusEndpoint: string (solidity name: 'prometheusEndpoint')
        :param prometheusPort: uint32 (solidity name: 'prometheusPort')
        :return: []
        """
        return self.contract.functions.updateService(netuid, axonEndpoint, axonPort, prometheusEndpoint, prometheusPort).call()

    def updateStakeAllocation(self, netuid, account, newStake):
        """
        Call updateStakeAllocation(netuid, account, newStake)
        :param netuid: uint16 (solidity name: 'netuid')
        :param account: address (solidity name: 'account')
        :param newStake: uint256 (solidity name: 'newStake')
        :return: []
        """
        return self.contract.functions.updateStakeAllocation(netuid, account, newStake).call()