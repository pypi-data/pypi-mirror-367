# Erc20 contract class generated from [ABI](contracts/ERC20MinterBurnerDecimals.abi)
# Do not edit this file directly, it is generated from the ABI.

from web3 import Web3

class Erc20:
    def __init__(self, address, provider, abi):
        self.web3 = Web3(provider)
        self.contract = self.web3.eth.contract(address=address, abi=abi)

    def BURNER_ROLE(self, ):
        """
        Call BURNER_ROLE()
        :return: [{'internalType': 'bytes32', 'name': '', 'type': 'bytes32'}]
        """
        return self.contract.functions.BURNER_ROLE().call()

    def DEFAULT_ADMIN_ROLE(self, ):
        """
        Call DEFAULT_ADMIN_ROLE()
        :return: [{'internalType': 'bytes32', 'name': '', 'type': 'bytes32'}]
        """
        return self.contract.functions.DEFAULT_ADMIN_ROLE().call()

    def INITIAL_SUPPLY(self, ):
        """
        Call INITIAL_SUPPLY()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.INITIAL_SUPPLY().call()

    def MAX_SUPPLY(self, ):
        """
        Call MAX_SUPPLY()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.MAX_SUPPLY().call()

    def MINTER_ROLE(self, ):
        """
        Call MINTER_ROLE()
        :return: [{'internalType': 'bytes32', 'name': '', 'type': 'bytes32'}]
        """
        return self.contract.functions.MINTER_ROLE().call()

    def PAUSER_ROLE(self, ):
        """
        Call PAUSER_ROLE()
        :return: [{'internalType': 'bytes32', 'name': '', 'type': 'bytes32'}]
        """
        return self.contract.functions.PAUSER_ROLE().call()

    def allowance(self, owner, spender):
        """
        Call allowance(owner, spender)
        :param owner: address (solidity name: 'owner')
        :param spender: address (solidity name: 'spender')
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.allowance(owner, spender).call()

    def approve(self, spender, value):
        """
        Call approve(spender, value)
        :param spender: address (solidity name: 'spender')
        :param value: uint256 (solidity name: 'value')
        :return: [{'internalType': 'bool', 'name': '', 'type': 'bool'}]
        """
        return self.contract.functions.approve(spender, value).call()

    def balanceOf(self, account):
        """
        Call balanceOf(account)
        :param account: address (solidity name: 'account')
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.balanceOf(account).call()

    def burn(self, value):
        """
        Call burn(value)
        :param value: uint256 (solidity name: 'value')
        :return: []
        """
        return self.contract.functions.burn(value).call()

    def burnCoins(self, from_, amount):
        """
        Call burnCoins(from_, amount)
        :param from_: address (solidity name: 'from')
        :param amount: uint256 (solidity name: 'amount')
        :return: []
        """
        return self.contract.functions.burnCoins(from_, amount).call()

    def burnFrom(self, account, value):
        """
        Call burnFrom(account, value)
        :param account: address (solidity name: 'account')
        :param value: uint256 (solidity name: 'value')
        :return: []
        """
        return self.contract.functions.burnFrom(account, value).call()

    def decimals(self, ):
        """
        Call decimals()
        :return: [{'internalType': 'uint8', 'name': '', 'type': 'uint8'}]
        """
        return self.contract.functions.decimals().call()

    def getRoleAdmin(self, role):
        """
        Call getRoleAdmin(role)
        :param role: bytes32 (solidity name: 'role')
        :return: [{'internalType': 'bytes32', 'name': '', 'type': 'bytes32'}]
        """
        return self.contract.functions.getRoleAdmin(role).call()

    def getRoleMemberCount(self, role):
        """
        Call getRoleMemberCount(role)
        :param role: bytes32 (solidity name: 'role')
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.getRoleMemberCount(role).call()

    def getRoleMembers(self, role):
        """
        Call getRoleMembers(role)
        :param role: bytes32 (solidity name: 'role')
        :return: [{'internalType': 'address[]', 'name': '', 'type': 'address[]'}]
        """
        return self.contract.functions.getRoleMembers(role).call()

    def grantRole(self, role, account):
        """
        Call grantRole(role, account)
        :param role: bytes32 (solidity name: 'role')
        :param account: address (solidity name: 'account')
        :return: []
        """
        return self.contract.functions.grantRole(role, account).call()

    def hasRole(self, role, account):
        """
        Call hasRole(role, account)
        :param role: bytes32 (solidity name: 'role')
        :param account: address (solidity name: 'account')
        :return: [{'internalType': 'bool', 'name': '', 'type': 'bool'}]
        """
        return self.contract.functions.hasRole(role, account).call()

    def mint(self, to, amount):
        """
        Call mint(to, amount)
        :param to: address (solidity name: 'to')
        :param amount: uint256 (solidity name: 'amount')
        :return: []
        """
        return self.contract.functions.mint(to, amount).call()

    def name(self, ):
        """
        Call name()
        :return: [{'internalType': 'string', 'name': '', 'type': 'string'}]
        """
        return self.contract.functions.name().call()

    def pause(self, ):
        """
        Call pause()
        :return: []
        """
        return self.contract.functions.pause().call()

    def paused(self, ):
        """
        Call paused()
        :return: [{'internalType': 'bool', 'name': '', 'type': 'bool'}]
        """
        return self.contract.functions.paused().call()

    def renounceRole(self, role, callerConfirmation):
        """
        Call renounceRole(role, callerConfirmation)
        :param role: bytes32 (solidity name: 'role')
        :param callerConfirmation: address (solidity name: 'callerConfirmation')
        :return: []
        """
        return self.contract.functions.renounceRole(role, callerConfirmation).call()

    def revokeRole(self, role, account):
        """
        Call revokeRole(role, account)
        :param role: bytes32 (solidity name: 'role')
        :param account: address (solidity name: 'account')
        :return: []
        """
        return self.contract.functions.revokeRole(role, account).call()

    def supportsInterface(self, interfaceId):
        """
        Call supportsInterface(interfaceId)
        :param interfaceId: bytes4 (solidity name: 'interfaceId')
        :return: [{'internalType': 'bool', 'name': '', 'type': 'bool'}]
        """
        return self.contract.functions.supportsInterface(interfaceId).call()

    def symbol(self, ):
        """
        Call symbol()
        :return: [{'internalType': 'string', 'name': '', 'type': 'string'}]
        """
        return self.contract.functions.symbol().call()

    def totalSupply(self, ):
        """
        Call totalSupply()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.totalSupply().call()

    def transfer(self, to, value):
        """
        Call transfer(to, value)
        :param to: address (solidity name: 'to')
        :param value: uint256 (solidity name: 'value')
        :return: [{'internalType': 'bool', 'name': '', 'type': 'bool'}]
        """
        return self.contract.functions.transfer(to, value).call()

    def transferFrom(self, from_, to, value):
        """
        Call transferFrom(from_, to, value)
        :param from_: address (solidity name: 'from')
        :param to: address (solidity name: 'to')
        :param value: uint256 (solidity name: 'value')
        :return: [{'internalType': 'bool', 'name': '', 'type': 'bool'}]
        """
        return self.contract.functions.transferFrom(from_, to, value).call()

    def unpause(self, ):
        """
        Call unpause()
        :return: []
        """
        return self.contract.functions.unpause().call()