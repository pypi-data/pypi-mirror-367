# SubnetAMM contract class generated from [ABI](contracts/SubnetAMM.abi)
# Do not edit this file directly, it is generated from the ABI.

from web3 import Web3

class SubnetAMM:
    def __init__(self, address, provider, abi):
        self.web3 = Web3(provider)
        self.contract = self.web3.eth.contract(address=address, abi=abi)

    def HALVING_TIME(self, ):
        """
        Call HALVING_TIME()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.HALVING_TIME().call()

    def alphaToken(self, ):
        """
        Call alphaToken()
        :return: [{'internalType': 'contract IERC20', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.alphaToken().call()

    def calculateSlippage(self, amountIn, isHETUToAlpha):
        """
        Call calculateSlippage(amountIn, isHETUToAlpha)
        :param amountIn: uint256 (solidity name: 'amountIn')
        :param isHETUToAlpha: bool (solidity name: 'isHETUToAlpha')
        :return: [{'internalType': 'uint256', 'name': 'slippageRate', 'type': 'uint256'}]
        """
        return self.contract.functions.calculateSlippage(amountIn, isHETUToAlpha).call()

    def checkLargeTradeWarning(self, amountIn, isHETUToAlpha):
        """
        Call checkLargeTradeWarning(amountIn, isHETUToAlpha)
        :param amountIn: uint256 (solidity name: 'amountIn')
        :param isHETUToAlpha: bool (solidity name: 'isHETUToAlpha')
        :return: [{'internalType': 'bool', 'name': 'isLargeTrade', 'type': 'bool'}, {'internalType': 'uint256', 'name': 'percentageOfPool', 'type': 'uint256'}, {'internalType': 'string', 'name': 'warning', 'type': 'string'}]
        """
        return self.contract.functions.checkLargeTradeWarning(amountIn, isHETUToAlpha).call()

    def createdAt(self, ):
        """
        Call createdAt()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.createdAt().call()

    def creator(self, ):
        """
        Call creator()
        :return: [{'internalType': 'address', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.creator().call()

    def currentAlphaPrice(self, ):
        """
        Call currentAlphaPrice()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.currentAlphaPrice().call()

    def getAlphaPrice(self, ):
        """
        Call getAlphaPrice()
        :return: [{'internalType': 'uint256', 'name': 'price', 'type': 'uint256'}]
        """
        return self.contract.functions.getAlphaPrice().call()

    def getCreatorInfo(self, ):
        """
        Call getCreatorInfo()
        :return: [{'internalType': 'address', 'name': '_creator', 'type': 'address'}, {'internalType': 'uint256', 'name': '_createdAt', 'type': 'uint256'}, {'internalType': 'uint256', 'name': '_netuid', 'type': 'uint256'}]
        """
        return self.contract.functions.getCreatorInfo().call()

    def getK(self, ):
        """
        Call getK()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.getK().call()

    def getMovingAlphaPrice(self, ):
        """
        Call getMovingAlphaPrice()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.getMovingAlphaPrice().call()

    def getPoolHealth(self, ):
        """
        Call getPoolHealth()
        :return: [{'internalType': 'bool', 'name': 'isHealthy', 'type': 'bool'}, {'internalType': 'string', 'name': 'status', 'type': 'string'}, {'internalType': 'uint256', 'name': 'liquidityRatio', 'type': 'uint256'}]
        """
        return self.contract.functions.getPoolHealth().call()

    def getPoolInfo(self, ):
        """
        Call getPoolInfo()
        :return: [{'internalType': 'enum SubnetAMM.MechanismType', 'name': '_mechanism', 'type': 'uint8'}, {'internalType': 'uint256', 'name': '_subnetTAO', 'type': 'uint256'}, {'internalType': 'uint256', 'name': '_subnetAlphaIn', 'type': 'uint256'}, {'internalType': 'uint256', 'name': '_subnetAlphaOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': '_currentPrice', 'type': 'uint256'}, {'internalType': 'uint256', 'name': '_movingPrice', 'type': 'uint256'}, {'internalType': 'uint256', 'name': '_totalVolume', 'type': 'uint256'}, {'internalType': 'uint256', 'name': '_minimumLiquidity', 'type': 'uint256'}]
        """
        return self.contract.functions.getPoolInfo().call()

    def getStatistics(self, ):
        """
        Call getStatistics()
        :return: [{'internalType': 'uint256', 'name': '_totalVolume', 'type': 'uint256'}, {'internalType': 'uint256', 'name': '_currentPrice', 'type': 'uint256'}, {'internalType': 'uint256', 'name': '_movingPrice', 'type': 'uint256'}, {'internalType': 'uint256', 'name': '_priceUpdateBlock', 'type': 'uint256'}, {'internalType': 'uint256', 'name': '_totalLiquidity', 'type': 'uint256'}]
        """
        return self.contract.functions.getStatistics().call()

    def getSwapPreview(self, amountIn, isHETUToAlpha):
        """
        Call getSwapPreview(amountIn, isHETUToAlpha)
        :param amountIn: uint256 (solidity name: 'amountIn')
        :param isHETUToAlpha: bool (solidity name: 'isHETUToAlpha')
        :return: [{'internalType': 'uint256', 'name': 'amountOut', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'priceImpact', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'newPrice', 'type': 'uint256'}, {'internalType': 'bool', 'name': 'isLiquiditySufficient', 'type': 'bool'}]
        """
        return self.contract.functions.getSwapPreview(amountIn, isHETUToAlpha).call()

    def getSystemInfo(self, ):
        """
        Call getSystemInfo()
        :return: [{'internalType': 'address', 'name': '_systemAddress', 'type': 'address'}, {'internalType': 'address', 'name': '_subnetContract', 'type': 'address'}]
        """
        return self.contract.functions.getSystemInfo().call()

    def getTheoreticalPrice(self, ):
        """
        Call getTheoreticalPrice()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.getTheoreticalPrice().call()

    def getTokenBalances(self, ):
        """
        Call getTokenBalances()
        :return: [{'internalType': 'uint256', 'name': 'hetuBalance', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'alphaBalance', 'type': 'uint256'}]
        """
        return self.contract.functions.getTokenBalances().call()

    def getUserStats(self, user):
        """
        Call getUserStats(user)
        :param user: address (solidity name: 'user')
        :return: [{'internalType': 'uint256', 'name': '_userVolume', 'type': 'uint256'}, {'internalType': 'uint256', 'name': '_userVolumePercentage', 'type': 'uint256'}]
        """
        return self.contract.functions.getUserStats(user).call()

    def hetuToken(self, ):
        """
        Call hetuToken()
        :return: [{'internalType': 'contract IERC20', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.hetuToken().call()

    def injectLiquidity(self, hetuAmount, alphaAmount):
        """
        Call injectLiquidity(hetuAmount, alphaAmount)
        :param hetuAmount: uint256 (solidity name: 'hetuAmount')
        :param alphaAmount: uint256 (solidity name: 'alphaAmount')
        :return: []
        """
        return self.contract.functions.injectLiquidity(hetuAmount, alphaAmount).call()

    def isCreator(self, addr):
        """
        Call isCreator(addr)
        :param addr: address (solidity name: 'addr')
        :return: [{'internalType': 'bool', 'name': '', 'type': 'bool'}]
        """
        return self.contract.functions.isCreator(addr).call()

    def isSystemAddress(self, addr):
        """
        Call isSystemAddress(addr)
        :param addr: address (solidity name: 'addr')
        :return: [{'internalType': 'bool', 'name': '', 'type': 'bool'}]
        """
        return self.contract.functions.isSystemAddress(addr).call()

    def mechanism(self, ):
        """
        Call mechanism()
        :return: [{'internalType': 'enum SubnetAMM.MechanismType', 'name': '', 'type': 'uint8'}]
        """
        return self.contract.functions.mechanism().call()

    def minimumPoolLiquidity(self, ):
        """
        Call minimumPoolLiquidity()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.minimumPoolLiquidity().call()

    def movingAlphaPrice(self, ):
        """
        Call movingAlphaPrice()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.movingAlphaPrice().call()

    def netuid(self, ):
        """
        Call netuid()
        :return: [{'internalType': 'uint16', 'name': '', 'type': 'uint16'}]
        """
        return self.contract.functions.netuid().call()

    def priceUpdateBlock(self, ):
        """
        Call priceUpdateBlock()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.priceUpdateBlock().call()

    def simSwapAlphaForHETU(self, alphaAmount):
        """
        Call simSwapAlphaForHETU(alphaAmount)
        :param alphaAmount: uint256 (solidity name: 'alphaAmount')
        :return: [{'internalType': 'uint256', 'name': 'hetuAmount', 'type': 'uint256'}]
        """
        return self.contract.functions.simSwapAlphaForHETU(alphaAmount).call()

    def simSwapHETUForAlpha(self, hetuAmount):
        """
        Call simSwapHETUForAlpha(hetuAmount)
        :param hetuAmount: uint256 (solidity name: 'hetuAmount')
        :return: [{'internalType': 'uint256', 'name': 'alphaAmount', 'type': 'uint256'}]
        """
        return self.contract.functions.simSwapHETUForAlpha(hetuAmount).call()

    def subnetAlphaIn(self, ):
        """
        Call subnetAlphaIn()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.subnetAlphaIn().call()

    def subnetAlphaOut(self, ):
        """
        Call subnetAlphaOut()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.subnetAlphaOut().call()

    def subnetContract(self, ):
        """
        Call subnetContract()
        :return: [{'internalType': 'address', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.subnetContract().call()

    def subnetTAO(self, ):
        """
        Call subnetTAO()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.subnetTAO().call()

    def swapAlphaForHETU(self, alphaAmountIn, hetuAmountOutMin, to):
        """
        Call swapAlphaForHETU(alphaAmountIn, hetuAmountOutMin, to)
        :param alphaAmountIn: uint256 (solidity name: 'alphaAmountIn')
        :param hetuAmountOutMin: uint256 (solidity name: 'hetuAmountOutMin')
        :param to: address (solidity name: 'to')
        :return: [{'internalType': 'uint256', 'name': 'hetuAmountOut', 'type': 'uint256'}]
        """
        return self.contract.functions.swapAlphaForHETU(alphaAmountIn, hetuAmountOutMin, to).call()

    def swapHETUForAlpha(self, hetuAmountIn, alphaAmountOutMin, to):
        """
        Call swapHETUForAlpha(hetuAmountIn, alphaAmountOutMin, to)
        :param hetuAmountIn: uint256 (solidity name: 'hetuAmountIn')
        :param alphaAmountOutMin: uint256 (solidity name: 'alphaAmountOutMin')
        :param to: address (solidity name: 'to')
        :return: [{'internalType': 'uint256', 'name': 'alphaAmountOut', 'type': 'uint256'}]
        """
        return self.contract.functions.swapHETUForAlpha(hetuAmountIn, alphaAmountOutMin, to).call()

    def systemAddress(self, ):
        """
        Call systemAddress()
        :return: [{'internalType': 'address', 'name': '', 'type': 'address'}]
        """
        return self.contract.functions.systemAddress().call()

    def totalVolume(self, ):
        """
        Call totalVolume()
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.totalVolume().call()

    def updateMovingPrice(self, ):
        """
        Call updateMovingPrice()
        :return: []
        """
        return self.contract.functions.updateMovingPrice().call()

    def userVolume(self, arg0):
        """
        Call userVolume(arg0)
        :param arg0: address (solidity name: 'arg0')
        :return: [{'internalType': 'uint256', 'name': '', 'type': 'uint256'}]
        """
        return self.contract.functions.userVolume(arg0).call()

    def verifyReserves(self, ):
        """
        Call verifyReserves()
        :return: [{'internalType': 'bool', 'name': 'isConsistent', 'type': 'bool'}, {'internalType': 'string', 'name': 'message', 'type': 'string'}]
        """
        return self.contract.functions.verifyReserves().call()

    def withdrawLiquidity(self, hetuAmount, alphaAmount, to):
        """
        Call withdrawLiquidity(hetuAmount, alphaAmount, to)
        :param hetuAmount: uint256 (solidity name: 'hetuAmount')
        :param alphaAmount: uint256 (solidity name: 'alphaAmount')
        :param to: address (solidity name: 'to')
        :return: []
        """
        return self.contract.functions.withdrawLiquidity(hetuAmount, alphaAmount, to).call()