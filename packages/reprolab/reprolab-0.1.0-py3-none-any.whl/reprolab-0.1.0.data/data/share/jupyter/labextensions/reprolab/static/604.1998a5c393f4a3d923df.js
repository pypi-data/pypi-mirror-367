"use strict";(self.webpackChunkreprolab=self.webpackChunkreprolab||[]).push([[181,604],{56:(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},72:e=>{var n=[];function t(e){for(var t=-1,o=0;o<n.length;o++)if(n[o].identifier===e){t=o;break}return t}function o(e,o){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],l=o.base?c[0]+o.base:c[0],d=a[l]||0,p="".concat(l," ").concat(d);a[l]=d+1;var h=t(p),u={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==h)n[h].references++,n[h].updater(u);else{var b=r(u,o);o.byIndex=s,n.splice(s,0,{identifier:p,updater:b,references:1})}i.push(p)}return i}function r(e,n){var t=n.domAPI(n);return t.update(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,r){var a=o(e=e||[],r=r||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=t(a[i]);n[s].references--}for(var c=o(e,r),l=0;l<a.length;l++){var d=t(a[l]);0===n[d].references&&(n[d].updater(),n.splice(d,1))}a=c}}},113:e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},181:(e,n,t)=>{var o=t(72),r=t.n(o),a=t(825),i=t.n(a),s=t(659),c=t.n(s),l=t(56),d=t.n(l),p=t(540),h=t.n(p),u=t(113),b=t.n(u),m=t(646),g={};g.styleTagTransform=b(),g.setAttributes=d(),g.insert=c().bind(null,"head"),g.domAPI=i(),g.insertStyleElement=h(),r()(m.A,g),m.A&&m.A.locals&&m.A.locals},314:e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map(function(n){var t="",o=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),o&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),o&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t}).join("")},n.i=function(e,t,o,r,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(o)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);o&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),t&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=t):d[2]=t),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),n.push(d))}},n}},540:e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},601:e=>{e.exports=function(e){return e[1]}},604:(e,n,t)=>{t.r(n),t.d(n,{default:()=>L});var o=t(246),r=t(346),a=t(256),i=t(598);function s(e,n){const t=document.createElement("div");return t.className="reprolab-section",t.innerHTML=`\n    <h3>${e}</h3>\n    ${n}\n  `,t}function c(e,n){const t=document.createElement("button");return t.id=e,t.className="reprolab-button",t.textContent=n,t}function l(){const e=document.cookie.match("\\b_xsrf=([^;]*)\\b");return e?decodeURIComponent(e[1]):null}t(181);const d="reprolab_data/reproducibility_checklist.json",p=["Notebook contains clear narrative text explaining analysis steps.","All software dependencies are specified with pinned versions.","Project is under version control (e.g., Git) in a public repository.","Notebook can be run end-to-end without manual steps.","All input data are available or easily accessible.","Project includes clear usage and interpretation instructions."];class h{constructor(){this.checklist=p,this.checked={},this.checklist.forEach(e=>{this.checked[e]=!1})}render(){return s("Reproducibility Checklist",`\n      <ul style="list-style: none; padding-left: 0;">\n        ${this.checklist.map(e=>`\n          <li>\n            <label>\n              <input type="checkbox" data-item="${encodeURIComponent(e)}" ${this.checked[e]?"checked":""} />\n              ${e}\n            </label>\n          </li>\n        `).join("")}\n      </ul>\n    `).outerHTML}handleCheckboxChange(e){const n=e.target,t=decodeURIComponent(n.getAttribute("data-item")||"");this.checked[t]=n.checked,this.saveChecklistState()}async loadChecklistState(){try{const e=await fetch(`/api/contents/${d}`);if(e.ok){const n=await e.json();if(n&&n.content){const e=JSON.parse(n.content);"object"==typeof e&&null!==e&&(this.checked={},this.checklist.forEach(n=>{this.checked[n]=!!e[n]}))}}else 404===e.status&&(this.checked={},this.checklist.forEach(e=>{this.checked[e]=!1}),await this.saveChecklistState())}catch(e){this.checked={},this.checklist.forEach(e=>{this.checked[e]=!1}),await this.saveChecklistState()}}async saveChecklistState(){try{const e=l();await fetch(`/api/contents/${d}`,{method:"PUT",headers:{"Content-Type":"application/json",...e?{"X-XSRFToken":e}:{}},body:JSON.stringify({type:"file",format:"text",content:JSON.stringify(this.checked)})})}catch(e){}}getChecklist(){return this.checklist}getChecked(){return this.checked}}class u{constructor(e,n){this.app=e,this.notebooks=n}render(){const e=document.createElement("div");return e.innerHTML="<p>Press the button below to add a demo cell to the top of the active notebook. The cell will display the ReproLab documentation.</p>",e.appendChild(c("reprolab-demo-btn","Add Demo Cell")),s("Demo",e.innerHTML).outerHTML}async handleDemoButton(){if(this.notebooks&&this.notebooks.currentWidget){const e=this.notebooks.currentWidget.content;if(e.model&&e.model.cells.length>0||this.app.commands.execute("notebook:insert-cell-below"),e.activeCellIndex=0,this.app.commands.execute("notebook:insert-cell-above"),e.model&&e.model.cells.length>0){const n=e.model.cells.get(0);if(n)try{n.sharedModel.setSource('# ReproLab Demo\n\nWelcome to ReproLab! This extension helps you make your research more reproducible.\n\n## Features\n\n- **Create Experiments**: Automatically save immutable snapshots of your code under `git` tags to preserve the **exact code and outputs**\n- **Manage Dependencies**: Automatically gather and pin **exact package versions**, so that others can set up your environment with one command\n- **Cache Data**: Call external API/load manually dataset only once, caching function will handle the rest\n- **Archive Data**: Caching function can also preserve the compressed data in *AWS S3*, so you always know what data was used and reduce the API calls\n- **Publishing guide**: The reproducibility checklist & automated generation of reproducability package make publishing to platforms such as Zenodo very easy\n\n## Getting Started\n\n1. Use the sidebar to view ReproLab features\n2. Create virtual environment and pin your dependencies, go to reprolab section `Create reproducible environment` \n3. Create an experiment to save your current state, go to reprolab section `Create experiment`\n4. Archive your data for long-term storage, go to reprolab section `Demo` and play around with it.\n5. Publish your work when ready, remember to use reproducability checklist from the section `Reproducibility Checklist`\n\n## Example Usage of persistio decorator\n\nTo cache and archive the datasets you use, both from local files and APIs we developed a simple decorator that put over your function that gets the datasets caches the file both locally and in the cloud so that the dataset you use is archived and the number of calls to external APIs is minimal and you don\'t need to keep the file around after you run it once.\n\nHere is an example using one of NASA open APIs. If you want to test it out yourself, you can copy the code, but you need to provide bucket name and access and secret key in the left-hand panel using the `AWS S3 Configuration` section.\n\n```python\nimport requests\nimport pandas as pd\nfrom io import StringIO\n\n# The two lines below is all that you need to add\nfrom reprolab.experiment import persistio\n@persistio()\ndef get_exoplanets_data_from_nasa():\n    url = "https://exoplanetarchive.ipac.caltech.edu/TAP/sync"\n\n    query = """\n    SELECT TOP 10\n        pl_name AS planet_name,\n        hostname AS host_star,\n        pl_orbper AS orbital_period_days,\n        pl_rade AS planet_radius_earth,\n        disc_year AS discovery_year\n    FROM\n        ps\n    WHERE\n        default_flag = 1\n    """\n\n    params = {\n        "query": query,\n        "format": "csv"\n    }\n\n    response = requests.get(url, params=params)\n\n    if response.status_code == 200:\n        df = pd.read_csv(StringIO(response.text))\n        \n        print(df)\n        \n    else:\n        print(f"Error: {response.status_code} - {response.text}")\n    return df\n\nexoplanets_data = get_exoplanets_data_from_nasa()\n```\n\nIf you run this cell twice you will notice from the logs that the second time file was read from the compressed file in the cache. If you were to lose access to local cache (e.g. by pulling the repository using different device) `persistio` would fetch the data from the cloud archive.\n\n\nFor more information, visit our [documentation](https://github.com/your-repo/reprolab).'),this.app.commands.execute("notebook:change-cell-to-markdown"),this.app.commands.execute("notebook:render-all-markdown")}catch(e){console.error("Error setting demo content:",e)}}}}}const b=new class{constructor(){const e=window.__jupyter_config_data?.baseUrl||"";console.log("[ReproLab API] Jupyter base URL:",e);const n=window.location.origin+"/";this.baseUrl=n,console.log("[ReproLab API] Server base URL:",this.baseUrl)}async makeRequest(e,n="GET",t){const o=`${this.baseUrl}reprolab/api/${e}`,r={method:n,headers:{"Content-Type":"application/json"}};if("POST"===n){const e=l();console.log("[ReproLab API] XSRF Token:",e),e&&(r.headers={...r.headers,"X-XSRFToken":e})}t&&"POST"===n&&(r.body=JSON.stringify(t));try{console.log("[ReproLab API] Making request to:",o),console.log("[ReproLab API] Headers:",r.headers);const e=await fetch(o,r),n=await e.json();if(!e.ok)throw console.error("[ReproLab API] Request failed:",e.status,n),new Error(n.message||`HTTP ${e.status}`);return n}catch(n){throw console.error(`API request failed for ${e}:`,n),n}}async checkStatus(){return this.makeRequest("status")}async createExperiment(e){return this.makeRequest("experiment","POST",e)}async performEnvironmentAction(e){return this.makeRequest("environment","POST",e)}async createArchive(e){return this.makeRequest("archive","POST",e)}async createZenodoPackage(e){return this.makeRequest("zenodo","POST",e)}},m="reprolab_data/aws_env.json";class g{constructor(){this.accessKey="",this.secretKey="",this.bucketName="",this.initialized=!1,this.initialize()}async initialize(){console.log("[ReproLab Archive] Initializing..."),await this.loadAWSEnv(),this.initialized=!0,console.log("[ReproLab Archive] Initialized with values:",{accessKey:this.accessKey?"***":"",secretKey:this.secretKey?"***":"",bucketName:this.bucketName})}render(){return this.initialized||console.log("[ReproLab Archive] Not yet initialized, rendering with empty values"),s("AWS S3 Configuration",`\n      <p>Configure AWS S3 credentials for data archiving</p>\n      <div class="reprolab-archive-inputs">\n        <input id="reprolab-archive-input1" type="password" class="reprolab-input" placeholder="Access Key" value="${this.accessKey}">\n        <input id="reprolab-archive-input2" type="password" class="reprolab-input" placeholder="Secret Key" value="${this.secretKey}">\n        <input id="reprolab-archive-input3" type="text" class="reprolab-input" placeholder="Bucket Name" value="${this.bucketName}">\n        <button id="reprolab-archive-save" class="reprolab-button">Save</button>\n      </div>\n    `).outerHTML}async handleSaveButton(e){const n=e.querySelector("#reprolab-archive-input1")?.value||"",t=e.querySelector("#reprolab-archive-input2")?.value||"",o=e.querySelector("#reprolab-archive-input3")?.value||"";this.accessKey=n,this.secretKey=t,this.bucketName=o,await this.saveAWSEnv(),console.log("[ReproLab Archive Save]",{accessKey:n?"***":"",secretKey:t?"***":"",bucketName:o});try{const e=await b.createArchive({name:`archive_${(new Date).toISOString().slice(0,19).replace(/:/g,"-")}`,include_data:!0,include_notebooks:!0});"success"===e.status?console.log("[ReproLab] Archive created successfully:",e.message):console.error("[ReproLab] Failed to create archive:",e.message)}catch(e){console.error("[ReproLab] Error creating archive:",e)}}async loadAWSEnv(){console.log("[ReproLab Archive] Loading AWS environment...");try{const e=await fetch(`/api/contents/${m}`);if(console.log("[ReproLab Archive] Fetch response status:",e.status),e.ok){const n=await e.json();if(console.log("[ReproLab Archive] Received data:",n?"success":"empty"),n&&n.content){const e=JSON.parse(n.content);console.log("[ReproLab Archive] Parsed content:",e?"success":"failed"),"object"==typeof e&&null!==e&&(this.accessKey=e.AWS_ACCESS_KEY_ID||"",this.secretKey=e.AWS_SECRET_ACCESS_KEY||"",this.bucketName=e.AWS_BUCKET||"",console.log("[ReproLab Archive] Loaded values:",{accessKey:this.accessKey?"***":"",secretKey:this.secretKey?"***":"",bucketName:this.bucketName}))}}else 404===e.status&&(console.log("[ReproLab Archive] File not found, creating with empty values"),this.accessKey="",this.secretKey="",this.bucketName="",await this.saveAWSEnv())}catch(e){console.error("[ReproLab Archive] Could not load AWS environment variables:",e),this.accessKey="",this.secretKey="",this.bucketName="",await this.saveAWSEnv()}}async saveAWSEnv(){console.log("[ReproLab Archive] Saving AWS environment...");try{const e=l(),n=await fetch(`/api/contents/${m}`,{method:"PUT",headers:{"Content-Type":"application/json",...e?{"X-XSRFToken":e}:{}},body:JSON.stringify({type:"file",format:"text",content:JSON.stringify({AWS_ACCESS_KEY_ID:this.accessKey,AWS_SECRET_ACCESS_KEY:this.secretKey,AWS_BUCKET:this.bucketName})})});console.log("[ReproLab Archive] Save response status:",n.status)}catch(e){console.error("[ReproLab Archive] Could not save AWS environment variables:",e)}}}class v{constructor(e,n){this.app=e,this.notebooks=n}render(){return s("Publishing software and data to Zenodo",'\n      <p>Create a Zenodo-ready reproducibility package.</p>\n      <button id="reprolab-zenodo-more" class="reprolab-button">\n        Create Reproducibility Package\n      </button>\n    ').outerHTML}validateNotebookContext(){return!(!this.notebooks||!this.notebooks.currentWidget)||(console.error("[ReproLab] No active notebook found"),!1)}async handleZenodoButton(e){e.style.display="block"}async handleTestButton(){if(this.validateNotebookContext())try{console.log("[ReproLab] Creating Zenodo package via API...");const e=await b.createZenodoPackage({title:"Reproducible Research Package",description:"Complete reproducibility package created via ReproLab",authors:["Researcher"]});"success"===e.status?(console.log("[ReproLab] Zenodo package created successfully:",e.message),await this.addReproducabilityCells(),await this.executeFirstCell(),console.log("[ReproLab] Reproducability package cells added successfully")):console.error("[ReproLab] Failed to create Zenodo package:",e.message)}catch(e){console.error("[ReproLab] Error adding reproducability cells:",e)}}async addReproducabilityCells(){const e=this.notebooks.currentWidget.content;console.log("[ReproLab] Adding reproducability package cells...");const n=e.model.cells.length;e.activeCellIndex=n,this.app.commands.execute("notebook:insert-cell-below"),await this.delay(100);const t=e.model.cells.get(n);t&&(t.sharedModel.setSource("from reprolab.experiment import list_and_sort_git_tags\nlist_and_sort_git_tags()\n# Pick your git tag, to download the reproducability package"),console.log("[ReproLab] Added git tags listing cell")),e.activeCellIndex=n+1,this.app.commands.execute("notebook:insert-cell-below"),await this.delay(100);const o=e.model.cells.get(n+1);o&&(o.sharedModel.setSource("from reprolab.experiment import download_reproducability_package\ndownload_reproducability_package('<git_tag>')"),console.log("[ReproLab] Added download package cell"))}async executeFirstCell(){console.log("[ReproLab] Executing git tags listing cell...");const e=this.notebooks.currentWidget.content,n=e.model.cells.length;e.activeCellIndex=n-2,await this.app.commands.execute("notebook:run-cell"),await this.delay(2e3)}delay(e){return new Promise(n=>setTimeout(n,e))}}class y{constructor(e,n){this.app=e,this.notebooks=n}render(){return s("Create experiment",'\n      <p>Create an experiment to save your current project state with a git tag.</p>\n      <button id="reprolab-create-experiment-btn" class="reprolab-button">\n        Create Experiment\n      </button>\n    ').outerHTML}validateNotebookContext(){return!(!this.notebooks||!this.notebooks.currentWidget)||(console.error("[ReproLab] No active notebook found"),!1)}async createExperiment(){if(this.validateNotebookContext())try{console.log("[ReproLab] Creating experiment via API...");const e=await b.createExperiment({action:"start"});"success"===e.status?(console.log("[ReproLab] Experiment created successfully:",e.message),await this.addExperimentCells(),await this.executeExperiment(),console.log("[ReproLab] Experiment completed successfully")):console.error("[ReproLab] Failed to create experiment:",e.message)}catch(e){console.error("[ReproLab] Error creating experiment:",e)}}async addExperimentCells(){const e=this.notebooks.currentWidget.content;console.log("[ReproLab] Adding experiment cells...");const n=e.model.cells.length;e.activeCellIndex=n,this.app.commands.execute("notebook:insert-cell-below"),await this.delay(100);const t=e.model.cells.get(n);t&&(t.sharedModel.setSource("from reprolab.experiment import start_experiment\nstart_experiment()"),console.log("[ReproLab] Added start experiment cell")),e.activeCellIndex=n+1,this.app.commands.execute("notebook:insert-cell-below"),await this.delay(100);const o=e.model.cells.get(n+1);o&&(o.sharedModel.setSource("from reprolab.experiment import end_experiment\nend_experiment()"),console.log("[ReproLab] Added end experiment cell"))}async executeExperiment(){console.log("[ReproLab] Running experiment cells..."),await this.app.commands.execute("notebook:run-all-cells"),await this.delay(2e3)}delay(e){return new Promise(n=>setTimeout(n,e))}}class f{constructor(e,n){this.app=e,this.notebooks=n}render(){return s("Create reproducible environment",'\n      <p>Create a reproducible environment with pinned dependencies.</p>\n      <button id="reprolab-create-environment-btn" class="reprolab-button">\n        Create Environment\n      </button>\n      <button id="reprolab-freeze-deps-btn" class="reprolab-button">\n        Freeze Dependencies\n      </button>\n    ').outerHTML}validateNotebookContext(){return!(!this.notebooks||!this.notebooks.currentWidget)||(console.error("[ReproLab] No active notebook found"),!1)}async createEnvironment(){if(this.validateNotebookContext())try{console.log("[ReproLab] Creating environment via API...");const e=await b.performEnvironmentAction({action:"create_environment",venv_name:"my_venv"});"success"===e.status?(console.log("[ReproLab] Environment created successfully:",e.message),await this.addEnvironmentCells(),await this.executeEnvironment(),console.log("[ReproLab] Environment setup completed successfully")):console.error("[ReproLab] Failed to create environment:",e.message)}catch(e){console.error("[ReproLab] Error creating environment:",e)}}async addFreezeDepsCell(){if(this.validateNotebookContext())try{console.log("[ReproLab] Freezing dependencies via API...");const e=await b.performEnvironmentAction({action:"freeze_dependencies",venv_name:"my_venv"});"success"===e.status?(console.log("[ReproLab] Dependencies frozen successfully:",e.message),await this.addFreezeDepsCellToNotebook(),await this.executeFreezeDeps(),console.log("[ReproLab] Dependencies freeze completed successfully")):console.error("[ReproLab] Failed to freeze dependencies:",e.message)}catch(e){console.error("[ReproLab] Error freezing dependencies:",e)}}async addEnvironmentCells(){const e=this.notebooks.currentWidget.content;console.log("[ReproLab] Adding environment cells...");const n=e.model.cells.length;e.activeCellIndex=n,this.app.commands.execute("notebook:insert-cell-below"),await this.delay(100);const t=e.model.cells.get(n);t&&(t.sharedModel.setSource("from reprolab.environment import create_new_venv\ncreate_new_venv('my_venv')"),console.log("[ReproLab] Added environment setup cell"))}async addFreezeDepsCellToNotebook(){const e=this.notebooks.currentWidget.content;console.log("[ReproLab] Adding freeze dependencies cell...");const n=e.model.cells.length;e.activeCellIndex=n,this.app.commands.execute("notebook:insert-cell-below"),await this.delay(100);const t=e.model.cells.get(n);t&&(t.sharedModel.setSource("from reprolab.environment import freeze_venv_dependencies\nfreeze_venv_dependencies('my_venv')"),console.log("[ReproLab] Added freeze dependencies cell"))}async executeEnvironment(){console.log("[ReproLab] Running environment setup..."),await this.app.commands.execute("notebook:run-all-cells"),await this.delay(2e3)}async executeFreezeDeps(){console.log("[ReproLab] Running freeze dependencies..."),await this.app.commands.execute("notebook:run-all-cells"),await this.delay(2e3)}delay(e){return new Promise(n=>setTimeout(n,e))}}const x="reprolab-sidebar",k="reprolab:open",w="reprolab-modal-test",S=new r.LabIcon({name:"reprolab:icon",svgstr:'\n<svg xmlns="http://www.w3.org/2000/svg" width="16" viewBox="0 0 24 24">\n  <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5" fill="currentColor"/>\n</svg>\n'});class C extends a.Widget{constructor(e,n){super(),this.app=e,this.notebooks=n,this.initializeWidget(),this.initializeSections(),this.render(),this.loadChecklistState()}initializeWidget(){this.id=x,this.addClass("jp-SideBar"),this.addClass("reprolab-sidebar"),this.title.icon=S,this.title.label="ReproLab",this.title.caption="ReproLab Panel"}initializeSections(){this.checklistSection=new h,this.demoSection=new u(this.app,this.notebooks),this.archiveSection=new g,this.zenodoSection=new v(this.app,this.notebooks),this.experimentSection=new y(this.app,this.notebooks),this.environmentSection=new f(this.app,this.notebooks)}async loadChecklistState(){await this.checklistSection.loadChecklistState(),this.render()}render(){const e=this.createMainContainer(),n=this.createModal();this.node.innerHTML="",this.node.appendChild(e),document.body.appendChild(n),this.setupEventListeners(n)}createMainContainer(){const e=document.createElement("div"),n=this.createHeader();return e.appendChild(n),[this.demoSection.render(),this.checklistSection.render(),this.environmentSection.render(),this.experimentSection.render(),this.archiveSection.render(),this.zenodoSection.render()].forEach(n=>{const t=document.createRange().createContextualFragment(n);e.appendChild(t)}),e}createHeader(){const e=document.createElement("div");return e.className="reprolab-header",e.innerHTML="\n      <h1>ReproLab</h1>\n      <h3>One step closer to accessible reproducible research</h3>\n    ",e}createModal(){const e=document.createElement("div");e.className="reprolab-modal";const n=document.createElement("div");n.className="reprolab-modal-content";const t=document.createElement("span");t.className="reprolab-modal-close",t.textContent="×";const o=document.createElement("div");o.innerHTML='\n      <section style="font-size: 16px; line-height: 1.6;">\n        <p>\n          Clicking the <strong>Create Reproducibility Package</strong> button below will insert and execute a Python code cell that generates a complete reproducibility package—bundling both your data and code.\n        </p>\n        <p>\n          You can share this package with colleagues or publish it on platforms like \n          <a href="https://zenodo.org/" target="_blank" rel="noopener noreferrer" style="color: #0066cc; text-decoration: underline;">Zenodo</a>, which will assign a persistent identifier (DOI) to your work.\n        </p>\n        <p>\n          For detailed instructions on structuring and publishing reproducible research, please consult the official Zenodo guide:  \n          <a href="https://doi.org/10.5281/zenodo.11146986" target="_blank" rel="noopener noreferrer" style="color: #0066cc; text-decoration: underline;">\n            Make Your Research Reproducible: Practical Guide for Researchers (DOI: 10.5281/zenodo.11146986)\n          </a>\n        </p>\n        <p>\n          Additional help can be found in the Zenodo documentation under their "Guide" and "GitHub and Software" sections:  \n          <a href="https://help.zenodo.org/docs/" target="_blank" rel="noopener noreferrer" style="color: #0066cc; text-decoration: underline;">Zenodo Guides & Docs</a>\n        </p>\n      </section>\n    ';const r=c(w,"Create Reproducibility Package");return n.appendChild(t),n.appendChild(o),n.appendChild(r),e.appendChild(n),e}setupEventListeners(e){this.setupButtonListeners(),this.setupCheckboxListeners(),this.setupModalListeners(e)}setupButtonListeners(){const e=this.node.querySelector("#reprolab-demo-btn");e&&e.addEventListener("click",()=>this.demoSection.handleDemoButton());const n=this.node.querySelector("#reprolab-archive-save");n&&n.addEventListener("click",()=>this.archiveSection.handleSaveButton(this.node));const t=this.node.querySelector("#reprolab-zenodo-more");t&&t.addEventListener("click",()=>{const e=document.querySelector(".reprolab-modal");e&&this.zenodoSection.handleZenodoButton(e)});const o=this.node.querySelector("#reprolab-create-experiment-btn");o&&o.addEventListener("click",()=>this.handleCreateExperiment());const r=this.node.querySelector("#reprolab-create-environment-btn");r&&r.addEventListener("click",()=>this.handleCreateEnvironment());const a=this.node.querySelector("#reprolab-freeze-deps-btn");a&&a.addEventListener("click",()=>this.handleFreezeDependencies())}setupCheckboxListeners(){this.node.querySelectorAll('input[type="checkbox"]').forEach(e=>{e.addEventListener("change",e=>this.checklistSection.handleCheckboxChange(e))})}setupModalListeners(e){const n=e.querySelector(".reprolab-modal-close");n&&n.addEventListener("click",()=>{e.style.display="none"});const t=e.querySelector(`#${w}`);t&&t.addEventListener("click",()=>{console.log("Create Reproducibility Package button clicked"),this.zenodoSection.handleTestButton(),e.style.display="none"}),e.addEventListener("click",n=>{n.target===e&&(e.style.display="none")})}handleCreateExperiment(){console.log("[ReproLab] Creating experiment..."),this.experimentSection.createExperiment()}handleCreateEnvironment(){console.log("[ReproLab] Creating environment..."),this.environmentSection.createEnvironment()}handleFreezeDependencies(){console.log("[ReproLab] Freezing dependencies..."),this.environmentSection.addFreezeDepsCell()}}const L={id:"reprolab:plugin",description:"One step closer reproducible research",autoStart:!0,requires:[o.ICommandPalette,i.INotebookTracker],activate:function(e,n,t){console.log("JupyterLab extension reprolab is activated!"),e.commands.addCommand(k,{label:"Open ReproLab Panel",icon:S,execute:()=>{e.shell.activateById(x)}}),n.addItem({command:k,category:"ReproLab"});const o=new C(e,t);e.shell.add(o,"left",{rank:100})}}},646:(e,n,t)=>{t.d(n,{A:()=>s});var o=t(601),r=t.n(o),a=t(314),i=t.n(a)()(r());i.push([e.id,'/*\n    See the JupyterLab Developer Guide for useful CSS Patterns:\n\n    https://jupyterlab.readthedocs.io/en/stable/developer/css.html\n*/\n\n.reprolab-widget {\n    padding: 10px;\n    width: 40%;\n    min-width: 400px;\n    max-width: 600px;\n    height: 100%;\n    overflow-y: auto;\n    background: var(--jp-layout-color1);\n    color: var(--jp-ui-font-color1);\n  }\n  \n  .reprolab-widget h2 {\n    margin-top: 0;\n    padding-bottom: 10px;\n    border-bottom: 1px solid var(--jp-border-color2);\n  }\n  \n  .reprolab-sidebar {\n    display: flex;\n    flex-direction: column;\n    align-items: stretch;\n    justify-content: flex-start;\n    width: 100%;\n    height: 100%;\n    min-width: 440px;\n    max-width: 700px;\n    background: var(--jp-layout-color1);\n    color: var(--jp-ui-font-color1);\n    padding: 0;\n    box-sizing: border-box;\n    overflow-y: auto;\n  }\n  \n  .reprolab-sidebar > div {\n    margin: 0;\n    padding: 24px 18px 18px 18px;\n    width: 100%;\n    box-sizing: border-box;\n  }\n  \n  .reprolab-header {\n    text-align: left;\n    padding: 20px;\n    background-color: #f8f9fa;\n    border-bottom: 1px solid #e9ecef;\n  }\n  \n  .reprolab-header h1 {\n    margin: 0;\n    font-size: 24px;\n    color: #333;\n    text-align: left;\n  }\n  \n  .reprolab-header h3 {\n    margin: 10px 0 0;\n    font-size: 16px;\n    color: #666;\n    text-align: left;\n  }\n  \n  .reprolab-help h2 {\n    margin-top: 0;\n    font-size: 1.2em;\n    border-bottom: 1px solid var(--jp-border-color2);\n    padding-bottom: 6px;\n  }\n  \n  .reprolab-help ol {\n    margin: 0 0 10px 18px;\n    padding: 0;\n  }\n  \n  .reprolab-help p {\n    margin: 0;\n    color: var(--jp-ui-font-color2);\n  }\n  \n  .reprolab-launcher {\n    display: flex;\n    align-items: center;\n    padding: 8px;\n    margin: 4px;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background-color 0.2s;\n    background-color: var(--jp-layout-color1);\n    border: 1px solid var(--jp-border-color2);\n  }\n  \n  .reprolab-launcher:hover {\n    background-color: var(--jp-layout-color2);\n  }\n  \n  .reprolab-launcher-content {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n  }\n  \n  .reprolab-launcher-icon {\n    width: 24px;\n    height: 24px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n  \n  .reprolab-launcher-icon svg {\n    width: 20px;\n    height: 20px;\n  }\n  \n  .reprolab-launcher-label {\n    font-size: 14px;\n    font-weight: 500;\n    color: var(--jp-ui-font-color1);\n  }\n  \n  /* Section styles */\n  .reprolab-section {\n    background-color: #f5f5f5;\n    padding: 20px;\n    margin-bottom: 20px;\n    border-radius: 4px;\n    display: flex;\n    flex-direction: column;\n    align-items: flex-start;\n  }\n  \n  .reprolab-section > * {\n    width: 100%;\n    max-width: 500px;\n    text-align: left;\n  }\n  \n  .reprolab-section h3 {\n    margin-top: 0;\n    margin-bottom: 15px;\n    color: #333;\n    text-align: left;\n  }\n  \n  .reprolab-section p {\n    margin: 10px 0;\n    color: #666;\n    text-align: left;\n  }\n  \n  /* Button styles */\n  .reprolab-button {\n    padding: 8px 16px;\n    font-size: 1em;\n    cursor: pointer;\n    background: var(--jp-brand-color1);\n    color: white;\n    border: none;\n    border-radius: 4px;\n    transition: background-color 0.2s;\n    margin: 10px auto;\n    display: block;\n  }\n  \n  .reprolab-button:hover {\n    background: var(--jp-brand-color2);\n  }\n  \n  /* Input styles */\n  .reprolab-input {\n    padding: 8px 12px;\n    font-size: 1em;\n    width: 100%;\n    margin: 8px 0;\n    border: 1px solid var(--jp-border-color2);\n    border-radius: 4px;\n    box-sizing: border-box;\n  }\n  \n  /* Modal styles */\n  .reprolab-modal {\n    position: fixed;\n    z-index: 1000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0,0,0,0.4);\n    display: none;\n    justify-content: center;\n    align-items: center;\n  }\n  \n  .reprolab-modal-content {\n    background-color: var(--jp-layout-color1);\n    margin: 15% auto;\n    padding: 20px;\n    border: 1px solid var(--jp-border-color2);\n    width: 80%;\n    max-width: 500px;\n    border-radius: 5px;\n    position: relative;\n  }\n  \n  .reprolab-modal-close {\n    color: var(--jp-ui-font-color2);\n    float: right;\n    font-size: 28px;\n    font-weight: bold;\n    cursor: pointer;\n  }\n  \n  .reprolab-modal-close:hover {\n    color: var(--jp-ui-font-color1);\n  }\n  \n  /* Checklist styles */\n  .reprolab-checklist ul {\n    list-style: none;\n    padding: 0;\n    text-align: left;\n    max-width: 90%;\n    margin: 0 auto;\n  }\n  \n  .reprolab-checklist li {\n    margin: 12px 0;\n    display: flex;\n    align-items: center;\n  }\n  \n  .reprolab-checklist label {\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    width: 100%;\n  }\n  \n  /* Archive section styles */\n  .reprolab-archive-inputs {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    margin: 15px 0;\n    width: 100%;\n    align-items: center;\n  }\n  \n  /* Demo section styles */\n  .reprolab-demo {\n    margin: 20px 0;\n  }\n  \n  .reprolab-demo p {\n    margin: 10px 0;\n  }\n  \n  /* Experiment section styles */\n  .reprolab-experiment-input {\n    margin: 15px 0;\n    width: 100%;\n    text-align: center;\n  }\n  \n  .reprolab-experiment-label {\n    display: block;\n    margin-bottom: 8px;\n    text-align: center;\n  }\n  \n  /* Experiment options styles */\n  .reprolab-experiment-options {\n    margin: 15px 0;\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n  }\n  \n  .reprolab-checkbox-label {\n    display: flex;\n    align-items: center;\n    gap: 8px;\n    cursor: pointer;\n    font-size: 14px;\n    color: var(--jp-ui-font-color1);\n  }\n  \n  .reprolab-checkbox-label input[type="checkbox"] {\n    margin: 0;\n    cursor: pointer;\n  }\n  ',""]);const s=i},659:e=>{var n={};e.exports=function(e,t){var o=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(t)}},825:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var o="";t.supports&&(o+="@supports (".concat(t.supports,") {")),t.media&&(o+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(o+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),o+=t.css,r&&(o+="}"),t.media&&(o+="}"),t.supports&&(o+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),n.styleTagTransform(o,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}}}]);