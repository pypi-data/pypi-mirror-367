# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import ft_capability_pb2 as ft__capability__pb2
import ft_error_pb2 as ft__error__pb2
import ft_types_pb2 as ft__types__pb2

GRPC_GENERATED_VERSION = '1.65.2'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ft_capability_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class capabilityStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InvokeCapability = channel.unary_unary(
                '/foxtrot.capability/InvokeCapability',
                request_serializer=ft__capability__pb2.capability_request.SerializeToString,
                response_deserializer=ft__capability__pb2.capability_response.FromString,
                _registered_method=True)
        self.DescribeServer = channel.unary_unary(
                '/foxtrot.capability/DescribeServer',
                request_serializer=ft__types__pb2.empty.SerializeToString,
                response_deserializer=ft__capability__pb2.servdescribe.FromString,
                _registered_method=True)
        self.FetchData = channel.unary_stream(
                '/foxtrot.capability/FetchData',
                request_serializer=ft__capability__pb2.chunk_request.SerializeToString,
                response_deserializer=ft__capability__pb2.datachunk.FromString,
                _registered_method=True)
        self.CloseDevice = channel.unary_unary(
                '/foxtrot.capability/CloseDevice',
                request_serializer=ft__capability__pb2.devicechooser.SerializeToString,
                response_deserializer=ft__error__pb2.errstatus.FromString,
                _registered_method=True)
        self.RescanDevices = channel.unary_unary(
                '/foxtrot.capability/RescanDevices',
                request_serializer=ft__types__pb2.empty.SerializeToString,
                response_deserializer=ft__error__pb2.errstatus.FromString,
                _registered_method=True)
        self.SetupDevice = channel.unary_unary(
                '/foxtrot.capability/SetupDevice',
                request_serializer=ft__capability__pb2.device_setup_request.SerializeToString,
                response_deserializer=ft__capability__pb2.device_setup_response.FromString,
                _registered_method=True)
        self.ListHandles = channel.unary_unary(
                '/foxtrot.capability/ListHandles',
                request_serializer=ft__types__pb2.empty.SerializeToString,
                response_deserializer=ft__capability__pb2.handlelist.FromString,
                _registered_method=True)
        self.DisposeHandle = channel.unary_unary(
                '/foxtrot.capability/DisposeHandle',
                request_serializer=ft__capability__pb2.handlechooser.SerializeToString,
                response_deserializer=ft__error__pb2.errstatus.FromString,
                _registered_method=True)
        self.StreamCapability = channel.stream_stream(
                '/foxtrot.capability/StreamCapability',
                request_serializer=ft__capability__pb2.stream_control.SerializeToString,
                response_deserializer=ft__capability__pb2.capability_response.FromString,
                _registered_method=True)
        self.BulkDataDownload = channel.unary_stream(
                '/foxtrot.capability/BulkDataDownload',
                request_serializer=ft__capability__pb2.bulkdata_request.SerializeToString,
                response_deserializer=ft__capability__pb2.bulkdata_chunk.FromString,
                _registered_method=True)
        self.InvokeServerAsync = channel.stream_stream(
                '/foxtrot.capability/InvokeServerAsync',
                request_serializer=ft__capability__pb2.async_control.SerializeToString,
                response_deserializer=ft__capability__pb2.async_response.FromString,
                _registered_method=True)


class capabilityServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InvokeCapability(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DescribeServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FetchData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RescanDevices(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetupDevice(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListHandles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DisposeHandle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamCapability(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BulkDataDownload(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InvokeServerAsync(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_capabilityServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InvokeCapability': grpc.unary_unary_rpc_method_handler(
                    servicer.InvokeCapability,
                    request_deserializer=ft__capability__pb2.capability_request.FromString,
                    response_serializer=ft__capability__pb2.capability_response.SerializeToString,
            ),
            'DescribeServer': grpc.unary_unary_rpc_method_handler(
                    servicer.DescribeServer,
                    request_deserializer=ft__types__pb2.empty.FromString,
                    response_serializer=ft__capability__pb2.servdescribe.SerializeToString,
            ),
            'FetchData': grpc.unary_stream_rpc_method_handler(
                    servicer.FetchData,
                    request_deserializer=ft__capability__pb2.chunk_request.FromString,
                    response_serializer=ft__capability__pb2.datachunk.SerializeToString,
            ),
            'CloseDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseDevice,
                    request_deserializer=ft__capability__pb2.devicechooser.FromString,
                    response_serializer=ft__error__pb2.errstatus.SerializeToString,
            ),
            'RescanDevices': grpc.unary_unary_rpc_method_handler(
                    servicer.RescanDevices,
                    request_deserializer=ft__types__pb2.empty.FromString,
                    response_serializer=ft__error__pb2.errstatus.SerializeToString,
            ),
            'SetupDevice': grpc.unary_unary_rpc_method_handler(
                    servicer.SetupDevice,
                    request_deserializer=ft__capability__pb2.device_setup_request.FromString,
                    response_serializer=ft__capability__pb2.device_setup_response.SerializeToString,
            ),
            'ListHandles': grpc.unary_unary_rpc_method_handler(
                    servicer.ListHandles,
                    request_deserializer=ft__types__pb2.empty.FromString,
                    response_serializer=ft__capability__pb2.handlelist.SerializeToString,
            ),
            'DisposeHandle': grpc.unary_unary_rpc_method_handler(
                    servicer.DisposeHandle,
                    request_deserializer=ft__capability__pb2.handlechooser.FromString,
                    response_serializer=ft__error__pb2.errstatus.SerializeToString,
            ),
            'StreamCapability': grpc.stream_stream_rpc_method_handler(
                    servicer.StreamCapability,
                    request_deserializer=ft__capability__pb2.stream_control.FromString,
                    response_serializer=ft__capability__pb2.capability_response.SerializeToString,
            ),
            'BulkDataDownload': grpc.unary_stream_rpc_method_handler(
                    servicer.BulkDataDownload,
                    request_deserializer=ft__capability__pb2.bulkdata_request.FromString,
                    response_serializer=ft__capability__pb2.bulkdata_chunk.SerializeToString,
            ),
            'InvokeServerAsync': grpc.stream_stream_rpc_method_handler(
                    servicer.InvokeServerAsync,
                    request_deserializer=ft__capability__pb2.async_control.FromString,
                    response_serializer=ft__capability__pb2.async_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'foxtrot.capability', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('foxtrot.capability', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class capability(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InvokeCapability(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foxtrot.capability/InvokeCapability',
            ft__capability__pb2.capability_request.SerializeToString,
            ft__capability__pb2.capability_response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DescribeServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foxtrot.capability/DescribeServer',
            ft__types__pb2.empty.SerializeToString,
            ft__capability__pb2.servdescribe.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FetchData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/foxtrot.capability/FetchData',
            ft__capability__pb2.chunk_request.SerializeToString,
            ft__capability__pb2.datachunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloseDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foxtrot.capability/CloseDevice',
            ft__capability__pb2.devicechooser.SerializeToString,
            ft__error__pb2.errstatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RescanDevices(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foxtrot.capability/RescanDevices',
            ft__types__pb2.empty.SerializeToString,
            ft__error__pb2.errstatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetupDevice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foxtrot.capability/SetupDevice',
            ft__capability__pb2.device_setup_request.SerializeToString,
            ft__capability__pb2.device_setup_response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListHandles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foxtrot.capability/ListHandles',
            ft__types__pb2.empty.SerializeToString,
            ft__capability__pb2.handlelist.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DisposeHandle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/foxtrot.capability/DisposeHandle',
            ft__capability__pb2.handlechooser.SerializeToString,
            ft__error__pb2.errstatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamCapability(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/foxtrot.capability/StreamCapability',
            ft__capability__pb2.stream_control.SerializeToString,
            ft__capability__pb2.capability_response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def BulkDataDownload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/foxtrot.capability/BulkDataDownload',
            ft__capability__pb2.bulkdata_request.SerializeToString,
            ft__capability__pb2.bulkdata_chunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def InvokeServerAsync(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/foxtrot.capability/InvokeServerAsync',
            ft__capability__pb2.async_control.SerializeToString,
            ft__capability__pb2.async_response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
