// Message Path Grammar for Foxglove/ROS message paths
// Based on the Nearley grammar from LichtblickSuite

?start: message_path

// Main parsing rule - topic name followed by optional path and modifier
message_path: topic_name path_component* modifier?

// Topic name can be quoted or unquoted identifier with optional leading slash
topic_name: topic_path          -> topic_complex
          | CNAME               -> topic_plain
          | ESCAPED_STRING      -> topic_quoted
          | SINGLE_QUOTED_STRING -> topic_quoted

topic_path: "/" CNAME ("/" CNAME)*

// Path component can be field access, array access, or filter
path_component: field_access
              | array_access
              | filter

// Field access using dot notation
field_access: "." CNAME

// Array access with index or slice
array_access: "[" array_index "]"

array_index: SIGNED_INT
           | slice_notation
           | variable

// Slice notation: [start:end], [:end], [start:], [:]
slice_notation: slice_part ":" slice_part  -> slice_start_end
              | slice_part ":"              -> slice_start_only
              | ":" slice_part              -> slice_end_only
              | ":"                         -> slice_full

slice_part: SIGNED_INT | variable

// Filter with comparison expression
filter: "{" comparison "}"

// Comparison operations
comparison: field_name comparison_op value

field_name: CNAME ("." CNAME)*

comparison_op: "==" -> eq
             | "!=" -> ne
             | ">=" -> ge
             | "<=" -> le
             | ">"  -> gt
             | "<"  -> lt

// Values in comparisons
value: SIGNED_INT
     | SIGNED_FLOAT
     | ESCAPED_STRING
     | SINGLE_QUOTED_STRING
     | boolean
     | variable

// Primitives
boolean: "true"  -> true
       | "false" -> false

variable: "$" CNAME?

// Optional modifier (not fully specified in original grammar)
modifier: WORD

// Terminals
SINGLE_QUOTED_STRING: /'[^']*'/
%import common.CNAME
%import common.SIGNED_INT
%import common.SIGNED_FLOAT
%import common.ESCAPED_STRING
%import common.WORD
%import common.WS
%ignore WS
