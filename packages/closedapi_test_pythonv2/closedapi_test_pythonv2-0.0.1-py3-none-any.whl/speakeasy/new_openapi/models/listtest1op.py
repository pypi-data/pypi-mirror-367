"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .enum import EnumT
from enum import Enum
import pydantic
from speakeasy.new_openapi.types import BaseModel
from speakeasy.new_openapi.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    QueryParamMetadata,
)
from typing import Callable, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict

LIST_TEST1_OP_SERVER_MAIN = "Main"
r"""The only server."""

LIST_TEST1_OP_SERVERS = {
    LIST_TEST1_OP_SERVER_MAIN: "http://localhost:35123",
}


class ListTest1GlobalsTypedDict(TypedDict):
    query_param1: NotRequired[str]
    r"""A long winded, multi-line description
    for the query parameter number one.

    """


class ListTest1Globals(BaseModel):
    query_param1: Annotated[
        Optional[str],
        pydantic.Field(alias="queryParam1"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""A long winded, multi-line description
    for the query parameter number one.

    """


class QueryParam2(int, Enum):
    r"""A enum query parameter."""

    ZERO = 0
    ONE = 1
    TWO = 2


class ListTest1RequestTypedDict(TypedDict):
    query_param2: QueryParam2
    r"""A enum query parameter."""
    page: int
    header_param1: str
    query_param1: NotRequired[str]


class ListTest1Request(BaseModel):
    query_param2: Annotated[
        QueryParam2,
        pydantic.Field(alias="queryParam2"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]
    r"""A enum query parameter."""

    page: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]

    header_param1: Annotated[
        str,
        pydantic.Field(alias="headerParam1"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ]

    query_param1: Annotated[
        Optional[str],
        pydantic.Field(alias="queryParam1"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None


class ResultArrayTypedDict(TypedDict):
    test1: str


class ResultArray(BaseModel):
    test1: str


class ListTest1ResponseBodyTypedDict(TypedDict):
    r"""OK"""

    result_array: List[ResultArrayTypedDict]
    total_count: int
    type: NotRequired[EnumT]


class ListTest1ResponseBody(BaseModel):
    r"""OK"""

    result_array: Annotated[List[ResultArray], pydantic.Field(alias="resultArray")]

    total_count: Annotated[int, pydantic.Field(alias="totalCount")]

    type: Optional[EnumT] = EnumT.FIRST


class ListTest1ResponseTypedDict(TypedDict):
    result: ListTest1ResponseBodyTypedDict


class ListTest1Response(BaseModel):
    next: Callable[[], Optional[ListTest1Response]]

    result: ListTest1ResponseBody
