"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .circularunion import CircularUnion, CircularUnionTypedDict
from .exhaustiveobject import ExhaustiveObject, ExhaustiveObjectTypedDict
from .oneofwithfactoredoutproperties import (
    OneOfWithFactoredOutProperties,
    OneOfWithFactoredOutPropertiesTypedDict,
)
from .simpleobject import SimpleObject, SimpleObjectTypedDict
import pydantic
from speakeasy.new_openapi.types import BaseModel
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


OneOfWithUnionDescriptionTypedDict = TypeAliasType(
    "OneOfWithUnionDescriptionTypedDict",
    Union[SimpleObjectTypedDict, ExhaustiveObjectTypedDict],
)
r"""A union of two types."""


OneOfWithUnionDescription = TypeAliasType(
    "OneOfWithUnionDescription", Union[SimpleObject, ExhaustiveObject]
)
r"""A union of two types."""


class SimpleAllOfTypedDict(TypedDict):
    str_: NotRequired[str]
    r"""A string property."""
    bool_: NotRequired[bool]
    r"""A boolean property."""


class SimpleAllOf(BaseModel):
    str_: Annotated[Optional[str], pydantic.Field(alias="str")] = None
    r"""A string property."""

    bool_: Annotated[Optional[bool], pydantic.Field(alias="bool")] = None
    r"""A boolean property."""


class AllOfWithFactoredOutPropertiesTypedDict(TypedDict):
    r"""An object with allOf and factored out properties."""

    an_overriding_property: NotRequired[str]
    r"""An overriding property."""
    another_property: NotRequired[str]
    r"""Another property."""
    an_extra_property: NotRequired[str]
    r"""An extra property."""


class AllOfWithFactoredOutProperties(BaseModel):
    r"""An object with allOf and factored out properties."""

    an_overriding_property: Annotated[
        Optional[str], pydantic.Field(alias="anOverridingProperty")
    ] = None
    r"""An overriding property."""

    another_property: Annotated[
        Optional[str], pydantic.Field(alias="anotherProperty")
    ] = None
    r"""Another property."""

    an_extra_property: Annotated[
        Optional[str], pydantic.Field(alias="anExtraProperty")
    ] = None
    r"""An extra property."""


class GetPolymorphismResponseTypedDict(TypedDict):
    one_of_with_union_description: NotRequired[OneOfWithUnionDescriptionTypedDict]
    r"""A union of two types."""
    one_of_with_factored_out_properties: NotRequired[
        OneOfWithFactoredOutPropertiesTypedDict
    ]
    r"""A union of two types with factored out properties."""
    simple_all_of: NotRequired[SimpleAllOfTypedDict]
    all_of_with_factored_out_properties: NotRequired[
        AllOfWithFactoredOutPropertiesTypedDict
    ]
    r"""An object with allOf and factored out properties."""
    circular_union: NotRequired[CircularUnionTypedDict]


class GetPolymorphismResponse(BaseModel):
    one_of_with_union_description: Annotated[
        Optional[OneOfWithUnionDescription],
        pydantic.Field(alias="oneOfWithUnionDescription"),
    ] = None
    r"""A union of two types."""

    one_of_with_factored_out_properties: Annotated[
        Optional[OneOfWithFactoredOutProperties],
        pydantic.Field(alias="oneOfWithFactoredOutProperties"),
    ] = None
    r"""A union of two types with factored out properties."""

    simple_all_of: Annotated[
        Optional[SimpleAllOf], pydantic.Field(alias="simpleAllOf")
    ] = None

    all_of_with_factored_out_properties: Annotated[
        Optional[AllOfWithFactoredOutProperties],
        pydantic.Field(alias="allOfWithFactoredOutProperties"),
    ] = None
    r"""An object with allOf and factored out properties."""

    circular_union: Annotated[
        Optional[CircularUnion], pydantic.Field(alias="circularUnion")
    ] = None
