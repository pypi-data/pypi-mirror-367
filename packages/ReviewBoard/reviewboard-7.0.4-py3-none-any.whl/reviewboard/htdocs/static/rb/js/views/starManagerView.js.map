{"version":3,"file":"starManagerView.js","names":["RB","StarManagerView","Backbone","View","extend","initialize","options","objects","model","get","starred","_datagridMode","datagridMode","$","on","_toggleStar","bind","each","idx","el","$el","objType","attr","objID","objStarred","parseInt","obj","ReviewRequest","id","ReviewGroup","undefined","console","assert","_watchUpdates","_toUpdate","$grid","mode","hasOwnProperty","_updateStarColumn","toggleClass","gettext","e","$target","target","preventDefault","stopPropagation","UserSession","instance","setStarred"],"sources":["../../../../../static/rb/js/views/starManagerView.es6.js"],"sourcesContent":["/**\n * A manager for star buttons, for both datagrids and individual buttons.\n *\n * This view manages the state of review request and review group star status\n * in datagrids, as well as the star status for review requests on their\n * individual pages.\n */\nRB.StarManagerView = Backbone.View.extend({\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object, optional):\n     *         View initialization options.\n     *\n     * Option Args:\n     *     datagridMode (boolean):\n     *         Whether or not the manager is managing a datagrid.\n     */\n    initialize(options={}) {\n        const objects = this.model.get('objects');\n        const starred = this.model.get('starred');\n\n        this._datagridMode = options.datagridMode;\n\n        /*\n         * This doesn't use the view's events object to bind to _toggleStar\n         * because doing so interferes with event bubbling and handler order.\n         * We need the datagrid's click handler to run after this one, so we\n         * bind directly to the element rather than on the parent view.\n         */\n        this.$('div.star')\n            .on('click', this._toggleStar.bind(this))\n            .each((idx, el) => {\n            const $el = $(el);\n            const objType = $el.attr('data-object-type');\n            const objID = $el.attr('data-object-id');\n            const objStarred = (parseInt($el.attr('data-starred'), 10) === 1);\n            let obj;\n\n            if (objType === 'reviewrequests') {\n                obj = new RB.ReviewRequest({ id: objID });\n            } else if (objType === 'groups') {\n                obj = new RB.ReviewGroup({ id: objID });\n            } else if (objType !== undefined) {\n                console.assert('Unknown star object type: %s', objType);\n            } else {\n                /* Skip any stars that don't have an object type. */\n                return;\n            }\n\n            objects[objID] = obj;\n            starred[objID] = objStarred;\n        });\n\n        /*\n         * When the datagrid is in mobile mode, we have to keep track of any\n         * objects whose star status changes so that we can update the datagrid\n         * if it switches back to desktop mode.\n         */\n        this._watchUpdates = false;\n        this._toUpdate = {};\n\n        if (this._datagridMode) {\n            this.$el.on('datagridDisplayModeChanged', ($grid, options) => {\n                if (options.mode === 'desktop') {\n                    for (let objID in this._toUpdate) {\n                        if (this._toUpdate.hasOwnProperty(objID)) {\n                            this._updateStarColumn(objID);\n                        }\n                    }\n\n                    this._watchUpdates = false;\n                    this._toUpdate = {};\n                } else if (options.mode === 'mobile') {\n                    this._watchUpdates = true;\n                }\n            });\n\n            if (this.$el.attr('data-datagrid-display-mode') === 'mobile') {\n                this._watchUpdates = true;\n            }\n        }\n    },\n\n    /**\n     * Update a star column.\n     *\n     * This function is called when the datagrid changes from mobile to desktop\n     * model. Since datagrids copy the original DOM over the new one when the\n     * mode is changed to desktop, we must copy over relevant star attributes\n     * and classes when this happens.\n     *\n     * Args:\n     *     objID (string):\n     *         The object's unique ID, as a string.\n     */\n    _updateStarColumn(objID) {\n        const $el = this.$(`.star[data-object-id=\"${objID}\"]`);\n        const starred = this.model.get('starred')[objID];\n\n        $el\n            .toggleClass('rb-icon-star-on', starred)\n            .toggleClass('rb-icon-star-off', !starred)\n            .attr('title',\n                  starred ? gettext('Starred')\n                          : gettext('Click to star'));\n    },\n\n    /**\n     * Toggle an object being starred or unstarred.\n     *\n     * This function is called when a star icon is clicked.\n     *\n     * Args:\n     *     e (Event):\n     *         The click event.\n     */\n    _toggleStar(e) {\n        const $target = $(e.target);\n        const objID = $target.attr('data-object-id');\n        const obj = this.model.get('objects')[objID];\n        const starred = this.model.get('starred');\n        const objStarred = !starred[objID];\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (RB.UserSession.instance.get('readOnly')) {\n            return;\n        }\n\n        obj.setStarred(objStarred);\n        starred[objID] = objStarred;\n\n        if (this._watchUpdates) {\n            if (this._toUpdate.hasOwnProperty(objID)) {\n                delete this._toUpdate[objID];\n            } else {\n                this._toUpdate[objID] = true;\n            }\n        }\n\n        $target\n            .toggleClass('rb-icon-star-on', objStarred)\n            .toggleClass('rb-icon-star-off', !objStarred)\n            .attr('title',\n                  objStarred ? gettext('Starred')\n                             : gettext('Click to star'));\n    },\n});\n"],"mappings":"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","ignoreList":[]}