{"version":3,"file":"changeFormPageView.js","names":["RB","Admin","ChangeFormPageView","PageView","extend","initialize","options","prototype","call","formID","formView","inlineGroupViews","renderPage","console","assert","length","FormView","el","$","render","each","i","inlineGroup","InlineFormGroup","prefix","data","inlineGroupView","InlineFormGroupView","model","push","listenTo","setupFormWidgets","$el"],"sources":["../../../../../../static/rb/js/admin/views/changeFormPageView.es6.js"],"sourcesContent":["/**\n * A view for managing the administration UI's database model change pages.\n *\n * This sets up the page to manage the configuration form and any inline\n * groups used for adding, modifying, or deleting related objects.\n */\nRB.Admin.ChangeFormPageView = RB.Admin.PageView.extend({\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         The options passed to the page.\n     *\n     * Option Args:\n     *     formID (string):\n     *         The element ID for the form.\n     */\n    initialize(options) {\n        RB.Admin.PageView.prototype.initialize.call(this, options);\n\n        this.formID = options.formID;\n        this.formView = null;\n        this.inlineGroupViews = [];\n    },\n\n    /**\n     * Render the page.\n     *\n     * This will set up the form and inline group management.\n     */\n    renderPage() {\n        RB.Admin.PageView.prototype.renderPage.call(this);\n\n        console.assert(this.inlineGroupViews.length === 0);\n\n        this.formView = new RB.FormView({\n            el: $(`#${this.formID}`),\n        });\n        this.formView.render();\n\n        this.$('.rb-c-admin-form-inline-group').each((i, el) => {\n            const inlineGroup = new RB.Admin.InlineFormGroup({\n                prefix: $(el).data('prefix'),\n            });\n            const inlineGroupView = new RB.Admin.InlineFormGroupView({\n                el: el,\n                model: inlineGroup,\n            });\n            inlineGroupView.render();\n\n            this.inlineGroupViews.push(inlineGroupView);\n\n            this.listenTo(\n                inlineGroupView,\n                'inlineFormAdded',\n                () => this.formView.setupFormWidgets(inlineGroupView.$el));\n        });\n    },\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,KAAK,CAACC,kBAAkB,GAAGF,EAAE,CAACC,KAAK,CAACE,QAAQ,CAACC,MAAM,CAAC;EACnD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAACC,OAAO,EAAE;IAChBN,EAAE,CAACC,KAAK,CAACE,QAAQ,CAACI,SAAS,CAACF,UAAU,CAACG,IAAI,CAAC,IAAI,EAAEF,OAAO,CAAC;IAE1D,IAAI,CAACG,MAAM,GAAGH,OAAO,CAACG,MAAM;IAC5B,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,gBAAgB,GAAG,EAAE;EAC9B,CAAC;EAED;AACJ;AACA;AACA;AACA;EACIC,UAAUA,CAAA,EAAG;IACTZ,EAAE,CAACC,KAAK,CAACE,QAAQ,CAACI,SAAS,CAACK,UAAU,CAACJ,IAAI,CAAC,IAAI,CAAC;IAEjDK,OAAO,CAACC,MAAM,CAAC,IAAI,CAACH,gBAAgB,CAACI,MAAM,KAAK,CAAC,CAAC;IAElD,IAAI,CAACL,QAAQ,GAAG,IAAIV,EAAE,CAACgB,QAAQ,CAAC;MAC5BC,EAAE,EAAEC,CAAC,CAAC,IAAI,IAAI,CAACT,MAAM,EAAE;IAC3B,CAAC,CAAC;IACF,IAAI,CAACC,QAAQ,CAACS,MAAM,CAAC,CAAC;IAEtB,IAAI,CAACD,CAAC,CAAC,+BAA+B,CAAC,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEJ,EAAE,KAAK;MACpD,MAAMK,WAAW,GAAG,IAAItB,EAAE,CAACC,KAAK,CAACsB,eAAe,CAAC;QAC7CC,MAAM,EAAEN,CAAC,CAACD,EAAE,CAAC,CAACQ,IAAI,CAAC,QAAQ;MAC/B,CAAC,CAAC;MACF,MAAMC,eAAe,GAAG,IAAI1B,EAAE,CAACC,KAAK,CAAC0B,mBAAmB,CAAC;QACrDV,EAAE,EAAEA,EAAE;QACNW,KAAK,EAAEN;MACX,CAAC,CAAC;MACFI,eAAe,CAACP,MAAM,CAAC,CAAC;MAExB,IAAI,CAACR,gBAAgB,CAACkB,IAAI,CAACH,eAAe,CAAC;MAE3C,IAAI,CAACI,QAAQ,CACTJ,eAAe,EACf,iBAAiB,EACjB,MAAM,IAAI,CAAChB,QAAQ,CAACqB,gBAAgB,CAACL,eAAe,CAACM,GAAG,CAAC,CAAC;IAClE,CAAC,CAAC;EACN;AACJ,CAAC,CAAC","ignoreList":[]}