{"version":3,"file":"dashboardPageModel.js","names":["RB","Admin","DashboardPage","Page","extend","defaults","_","supportData","widgetsData","result","prototype","initialize","apply","arguments","widgets","Backbone","Collection","loadWidgets","onWidgetLoaded","classTypes","get","reset","i","length","widgetInfo","ModelType","modelClass","ViewType","viewClass","undefined","Djblets","getObjectByName","widgetModel","id","modelAttrs","modelOptions","add","domID","viewOptions","e","console","error"],"sources":["../../../../../../static/rb/js/admin/models/dashboardPageModel.es6.js"],"sourcesContent":["/**\n * State for the administration UI's main dashboard page.\n *\n * Model Attributes:\n *     supportData (string):\n *         An encoded payload containing information used to look up\n *         information on an active support contract for the server.\n *\n *     widgetsData (Array of object):\n *         Metadata on all the widgets rendered on the page. Each entry in\n *         the array is an object containing:\n *\n *         ``id``:\n *             The ID of the widget.\n *\n *         ``domID``:\n *             The DOM element ID of the widget's rendered HTML.\n *\n *         ``modelClass``:\n *             The namespaced name of the model class managing the widget's\n *             state.\n *\n *         ``modelAttrs``:\n *             The optional attributes passed to the widget model during\n *             initialization.\n *\n *         ``modelOptions``:\n *             The optional options passed to the widget model during\n *             initialization.\n *\n *         ``viewClass``:\n *             The namespaced name of the view class rendering the widget.\n *\n *         ``viewOptions``:\n *             The optional options passed to the widget view during\n *             initialization.\n */\nRB.Admin.DashboardPage = RB.Page.extend({\n    /**\n     * Return the default attribute values.\n     *\n     * Returns:\n     *     object:\n     *     The default attribute values.\n     */\n    defaults() {\n        return _.defaults({\n            supportData: null,\n            widgetsData: [],\n        }, _.result(RB.Page.prototype.defaults));\n    },\n\n    /**\n     * Initialize the page.\n     */\n    initialize() {\n        RB.Page.prototype.initialize.apply(this, arguments);\n\n        this.widgets = new Backbone.Collection();\n    },\n\n    /**\n     * Load the widgets from the serialized widget data.\n     *\n     * This will construct a model for each widget, and call the provided\n     * function to finish any UI-side setup.\n     *\n     * If any widgets fail to load, they'll be skipped.\n     *\n     * Args:\n     *     onWidgetLoaded (function):\n     *         The function to call for each widget. This takes the widget\n     *         model and serialized widget information as parameters.\n     */\n    loadWidgets(onWidgetLoaded) {\n        const classTypes = {};\n        const widgetsData = this.get('widgetsData');\n\n        this.widgets.reset();\n\n        for (let i = 0; i < widgetsData.length; i++) {\n            const widgetInfo = widgetsData[i];\n\n            try {\n                let ModelType = classTypes[widgetInfo.modelClass];\n                let ViewType = classTypes[widgetInfo.viewClass];\n\n                if (ModelType === undefined) {\n                    ModelType = Djblets.getObjectByName(widgetInfo.modelClass);\n                    classTypes[widgetInfo.modelClass] = ModelType;\n                }\n\n                if (ViewType === undefined) {\n                    ViewType = Djblets.getObjectByName(widgetInfo.viewClass);\n                    classTypes[widgetInfo.viewClass] = ViewType;\n                }\n\n                const widgetModel = new ModelType(\n                    _.defaults(\n                        {\n                            id: widgetInfo.id,\n                        },\n                        widgetInfo.modelAttrs),\n                    widgetInfo.modelOptions);\n\n                this.widgets.add(widgetModel);\n\n                onWidgetLoaded({\n                    domID: widgetInfo.domID,\n                    ViewType: ViewType,\n                    viewOptions: widgetInfo.viewOptions,\n                    widgetModel: widgetModel,\n                });\n            } catch (e) {\n                console.error(\n                    'Unable to render administration widget \"%s\": %s',\n                    widgetInfo.id, e);\n            }\n        }\n    },\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,KAAK,CAACC,aAAa,GAAGF,EAAE,CAACG,IAAI,CAACC,MAAM,CAAC;EACpC;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,QAAQA,CAAA,EAAG;IACP,OAAOC,CAAC,CAACD,QAAQ,CAAC;MACdE,WAAW,EAAE,IAAI;MACjBC,WAAW,EAAE;IACjB,CAAC,EAAEF,CAAC,CAACG,MAAM,CAACT,EAAE,CAACG,IAAI,CAACO,SAAS,CAACL,QAAQ,CAAC,CAAC;EAC5C,CAAC;EAED;AACJ;AACA;EACIM,UAAUA,CAAA,EAAG;IACTX,EAAE,CAACG,IAAI,CAACO,SAAS,CAACC,UAAU,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IAEnD,IAAI,CAACC,OAAO,GAAG,IAAIC,QAAQ,CAACC,UAAU,CAAC,CAAC;EAC5C,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,WAAWA,CAACC,cAAc,EAAE;IACxB,MAAMC,UAAU,GAAG,CAAC,CAAC;IACrB,MAAMX,WAAW,GAAG,IAAI,CAACY,GAAG,CAAC,aAAa,CAAC;IAE3C,IAAI,CAACN,OAAO,CAACO,KAAK,CAAC,CAAC;IAEpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,WAAW,CAACe,MAAM,EAAED,CAAC,EAAE,EAAE;MACzC,MAAME,UAAU,GAAGhB,WAAW,CAACc,CAAC,CAAC;MAEjC,IAAI;QACA,IAAIG,SAAS,GAAGN,UAAU,CAACK,UAAU,CAACE,UAAU,CAAC;QACjD,IAAIC,QAAQ,GAAGR,UAAU,CAACK,UAAU,CAACI,SAAS,CAAC;QAE/C,IAAIH,SAAS,KAAKI,SAAS,EAAE;UACzBJ,SAAS,GAAGK,OAAO,CAACC,eAAe,CAACP,UAAU,CAACE,UAAU,CAAC;UAC1DP,UAAU,CAACK,UAAU,CAACE,UAAU,CAAC,GAAGD,SAAS;QACjD;QAEA,IAAIE,QAAQ,KAAKE,SAAS,EAAE;UACxBF,QAAQ,GAAGG,OAAO,CAACC,eAAe,CAACP,UAAU,CAACI,SAAS,CAAC;UACxDT,UAAU,CAACK,UAAU,CAACI,SAAS,CAAC,GAAGD,QAAQ;QAC/C;QAEA,MAAMK,WAAW,GAAG,IAAIP,SAAS,CAC7BnB,CAAC,CAACD,QAAQ,CACN;UACI4B,EAAE,EAAET,UAAU,CAACS;QACnB,CAAC,EACDT,UAAU,CAACU,UAAU,CAAC,EAC1BV,UAAU,CAACW,YAAY,CAAC;QAE5B,IAAI,CAACrB,OAAO,CAACsB,GAAG,CAACJ,WAAW,CAAC;QAE7Bd,cAAc,CAAC;UACXmB,KAAK,EAAEb,UAAU,CAACa,KAAK;UACvBV,QAAQ,EAAEA,QAAQ;UAClBW,WAAW,EAAEd,UAAU,CAACc,WAAW;UACnCN,WAAW,EAAEA;QACjB,CAAC,CAAC;MACN,CAAC,CAAC,OAAOO,CAAC,EAAE;QACRC,OAAO,CAACC,KAAK,CACT,iDAAiD,EACjDjB,UAAU,CAACS,EAAE,EAAEM,CAAC,CAAC;MACzB;IACJ;EACJ;AACJ,CAAC,CAAC","ignoreList":[]}