{"version":3,"file":"formView.js","names":["RB","FormView","Backbone","View","extend","events","initialize","_$subforms","_subformsByGroup","_formWidgetsInitialized","render","$","length","_setupSubforms","setupFormWidgets","$el","undefined","window","DateTimeShortcuts","find","remove","init","SelectFilter","each","i","el","parts","name","split","id","setSubformVisibility","options","console","assert","_","isObject","group","subformID","visible","subformIDs","hideOthers","$subform","isHidden","prop","disabled","hidden","configuredControllers","subformEl","controllerID","data","enablerID","$controller","$enabler","error","controllerGroup","$form","hasOwnProperty","val","on","enabled","is","toggle","_onToggleFieldSetClicked","e","preventDefault","stopPropagation","$toggle","target","$fieldset","closest","hasClass","removeClass","text","gettext","addClass"],"sources":["../../../../../../static/rb/js/ui/views/formView.es6.js"],"sourcesContent":["/**\n * A view for managing state on a form.\n *\n * This provides some standard behavior for setting up form widgets and\n * handling collapsible fieldsets, along with managing subforms.\n */\nRB.FormView = Backbone.View.extend({\n    events: {\n        'click .rb-c-form-fieldset__toggle': '_onToggleFieldSetClicked',\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this._$subforms = null;\n        this._subformsByGroup = {};\n        this._formWidgetsInitialized = false;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will set up any subforms that might be available within the form.\n     *\n     * Returns:\n     *     RB.FormView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._$subforms = this.$('.rb-c-form-fieldset.-is-subform');\n\n        if (this._$subforms.length > 0) {\n            this._setupSubforms();\n        }\n\n        this.setupFormWidgets();\n\n        return this;\n    },\n\n    /**\n     * Set up state for widgets on the form.\n     *\n     * This will ensure that widgets are set up correctly on the form, or on\n     * a part of the form. This will take care to re-initialize widgets if\n     * they've already been initialized before (useful when dynamically adding\n     * new sections of a form).\n     *\n     * This supports only a few known types of widgets (Django date/time\n     * widgets and related object selectors).\n     *\n     * Args:\n     *     $el (jQuery, optional):\n     *         A starting point for finding the widgets. If not provided, all\n     *         widgets in the form will be set up.\n     */\n    setupFormWidgets($el) {\n        if ($el === undefined) {\n            $el = this.$el;\n        }\n\n        /*\n         * Update some state for Django widgets. We've quite possibly made use\n         * of widgets in the form that need to be initialized, and Django\n         * doesn't have much fine-grained support for doing this, so we need\n         * to take a heavy-handed approach.\n         *\n         * Django (up through 3.0 at least) performs similar logic.\n         */\n        if (window.DateTimeShortcuts &&\n            $el.find('.datetimeshortcuts').length > 0) {\n            if (this._formWidgetsInitialized) {\n                /*\n                 * Yep, we have to remove *all* of these... DateTimeShortcuts\n                 * has no granular widget support.\n                 */\n                $('.datetimeshortcuts').remove();\n            }\n\n            DateTimeShortcuts.init();\n        }\n\n        if (window.SelectFilter) {\n            $el.find('.selectfilter').each((i, el) => {\n                const parts = el.name.split('-');\n                SelectFilter.init(el.id, parts[parts.length - 1], false);\n            });\n\n            $el.find('.selectfilterstacked').each((i, el) => {\n                const parts = el.name.split('-');\n                SelectFilter.init(el.id, parts[parts.length - 1], true);\n            });\n        }\n\n        this._formWidgetsInitialized = true;\n    },\n\n    /**\n     * Set the visibility of one or more subforms.\n     *\n     * This will toggle visibility of a single subform, hide all subforms,\n     * or hide all subforms except one.\n     *\n     * Args:\n     *     options (object):\n     *         Options to control visibility.\n     *\n     * Option Args:\n     *     group (string):\n     *         The registered group for the subforms.\n     *\n     *     hideOthers (boolean):\n     *         Whether to hide any subforms other than the one specified by\n     *         ``subformID``.\n     *\n     *     subformID (string):\n     *         A single subform to set the visibility state for. If not\n     *         provided, this will toggle visibility of all subforms in the\n     *         group.\n     *\n     *     visible (boolean):\n     *         Whether to make the selected subform visible. This is only used\n     *         if ``hideOthers`` is not provided.\n     */\n    setSubformVisibility(options) {\n        console.assert(_.isObject(options),\n                       'An options object must be provided.');\n\n        const group = options.group;\n        const subformID = options.subformID;\n        const visible = options.visible;\n\n        console.assert(group, 'Missing option \"group\"');\n\n        const subformIDs = this._subformsByGroup[group];\n        console.assert(subformIDs, `Invalid subform group ${group}`);\n\n        if (options.hideOthers || !subformID) {\n            _.each(subformIDs, ($subform, id) => {\n                const isHidden = (subformID === undefined\n                                  ? !visible\n                                  : (id !== subformID));\n\n                $subform.prop({\n                    disabled: isHidden,\n                    hidden: isHidden,\n                });\n            });\n        } else {\n            console.assert(visible !== undefined, 'Missing option \"visible\"');\n\n            const $subform = subformIDs[subformID];\n            console.assert($subform, `Invalid subform ID ${subformID}`);\n\n            $subform.prop({\n                disabled: !visible,\n                hidden: !visible,\n            });\n        }\n    },\n\n    /**\n     * Set up state and event handlers for subforms.\n     *\n     * This will begin tracking all the subforms on the page, and connect\n     * subform visibility to any associated controllers.\n     */\n    _setupSubforms() {\n        const configuredControllers = {};\n\n        this._$subforms.each((i, subformEl) => {\n            const $subform = $(subformEl);\n            const controllerID = $subform.data('subform-controller');\n            const subformID = $subform.data('subform-id');\n            const enablerID = $subform.data('subform-enabler');\n            let group = $subform.data('subform-group');\n            let $controller;\n            let $enabler;\n\n            if (!subformID) {\n                console.error('Subform %o is missing data-subform-id=',\n                              subformEl);\n                return;\n            }\n\n            if (!group && !controllerID && !enablerID) {\n                console.error(\n                    'Subform %o is missing data-subform-group=, ' +\n                    'data-subform-controller=, or data-subform-enable=',\n                    subformEl);\n                return;\n            }\n\n            /*\n             * If we have a controller ID provided, look it up and ensure\n             * we're using the right group.\n             */\n            if (controllerID) {\n                $controller = this.$(`#${controllerID}`);\n\n                console.assert($controller.length === 1,\n                               `Missing controller #${controllerID}`);\n\n                const controllerGroup =\n                    $controller.data('subform-group');\n\n                /*\n                 * If the subform specifies an explicit group, and it\n                 * specified a controller, make sure they match up. While\n                 * we could work around an issue here, we'd rather make the\n                 * developer fix their code.\n                 */\n                if (group === undefined) {\n                    group = controllerGroup;\n                } else if (controllerGroup !== group) {\n                    console.error('Subform %o and controller %s have ' +\n                                  'different values for data-subform-group',\n                                  subformEl, controllerID);\n                    return;\n                }\n            } else if (enablerID) {\n                $enabler = this.$(`#${enablerID}`);\n                window.$form = this.$el;\n\n                console.assert($enabler.length === 1,\n                               `Missing enabler #${enablerID}`);\n            }\n\n            /* Register the subforms so that they can be looked up later. */\n            if (!this._subformsByGroup.hasOwnProperty(group)) {\n                this._subformsByGroup[group] = {};\n            }\n\n            this._subformsByGroup[group][subformID] = $subform;\n\n            /*\n             * If we have a controller associated, set the current subform's\n             * visibility based on that value, and listen for changes.\n             */\n            if ($controller) {\n                this.setSubformVisibility({\n                    group: group,\n                    subformID: subformID,\n                    visible: $controller.val() === subformID,\n                });\n\n                if (!configuredControllers[controllerID]) {\n                    configuredControllers[controllerID] = true;\n\n                    $controller.on('change', () => this.setSubformVisibility({\n                        group: group,\n                        subformID: $controller.val(),\n                        visible: true,\n                        hideOthers: true,\n                    }));\n                }\n            }\n\n            /*\n             * If there's an enabler, set the current subform's visibility\n             * based on the state of that element, and listen for changes.\n             */\n            if ($enabler) {\n                const enabled = $enabler.is(':checked');\n\n                $subform\n                    .toggle(enabled)\n                    .prop('disabled', !enabled);\n\n                $enabler.on('change', () => {\n                    const enabled = $enabler.is(':checked');\n\n                    $subform\n                        .toggle(enabled)\n                        .prop('disabled', !enabled);\n                });\n            }\n        });\n    },\n\n    /**\n     * Handle the showing or collapsing of a fieldset.\n     *\n     * This will set the appropriate state on the fieldset to show or hide\n     * the content.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The click event on the Show/Hide button.\n     */\n    _onToggleFieldSetClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const $toggle = $(e.target);\n        const $fieldset = $toggle.closest('.rb-c-form-fieldset');\n\n        if ($fieldset.hasClass('-is-collapsed')) {\n            $fieldset.removeClass('-is-collapsed');\n            $toggle.text(gettext('(Hide)'));\n        } else {\n            $fieldset.addClass('-is-collapsed');\n            $toggle.text(gettext('(Show)'));\n        }\n    },\n});\n"],"mappings":"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","ignoreList":[]}