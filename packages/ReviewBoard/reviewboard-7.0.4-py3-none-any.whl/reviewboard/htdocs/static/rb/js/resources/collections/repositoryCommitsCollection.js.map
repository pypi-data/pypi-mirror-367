{"version":3,"file":"repositoryCommitsCollection.js","names":["RB","RepositoryCommits","BaseCollection","extend","model","RepositoryCommit","initialize","models","options","Backbone","Collection","prototype","call","busy","complete","_nextStart","parse","response","commits","length","parent","url","params","start","undefined","branch","urlBase","$","param","canFetchNext","fetchNext","context","_","isFunction","success","error","console","warn","promiseToCallbacks","newOptions","fetch","remove"],"sources":["../../../../../../static/rb/js/resources/collections/repositoryCommitsCollection.es6.js"],"sourcesContent":["/**\n * A collection of commits in a repository.\n *\n * This is expected to be used in an ephemeral manner to get a list of commits\n * from a given start point (usually corresponding to some branch in the\n * repository).\n */\nRB.RepositoryCommits = RB.BaseCollection.extend({\n    model: RB.RepositoryCommit,\n\n    /**\n     * Initialize the collection.\n     *\n     * Args:\n     *     models (Array of object):\n     *         Initial models for the collection.\n     *\n     *     options (Object):\n     *         Options for the collection.\n     *\n     * Option Args:\n     *     start (string):\n     *         The start commit for fetching commit logs.\n     *\n     *     branch (string):\n     *         The branch name for fetching commit logs.\n     *\n     *     urlBase (string):\n     *         The base URL for the API request.\n     */\n    initialize(models, options) {\n        Backbone.Collection.prototype.initialize.call(this, models, options);\n        this.options = options;\n        this.busy = false;\n        this.complete = false;\n        this._nextStart = null;\n    },\n\n    /**\n     * Parse the response.\n     *\n     * Args:\n     *     response (object):\n     *         Response, parsed from the JSON returned by the server.\n     *\n     * Returns:\n     *     Array of object:\n     *     An array of commits.\n     */\n    parse(response) {\n        const commits = response.commits;\n\n        this._nextStart = commits[commits.length - 1].parent;\n        this.complete = !this._nextStart;\n\n        return response.commits;\n    },\n\n    /**\n     * Get the URL to fetch for the next page of results.\n     *\n     * Returns:\n     *     string:\n     *     The URL to fetch.\n     */\n    url() {\n        const params = {};\n\n        if (this.options.start !== undefined) {\n            params.start = this.options.start;\n        }\n\n        if (this.options.branch !== undefined) {\n            params.branch = this.options.branch;\n        }\n\n        return this.options.urlBase + '?' + $.param(params);\n    },\n\n    /**\n     * Return whether another page of commits can be fetched.\n     *\n     * A page can only be fetched if there's at least 1 commit already\n     * fetched, the last commit in the repository has not been fetched, and\n     * another fetch operation isn't in progress.\n     *\n     * Version Added:\n     *     4.0.3\n     *\n     * Returns:\n     *     boolean:\n     *     ``true`` if another page can be fetched. ``false`` if one cannot.\n     */\n    canFetchNext() {\n        return !this.busy && !this.complete && this.models.length > 0;\n    },\n\n    /**\n     * Fetch the next page of results.\n     *\n     * This can be called multiple times. If this is called when a fetch is\n     * already in progress, it's a no-op. Otherwise, if there are more commits\n     * to load, it will fetch them and add them to the bottom of the\n     * collection.\n     *\n     * It's up to the caller to check :js:func:`canFetchNext()` before calling\n     * this if they want callbacks to fire.\n     *\n     * Version Changed:\n     *     4.0.3:\n     *     Added the ``options`` argument with ``error`` and ``success``\n     *     callbacks.\n     *\n     * Version Changed:\n     *     5.0:\n     *     Added the promise return value.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for fetching the next page of results.\n     *\n     *     context (object, optional):\n     *         Context to use when calling callbacks.\n     *\n     * Option Args:\n     *     error (function):\n     *         A function to call if fetching a page fails. This must take\n     *         ``collection, xhr`` arguments.\n     *\n     *     success (function):\n     *         A function to call if fetching a page succeeds.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    async fetchNext(options={}, context=undefined) {\n        if (_.isFunction(options.success) ||\n            _.isFunction(options.error) ||\n            _.isFunction(options.complete)) {\n            console.warn('RB.RepositoryCommits.fetchNext was called using ' +\n                         'callbacks. Callers should be updated to use ' +\n                         'promises instead.');\n            return RB.promiseToCallbacks(\n                options, context, newOptions => this.fetchNext(newOptions));\n        }\n\n        if (this.canFetchNext()) {\n            this.options.start = this._nextStart;\n\n            await this.fetch({\n                remove: false,\n            });\n\n            this.busy = false;\n        }\n    }\n});\n"],"mappings":"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","ignoreList":[]}