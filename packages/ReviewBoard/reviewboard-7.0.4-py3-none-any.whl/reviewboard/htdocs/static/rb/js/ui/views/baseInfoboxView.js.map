{"version":3,"file":"baseInfoboxView.js","names":["RB","BaseInfoboxView","Backbone","View","extend","infoboxID","DEFAULT_POSITIONING","side","xOffset","yDistance","events","initialize","positioning","_scrollbarWidth","className","getURLForTarget","$target","attr","setContents","html","$el","render","css","find","_getScrollbarWidth","_","defer","width","$","visibility","position","left","top","appendTo","document","body","newWidth","remove","_onHoverItemMouseEnter","evt","target","closest","addClass","_onHoverItemMouseLeave","removeClass","_onScrollableMouseEnter","_onScrollableMouseLeave"],"sources":["../../../../../../static/rb/js/ui/views/baseInfoboxView.es6.js"],"sourcesContent":["/**\n * An infobox pop-up.\n *\n * This binds to an ``<a>`` element (expected to be either a bug, a user, or a\n * review request right now), and loads the contents of the infobox from a URL\n * built from that element's ``href`` attribute plus the string \"infobox/\".\n */\nRB.BaseInfoboxView = Backbone.View.extend({\n    /**\n     * The unique ID for the infobox.\n     *\n     * This will also be used as the CSS class for the infobox.\n     */\n    infoboxID: null,\n\n    DEFAULT_POSITIONING: {\n        side: 'tb',\n        xOffset: -20,\n        yDistance: 10,\n    },\n\n    events: {\n        'mouseenter .infobox-hover-item-anchor': '_onHoverItemMouseEnter',\n        'mouseleave .infobox-hover-item': '_onHoverItemMouseLeave',\n        'mouseenter .infobox-scrollable-section': '_onScrollableMouseEnter',\n        'mouseleave .infobox-scrollable-section': '_onScrollableMouseLeave',\n    },\n\n    /**\n     * Initialize the infobox.\n     */\n    initialize() {\n        /* Set the default positioning. This can be overridden by pages. */\n        this.positioning = this.DEFAULT_POSITIONING;\n\n        this._scrollbarWidth = null;\n    },\n\n    /**\n     * Return the class name for the infobox.\n     *\n     * Returns:\n     *     string:\n     *     The CSS class name for the infobox element.\n     */\n    className() {\n        return `infobox ${this.infoboxID}`;\n    },\n\n    /**\n     * Return the infobox contents URL for a given target.\n     *\n     * By default, this uses the ``href`` argument on the target, appending\n     * ``infobox/``. Infoboxes can override this to provide a different URL.\n     */\n    getURLForTarget($target) {\n        return `${$target.attr('href')}infobox/`;\n    },\n\n    /**\n     * Set new contents for the infobox.\n     *\n     * This will replace the HTML of the infobox element and then cause\n     * :js:meth:`render` to be called.\n     *\n     * Args:\n     *     html (string):\n     *         The new HTML to set.\n     */\n    setContents(html) {\n        this.$el.html(html);\n        this.render();\n    },\n\n    /**\n     * Render the infobox.\n     *\n     * Subclasses can override this to provide specific rendering. By default,\n     * there's no custom rendering performed here.\n     *\n     * Subclasses should always call the parent method.\n     *\n     * Returns:\n     *     RB.BaseInfoboxView:\n     *     This infobox instance, for chaining.\n     */\n    render() {\n        /*\n         * We want to be smart about how the scrollbar is handled when\n         * hovering over scrollable sections. If we leave this up to CSS,\n         * the contents within will either get less space on hover, possibly\n         * wrapping (due to the scrollbars appearing), or the window will\n         * expand, potentially influencing other elements in the infobox.\n         * Neither are good.\n         *\n         * So what we do is compute the width of the scrollbar and reserve\n         * that much space to the right of the content. After we have that,\n         * we figure out the natural width for this infobox and then force\n         * that width so that the infobox can't unexpectedly widen.\n         *\n         * When hovering over the scrollable section, the additional padding\n         * will go away and the scrollbar will appear, ensuring that neither\n         * the content nor the window will alter in size.\n         */\n        this._scrollbarWidth = null;\n\n        this.$el\n            .css('width', '')\n            .find('.infobox-scrollable-section')\n                .css('padding-right', this._getScrollbarWidth());\n\n        _.defer(() => this.$el.width(this.$el.width()));\n\n        return this;\n    },\n\n    /**\n     * Return the width of the scrollbar.\n     *\n     * This will create a temporary off-screen element, measure its width,\n     * and then force the display of a scrollbar, and measure that. The\n     * difference in widths is the width of the scrollbar.\n     *\n     * This value may be 0, depending on how the browser renders scrollbars\n     * for content. macOS, by default, won't have any measurable width for the\n     * scrollbar.\n     *\n     * Returns:\n     *     number:\n     *     The width of the scrollbar.\n     */\n    _getScrollbarWidth() {\n        if (this._scrollbarWidth === null) {\n            const $el = $('<div>test</div>')\n                .css({\n                    visibility: 'hidden',\n                    position: 'absolute',\n                    left: -10000,\n                    top: -10000,\n                })\n                .appendTo(document.body);\n            const width = $el.width();\n\n            $el.css('overflow-y', 'scroll');\n            const newWidth = $el.width();\n\n            $el.remove();\n\n            this._scrollbarWidth = newWidth - width;\n        }\n\n        return this._scrollbarWidth;\n    },\n\n    /**\n     * Handler for mouseenter events on hover item anchors.\n     *\n     * This will display the hover details for the item.\n     *\n     * Args:\n     *     evt (Event):\n     *         The mouseenter event.\n     */\n    _onHoverItemMouseEnter(evt) {\n        $(evt.target).closest('.infobox-hover-item')\n            .addClass('infobox-hover-item-opened');\n    },\n\n    /**\n     * Handler for mouseleave events on hover items or their children.\n     *\n     * This will hide the hover details for the item.\n     *\n     * Args:\n     *     evt (Event):\n     *         The mouseleave event.\n     */\n    _onHoverItemMouseLeave(evt) {\n        $(evt.target).closest('.infobox-hover-item')\n            .removeClass('infobox-hover-item-opened');\n    },\n\n    /**\n     * Handler for mouseenter events on the description area.\n     *\n     * This will turn off the padding so the scrollbar has room.\n     *\n     * Args:\n     *     evt (Event):\n     *         The mouseenter event.\n     */\n    _onScrollableMouseEnter(evt) {\n        $(evt.target).closest('.infobox-scrollable-section')\n            .css('padding-right', 0);\n    },\n\n    /**\n     * Handler for mouseleave events on the description area.\n     *\n     * This will re-enable the padding where the scrollbar would be.\n     *\n     * Args:\n     *     evt (Event):\n     *         The mouseleave event.\n     */\n    _onScrollableMouseLeave(evt) {\n        $(evt.target).closest('.infobox-scrollable-section')\n            .css('padding-right', this._getScrollbarWidth());\n    },\n});\n"],"mappings":"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","ignoreList":[]}