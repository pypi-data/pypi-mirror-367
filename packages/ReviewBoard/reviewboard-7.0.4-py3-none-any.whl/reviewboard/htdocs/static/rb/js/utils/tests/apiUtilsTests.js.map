{"version":3,"file":"apiUtilsTests.js","names":["suite","STATUS_TEXTS","oldEnableQueuing","oldEnableIndicator","beforeEach","RB","ajaxOptions","enableQueuing","enableIndicator","afterEach","setupAjaxCall","options","spyOn","$","and","callFake","request","expect","type","toBe","method","rsp","statusCode","xhr","_isXHR","status","statusText","undefined","responseText","JSON","stringify","success","error","complete","describe","runAPICallTest","done","$buttons","$activityIndicator","css","appendTo","$testsScratch","data","runCommonSuccessErrorChecks","not","toHaveBeenCalled","attr","hasClass","find","text","path","buttons","_$activityIndicator","_activityIndicatorHideImmediately","toBeTrue","expectedStatusText","expectSuccess","toBeUndefined","activityIndicatorHasError","activityIndicatorDisplay","expectActivityIndicatorError","toBeFalse","funcQueue","add","clear","addSuccessHandler","expectAPIErrorSuccess","arguments","length","toEqual","fail","addErrorHandler","httpStatusText","callThrough","apiCall","addAPICallTests","successText","errorText","it","stat","forEach"],"sources":["../../../../../../static/rb/js/utils/tests/apiUtilsTests.es6.js"],"sourcesContent":["/**\n * Unit tests for rb/utils/apiUtils.\n *\n * Version Added:\n *     5.0\n */\nsuite('rb/utils/apiUtils', function() {\n    const STATUS_TEXTS = {\n        200: 'OK',\n        400: 'Bad Request',\n        404: 'Not Found',\n        500: 'Internal Server Error',\n    };\n\n    let oldEnableQueuing;\n    let oldEnableIndicator;\n\n    beforeEach(function() {\n        oldEnableQueuing = RB.ajaxOptions.enableQueuing;\n        oldEnableIndicator = RB.ajaxOptions.enableIndicator;\n\n        RB.ajaxOptions.enableQueuing = true;\n        RB.ajaxOptions.enableIndicator = true;\n    });\n\n    afterEach(function() {\n        RB.ajaxOptions.enableQueuing = oldEnableQueuing;\n        RB.ajaxOptions.enableIndicator = oldEnableIndicator;\n    });\n\n\n    /**\n     * Set up a call to $.ajax.\n     *\n     * This spies on :js:func:`$.ajax`, creating a mock implementation which\n     * will prepare a mock XHR object and call the right handlers for the\n     * right HTTP status codes.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the AJAX call.\n     *\n     * Option Args:\n     *     method (string, optional):\n     *         The HTTP method expected. This defaults to \"POST\".\n     *\n     *     responseText (string, optional):\n     *         An optional string for the response, if not setting ``rsp``.\n     *\n     *     rsp (object, optional):\n     *         An optional JSON payload for the response.\n     *\n     *     statusCode (number, optional):\n     *         The optional HTTP status code for the response. This default to\n     *         200.\n     */\n    function setupAjaxCall(options) {\n        spyOn($, 'ajax').and.callFake(request => {\n            expect(request.type).toBe(options.method || 'POST');\n\n            const rsp = options.rsp;\n            const statusCode = options.statusCode || 200;\n            const xhr = {\n                _isXHR: true,\n                status: statusCode,\n                statusText: STATUS_TEXTS[statusCode],\n            };\n\n            if (rsp !== undefined) {\n                xhr.responseText = JSON.stringify(rsp);\n            } else {\n                xhr.responseText = options.responseText || '';\n            }\n\n            /*\n             * This roughly matches what $.ajax sets. It's good enough for our\n             * purposes.\n             */\n            let statusText;\n\n            if (statusCode === 204 || request.type === 'HEAD') {\n                statusText = 'nocontent';\n            } else if (statusCode === 304) {\n                statusText = 'notmodified';\n            } else if (statusCode >= 200 && statusCode < 300) {\n                statusText = 'success';\n            } else {\n                statusText = 'error';\n            }\n\n            /* Invoke the handlers. */\n            if ((statusCode >= 200 && statusCode < 300) || statusCode === 304) {\n                /* Currently, there isn't always a default success handler. */\n                if (request.success !== undefined) {\n                    request.success(\n                        (rsp !== undefined ? rsp : options.responseText),\n                        statusText,\n                        xhr);\n                }\n            } else {\n                /* Currently, there's always a default error handler. */\n                request.error(xhr, statusText, xhr.statusText);\n            }\n\n            request.complete(xhr, statusText);\n        });\n    }\n\n    describe('apiCall', function() {\n        /**\n         * Run a RB.apiCall test.\n         *\n         * This sets up a call to :js:func:`RB.apiCall` with a mock AJAX\n         * implementation and UI. It handles checking all the common state\n         * in the UI and the callbacks, matching expectations against provided\n         * arguments.\n         *\n         * Args:\n         *     done (function):\n         *         The done handler for the test.\n         *\n         *     options (object):\n         *         Options for the test.\n         *\n         * Option Args:\n         *     addErrorHandler (boolean, optional):\n         *         Whether to register an error handler. The default is\n         *         ``true``.\n         *\n         *     addSuccessHandler (boolean, optional):\n         *         Whether to register a success handler. The default is\n         *         ``true``.\n         *\n         *     expectedStatusText (string):\n         *         The expected status text for callbacks.\n         *\n         *     expectActivityIndicatorError (boolean, optional):\n         *         Whether to expect that the activity indicator will display\n         *         an error. The default is ``false``.\n         *\n         *     expectAPIErrorSuccess (boolean, optional):\n         *         Whether to expect the success handler to be called with API\n         *         error information. The default is ``false``.\n         *\n         *     expectSuccess (boolean, optional):\n         *         Whether to expect the success handler to be called. The\n         *         default is ``false``.\n         *\n         *     method (string, optional):\n         *         The HTTP method expected. This defaults to \"POST\".\n         *\n         *     responseText (string, optional):\n         *         An optional string for the response, if not setting ``rsp``.\n         *\n         *     rsp (object, optional):\n         *         An optional JSON payload for the response.\n         *\n         *     statusCode (number, optional):\n         *         The optional HTTP status code for the response. This\n         *         defaults to 200.\n         */\n        function runAPICallTest(done, options) {\n            const $buttons = $('<button>');\n            const $activityIndicator =\n                $('<div><span class=\"indicator-text\"></span></div>')\n                    .css('display', 'none')\n                    .appendTo($testsScratch);\n\n            /*\n             * Define this early so that we trigger a warning with the\n             * usage in runCommonSuccessErrorChecks().\n             */\n            let data;\n\n            setupAjaxCall(options);\n\n            function runCommonSuccessErrorChecks() {\n                /* Check the order of calls. */\n                expect(data.complete).not.toHaveBeenCalled();\n\n                expect($buttons.attr('disabled')).toBe('disabled');\n                expect($activityIndicator.hasClass('error')).toBe(false);\n                expect($activityIndicator.find('.indicator-text').text()).toBe(\n                    (options.method === 'GET'\n                     ? 'Loading...'\n                     : 'Saving...'));\n            }\n\n            data = {\n                path: 'info/',\n                type: options.method,\n                buttons: $buttons,\n                _$activityIndicator: $activityIndicator,\n                _activityIndicatorHideImmediately: true,\n                complete: function(xhr, statusText) {\n                    expect(xhr._isXHR).toBeTrue();\n                    expect(statusText).toBe(options.expectedStatusText);\n\n                    /* Check the order of calls. */\n                    if (options.expectSuccess) {\n                        if (data.success !== undefined) {\n                            expect(data.success).toHaveBeenCalled();\n                        }\n                    } else {\n                        if (data.error !== undefined) {\n                            expect(data.error).toHaveBeenCalled();\n                        }\n                    }\n\n                    /* Check DOM state from RB.apiCall. */\n                    expect($buttons.attr('disabled')).toBeUndefined();\n\n                    const activityIndicatorHasError =\n                        $activityIndicator.hasClass('error');\n                    const activityIndicatorDisplay =\n                        $activityIndicator.css('display');\n\n                    if (options.expectActivityIndicatorError) {\n                        expect(activityIndicatorHasError).toBeTrue();\n                        expect(activityIndicatorDisplay).toBe('block');\n                    } else {\n                        expect(activityIndicatorHasError).toBeFalse();\n                        expect(activityIndicatorDisplay).toBe('none');\n                    }\n\n                    /*\n                     * Make sure that queue functionality doesn't break by\n                     * incorporating it into the test's done handler.\n                     */\n                    if (options.method === 'GET') {\n                        /* GETs aren't in a queue. */\n                        done();\n                    } else {\n                        $.funcQueue('rbapicall').add(function() {\n                            $.funcQueue('rbapicall').clear();\n\n                            done();\n                        });\n                    }\n                }\n            };\n\n            if (options.addSuccessHandler !== false) {\n                data.success = function(rsp, statusText, xhr) {\n                    if (options.expectSuccess) {\n                        runCommonSuccessErrorChecks();\n\n                        if (options.expectAPIErrorSuccess) {\n                            expect(arguments.length).toBe(2);\n                            expect(arguments[1]).toBe(options.statusCode);\n                        } else {\n                            expect(arguments.length).toBe(3);\n                            expect(arguments[1])\n                                .toBe(options.expectedStatusText);\n                            expect(arguments[2]._isXHR).toBeTrue();\n                        }\n\n                        expect(arguments[0]).toEqual(options.rsp);\n                    } else {\n                        done.fail('API call unexpectedly returned success.');\n                    }\n                };\n            }\n\n            if (options.addErrorHandler !== false) {\n                data.error = function(xhr, statusText, httpStatusText) {\n                    if (options.expectSuccess) {\n                        done.fail('API call unexpectedly returned error.');\n                    } else {\n                        runCommonSuccessErrorChecks();\n\n                        expect(statusText).toBe(options.expectedStatusText);\n                        expect(xhr._isXHR).toBeTrue();\n\n                        /*\n                         * This seems like a tautology, given the setup code,\n                         * but we're making sure it's preserved through\n                         * RB.apiCall's handlers.\n                         */\n                        expect(httpStatusText).toBe(STATUS_TEXTS[xhr.status]);\n                        expect(xhr.statusText).toBe(httpStatusText);\n                    }\n                };\n            }\n\n            spyOn(data, 'complete').and.callThrough();\n\n            if (data.success !== undefined) {\n                spyOn(data, 'success').and.callThrough();\n            }\n\n            if (data.error !== undefined) {\n                spyOn(data, 'error').and.callThrough();\n            }\n\n            RB.apiCall(data);\n        }\n\n        /**\n         * Add a suite of RB.apiCall tests for a given HTTP method.\n         *\n         * Args:\n         *     method (string):\n         *         The HTTP method being tested.\n         *\n         *     successText (string):\n         *         The status text expected on success.\n         *\n         *     errorText (string):\n         *         The status text expected on error.\n         */\n        function addAPICallTests(method, successText, errorText) {\n            describe(`HTTP ${method}`, function() {\n                describe('With success', function() {\n                    it('And success handler', function(done) {\n                        runAPICallTest(\n                            done,\n                            {\n                                method: method,\n                                rsp: {\n                                    stat: 'ok',\n                                },\n                                expectSuccess: true,\n                                expectedStatusText: successText,\n                            });\n                    });\n\n                    it('And no success handler', function(done) {\n                        runAPICallTest(\n                            done,\n                            {\n                                method: method,\n                                rsp: {\n                                    stat: 'ok',\n                                },\n                                addSuccessHandler: false,\n                                expectSuccess: true,\n                                expectedStatusText: successText,\n                            });\n                    });\n                });\n\n                describe('With HTTP 204', function() {\n                    it('And success handler', function(done) {\n                        runAPICallTest(\n                            done,\n                            {\n                                method: method,\n                                statusCode: 204,\n                                expectSuccess: true,\n                                expectedStatusText: 'nocontent',\n                            });\n                    });\n\n                    it('And no success handler', function(done) {\n                        runAPICallTest(\n                            done,\n                            {\n                                method: method,\n                                statusCode: 204,\n                                addSuccessHandler: false,\n                                expectSuccess: true,\n                                expectedStatusText: 'nocontent',\n                            });\n                    });\n                });\n\n                describe('With API error', function() {\n                    it('And error handler', function(done) {\n                        runAPICallTest(\n                            done,\n                            {\n                                method: method,\n                                rsp: {\n                                    stat: 'fail',\n                                },\n                                statusCode: 404,\n                                expectSuccess: false,\n                                expectedStatusText: errorText,\n                            });\n                    });\n\n                    it('And no error handler', function(done) {\n                        runAPICallTest(\n                            done,\n                            {\n                                method: method,\n                                rsp: {\n                                    stat: 'fail',\n                                },\n                                statusCode: 404,\n                                addErrorHandler: false,\n                                expectSuccess: true,\n                                expectAPIErrorSuccess: true,\n                                expectedStatusText: errorText,\n                            });\n                    });\n                });\n\n                describe('With unexpected error', function() {\n                    it('With error handler', function(done) {\n                        runAPICallTest(\n                            done,\n                            {\n                                method: method,\n                                responseText: 'oh no it broke',\n                                statusCode: 500,\n                                expectSuccess: false,\n                                expectedStatusText: errorText,\n                            });\n                    });\n\n                    it('Without error handler', function(done) {\n                        runAPICallTest(\n                            done,\n                            {\n                                method: method,\n                                responseText: 'oh no it broke',\n                                statusCode: 500,\n                                addErrorHandler: false,\n                                expectSuccess: false,\n                                expectedStatusText: errorText,\n                                expectActivityIndicatorError: true,\n                            });\n                    });\n                });\n            });\n        }\n\n        ['DELETE', 'GET', 'POST', 'PATCH', 'PUT'].forEach(\n            method => addAPICallTests(method, 'success', 'error'));\n\n        addAPICallTests('HEAD', 'nocontent', 'nocontent');\n    });\n});\n"],"mappings":"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","ignoreList":[]}