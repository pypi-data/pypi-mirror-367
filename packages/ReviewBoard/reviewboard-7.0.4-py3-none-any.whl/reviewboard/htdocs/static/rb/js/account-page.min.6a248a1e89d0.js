!function(){e=function(){},"function"==typeof define&&define.amd&&define(e);{const i="rw",s="ro",o="custom",n={rw:gettext("Full access"),ro:gettext("Read-only"),custom:gettext("Custom")};var e=RB.Config.ResourceListItem.extend({defaults:_.defaults({policyType:i,lastUsed:null,localSiteName:null,showRemove:!0},RB.Config.ResourceListItem.prototype.defaults),syncAttrs:["deprecated","expired","expires","id","invalidReason","invalidDate","lastUsed","note","policy","tokenValue","valid"],initialize(){_super(this).initialize.apply(this,arguments),this.on("change:policyType",this._onPolicyTypeChanged,this);var e=this.get("policy")||{},e=this._guessPolicyType(e);this._policyMenuAction={id:"policy",label:n[e],children:[this._makePolicyAction(i),this._makePolicyAction(s),this._makePolicyAction(o,{id:"policy-custom",dispatchOnClick:!0})]},this.actions.unshift(this._policyMenuAction),this.set("policyType",e)},createResource(e){return new RB.APIToken(_.defaults({userName:RB.UserSession.instance.get("username"),localSitePrefix:this.collection.localSitePrefix},e))},saveExpires(e){this._saveAttribute("expires",e)},saveNote(e){this._saveAttribute("note",e)},savePolicy(e){return this._saveAttribute("policy",e)},async _saveAttribute(e,t){await this.resource.ready(),this.resource.set(e,t),await this.resource.save()},_guessPolicyType(e){return _.isEqual(e,RB.APIToken.defaultPolicies.readOnly)?s:_.isEqual(e,RB.APIToken.defaultPolicies.readWrite)?i:o},_makePolicyAction(e,t){return _.defaults({label:n[e],type:"radio",name:"policy-type",propName:"policyType",radioValue:e},t)},_onPolicyTypeChanged(){var e=this.get("policyType");this._policyMenuAction.label=n[e],this.trigger("actionsChanged");let t=null;if(e===s)t=RB.APIToken.defaultPolicies.readOnly;else{if(e!==i)return;t=RB.APIToken.defaultPolicies.readWrite}console.assert(null!==t),_.isEqual(t,this.get("policy"))||this.savePolicy(t)}});const a=Backbone.Collection.extend({model:e,initialize(e,t){this.localSitePrefix=t.localSitePrefix}}),l=Backbone.View.extend({id:"custom_policy_editor",template:_.template(["<p><%= instructions %></p>","<textarea></textarea>"].join("")),initialize(e){this.prevPolicyType=e.prevPolicyType,this._codeMirror=null,this._$policy=null,this._$saveButtons=null},render(){let e=this.model.get("policy");_.isEmpty(e)&&(e=RB.APIToken.defaultPolicies.custom),this.$el.html(this.template({instructions:interpolate(gettext('You can limit access to the API through a custom policy. See the <a href="%s" target="_blank">documentation</a> on how to write policies.'),[MANUAL_URL+"webapi/2.0/api-token-policy/"])})),this._$policy=this.$("textarea").val(JSON.stringify(e,null,"  ")),this.$el.modalBox({title:gettext("Custom Token Access Policy"),buttons:[Ink.paintComponent("Ink.Button",{onClick:()=>this.cancel()},gettext("Cancel")),Ink.paintComponent("Ink.Button",{class:"save-button",onClick:()=>this.save(!1)},gettext("Save and continue editing")),Ink.paintComponent("Ink.Button",{class:"save-button",onClick:()=>this.save(!0),type:"primary"},gettext("Save"))]}),this._$saveButtons=this.$el.modalBox("buttons").find(".save-button"),this._codeMirror=CodeMirror.fromTextArea(this._$policy[0],{mode:{highlightFormatting:!0,name:"application/json"},lineNumbers:!0,lineWrapping:!0,matchBrackets:!0,lint:{onUpdateLinting:_.bind(this._onUpdateLinting,this)},gutters:["CodeMirror-lint-markers"],styleSelectedText:!0,theme:"rb default"}),this._codeMirror.focus()},remove(){this.$el.modalBox("destroy")},cancel(){this.model.set("policyType",this.prevPolicyType),this.remove()},async save(e){var t=this._codeMirror.getValue().trim();let i;try{i=JSON.parse(t)}catch(e){if(e instanceof SyntaxError)return void alert(interpolate(gettext("There is a syntax error in your policy: %s"),[e]));throw e}try{await this.model.savePolicy(i),this.model.set("policyType",o),e&&this.remove()}catch(e){105===e.xhr.errorPayload.err.code&&e.xhr.errorPayload.fields.policy?alert(e.xhr.errorPayload.fields.policy):alert(e.xhr.errorPayload.err.msg)}},_onUpdateLinting(e){this._$saveButtons.prop("disabled",0<e.length)}}),r=Djblets.Config.ListItemView.extend({EMPTY_NOTE_PLACEHOLDER:gettext("Click to describe this token"),template:_.template(gettext('<div class="rb-c-config-api-tokens__main"> <div class="rb-c-config-api-tokens__value"> <input readonly="readonly" value="<%- tokenValue %>"> </div> <span class="fa fa-clipboard js-copy-token" title="Copy to clipboard"></span> </div> <div class="rb-c-config-api-tokens__info"> <% if (deprecated) { %> <p class="rb-c-config-api-tokens__deprecation-notice"> This token uses a deprecated format. You should remove it and generate a new one. </p> <% } %> <% if (valid) { %> <% if (lastUsed) { %> <p class="rb-c-config-api-tokens__usage -has-last-used"> Last used <time class="timesince" datetime="<%= lastUsed %>"></time>. </p> <% } else { %> <p class="rb-c-config-api-tokens__usage">Never used.</p> <% } %> <% if (expired) { %> <p class="rb-c-config-api-tokens__token-state -is-expired"> <span>Expired <%= expiresTimeHTML %>.</span> </p> <% } else if (expires) { %> <p class="rb-c-config-api-tokens__token-state -has-expires"> <span>Expires <%= expiresTimeHTML %>.</span> </p> <% } else { %> <p class="rb-c-config-api-tokens__token-state"> <span>Never expires.</span> </p> <% } %> <% } else { %> <p class="rb-c-config-api-tokens__token-state -is-invalid"> Invalidated <time class="timesince" datetime="<%= invalidDate %>"></time>: <%= invalidReason %> </p> <% } %> </div> <div class="rb-c-config-api-tokens__actions"></div> <span class="rb-c-config-api-tokens__note"></span>')),events:{"click .js-copy-token":"_onCopyClicked"},actionHandlers:{delete:"_onRemoveClicked","policy-custom":"_onCustomPolicyClicked"},initialize(){_super(this).initialize.apply(this,arguments),this._$expires=null,this._$note=null,this._$tokenState=null,this.listenTo(this.model.resource,"change:expires",this._updateExpires),this.listenTo(this.model.resource,"change:note",this._updateNote)},render(){_super(this).render.call(this),this._$tokenState=this.$(".rb-c-config-api-tokens__token-state"),this._$expires=this._$tokenState.not(".is-invalid").find("span"),this._$note=this.$(".rb-c-config-api-tokens__note");const e=new RB.InlineEditorView({editIconClass:"rb-icon rb-icon-edit",el:this._$note,hasShortButtons:!0});e.render(),this.listenTo(e,"beginEdit",()=>{e.setValue(this.model.get("note"))}),this.listenTo(e,"complete",e=>this.model.saveNote(e));var t=moment(this.model.get("expires")).local().format("YYYY-MM-DDTHH:mm"),t=new RB.DateTimeInlineEditorView({descriptorText:"Expires ",el:this._$expires[0],formatResult:e=>{var t,i;return e?(e=moment(e).local().format(),i=(t=moment().local().isAfter(e))?"Expired":"Expires",t&&this._$tokenState.addClass("-is-expired"),i+`
<time class="timesince" datetime="${e}"></time>.`):(this._$tokenState.removeClass("-is-expired"),"Never expires.")},hasShortButtons:!0,rawValue:t}).on({beginEdit:()=>this._$tokenState.removeClass("-is-expired"),cancel:()=>{this.model.get("expired")&&this._$tokenState.addClass("-is-expired")}});return t.render(),this.listenTo(t,"complete",e=>{e=e?moment(e).local().format():"",this.model.saveExpires(e)}),this._updateExpires(),this._updateNote(),this},getActionsParent(){return this.$(".rb-c-config-api-tokens__actions")},getRenderContext(){return{expiresTimeHTML:`<time class="timesince" datetime="${this.model.get("expires")}"></time>`}},_updateExpires(){var e;this._$expires&&(e=this.model.resource.get("expires"),this._$expires.find("time").attr("datetime",e),this.$(".timesince").timesince())},_updateNote(){var e;this._$note&&(e=this.model.resource.get("note"),this._$note.toggleClass("empty",!e).text(e||this.EMPTY_NOTE_PLACEHOLDER))},_onCopyClicked(e){e.preventDefault(),e.stopPropagation(),this.$(".rb-c-config-api-tokens__value input").focus().select(),document.execCommand("copy")},_onCustomPolicyClicked(){return new l({model:this.model,prevPolicyType:this.model.get("policyType")}).render(),!1},_onRemoveClicked(){$("<p>").html(gettext("This will prevent clients using this token when authenticating.")).modalBox({title:gettext("Are you sure you want to remove this token?"),buttons:[$('<input type="button">').val(gettext("Cancel")),$('<input type="button" class="danger">').val(gettext("Remove")).click(()=>this.model.resource.destroy())]})}}),c=Backbone.View.extend({className:"rb-c-config-api-tokens",template:_.template(`<% if (name) { %>
 <div class="djblets-l-config-forms-container">
  <h3><%- name %></h3>
 </div>
<% } %>
<div class="api-tokens">
</div>`),generateTokenTemplate:_.template(`<li class="generate-api-token djblets-c-config-forms-list__item">
 <a href="#"><%- generateText %></a>
</li>`),events:{"click .generate-api-token":"_onGenerateClicked"},initialize(e){this.localSiteName=e.localSiteName,this.localSitePrefix=e.localSitePrefix,this.collection=new a(e.apiTokens,{localSitePrefix:this.localSitePrefix}),this.apiTokensList=new Djblets.Config.List({},{collection:this.collection}),this._listView=null},render(){return this._listView=new Djblets.Config.ListView({ItemView:r,animateItems:!0,model:this.apiTokensList}),this.$el.html(this.template({name:this.localSiteName})),this._listView.render().$el.prependTo(this.$(".api-tokens")),this._$generateTokenItem=$(this.generateTokenTemplate({generateText:gettext("Generate a new API token")})).appendTo(this._listView.getBody()),this},async _onGenerateClicked(e){e.preventDefault(),e.stopPropagation();e=new RB.APIToken({localSitePrefix:this.localSitePrefix,userName:RB.UserSession.instance.get("username")});await e.save(),this.collection.add({resource:e}),this._$generateTokenItem.detach().appendTo(this._listView.getBody())}});RB.APITokensView=Backbone.View.extend({template:_.template(`<div class="api-tokens-list djblets-l-config-forms-container
            -is-recessed -is-top-flush">
</div>`),initialize(e){this.apiTokens=e.apiTokens,this._$listsContainer=null,this._apiTokenViews=[]},render(){this.$el.html(this.template()),this._$listsContainer=this.$(".api-tokens-list");for(var[e,t]of Object.entries(this.apiTokens)){e=new c({localSiteName:e,localSitePrefix:t.localSitePrefix,apiTokens:t.tokens});e.$el.appendTo(this._$listsContainer),e.render(),this._apiTokenViews.push(e)}return this}})}{const p=Djblets.Config.ListItem.extend({defaults:_.defaults({localSiteName:null,displayName:null,groupName:null,joined:!1,showRemove:!1,url:null},Djblets.Config.ListItem.prototype.defaults),initialize(){Djblets.Config.ListItem.prototype.initialize.apply(this,arguments);var e=this.get("name"),t=this.get("localSiteName");this.set({text:e,editURL:this.get("url")}),this.group=new RB.ReviewGroup({id:this.get("reviewGroupID"),name:e,localSitePrefix:t?"s/"+t+"/":""}),this.on("change:joined",this._updateActions,this),this._updateActions()},async joinGroup(){await this.group.addUser(RB.UserSession.instance.get("username")),this.set("joined",!0)},async leaveGroup(){await this.group.removeUser(RB.UserSession.instance.get("username")),this.set("joined",!1)},_updateActions(){this.get("joined")?this.actions=[{id:"leave",label:gettext("Leave")}]:this.actions=[{id:"join",label:gettext("Join")}],this.trigger("actionsChanged")}}),d=Djblets.Config.ListItemView.extend({actionHandlers:{join:"_onJoinClicked",leave:"_onLeaveClicked"},template:_.template(['<span class="config-group-name">',' <a href="<%- editURL %>"><%- text %></a>',"</span>",'<span class="config-group-display-name"><%- displayName %></span>'].join("")),_onJoinClicked(){this.model.joinGroup()},_onLeaveClicked(){this.model.leaveGroup()}}),h=Backbone.View.extend({template:_.template(`<% if (name) { %>
 <div class="djblets-l-config-forms-container">
  <h3><%- name %></h3>
 </div>
<% } %>
<div class="groups"></div>`),initialize(e){this.name=e.name,this.collection=new RB.FilteredCollection(null,{collection:new Backbone.Collection(e.groups,{model:p})}),this.groupList=new Djblets.Config.List({},{collection:this.collection})},render(){return this._listView=new Djblets.Config.ListView({ItemView:d,model:this.groupList}),this.$el.html(this.template({name:this.name})),this._listView.render(),this._listView.$el.appendTo(this.$(".groups")),this},filterBy(e){this.collection.setFilters({name:e}),this.$el.toggle(0<this.collection.length)}});RB.JoinedGroupsView=Backbone.View.extend({template:_.template(`<div class="djblets-l-config-forms-container">
 <div class="rb-c-search-field">
  <span class="fa fa-search"></span>
  <input class="rb-c-search-field__input" type="search">
 </div>
</div>
<div class="group-lists"></div>`),events:{submit:"_onSubmit","keyup .rb-c-search-field__input":"_onGroupSearchChanged","change .rb-c-search-field__input":"_onGroupSearchChanged"},initialize(e){this.groups=e.groups,this._$listsContainer=null,this._$search=null,this._searchText=null,this._groupViews=[]},render(){this.$el.html(this.template()),this._$listsContainer=this.$(".group-lists"),this._$search=this.$(".rb-c-search-field__input");for(var[e,t]of Object.entries(this.groups))0<t.length&&((e=new h({name:e,groups:t})).$el.appendTo(this._$listsContainer),e.render(),this._groupViews.push(e));return this},_onGroupSearchChanged(){var e=this._$search.val();e!==this._searchText&&(this._searchText=e,this._groupViews.forEach(e=>e.filterBy(this._searchText)))},_onSubmit(e){e.preventDefault()}})}{var e=gettext("Add application"),t=gettext("Disabled for security.");const m=gettext('This application has been disabled because the user "%s" has been removed from the Local Site.'),u=gettext("You have not registered any OAuth2 applications."),g=gettext("You have not registered any OAuth2 applications on %s."),f=Djblets.Config.ListItem.extend({defaults:_.defaults({apiURL:"",editURL:"",enabled:!0,isDisabledForSecurity:!1,localSiteName:"",name:"",originalUser:null,showRemove:!0},Djblets.Config.ListItem.prototype.defaults),parse(e,t){var{baseEditURL:t,baseURL:i}=t,s=e["localSiteName"];return _.defaults(e,{apiURL:s?`/s/${s}${i}${e.id}/`:""+i+e.id+"/",editURL:`${t}/${e.id}/`})}}),v=Djblets.Config.ListItemView.extend({template:_.template(`<div class="app-entry-wrapper">
 <span class="config-app-name<% if (!enabled) {%> disabled<% } %>">
  <% if (isDisabledForSecurity) { %>
    <span class="rb-icon rb-icon-warning"
          title="${t}"></span>
  <% } %>
  <a href="<%- editURL %>"><%- name %></a>
 </span>
 <% if (isDisabledForSecurity) { %>
   <p class="disabled-warning"><%- disabledWarning %></p>
  <% } %>
 </div>`),actionHandlers:{delete:"_onDeleteClicked"},getRenderContext(){return{disabledWarning:interpolate(m,[this.model.get("originalUser")])}},_onDeleteClicked(){RB.apiCall({url:this.model.get("apiURL"),method:"DELETE",success:()=>this.model.trigger("destroy")})}});RB.OAuthApplicationsView=Backbone.View.extend({template:_.template(`<div class="app-lists"></div>
<div class="oauth-form-buttons djblets-l-config-forms-container">
 <a class="btn oauth-add-app" href="<%- editURL %>">
  ${e}
 </a>
</div>`),listTemplate:_.template(`<div>
 <% if (localSiteName) { %>
  <div class="djblets-l-config-forms-container">
   <h2><%- localSiteName %></h2>
  </div>
 <% } %>
 <div class="app-list">
  <div class="djblets-l-config-forms-container">
   <%- emptyText %>
  </div>
 </div>
</div>`),initialize(i){this.collections=new Map(Object.entries(i.apps).map(([e,t])=>[e||null,new Backbone.Collection(t,{model:f,parse:!0,baseEditURL:i.editURL,baseURL:i.baseURL})])),this._editURL=i.editURL,window.view=this},_renderAppList(e,t){e=$(this.listTemplate({emptyText:e?interpolate(g,[e]):u,localSiteName:e}));return new Djblets.Config.ListView({ItemView:v,model:new Djblets.Config.List({},{collection:t})}).render().$el.prependTo(e.find(".app-list")),e},render(){this.$el.html(this.template({editURL:this._editURL}));const i=this.$(".app-lists");return this.collections.forEach((e,t)=>{e=this._renderAppList(t,e);t?i.append(e):i.prepend(e)}),this}})}{gettext("An unexpected error occurred. Could not delete OAuth2 token.");const y=Djblets.Config.ListItem.extend({defaults:_.defaults({apiURL:"",application:"",showRemove:!0},Djblets.Config.ListItem.prototype.defaults)}),k=Djblets.Config.ListItemView.extend({template:_.template('<span class="config-token-name"><%- application %></span>'),actionHandlers:{delete:"_onDeleteClicked"},_onDeleteClicked(){RB.apiCall({url:this.model.get("apiURL"),method:"DELETE",success:()=>this.model.trigger("destroy")})}});RB.OAuthTokensView=Backbone.View.extend({template:_.template(`<div class="oauth-token-list">
 <div class="djblets-l-config-forms-container -is-top-flush">
  <%- emptyText %>
 </div>
</div>`),initialize(e){this.collection=new Backbone.Collection(e.tokens,{model:y})},render(){return this.$el.html(this.template({emptyText:gettext("You do not have any OAuth2 tokens.")})),this._$list=this.$(".oauth-token-list"),this._listView=new Djblets.Config.ListView({ItemView:k,model:new Djblets.Config.List({},{collection:this.collection})}),this._listView.render().$el.prependTo(this._$list),this}})}}.call(this);
