!function(){var e;e=function(){},"function"==typeof define&&define.amd&&define(e),RB.UploadDiffModel=Backbone.Model.extend({defaults:{basedir:null,changeNumber:null,diffFile:null,diffValid:!1,error:null,parentDiffFile:null,repository:null,reviewRequest:null,state:0},State:{PROMPT_FOR_DIFF:0,PROMPT_FOR_BASEDIR:1,PROMPT_FOR_CHANGE_NUMBER:2,PROCESSING_DIFF:3,UPLOADING:4,PROMPT_FOR_PARENT_DIFF:5,ERROR:6},initialize(){Backbone.Model.prototype.initialize.apply(this,arguments),this.on("change:diffFile change:parentDiffFile change:basedir change:changeNumber change:diffValid",this._updateState,this)},startOver(){this.set({basedir:null,changeNumber:null,diffFile:null,diffValid:!1,error:null,parentDiffFile:null,state:this.State.PROMPT_FOR_DIFF})},handleFiles(e){switch(this.get("state")){case this.State.PROMPT_FOR_DIFF:this.set("diffFile",e[0]);break;case this.State.PROMPT_FOR_PARENT_DIFF:this.set("parentDiffFile",e[0]);break;default:console.assert("File received in wrong state")}},_updateState(){var e=this.get("basedir"),t=this.get("changeNumber"),i=this.get("diffFile"),s=this.get("diffValid"),r=this.get("parentDiffFile"),o=this.get("repository"),a=o.get("requiresBasedir"),n=o.get("requiresChangeNumber");switch(this.get("state")){case this.State.PROMPT_FOR_DIFF:i&&(a&&!e?this.set("state",this.State.PROMPT_FOR_BASEDIR):n&&!t?this.set("state",this.State.PROMPT_FOR_CHANGE_NUMBER):(this.set("state",this.State.PROCESSING_DIFF),this._tryValidate()));break;case this.State.PROMPT_FOR_PARENT_DIFF:i&&r&&(this.set("state",this.State.PROCESSING_DIFF),this._tryValidate());break;case this.State.PROMPT_FOR_BASEDIR:console.assert(i,"cannot be in basedir prompt state without a diff"),e&&(n&&!t?this.set("state",this.State.PROMPT_FOR_CHANGE_NUMBER):(this.set("state",this.State.PROCESSING_DIFF),this._tryValidate()));break;case this.State.PROMPT_FOR_CHANGE_NUMBER:console.assert(i,"cannot be in changenum prompt state without a diff"),t&&(this.set("state",this.State.PROCESSING_DIFF),this._tryValidate());break;case this.State.PROCESSING_DIFF:s&&(this.set("state",this.State.UPLOADING),null===this.get("reviewRequest")?this._createReviewRequest():this._createDiff());break;case this.State.UPLOADING:case this.State.ERROR:}},async _tryValidate(){this.set("diffValid",!1);var e=this.get("diffFile"),t=(console.assert(e),this.get("parentDiffFile")),i=this.get("repository"),s=new RB.ValidateDiffModel;s.set({repository:i.get("id"),localSitePrefix:i.get("localSitePrefix"),basedir:this.get("basedir"),diff:e,parentDiff:t});try{await s.save(),this._onValidateSuccess()}catch(e){this._onValidateError(e.modelOrCollection,e.xhr)}},_onValidateSuccess(){this.set("diffValid",!0)},_onValidateError(e,t){var i=$.parseJSON(t.responseText);let s=this.State.ERROR,r;if(null!==i)switch(i.err.code){case RB.APIErrors.REPO_FILE_NOT_FOUND:"Git"===this.get("repository").get("scmtoolName")&&40!==i.revision.length?r=gettext("The uploaded diff uses short revisions, but Review Board requires full revisions.<br>Please generate a new diff using the <code>--full-index</code> parameter."):(r=interpolate(gettext('The file "%(file)s" (revision %(revision)s) was not found in the repository.'),{file:i.file,revision:i.revision},!0),null===this.get("parentDiffFile")&&(s=this.State.PROMPT_FOR_PARENT_DIFF));break;case RB.APIErrors.DIFF_PARSE_ERROR:r=interpolate(gettext("%(error)s<br>Line %(line)s: %(reason)s"),{error:i.err.msg,line:i.linenum,reason:i.reason},!0);break;default:r=i.err.msg}else r=gettext("Unknown error");r&&this.set({state:s,error:r})},async _createReviewRequest(){var e=this.get("repository"),e=new RB.ReviewRequest({commitID:this.get("changeNumber"),localSitePrefix:e.get("localSitePrefix"),repository:e.get("id")});try{await e.save(),this.set("reviewRequest",e),this._createDiff()}catch(e){this._onValidateError(e.modelOrCollection,e.xhr)}},async _createDiff(){var e=this.get("reviewRequest"),t=e.createDiff();t.set({basedir:this.get("basedir"),diff:this.get("diffFile"),parentDiff:this.get("parentDiffFile")}),t.url=e.get("links").diffs.href;try{await t.save(),RB.navigateTo(e.get("reviewURL"))}catch(e){this._onValidateError(e.modelOrCollection,e.xhr)}}}),RB.PostCommitModel=Backbone.Model.extend({defaults:{branch:null,repository:null}}),RB.NewReviewRequest=RB.Page.extend({defaults(){return _.defaults({repositories:null},_.result(RB.Page.prototype.defaults))},parse(e){return _.extend(RB.Page.prototype.parse.call(this,e),{repositories:new RB.RepositoryCollection(null,{repositories:e.repositories.map(e=>new RB.Repository(e)),localSitePrefix:e.localSitePrefix})})}}),RB.RepositoryCollection=RB.BaseCollection.extend({model:RB.Repository,initialize(e,t){this.collection=new RB.ResourceCollection(t.repositories,{extraQueryData:{},model:this.model}),this.collection._fetchURL=SITE_ROOT+t.localSitePrefix+"api/repositories/",this._fileAttachmentRepo=new RB.Repository({name:gettext("(None - File attachments only)"),scmtoolName:"",localSitePrefix:t.localSitePrefix,supportsPostCommit:!1,filesOnly:!0}),this.listenTo(this.collection,"add",this.add),this.listenTo(this.collection,"remove",this.remove),this.listenTo(this.collection,"reset",this._rebuild),this._rebuild()},_rebuild(){this.reset([this._fileAttachmentRepo].concat(this.collection.models))},search(e){this.collection.extraQueryData.q=e,this.collection.fetch({success:()=>this._rebuild()})}}),RB.UploadDiffView=Backbone.View.extend({events:{"dragenter .dnd":"_onDragEnter","dragover .dnd":"_onDragOver","dragleave .dnd":"_onDragLeave","drop .dnd":"_onDrop","submit #basedir-form":"_onBasedirSubmit","submit #changenum-form":"_onChangenumSubmit","click .startover":"_onStartOverClicked","click #select-diff-file":"_onSelectFileClicked","click #select-parent-diff-file":"_onSelectFileClicked"},initialize(){this.listenTo(this.model,"change:state",this._onStateChanged),this.listenTo(this.model,"change:error",this._onErrorChanged)},render(){let e,t;return t=this._canDragDrop()?(e=gettext('<button class="ink-c-button" type="button" id="select-diff-file">Select</button> or drag and drop a diff file to begin'),gettext('<button class="ink-c-button" type="button" id="select-parent-diff-file">Select</button> or drag and drop a parent diff file if you have one')):(e=gettext('<button class="ink-c-button" type="button" id="select-diff-file">Select</button> a file to begin'),gettext('<button class="ink-c-button" type="button" id="select-parent-diff-file">Select</button> a parent diff file if you have one')),this.$el.html(this.template({pendingChangeHeader:gettext("Create from a local change"),tipHeader:gettext("Tip:"),tip:gettext('Use <tt>rbt post</tt> from <a href="https://www.reviewboard.org/downloads/rbtools/">RBTools</a> to more easily create and update review requests.'),selectDiff:e,selectParentDiff:t,baseDir:gettext("What is the base directory for this diff?"),changeNum:gettext("What is the change number for this diff?"),startOver:gettext("Start Over"),ok:gettext("OK")})),this._$fileInput=$('<input type="file">').hide().appendTo(this.$el).change(()=>this.model.handleFiles(this._$fileInput.get(0).files)),this._$diffRevisionError=this.$("#parent-diff-error-contents"),this._$error=this.$("#error-indicator").hide(),this._$errorContents=this.$("#error-contents"),this._$processingDiff=this.$("#processing-diff").hide(),this._$promptForBasedir=this.$("#prompt-for-basedir").hide(),this._$promptForChangeNumber=this.$("#prompt-for-change-number").hide(),this._$promptForDiff=this.$("#prompt-for-diff").hide(),this._$promptForParentDiff=this.$("#prompt-for-parent-diff").hide(),this._$uploading=this.$("#uploading-diffs").hide(),this._onStateChanged(this.model,this.model.get("state")),this},_canDragDrop(){return("draggable"in this.el||"ondragstart"in this.el&&"ondrop"in this.el)&&!navigator.userAgent.match("iPhone OS")&&!navigator.userAgent.match("iPad")},_onErrorChanged(e,t){var t='<div class="rb-icon rb-icon-warning"></div> '+t,t=(this._$errorContents.html(t),this._$diffRevisionError.html(t),this._$errorContents.height()),i=this._$error.height();this._$errorContents.css({top:Math.floor((i-t)/2)+"px"})},_onStateChanged(e,t){this._$promptForDiff.toggle(t===this.model.State.PROMPT_FOR_DIFF),this._$promptForParentDiff.toggle(t===this.model.State.PROMPT_FOR_PARENT_DIFF),this._$promptForBasedir.toggle(t===this.model.State.PROMPT_FOR_BASEDIR),this._$processingDiff.toggle(t===this.model.State.PROCESSING_DIFF),this._$promptForChangeNumber.toggle(t===this.model.State.PROMPT_FOR_CHANGE_NUMBER),this._$uploading.toggle(t===this.model.State.UPLOADING),this._$error.toggle(t===this.model.State.ERROR)},_onDragEnter(e){e.stopPropagation(),e.preventDefault(),this.$(".dnd").addClass("drag-hover")},_onDragOver(e){e.stopPropagation(),e.preventDefault();e=e.originalEvent.dataTransfer;e&&(e.dropEffect="copy")},_onDragLeave(e){e.stopPropagation(),e.preventDefault(),this.$(".dnd").removeClass("drag-hover");e=e.originalEvent.dataTransfer;e&&(e.dropEffect="none")},_onDrop(e){e.stopPropagation(),e.preventDefault();e=e.originalEvent.dataTransfer,e=e&&e.files;e&&this.model.handleFiles(e)},_onBasedirSubmit(e){e.stopPropagation(),e.preventDefault();e=this.$("#basedir-input").val();e&&this.model.set("basedir",e)},_onChangenumSubmit(){var e=this.$("#changenum-input").val();e&&this.model.set("changeNumber",e)},_onStartOverClicked(){var e=this._$fileInput.clone(!0);this._$fileInput.replaceWith(e),this._$fileInput=e,this.model.startOver()},_onSelectFileClicked(){this._$fileInput.click()}}),RB.BranchView=Backbone.View.extend({tagName:"option",render(){return this.$el.text(this.model.get("name")).attr("selected",this.model.get("isDefault")),this}}),RB.BranchesView=RB.CollectionView.extend({tagName:"select",itemViewType:RB.BranchView,events:{change:"_onChange"},render:function(){return RB.CollectionView.prototype.render.apply(this,arguments),this.collection.each(e=>{e.get("isDefault")&&this.trigger("selected",e)}),this},_onAdded(e){RB.CollectionView.prototype._onAdded.apply(this,arguments),this._rendered&&e.get("isDefault")&&this.trigger("selected",e)},_onChange(){var e=this.$el.prop("selectedIndex");this.trigger("selected",this.collection.models[e])}}),RB.CommitView=Backbone.View.extend({className:"commit",template:_.template(`<div class="progress">
 <span class="djblets-o-spinner"></span>
</div>
<% if (accessible) { %>
 <div class="summary">
  <% if (reviewRequestURL) { %>
   <span class="fa fa-arrow-circle-right jump-to-commit"></span>
  <% } %>
  <%- summary %>
 </div>
<% } %>
<div class="commit-info">
 <span class="revision">
  <span class="fa fa-code-fork"></span>
  <%- revision %>
  <% if (!accessible) { %>
   <%- RB.CommitView.strings.COMMIT_NOT_ACCESSIBLE %>
  <% } %>
 </span>
 <% if (accessible && author) { %>
  <span class="author">
   <span class="fa fa-user"></span>
   <%- author %>
  </span>
 <% } %>
 <% if (date) { %>
  <span class="time">
   <span class="fa fa-clock-o"></span>
   <time class="timesince" datetime="<%- date %>"></time>
  </span>
 <% } %>
</div>`),_dialogBodyTemplate:_.template(`<p><%- prefixText %></p>
<p><code><%- commitID %>: <%- summary %></code></p>
<p><%- suffixText %></p>`),events:{click:"_onClick"},render:function(){this.model.get("accessible")||this.$el.addClass("disabled");let e=this.model.get("id");40===e.length&&(e=e.slice(0,7)),this.model.get("reviewRequestURL")&&this.$el.addClass("has-review-request");var t=this.model.get("date");return this.$el.html(this.template(_.defaults({revision:e,author:this.model.get("authorName")||gettext("<unknown>"),date:t?t.toISOString():null},this.model.attributes))),t&&this.$(".timesince").timesince(),this},_onClick(){let e=this.model.get("id");7<e.length&&(e=e.slice(0,7)),new RB.DialogView({title:gettext("Create Review Request?"),body:this._dialogBodyTemplate({prefixText:gettext("You are creating a new review request from the following published commit:"),commitID:e,summary:this.model.get("summary"),suffixText:gettext("Are you sure you want to continue?")}),buttons:[{id:"cancel",label:gettext("Cancel")},{id:"create",label:gettext("Create Review Request"),primary:!0,onClick:this._createReviewRequest.bind(this)}]}).show()},_createReviewRequest(){var e;this.model.get("accessible")&&((e=this.model.get("reviewRequestURL"))?RB.navigateTo(e):this.model.trigger("create",this.model))},showProgress(){this.$(".progress").show()},cancelProgress(){this.$(".progress").hide()}},{strings:{COMMIT_NOT_ACCESSIBLE:gettext("(not accessible on this repository)")}}),RB.CommitsView=RB.CollectionView.extend({className:"commits",itemViewType:RB.CommitView,initialize(e){RB.CollectionView.prototype.initialize.call(this,e),this._$scrollContainer=e.$scrollContainer,this._fetchingCommits=!1},render(){return RB.CollectionView.prototype.render.call(this),this._$scrollContainer.scroll(this.checkFetchNext.bind(this)),this},setPending(t){this.views.forEach(e=>{e.model===t?e.showProgress():e.cancelProgress()})},cancelPending(){this.views.forEach(e=>e.cancelProgress())},checkFetchNext(){if(!this._fetchingCommits){const t=this.collection;var e=this._$scrollContainer[0];t.canFetchNext()&&e.scrollTop+e.offsetHeight>e.scrollHeight-50&&(this._fetchingCommits=!0,t.fetchNext().then(()=>{this._fetchingCommits=!1,t.canFetchNext()&&this.checkFetchNext()}).catch(e=>{this._fetchingCommits=!1,this.trigger("loadError",e.xhr)}))}}}),RB.RepositoryView=Backbone.View.extend({tagName:"li",className:"rb-c-sidebar__nav-item repository",template:_.template('<span class="rb-c-sidebar__item-label"><%- name %></span>'),events:{click:"_onClick"},render(){return this.$el.html(this.template(this.model.attributes)),this},_onClick(){this.model.trigger("selected",this.model)}}),RB.RepositorySelectionView=RB.CollectionView.extend({tagName:"ul",className:"rb-c-sidebar__items repository-selector",itemViewType:RB.RepositoryView,template:_.template(`<li class="rb-c-sidebar__section -no-icons">
 <header class="rb-c-sidebar__section-header">
  <%- repositoriesLabel %>
 </header>
 <ul class="rb-c-sidebar__items">
  <li class="rb-c-sidebar__item">
   <div class="rb-c-sidebar__item-label">
    <div class="rb-c-search-field">
     <span class="fa fa-search"></span>
     <input class="rb-c-search-field__input" type="search"
            placeholder="<%- filterLabel %>">
    </div>
   </div>
  </li>
 </ul>
 <ul class="rb-c-sidebar__items
            rb-c-new-review-request__repository-items">
</li>`),events:{"input .rb-c-search-field__input":"_onSearchChanged"},initialize(){RB.CollectionView.prototype.initialize.apply(this,arguments),this._selected=null,this._searchActive=!1,this._onSearchChanged=_.throttle(this._onSearchChanged.bind(this),100),this.listenTo(this.collection,"selected",this._onRepositorySelected)},render(){return this.$el.html(this.template({repositoriesLabel:gettext("Repositories"),filterLabel:gettext("Filter")})),this.$container=this.$(".rb-c-new-review-request__repository-items"),this._$searchBox=this.$(".rb-c-search-field__input"),RB.CollectionView.prototype.render.apply(this,arguments),this},unselect(){this.views.forEach(e=>{e.model===this._selected&&e.$el.removeClass("active")}),this._selected=null,this.trigger("selected",null)},_onRepositorySelected(t){this._selected=t,this.views.forEach(e=>{e.model===t?e.$el.addClass("-is-active"):e.$el.removeClass("-is-active")}),this.trigger("selected",t)},_onSearchChanged(){var e=this._$searchBox.val().toLowerCase();console.log("search",e),this.collection.search(e)}}),RB.PostCommitView=Backbone.View.extend({className:"post-commit",loadErrorTemplate:_.template(`<div class="error">
 <p><%- errorLoadingText %></p>
 <p class="error-text">
  <% _.each(errorLines, function(line) { %><%- line %><br><% }); %>
 </p>
 <p>
  <%- temporaryFailureText %>
  <a href="#" id="reload_<%- reloadID %>"><%- tryAgainText %></a>
 </p>
</div>`),initialize(e){const t=this.model;var i=t.get("repository").branches;this._$scrollContainer=e.$scrollContainer,this._errorView=null,this._branchesView=new RB.BranchesView({collection:i}),this._branchesView.on("selected",e=>t.set("branch",e)),this.listenTo(t,"change:branch",this._onBranchChanged),i.loaded||this._loadBranches()},render(){return this._rendered=!0,$("<div>").addClass("branches section-header").append($("<span>").text(gettext("Create from an existing commit on:"))).append(this._branchesView.render().el).appendTo(this.$el),this._commitsView&&this.$el.append(this._commitsView.render().el),this},_onReloadBranchesClicked(){this._loadBranches()},_onReloadCommitsClicked(){this._loadCommits()},async _loadBranches(){this._clearLoadError();var e=this.model.get("repository").branches;try{await e.fetch()}catch(e){return this._branchesView.$el.hide(),this._commitsView?.$el?.hide(),void this._showLoadError(()=>this._onReloadBranchesClicked(),e.message)}e.loaded=!0,this._branchesView.$el.show(),this._commitsView?.$el?.hide()},async _loadCommits(){this._clearLoadError();try{await this._commitsCollection.fetch()}catch(e){return this._commitsView.$el.hide(),void this._showLoadError(()=>this._onReloadCommitsClicked(),e.message)}this._commitsView.$el.show(),this._commitsView.checkFetchNext()},_clearLoadError(){this._errorView&&(this._errorView.remove(),this._errorView=null)},_showLoadError(e,t){this._clearLoadError(),this._errorView=Ink.craftComponent("Ink.Alert",{type:"error"},Ink.craftComponent("Ink.Alert.Heading",null,gettext("There was an error loading information from this repository:")),Ink.craftComponent("Ink.Alert.Content",null,Ink.craftComponent("p",{className:"error-text"},t),Ink.craftComponent("p",null,gettext("This may be a temporary failure."))),Ink.craftComponent("Ink.Alert.Actions",null,Ink.craftComponent("Ink.Button",{onClick:e,type:"primary"},gettext("Try again")))),Ink.renderInto(this.el,this._errorView)},_onBranchChanged(e,t){this._commitsView&&(this.stopListening(this._commitsCollection),this._commitsView.remove()),this._commitsCollection=this.model.get("repository").getCommits({branch:t.id,start:t.get("commit")}),this.listenTo(this._commitsCollection,"create",this._onCreateReviewRequest),this._commitsView=new RB.CommitsView({collection:this._commitsCollection,$scrollContainer:this._$scrollContainer}),this.listenTo(this._commitsView,"loadError",e=>{this._showLoadError(()=>this._onReloadCommitsClicked(),e)}),this._rendered&&this.$el.append(this._commitsView.render().el),this._loadCommits()},async _onCreateReviewRequest(e){if(!this._createPending){this._createPending=!0,this._commitsView.setPending(e);var t=this.model.get("repository"),t=new RB.ReviewRequest({repository:t.id,localSitePrefix:t.get("localSitePrefix")});try{await t.createFromCommit(e.id)}catch(e){return this._commitsView.setPending(null),this._createPending=!1,void alert(e.message)}RB.navigateTo(t.get("reviewURL"))}}}),RB.PreCommitView=RB.UploadDiffView.extend({className:"pre-commit",template:_.template(`<div class="section-header"><%- pendingChangeHeader %></div>
<div class="tip">
 <strong><%- tipHeader %></strong>
 <%= tip %>
</div>
<div class="input dnd" id="prompt-for-diff">
 <form>
  <%= selectDiff %>
 </form>
</div>
<div class="input dnd" id="prompt-for-parent-diff">
 <form>
  <div id="parent-diff-error-contents"></div>
  <%= selectParentDiff %>
 </form>
 <a href="#" class="startover"><%- startOver %></a>
</div>
<div class="input" id="prompt-for-basedir">
 <form id="basedir-form">
  <%- baseDir %>
  <input id="basedir-input">
  <input type="submit" value="<%- ok %>">
 </form>
 <a href="#" class="startover"><%- startOver %></a>
</div>
<div class="input" id="prompt-for-change-number">
 <form id="changenum-form">
  <%- changeNum %>
  <input type="number" step="1" id="changenum-input">
  <input type="submit" value="<%- ok %>">
 </form>
 <a href="#" class="startover"><%- startOver %></a>
</div>
<div class="input" id="processing-diff">
 <div class="spinner"><span class="djblets-o-spinner"></div>
</div>
<div class="input" id="uploading-diffs">
 <div><span class="djblets-o-spinner"></div>
</div>
<div class="input" id="error-indicator">
 <div id="error-contents"></div>
 <a href="#" class="startover"><%- startOver %></a>
</div>`)});{const t=Backbone.Model.extend({defaults:_.defaults({repository:null})}),i=Backbone.View.extend({className:"files-only",template:_.template(`<p><%- description %></p>
<input type="submit" class="primary large" id="files-only-create"
       value="<%- buttonText %>">`),events:{"click #files-only-create":"_onCreateClicked"},render(){return this.$el.html(this.template({description:gettext("You won't be able to add any diffs to this review request. The review request will only be usable for reviewing graphics, screenshots and file attachments."),buttonText:gettext("Create Review Request")})),this},async _onCreateClicked(e){e.preventDefault(),e.stopPropagation();e=this.model.get("repository"),e=new RB.ReviewRequest({localSitePrefix:e.get("localSitePrefix")});await e.save(),RB.navigateTo(e.get("reviewURL"))}});RB.NewReviewRequestView=RB.PageView.extend({el:"#new-review-request",template:_.template(`<div class="rb-c-new-review-request">
 <div class="rb-c-sidebar -no-icons"></div>
 <div class="rb-c-new-review-request__repo-pane">
  <a href="#" class="rb-c-new-review-request__show-repositories">
   <span class="fa fa-chevron-left"></span>
   <%- repositoriesLabel %>
  </a>
  <div class="rb-c-new-review-request__repo-detail">
   <div class="rb-c-new-review-request__main">
    <div class="rb-c-new-review-request__hint"><%- hint %></div>
   </div>
  </div>
 </div>
</div>`),events:{"click .rb-c-new-review-request__show-repositories":"_onShowRepositoriesClicked"},renderPage(){this.$pageContent.html(this.template({hint:gettext("Select a repository"),repositoriesLabel:gettext("Repositories")})),this._$newReviewRequestContainer=this.$pageContent.find(".rb-c-new-review-request"),this._$repoPane=this.$pageContent.find(".rb-c-new-review-request__repo-pane"),this._$repoDetailContainer=this._$repoPane.find(".rb-c-new-review-request__repo-detail"),this._$repoSelectorContainer=this._$newReviewRequestContainer.find(".rb-c-sidebar"),this._$content=this._$repoDetailContainer.find(".rb-c-new-review-request__main"),this._$hint=this._$repoDetailContainer.find(".rb-c-new-review-request__hint"),this._repositorySelectionView=new RB.RepositorySelectionView({collection:this.model.get("repositories")}),this._repositorySelectionView.render(),this.listenTo(this._repositorySelectionView,"selected",e=>this.model.set("repository",e)),this.listenTo(this.model,"change:repository",this._onRepositoryChanged),this._preCommitView&&(this._$hint.hide(),this._$content.append(this._preCommitView.render().el)),this._postCommitView&&(this._$hint.hide(),this._$content.append(this._postCommitView.render().el));var e=this.model.get("repositories").models;return 2===e.length&&e[1].trigger("selected",e[1]),this},onMobileModeChanged(e){this._repositorySelectionView.$el.detach().appendTo(e?this._$repoSelectorContainer:this.$mainSidebar)},_onRepositoryChanged(){var e=this.model.get("repository");null===e?(this._$newReviewRequestContainer.removeClass("js-repository-selected"),this.inMobileMode?_.delay(this._removeCommitViews.bind(this),400):this._removeCommitViews()):(this._$newReviewRequestContainer.addClass("js-repository-selected"),this._removeCommitViews(),e.get("filesOnly")?this._preCommitView=new i({model:new t({repository:e})}):(this._preCommitView=new RB.PreCommitView({model:new RB.UploadDiffModel({repository:e})}),e.get("supportsPostCommit")&&(this._postCommitView=new RB.PostCommitView({model:new RB.PostCommitModel({repository:e}),$scrollContainer:this._$content}))),this._$hint.hide(),this._$content.append(this._preCommitView.render().el),this._postCommitView&&this._$content.append(this._postCommitView.render().el))},_removeCommitViews(){this._preCommitView&&(this._preCommitView.remove(),this._preCommitView=null),this._postCommitView&&(this._postCommitView.remove(),this._postCommitView=null)},_onShowRepositoriesClicked(){this._repositorySelectionView.unselect()}})}}.call(this);
