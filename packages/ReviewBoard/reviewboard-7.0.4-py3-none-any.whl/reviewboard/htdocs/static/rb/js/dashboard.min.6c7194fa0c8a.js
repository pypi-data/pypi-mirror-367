!function(){var e;e=function(){},"function"==typeof define&&define.amd&&define(e),RB.DatagridPage=RB.Page.extend({defaults:_.defaults({count:0,localSiteName:null},RB.Page.prototype.defaults),rowObjectType:null,initialize(){this.selection=new Backbone.Collection([],{model:this.rowObjectType}),this.listenTo(this.selection,"add remove reset",()=>this.set("count",this.selection.length))},select(e){var t=this.get("localSiteName");this.selection.add({id:e,localSitePrefix:t?`s/${t}/`:null})},unselect(e){this.selection.remove(this.selection.get(e))},clearSelection(){this.selection.reset()}}),RB.Dashboard=RB.DatagridPage.extend({rowObjectType:RB.ReviewRequest,closeReviewRequests(e){var t=this.get("localSiteName");const a=t?`s/${t}/`:"",o=this.selection.clone(),r={[RB.ReviewRequest.CLOSE_SUBMITTED]:"close",[RB.ReviewRequest.CLOSE_DISCARDED]:"discard"};return new Promise((i,s)=>{RB.apiCall({url:""+SITE_ROOT+a+"r/_batch/",data:{batch:JSON.stringify({op:r[e.closeType],review_requests:o.map(e=>e.get("id"))})},success:e=>{this.selection.reset(),this.trigger("refresh"),i({successes:e.review_requests_closed,failures:e.review_requests_not_closed})},error:e=>{var t=e.responseJSON;t.stat?(this.trigger("refresh"),i({successes:t.review_requests_closed,failures:t.review_requests_not_closed})):(console.error("Failed to run close batch operation",e),s(e.statusText))}})})},updateVisibility(e){var t=this.get("localSiteName");const s=t?`s/${t}/`:"",a=this.selection.clone();return new Promise((t,i)=>{RB.apiCall({url:""+SITE_ROOT+s+"r/_batch/",data:{batch:JSON.stringify({op:e,review_requests:a.map(e=>e.get("id"))})},success:e=>{this.selection.reset(),this.trigger("refresh"),t({})},error:e=>{e.responseJSON.stat?(this.trigger("refresh"),t({})):(console.error("Failed to run visibility batch operation",e),i(e.statusText))}})})}}),RB.DatagridPageView=RB.PageView.extend({RELOAD_INTERVAL_MS:3e5,actionsViewType:null,events:{"change tbody input[data-checkbox-name=select]":"_onRowSelected","reloaded .datagrid-wrapper":"_setupDatagrid"},initialize(e={}){RB.PageView.prototype.initialize.call(this,e),this.periodicReload=!!e.periodicReload,this._reloadTimer=null,this._datagrid=null,this._$wrapper=null,this._$datagridBody=null,this._$datagridBodyContainer=null,this._menuShown=!1},renderPage(){return RB.InfoboxManagerView.getInstance().setPositioning(RB.ReviewRequestInfoboxView,{side:"Ll",LDistance:300,lDistance:20,yOffset:-20}),this.actionsViewType&&this._setupActionsDrawer(),this.listenTo(this.model,"refresh",()=>this._reload(!1)),this._setupDatagrid(),this.periodicReload&&this._startReloadTimer(),this},onResize(){null!==this._datagrid&&this._datagrid.resizeToFit()},_setupActionsDrawer(){var e=new RB.DrawerView;this.setDrawer(e),this._actionsView=new this.actionsViewType({model:this.model,datagridView:this}),this._actionsView.render().$el.appendTo(e.$content),this.listenTo(this.model,"change:count",(e,t)=>{t=0<t;t!==this._menuShown&&(t?(this._showActions(),this._stopReloadTimer()):(this._hideActions(),this.periodicReload&&this._startReloadTimer()),this._menuShown=t)})},_setupDatagrid(){this._$wrapper=this.$("#content_container"),this._$datagrid=this._$wrapper.find(".datagrid-wrapper"),this._datagrid=this._$datagrid.data("datagrid"),this._$main=this._$wrapper.find(".datagrid-main"),this.$("time.timesince").timesince(),this.$(".user").user_infobox(),this.$(".bugs").find("a").bug_infobox(),this.$(".review-request-link").review_request_infobox(),this.model.clearSelection(),_.each(this.$("input[data-checkbox-name=select]:checked"),e=>this.model.select($(e).data("object-id"))),RB.UserSession.instance.get("authenticated")&&(this._starManager=new RB.StarManagerView({model:new RB.StarManager,el:this._$main,datagridMode:!0})),this._$datagrid.on("reloaded",this._setupDatagrid.bind(this)).on("datagridDisplayModeChanged",this._reselectBatchCheckboxes.bind(this)),this._datagrid.resizeToFit()},_reselectBatchCheckboxes(){const i={};this.$("input[data-checkbox-name=select]").each((e,t)=>{t.checked&&(t.checked=!1),i[t.dataset.objectId]=t}),this.model.selection.each(e=>{i[e.id].checked=!0})},_showActions(){this.drawer.show()},_hideActions(){this.drawer.hide()},_startReloadTimer(){this._reloadTimer||(this._reloadTimer=setInterval(this._reload.bind(this),this.RELOAD_INTERVAL_MS))},_stopReloadTimer(){this._reloadTimer&&(window.clearInterval(this._reloadTimer),this._reloadTimer=null)},_reload(e){var t=this.$(".edit-columns");!1===e&&this._stopReloadTimer(),this.model.clearSelection(),t.width(t.width()-t.getExtents("b","lr")).html('<span class="djblets-o-spinner"></span>'),this._$wrapper.load(window.location+" #content_container",()=>{this.$(".datagrid-wrapper").datagrid(),this._setupDatagrid(),!1!==e&&this._startReloadTimer()})},_onRowSelected(e){var e=$(e.target),t=e.data("object-id");e.prop("checked")?this.model.select(t):this.model.unselect(t)}}),e=Backbone.View.extend({template:_.template(`<p class="rb-c-drawer__summary"></p>
<% if (!read_only) { %>
 <div class="rb-c-drawer__actions">
  <ul class="rb-c-drawer__action-group">
   <li class="rb-c-drawer__action js-action-discard">
    <%= close_discarded_text %>
   </li>
   <li class="rb-c-drawer__action js-action-submit">
    <%= close_submitted_text %>
   </li>
  </ul>
  <ul class="rb-c-drawer__action-group">
   <li class="rb-c-drawer__action js-action-archive">
    <%= archive_text %>
   </li>
   <% if (show_archived) { %>
    <li class="rb-c-drawer__action
               js-action-unarchive">
     <%= unarchive_text %>
    </li>
   <% } %>
  </ul>
  <ul class="rb-c-drawer__action-group">
   <li class="rb-c-drawer__action js-action-mute">
    <%= mute_text %></a></li>
   </li>
   <% if (show_archived) { %>
    <li class="rb-c-drawer__action js-action-unmute">
     <%= unmute_text %>
    </li>
   <% } %>
  </ul>
 </div>
<% } %>`),events:{"click .js-action-discard":"_onCloseDiscardedClicked","click .js-action-submit":"_onCloseCompletedClicked","click .js-action-archive":"_onArchiveClicked","click .js-action-unarchive":"_onUnarchiveClicked","click .js-action-mute":"_onMuteClicked","click .js-action-unmute":"_onUnmuteClicked"},render(){var e=(this.model.get("data")||{}).show_archived;this.$el.html(this.template({close_discarded_text:gettext("<b>Close</b> Discarded"),close_submitted_text:gettext("<b>Close</b> Completed"),archive_text:gettext("<b>Archive</b>"),mute_text:gettext("<b>Mute</b>"),read_only:RB.UserSession.instance.get("readOnly"),unarchive_text:gettext("<b>Unarchive</b>"),unmute_text:gettext("<b>Unmute</b>"),show_archived:e}));const i=this.$(".rb-c-drawer__summary");return this.listenTo(this.model,"change:count",(e,t)=>{i.text(interpolate(ngettext("%s review request selected","%s review requests selected",t),[t]))}),this},_onCloseDiscardedClicked(e){e.stopPropagation(),e.preventDefault(),this._closeReviewRequests(RB.ReviewRequest.CLOSE_DISCARDED)},_onCloseCompletedClicked(e){e.stopPropagation(),e.preventDefault(),this._closeReviewRequests(RB.ReviewRequest.CLOSE_SUBMITTED)},async _closeReviewRequests(e){try{var t;await this._confirmClose()&&(t=await this.model.closeReviewRequests({closeType:e}),this._showCloseResults(t.successes,t.failures))}catch(e){alert(interpolate(gettext("An error occurred when attempting to close review requests: %(err)s"),{err:e},!0))}},_showCloseResults(e,t){const i=$("<div>").append($("<p>").text(interpolate(ngettext("%s review request has been closed.","%s review requests have been closed.",e),[e])));0<t&&i.append($("<p>").text(interpolate(ngettext("%s review request could not be closed.","%s review requests could not be closed.",t),[t]))).append($("<p>").text(gettext("You may not have permission to close them."))),i.modalBox({title:gettext("Close review requests"),buttons:[Ink.paintComponent("Ink.Button",{type:"primary"},gettext("Close"))]}).on("close",()=>i.modalBox("destroy"))},_confirmClose:function(){return new Promise((t,e)=>{function i(e){t(e),s.modalBox("destroy")}const s=$("<div>").append($("<p>").text(gettext("If these review requests have unpublished drafts, they will be discarded."))).append($("<p>").text(gettext("Are you sure you want to close these review requests?"))).modalBox({title:gettext("Close review requests"),buttons:[Ink.paintComponent("Ink.Button",{onClick:()=>i(!1)},gettext("Cancel")),Ink.paintComponent("Ink.Button",{onClick:()=>i(!0),type:"danger"},gettext("Close Review Requests"))]}).on("close",()=>{s.modalBox("destroy"),t(!1)})})},_onArchiveClicked(e){e.stopPropagation(),e.preventDefault(),this.model.updateVisibility("archive")},_onUnarchiveClicked(e){e.stopPropagation(),e.preventDefault(),this.model.updateVisibility("unarchive")},_onMuteClicked(e){e.stopPropagation(),e.preventDefault();const t=$("<div>").append($("<p>").text(gettext("Are you sure you want to mute these review requests?"))).modalBox({title:gettext("Mute review requests"),buttons:[Ink.paintComponent("Ink.Button",{},gettext("Cancel")),Ink.paintComponent("Ink.Button",{onClick:()=>{this.model.updateVisibility("mute"),t.modalBox("destroy")},type:"danger"},gettext("Mute Review Requests"))]}).on("close",()=>t.modalBox("destroy"))},_onUnmuteClicked(e){e.stopPropagation(),e.preventDefault(),this.model.updateVisibility("unarchive")}}),RB.DashboardView=RB.DatagridPageView.extend({actionsViewType:e})}.call(this);
