{"version":3,"file":"baseCommentReplyModel.js","names":["RB","BaseCommentReply","BaseResource","extend","defaults","_","forceTextType","includeTextTypes","rawTextFields","replyToID","richText","text","prototype","attrToJsonMap","serializedAttrs","deserializedAttrs","serializers","JSONSerializers","onlyIfValue","onlyIfUnloaded","textType","destroyIfEmpty","get","destroy","apply","arguments","parseResourceData","rsp","raw_text_fields","data","call","text_type","validate","attrs","has","parentObject","strings","UNSET_PARENT_OBJECT"],"sources":["../../../../../../static/rb/js/resources/models/baseCommentReplyModel.es6.js"],"sourcesContent":["/**\n * The base class for a reply to a type of comment.\n *\n * This handles all the serialization/deserialization for comment replies.\n * Subclasses are expected to provide the rspNamespace, but don't need to\n * provide any additional functionality.\n *\n * Model Attributes:\n *     forceTextType (string):\n *         The text format type to request for text in all responses.\n *\n *     includeTextTypes (string):\n *         A comma-separated list of text types to include in the payload when\n *         syncing the model.\n *\n *     rawTextFields (object):\n *         The contents of the raw text fields, if forceTextType is used and\n *         the caller fetches or posts with includeTextTypes=raw. The keys in this\n *         object are the field names, and the values are the raw versions of\n *         those attributes.\n *\n *     replyToID (number):\n *         The ID of the comment that this reply is replying to.\n *\n *     richText (boolean):\n *         Whether the reply text is saved in rich text (Markdown) format.\n *\n *     text (string):\n *         The text of the reply.\n */\nRB.BaseCommentReply = RB.BaseResource.extend({\n    defaults() {\n        return _.defaults({\n            forceTextType: null,\n            includeTextTypes: null,\n            rawTextFields: {},\n            replyToID: null,\n            richText: false,\n            text: ''\n        }, RB.BaseResource.prototype.defaults());\n    },\n\n    attrToJsonMap: {\n        forceTextType: 'force_text_type',\n        includeTextTypes: 'include_text_types',\n        replyToID: 'reply_to_id',\n        richText: 'text_type'\n    },\n\n    serializedAttrs: [\n        'forceTextType',\n        'includeTextTypes',\n        'replyToID',\n        'richText',\n        'text'\n    ],\n\n    deserializedAttrs: [\n        'text'\n    ],\n\n    serializers: {\n        forceTextType: RB.JSONSerializers.onlyIfValue,\n        includeTextTypes: RB.JSONSerializers.onlyIfValue,\n        replyToID: RB.JSONSerializers.onlyIfUnloaded,\n        richText: RB.JSONSerializers.textType\n    },\n\n    /**\n     * Destroy the comment reply if and only if the text is empty.\n     *\n     * This works just like destroy(), and will in fact call destroy()\n     * with all provided arguments, but only if there's some actual\n     * text in the reply.\n     */\n    destroyIfEmpty() {\n        if (!this.get('text')) {\n            this.destroy.apply(this, arguments);\n        }\n    },\n\n    /**\n     * Deserialize comment reply data from an API payload.\n     *\n     * This must be overloaded by subclasses, and the parent version called.\n     *\n     * Args:\n     *     rsp (object):\n     *         The response from the server.\n     *\n     * Returns:\n     *     object:\n     *     Attribute values to set on the model.\n     */\n    parseResourceData(rsp) {\n        const rawTextFields = rsp.raw_text_fields || rsp;\n        const data = RB.BaseResource.prototype.parseResourceData.call(\n            this, rsp);\n\n        data.rawTextFields = rsp.raw_text_fields || {};\n        data.richText = (rawTextFields.text_type === 'markdown');\n\n        return data;\n    },\n\n    /**\n     * Validate the attributes of the model.\n     *\n     * By default, this validates that there's a parentObject set. It\n     * can be overridden to provide additional validation, but the parent\n     * function must be called.\n     *\n     * Args:\n     *     attrs (object):\n     *         Model attributes to validate.\n     *\n     * Returns:\n     *     string:\n     *     An error string, if appropriate.\n     */\n    validate(attrs) {\n        if (_.has(attrs, 'parentObject') && !attrs.parentObject) {\n            return RB.BaseResource.strings.UNSET_PARENT_OBJECT;\n        }\n    }\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,gBAAgB,GAAGD,EAAE,CAACE,YAAY,CAACC,MAAM,CAAC;EACzCC,QAAQA,CAAA,EAAG;IACP,OAAOC,CAAC,CAACD,QAAQ,CAAC;MACdE,aAAa,EAAE,IAAI;MACnBC,gBAAgB,EAAE,IAAI;MACtBC,aAAa,EAAE,CAAC,CAAC;MACjBC,SAAS,EAAE,IAAI;MACfC,QAAQ,EAAE,KAAK;MACfC,IAAI,EAAE;IACV,CAAC,EAAEX,EAAE,CAACE,YAAY,CAACU,SAAS,CAACR,QAAQ,CAAC,CAAC,CAAC;EAC5C,CAAC;EAEDS,aAAa,EAAE;IACXP,aAAa,EAAE,iBAAiB;IAChCC,gBAAgB,EAAE,oBAAoB;IACtCE,SAAS,EAAE,aAAa;IACxBC,QAAQ,EAAE;EACd,CAAC;EAEDI,eAAe,EAAE,CACb,eAAe,EACf,kBAAkB,EAClB,WAAW,EACX,UAAU,EACV,MAAM,CACT;EAEDC,iBAAiB,EAAE,CACf,MAAM,CACT;EAEDC,WAAW,EAAE;IACTV,aAAa,EAAEN,EAAE,CAACiB,eAAe,CAACC,WAAW;IAC7CX,gBAAgB,EAAEP,EAAE,CAACiB,eAAe,CAACC,WAAW;IAChDT,SAAS,EAAET,EAAE,CAACiB,eAAe,CAACE,cAAc;IAC5CT,QAAQ,EAAEV,EAAE,CAACiB,eAAe,CAACG;EACjC,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,cAAcA,CAAA,EAAG;IACb,IAAI,CAAC,IAAI,CAACC,GAAG,CAAC,MAAM,CAAC,EAAE;MACnB,IAAI,CAACC,OAAO,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IACvC;EACJ,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,iBAAiBA,CAACC,GAAG,EAAE;IACnB,MAAMnB,aAAa,GAAGmB,GAAG,CAACC,eAAe,IAAID,GAAG;IAChD,MAAME,IAAI,GAAG7B,EAAE,CAACE,YAAY,CAACU,SAAS,CAACc,iBAAiB,CAACI,IAAI,CACzD,IAAI,EAAEH,GAAG,CAAC;IAEdE,IAAI,CAACrB,aAAa,GAAGmB,GAAG,CAACC,eAAe,IAAI,CAAC,CAAC;IAC9CC,IAAI,CAACnB,QAAQ,GAAIF,aAAa,CAACuB,SAAS,KAAK,UAAW;IAExD,OAAOF,IAAI;EACf,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIG,QAAQA,CAACC,KAAK,EAAE;IACZ,IAAI5B,CAAC,CAAC6B,GAAG,CAACD,KAAK,EAAE,cAAc,CAAC,IAAI,CAACA,KAAK,CAACE,YAAY,EAAE;MACrD,OAAOnC,EAAE,CAACE,YAAY,CAACkC,OAAO,CAACC,mBAAmB;IACtD;EACJ;AACJ,CAAC,CAAC","ignoreList":[]}