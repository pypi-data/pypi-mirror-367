{"version":3,"file":"reviewRequestPageView.js","names":["commentTypeToIDPrefix","diff","file","screenshot","RB","ReviewRequestPage","ReviewRequestPageView","ReviewablePageView","extend","events","_","prototype","initialize","apply","arguments","_entryViews","_entryViewsByID","_rendered","_issueSummaryTableView","reviewRequest","model","get","diffFragmentQueue","DiffFragmentQueueView","reviewRequestPath","containerPrefix","queueName","el","document","getElementById","diffFragmentViewOptions","collapsible","listenTo","loadFragments","metadata","html","entryID","entryView","collapsed","isCollapsed","_onApplyingUpdate","listenToOnce","_reloadView","_onAppliedUpdate","collapse","expand","render","call","forEach","_onHashChanged","window","onhashchange","bind","IssueSummaryTableView","$","commentIssueManager","_onIssueClicked","addEntryView","entry","push","id","addEntry","queueLoadDiff","commentID","key","onFragmentRendered","queueLoad","openCommentEditor","contextType","contextID","i","length","reviewReplyEditorView","isFunction","getReviewReplyEditorView","view","$oldEl","$el","$newEl","setElement","replaceWith","beforeApplyUpdate","afterApplyUpdate","hash","getLocationHash","selector","includes","$anchor","is","requestAnimationFrame","scrollManager","scrollToElement","_onCollapseAllClicked","e","preventDefault","stopPropagation","_onExpandAllClicked","params","prefix","commentType","find","navigateTo","commentURL"],"sources":["../../../../../../static/rb/js/reviewRequestPage/views/reviewRequestPageView.es6.js"],"sourcesContent":["(function() {\n\n\nconst commentTypeToIDPrefix = {\n    diff: '',\n    file: 'f',\n    screenshot: 's',\n};\n\n\n/**\n * Manages the review request page.\n *\n * This manages all the reviews on the page, diff fragment loading, and\n * other functionality needed for the main review request page.\n */\nRB.ReviewRequestPage.ReviewRequestPageView = RB.ReviewablePageView.extend({\n    events: _.extend({\n        'click #collapse-all': '_onCollapseAllClicked',\n        'click #expand-all': '_onExpandAllClicked',\n    }, RB.ReviewablePageView.prototype.events),\n\n    /**\n     * Initialize the page.\n     */\n    initialize() {\n        RB.ReviewablePageView.prototype.initialize.apply(this, arguments);\n\n        this._entryViews = [];\n        this._entryViewsByID = {};\n        this._rendered = false;\n        this._issueSummaryTableView = null;\n\n        const reviewRequest = this.model.get('reviewRequest');\n\n        this.diffFragmentQueue = new RB.DiffFragmentQueueView({\n            reviewRequestPath: reviewRequest.get('reviewURL'),\n            containerPrefix: 'comment_container',\n            queueName: 'diff_fragments',\n            el: document.getElementById('content'),\n            diffFragmentViewOptions: {\n                collapsible: true,\n            },\n        });\n\n        /*\n         * Listen for when a new set of updates have been processed. After\n         * processing, this will attempt to load any new diff fragments that\n         * may have been added in any updated views.\n         */\n        this.listenTo(this.model, 'updatesProcessed',\n                      () => this.diffFragmentQueue.loadFragments());\n\n        /*\n         * Listen for updates to any entries on the page. When updated,\n         * we'll store the collapse state on the entry so we can re-apply it\n         * after. We listen to the other events that are part of the update so\n         * we can update the DOM and restore state at the correct time.\n         */\n        this.listenTo(this.model, 'applyingUpdate:entry', (metadata, html) => {\n            const entryID = metadata.entryID;\n            const entryView = this._entryViewsByID[entryID];\n            const collapsed = entryView.isCollapsed();\n\n            this._onApplyingUpdate(entryView, metadata);\n\n            this.listenToOnce(\n                this.model,\n                `appliedModelUpdate:entry:${entryID}`,\n                (metadata, html) => this._reloadView(entryView, html));\n\n            this.listenToOnce(\n                this.model,\n                `appliedUpdate:entry:${entryID}`,\n                metadata => {\n                    this._onAppliedUpdate(entryView, metadata);\n\n                    if (collapsed) {\n                        entryView.collapse();\n                    } else {\n                        entryView.expand();\n                    }\n                });\n        });\n    },\n\n    /**\n     * Render the page.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewRequestPageView:\n     *     This object, for chaining.\n     */\n    render() {\n        RB.ReviewablePageView.prototype.render.call(this);\n\n        /*\n         * Render each of the entries on the page.\n         */\n        this._entryViews.forEach(entryView => entryView.render());\n\n        /*\n         * Navigate to the right anchor on the page, if there's a valid hash\n         * in the URL. We'll also do this whenever it changes, if the browser\n         * supports this.\n         */\n        this._onHashChanged();\n\n        if ('onhashchange' in window) {\n            window.onhashchange = this._onHashChanged.bind(this);\n        }\n\n        /*\n         * Load all the diff fragments queued up in each review.\n         */\n        this.diffFragmentQueue.loadFragments();\n\n        /*\n         * Set up the Issue Summary Table and begin listening for related\n         * events.\n         */\n        this._issueSummaryTableView =\n            new RB.ReviewRequestPage.IssueSummaryTableView({\n                el: $('#issue-summary'),\n                model: this.model.commentIssueManager,\n            });\n\n        this._issueSummaryTableView.render();\n\n        this.listenTo(this._issueSummaryTableView,\n                      'issueClicked',\n                      this._onIssueClicked);\n        this.listenTo(this.model, 'appliedUpdate:issue-summary-table',\n                      (metadata, html) => {\n            this._reloadView(this._issueSummaryTableView, html);\n        });\n\n        this._rendered = true;\n\n        return this;\n    },\n\n    /**\n     * Add a new entry and view to the page.\n     *\n     * Args:\n     *     entryView (RB.ReviewRequestPage.EntryView):\n     *         The new entry's view to add.\n     */\n    addEntryView(entryView) {\n        const entry = entryView.model;\n\n        this._entryViews.push(entryView);\n        this._entryViewsByID[entry.id] = entryView;\n        this.model.addEntry(entry);\n\n        if (this._rendered) {\n            entryView.render();\n        }\n    },\n\n    /**\n     * Queue a diff fragment for loading.\n     *\n     * The diff fragment will be part of a comment made on a diff.\n     *\n     * Args:\n     *     commentID (string):\n     *         The ID of the comment to load the diff fragment for.\n     *\n     *     key (string):\n     *         Either a single filediff ID, or a pair (filediff ID and\n     *         interfilediff ID) separated by a hyphen.\n     *\n     *     onFragmentRendered (function, optional):\n     *         Optional callback for when the view for the fragment has\n     *         rendered. Contains the view as a parameter.\n     */\n    queueLoadDiff(commentID, key, onFragmentRendered) {\n        this.diffFragmentQueue.queueLoad(commentID, key, onFragmentRendered);\n    },\n\n    /**\n     * Open a comment editor for the given comment.\n     *\n     * This is used when clicking Reply from a comment dialog on another\n     * page.\n     *\n     * Args:\n     *     contextType (string):\n     *         The type of object being edited (such as ``body_top`` or\n     *         ``diff_comments``)\n     *\n     *     contextID (number, optional):\n     *         The ID of the comment being edited, if appropriate.\n     */\n    openCommentEditor(contextType, contextID) {\n        for (let i = 0; i < this._entryViews.length; i++) {\n            const entryView = this._entryViews[i];\n            const reviewReplyEditorView = (\n                _.isFunction(entryView.getReviewReplyEditorView)\n                ? entryView.getReviewReplyEditorView(contextType, contextID)\n                : null);\n\n            if (reviewReplyEditorView) {\n                reviewReplyEditorView.openCommentEditor();\n                break;\n            }\n        }\n    },\n\n    /**\n     * Reload the HTML for a view.\n     *\n     * This will replace the view's element with a new one consisting of the\n     * provided HTML. This is done in response to an update from the server.\n     *\n     * Args:\n     *     view (Backbone.View):\n     *         The view to set new HTML for.\n     *\n     *     html (string):\n     *         The new HTML to set.\n     */\n    _reloadView(view, html) {\n        const $oldEl = view.$el;\n        const $newEl = $(html);\n\n        view.setElement($newEl);\n        $oldEl.replaceWith($newEl);\n        view.render();\n    },\n\n    /**\n     * Handler for when a new update is being applied to a view.\n     *\n     * This will call the ``beforeApplyUpdate`` method on the view, if it\n     * exists. This is called before the model's equivalent handler.\n     *\n     * Args:\n     *     view (Backbone.View):\n     *         The view being updated.\n     *\n     *     metadata (object):\n     *         The metadata set in the update.\n     */\n    _onApplyingUpdate(view, metadata) {\n        if (view && _.isFunction(view.beforeApplyUpdate)) {\n            view.beforeApplyUpdate(metadata);\n        }\n    },\n\n    /**\n     * Handler for when a new update has been applied to a view.\n     *\n     * This will call the ``afterApplyUpdate`` method on the view, if it\n     * exists. This is called after the model's equivalent handler.\n     *\n     * Args:\n     *     view (Backbone.View):\n     *         The view that has been updated.\n     *\n     *     metadata (object):\n     *         The metadata set in the update.\n     */\n    _onAppliedUpdate(view, metadata) {\n        if (view && _.isFunction(view.afterApplyUpdate)) {\n            view.afterApplyUpdate(metadata);\n        }\n    },\n\n    /**\n     * Handler for when the location hash changes.\n     *\n     * This will attempt to locate a proper anchor point for the given\n     * hash, if one is provided, and scroll down to that anchor. The\n     * scrolling will take any docked floating banners (the review draft,\n     * specifically) into consideration to ensure the entirety of the comment\n     * is shown on-screen.\n     */\n    _onHashChanged() {\n        const hash = RB.getLocationHash();\n        let selector = null;\n\n        if (hash !== '') {\n            if (hash.includes('comment')) {\n                selector = `a[name=${hash}]`;\n            } else {\n                selector = `#${hash}`;\n            }\n        }\n\n        if (!selector) {\n            return;\n        }\n\n        /*\n         * If trying to link to some anchor in some entry, we'll expand the\n         * first entry containing that anchor.\n         */\n        for (let i = 0; i < this._entryViews.length; i++) {\n            const entryView = this._entryViews[i];\n            const $anchor = entryView.$el.is(selector)\n                            ? entryView.$el\n                            : entryView.$(selector);\n\n            if ($anchor.length > 0) {\n                /*\n                 * We found the entry containing the specified anchor.\n                 * Expand it and stop searching the rest of the entries.\n                 */\n                entryView.expand();\n\n                /*\n                 * Scroll down to the particular anchor, now that the entry\n                 * is expanded.\n                 */\n                requestAnimationFrame(\n                    () => RB.scrollManager.scrollToElement($anchor));\n\n                break;\n            }\n        }\n    },\n\n    /**\n     * Handle a press on the Collapse All button.\n     *\n     * Collapses each entry.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the action.\n     */\n    _onCollapseAllClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._entryViews.forEach(entryView => entryView.collapse());\n    },\n\n    /**\n     * Handle a press on the Expand All button.\n     *\n     * Expands each entry.\n     *\n     * Args:\n     *     e (Event):\n     *         The event which triggered the action.\n     */\n    _onExpandAllClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this._entryViews.forEach(entryView => entryView.expand());\n    },\n\n    /**\n     * Handler for when an issue in the issue summary table is clicked.\n     *\n     * This will expand the review entry that contains the comment for the\n     * issue, and navigate to the comment.\n     *\n     * Args:\n     *     params (object):\n     *         Parameters passed to the event handler.\n     */\n    _onIssueClicked(params) {\n        const prefix = commentTypeToIDPrefix[params.commentType];\n        const selector = `#${prefix}comment${params.commentID}`;\n\n        this._entryViews.forEach(entryView => {\n            if (entryView.$el.find(selector).length > 0) {\n                entryView.expand();\n            }\n        });\n\n        RB.navigateTo(params.commentURL);\n    },\n});\n\n\n})();\n"],"mappings":";;AAAA,CAAC,YAAW;EAGZ,MAAMA,qBAAqB,GAAG;IAC1BC,IAAI,EAAE,EAAE;IACRC,IAAI,EAAE,GAAG;IACTC,UAAU,EAAE;EAChB,CAAC;;EAGD;AACA;AACA;AACA;AACA;AACA;EACAC,EAAE,CAACC,iBAAiB,CAACC,qBAAqB,GAAGF,EAAE,CAACG,kBAAkB,CAACC,MAAM,CAAC;IACtEC,MAAM,EAAEC,CAAC,CAACF,MAAM,CAAC;MACb,qBAAqB,EAAE,uBAAuB;MAC9C,mBAAmB,EAAE;IACzB,CAAC,EAAEJ,EAAE,CAACG,kBAAkB,CAACI,SAAS,CAACF,MAAM,CAAC;IAE1C;AACJ;AACA;IACIG,UAAUA,CAAA,EAAG;MACTR,EAAE,CAACG,kBAAkB,CAACI,SAAS,CAACC,UAAU,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;MAEjE,IAAI,CAACC,WAAW,GAAG,EAAE;MACrB,IAAI,CAACC,eAAe,GAAG,CAAC,CAAC;MACzB,IAAI,CAACC,SAAS,GAAG,KAAK;MACtB,IAAI,CAACC,sBAAsB,GAAG,IAAI;MAElC,MAAMC,aAAa,GAAG,IAAI,CAACC,KAAK,CAACC,GAAG,CAAC,eAAe,CAAC;MAErD,IAAI,CAACC,iBAAiB,GAAG,IAAIlB,EAAE,CAACmB,qBAAqB,CAAC;QAClDC,iBAAiB,EAAEL,aAAa,CAACE,GAAG,CAAC,WAAW,CAAC;QACjDI,eAAe,EAAE,mBAAmB;QACpCC,SAAS,EAAE,gBAAgB;QAC3BC,EAAE,EAAEC,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC;QACtCC,uBAAuB,EAAE;UACrBC,WAAW,EAAE;QACjB;MACJ,CAAC,CAAC;;MAEF;AACR;AACA;AACA;AACA;MACQ,IAAI,CAACC,QAAQ,CAAC,IAAI,CAACZ,KAAK,EAAE,kBAAkB,EAC9B,MAAM,IAAI,CAACE,iBAAiB,CAACW,aAAa,CAAC,CAAC,CAAC;;MAE3D;AACR;AACA;AACA;AACA;AACA;MACQ,IAAI,CAACD,QAAQ,CAAC,IAAI,CAACZ,KAAK,EAAE,sBAAsB,EAAE,CAACc,QAAQ,EAAEC,IAAI,KAAK;QAClE,MAAMC,OAAO,GAAGF,QAAQ,CAACE,OAAO;QAChC,MAAMC,SAAS,GAAG,IAAI,CAACrB,eAAe,CAACoB,OAAO,CAAC;QAC/C,MAAME,SAAS,GAAGD,SAAS,CAACE,WAAW,CAAC,CAAC;QAEzC,IAAI,CAACC,iBAAiB,CAACH,SAAS,EAAEH,QAAQ,CAAC;QAE3C,IAAI,CAACO,YAAY,CACb,IAAI,CAACrB,KAAK,EACV,4BAA4BgB,OAAO,EAAE,EACrC,CAACF,QAAQ,EAAEC,IAAI,KAAK,IAAI,CAACO,WAAW,CAACL,SAAS,EAAEF,IAAI,CAAC,CAAC;QAE1D,IAAI,CAACM,YAAY,CACb,IAAI,CAACrB,KAAK,EACV,uBAAuBgB,OAAO,EAAE,EAChCF,QAAQ,IAAI;UACR,IAAI,CAACS,gBAAgB,CAACN,SAAS,EAAEH,QAAQ,CAAC;UAE1C,IAAII,SAAS,EAAE;YACXD,SAAS,CAACO,QAAQ,CAAC,CAAC;UACxB,CAAC,MAAM;YACHP,SAAS,CAACQ,MAAM,CAAC,CAAC;UACtB;QACJ,CAAC,CAAC;MACV,CAAC,CAAC;IACN,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;IACIC,MAAMA,CAAA,EAAG;MACL1C,EAAE,CAACG,kBAAkB,CAACI,SAAS,CAACmC,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC;;MAEjD;AACR;AACA;MACQ,IAAI,CAAChC,WAAW,CAACiC,OAAO,CAACX,SAAS,IAAIA,SAAS,CAACS,MAAM,CAAC,CAAC,CAAC;;MAEzD;AACR;AACA;AACA;AACA;MACQ,IAAI,CAACG,cAAc,CAAC,CAAC;MAErB,IAAI,cAAc,IAAIC,MAAM,EAAE;QAC1BA,MAAM,CAACC,YAAY,GAAG,IAAI,CAACF,cAAc,CAACG,IAAI,CAAC,IAAI,CAAC;MACxD;;MAEA;AACR;AACA;MACQ,IAAI,CAAC9B,iBAAiB,CAACW,aAAa,CAAC,CAAC;;MAEtC;AACR;AACA;AACA;MACQ,IAAI,CAACf,sBAAsB,GACvB,IAAId,EAAE,CAACC,iBAAiB,CAACgD,qBAAqB,CAAC;QAC3C1B,EAAE,EAAE2B,CAAC,CAAC,gBAAgB,CAAC;QACvBlC,KAAK,EAAE,IAAI,CAACA,KAAK,CAACmC;MACtB,CAAC,CAAC;MAEN,IAAI,CAACrC,sBAAsB,CAAC4B,MAAM,CAAC,CAAC;MAEpC,IAAI,CAACd,QAAQ,CAAC,IAAI,CAACd,sBAAsB,EAC3B,cAAc,EACd,IAAI,CAACsC,eAAe,CAAC;MACnC,IAAI,CAACxB,QAAQ,CAAC,IAAI,CAACZ,KAAK,EAAE,mCAAmC,EAC/C,CAACc,QAAQ,EAAEC,IAAI,KAAK;QAC9B,IAAI,CAACO,WAAW,CAAC,IAAI,CAACxB,sBAAsB,EAAEiB,IAAI,CAAC;MACvD,CAAC,CAAC;MAEF,IAAI,CAAClB,SAAS,GAAG,IAAI;MAErB,OAAO,IAAI;IACf,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;IACIwC,YAAYA,CAACpB,SAAS,EAAE;MACpB,MAAMqB,KAAK,GAAGrB,SAAS,CAACjB,KAAK;MAE7B,IAAI,CAACL,WAAW,CAAC4C,IAAI,CAACtB,SAAS,CAAC;MAChC,IAAI,CAACrB,eAAe,CAAC0C,KAAK,CAACE,EAAE,CAAC,GAAGvB,SAAS;MAC1C,IAAI,CAACjB,KAAK,CAACyC,QAAQ,CAACH,KAAK,CAAC;MAE1B,IAAI,IAAI,CAACzC,SAAS,EAAE;QAChBoB,SAAS,CAACS,MAAM,CAAC,CAAC;MACtB;IACJ,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIgB,aAAaA,CAACC,SAAS,EAAEC,GAAG,EAAEC,kBAAkB,EAAE;MAC9C,IAAI,CAAC3C,iBAAiB,CAAC4C,SAAS,CAACH,SAAS,EAAEC,GAAG,EAAEC,kBAAkB,CAAC;IACxE,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIE,iBAAiBA,CAACC,WAAW,EAAEC,SAAS,EAAE;MACtC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACvD,WAAW,CAACwD,MAAM,EAAED,CAAC,EAAE,EAAE;QAC9C,MAAMjC,SAAS,GAAG,IAAI,CAACtB,WAAW,CAACuD,CAAC,CAAC;QACrC,MAAME,qBAAqB,GACvB9D,CAAC,CAAC+D,UAAU,CAACpC,SAAS,CAACqC,wBAAwB,CAAC,GAC9CrC,SAAS,CAACqC,wBAAwB,CAACN,WAAW,EAAEC,SAAS,CAAC,GAC1D,IAAK;QAEX,IAAIG,qBAAqB,EAAE;UACvBA,qBAAqB,CAACL,iBAAiB,CAAC,CAAC;UACzC;QACJ;MACJ;IACJ,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIzB,WAAWA,CAACiC,IAAI,EAAExC,IAAI,EAAE;MACpB,MAAMyC,MAAM,GAAGD,IAAI,CAACE,GAAG;MACvB,MAAMC,MAAM,GAAGxB,CAAC,CAACnB,IAAI,CAAC;MAEtBwC,IAAI,CAACI,UAAU,CAACD,MAAM,CAAC;MACvBF,MAAM,CAACI,WAAW,CAACF,MAAM,CAAC;MAC1BH,IAAI,CAAC7B,MAAM,CAAC,CAAC;IACjB,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIN,iBAAiBA,CAACmC,IAAI,EAAEzC,QAAQ,EAAE;MAC9B,IAAIyC,IAAI,IAAIjE,CAAC,CAAC+D,UAAU,CAACE,IAAI,CAACM,iBAAiB,CAAC,EAAE;QAC9CN,IAAI,CAACM,iBAAiB,CAAC/C,QAAQ,CAAC;MACpC;IACJ,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIS,gBAAgBA,CAACgC,IAAI,EAAEzC,QAAQ,EAAE;MAC7B,IAAIyC,IAAI,IAAIjE,CAAC,CAAC+D,UAAU,CAACE,IAAI,CAACO,gBAAgB,CAAC,EAAE;QAC7CP,IAAI,CAACO,gBAAgB,CAAChD,QAAQ,CAAC;MACnC;IACJ,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIe,cAAcA,CAAA,EAAG;MACb,MAAMkC,IAAI,GAAG/E,EAAE,CAACgF,eAAe,CAAC,CAAC;MACjC,IAAIC,QAAQ,GAAG,IAAI;MAEnB,IAAIF,IAAI,KAAK,EAAE,EAAE;QACb,IAAIA,IAAI,CAACG,QAAQ,CAAC,SAAS,CAAC,EAAE;UAC1BD,QAAQ,GAAG,UAAUF,IAAI,GAAG;QAChC,CAAC,MAAM;UACHE,QAAQ,GAAG,IAAIF,IAAI,EAAE;QACzB;MACJ;MAEA,IAAI,CAACE,QAAQ,EAAE;QACX;MACJ;;MAEA;AACR;AACA;AACA;MACQ,KAAK,IAAIf,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACvD,WAAW,CAACwD,MAAM,EAAED,CAAC,EAAE,EAAE;QAC9C,MAAMjC,SAAS,GAAG,IAAI,CAACtB,WAAW,CAACuD,CAAC,CAAC;QACrC,MAAMiB,OAAO,GAAGlD,SAAS,CAACwC,GAAG,CAACW,EAAE,CAACH,QAAQ,CAAC,GACxBhD,SAAS,CAACwC,GAAG,GACbxC,SAAS,CAACiB,CAAC,CAAC+B,QAAQ,CAAC;QAEvC,IAAIE,OAAO,CAAChB,MAAM,GAAG,CAAC,EAAE;UACpB;AAChB;AACA;AACA;UACgBlC,SAAS,CAACQ,MAAM,CAAC,CAAC;;UAElB;AAChB;AACA;AACA;UACgB4C,qBAAqB,CACjB,MAAMrF,EAAE,CAACsF,aAAa,CAACC,eAAe,CAACJ,OAAO,CAAC,CAAC;UAEpD;QACJ;MACJ;IACJ,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIK,qBAAqBA,CAACC,CAAC,EAAE;MACrBA,CAAC,CAACC,cAAc,CAAC,CAAC;MAClBD,CAAC,CAACE,eAAe,CAAC,CAAC;MAEnB,IAAI,CAAChF,WAAW,CAACiC,OAAO,CAACX,SAAS,IAAIA,SAAS,CAACO,QAAQ,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIoD,mBAAmBA,CAACH,CAAC,EAAE;MACnBA,CAAC,CAACC,cAAc,CAAC,CAAC;MAClBD,CAAC,CAACE,eAAe,CAAC,CAAC;MAEnB,IAAI,CAAChF,WAAW,CAACiC,OAAO,CAACX,SAAS,IAAIA,SAAS,CAACQ,MAAM,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACIW,eAAeA,CAACyC,MAAM,EAAE;MACpB,MAAMC,MAAM,GAAGlG,qBAAqB,CAACiG,MAAM,CAACE,WAAW,CAAC;MACxD,MAAMd,QAAQ,GAAG,IAAIa,MAAM,UAAUD,MAAM,CAAClC,SAAS,EAAE;MAEvD,IAAI,CAAChD,WAAW,CAACiC,OAAO,CAACX,SAAS,IAAI;QAClC,IAAIA,SAAS,CAACwC,GAAG,CAACuB,IAAI,CAACf,QAAQ,CAAC,CAACd,MAAM,GAAG,CAAC,EAAE;UACzClC,SAAS,CAACQ,MAAM,CAAC,CAAC;QACtB;MACJ,CAAC,CAAC;MAEFzC,EAAE,CAACiG,UAAU,CAACJ,MAAM,CAACK,UAAU,CAAC;IACpC;EACJ,CAAC,CAAC;AAGF,CAAC,EAAE,CAAC","ignoreList":[]}