{"version":3,"file":"baseStatusUpdatesEntryView.js","names":["ParentView","RB","ReviewRequestPage","EntryView","BaseStatusUpdatesEntryView","extend","CHECK_UPDATES_MS","events","_","defaults","prototype","initialize","apply","arguments","_reviewViews","beforeApplyUpdate","model","stopWatchingUpdates","diffFragmentQueue","PageManager","getPage","diffCommentsData","get","i","length","saveFragment","render","call","map","review","$reviewEl","$","id","view","ReviewView","el","entryModel","$bannerFloatContainer","$bannerParent","children","bannerNoFloatContainerClass","setupReviewView","watchUpdates","_onRequestRunClicked","e","$target","target","updateId","data","reviewRequestId","apiCall","type","prefix","path","buttons","state","success"],"sources":["../../../../../../static/rb/js/reviewRequestPage/views/baseStatusUpdatesEntryView.es6.js"],"sourcesContent":["(function() {\n\n\nconst ParentView = RB.ReviewRequestPage.EntryView;\n\n\n/**\n * Base class for an entry that can contain status updates.\n *\n * This manages the views for each review on the status updates, and watches\n * for updates to the entry so that any completed status updates can be\n * shown without a page reload.\n */\nRB.ReviewRequestPage.BaseStatusUpdatesEntryView = ParentView.extend({\n    CHECK_UPDATES_MS: 2 * 1000,  // 2 seconds\n\n    events: _.defaults({\n        'click .status-update-request-run': '_onRequestRunClicked',\n    }, ParentView.prototype.events),\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        ParentView.prototype.initialize.apply(this, arguments);\n\n        this._reviewViews = null;\n    },\n\n    /**\n     * Save state before applying an update.\n     *\n     * This will save all the loaded diff fragments on the entry so that\n     * they'll be loaded from cache when processing the fragments again for\n     * the entry after reload.\n     */\n    beforeApplyUpdate() {\n        /*\n         * Stop watching for any updates. If there are still status updates\n         * pending, render() will re-register for updates.\n         */\n        this.model.stopWatchingUpdates();\n\n        /*\n         * Store any diff fragments for the reload, so we don't have to\n         * fetch them again from the server.\n         */\n        const diffFragmentQueue = RB.PageManager.getPage().diffFragmentQueue;\n        const diffCommentsData = this.model.get('diffCommentsData') || [];\n\n        for (let i = 0; i < diffCommentsData.length; i++) {\n            diffFragmentQueue.saveFragment(diffCommentsData[i][0]);\n        }\n    },\n\n    /**\n     * Render the entry.\n     *\n     * This will construct a view for each review associated with a status\n     * update.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.BaseStatusUpdatesEntryView:\n     *     This object, for chaining.\n     */\n    render() {\n        ParentView.prototype.render.call(this);\n\n        this._reviewViews = this.model.get('reviews').map(review => {\n            const $reviewEl = this.$(`#review${review.id}`);\n\n            const view = new RB.ReviewRequestPage.ReviewView({\n                el: $reviewEl,\n                model: review,\n                entryModel: this.model,\n                $bannerFloatContainer: $reviewEl,\n                $bannerParent: $reviewEl.children('.banners'),\n                bannerNoFloatContainerClass: 'collapsed',\n            });\n            view.render();\n\n            this.setupReviewView(view);\n\n            return view;\n        });\n\n        if (this.model.get('pendingStatusUpdates')) {\n            this.model.watchUpdates(this.CHECK_UPDATES_MS);\n        }\n\n        return this;\n    },\n\n    /**\n     * Set up a review view.\n     *\n     * Subclasses can override this to provide additional setup for review\n     * views rendered on the page.\n     *\n     * Args:\n     *     view (RB.ReviewRequestPage.ReviewView):\n     *         The review view being set up.\n     */\n    setupReviewView(view) {\n    },\n\n    /**\n     * Run the tool associated with this status update.\n     *\n     * This will request a run/re-run using the status update API and\n     * immediately force an update of the model to check for the newly pending\n     * status updates.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The event that triggered the action.\n     */\n    _onRequestRunClicked(e) {\n        const $target = $(e.target);\n        const updateId = $target.data('statusUpdateId');\n        const reviewRequestId = this.model.get('reviewRequestId');\n\n        RB.apiCall({\n            type: 'PUT',\n            prefix: this.model.get('localSitePrefix') || '',\n            path: `/review-requests/${reviewRequestId}/status-updates/${updateId}/`,\n            buttons: $target,\n            data: {\n                state: 'request-run',\n            },\n            success: () => {\n                /*\n                 * Force at least one update immediately to fetch the new\n                 * pending state.\n                 */\n                this.model.stopWatchingUpdates();\n                this.model.watchUpdates(0);\n            },\n        });\n    },\n});\n\n\n})();\n"],"mappings":"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","ignoreList":[]}