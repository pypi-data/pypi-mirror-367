{"version":3,"file":"inlineFormGroupView.js","names":["RB","Admin","InlineFormGroupView","Backbone","View","extend","events","initialize","_$addButton","_$inlineTemplate","_$inlines","_inlineViews","render","model","prefix","get","$inlines","$el","children","console","assert","length","$actions","$addButton","detach","removeClass","$initialForms","$maxNumForms","$minNumForms","$totalForms","maxInlines","val","set","initialInlines","parseInt","minInlines","listenTo","inlines","toggle","canAddInline","_onInlineRemoved","each","index","el","_setupInlineForm","isInitial","addInlineForm","newIndex","$inline","clone","view","append","trigger","attrs","inline","InlineForm","_","inlineView","InlineFormView","push","add","splice","remove","forEach","i","_onAddClicked","e","preventDefault","stopPropagation"],"sources":["../../../../../../static/rb/js/admin/views/inlineFormGroupView.es6.js"],"sourcesContent":["/**\n * A view for managing a group of inline forms for related model objects.\n *\n * This takes care of managing the form data and rendering of multiple inline\n * forms, allowing the addition of new inline forms (up to the configured\n * limit for the model), ensuring there's a minimum available, and tracking\n * what needs to be sent to the server when saving the model.\n *\n * There's an expectation that the last form provided in the group is going to\n * be a template used for any new forms that are added.\n */\nRB.Admin.InlineFormGroupView = Backbone.View.extend({\n    events: {\n        'click .rb-c-admin-form-inline-group__add-action': '_onAddClicked',\n    },\n\n    /**\n     * Initialize the view.\n     */\n    initialize() {\n        this._$addButton = null;\n        this._$inlineTemplate = null;\n        this._$inlines = null;\n        this._inlineViews = [];\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.Admin.InlineFormGroupView:\n     *     This object, for chaining.\n     */\n    render() {\n        const model = this.model;\n        const prefix = model.get('prefix');\n\n        const $inlines = this.$el.children(\n            '.rb-c-admin-form-inline-group__inlines');\n        console.assert($inlines.length === 1);\n\n        const $actions = this.$el.children(\n            '.rb-c-admin-form-inline-group__actions');\n        console.assert($actions.length === 1);\n\n        const $addButton = $actions.children(\n            '.rb-c-admin-form-inline-group__add-action');\n        console.assert($addButton.length === 1);\n\n        this._$inlines = $inlines;\n\n        /*\n         * Set up and store the template for later use. We'll remove it from\n         * the DOM so we don't end up binding anything to it.\n         */\n        this._$inlineTemplate = $inlines.children('.-is-template')\n            .detach()\n            .removeClass('-is-template');\n        console.assert(this._$inlineTemplate.length === 1);\n\n        /*\n         * Populate the state in the model.\n         *\n         * The form field names come from Django's own ManagementForm\n         * (django.forms.formsets), and are outside our control. They may need\n         * to be updated if Django reworks their naming or logic, though this\n         * is probably unlikely.\n         */\n        const $initialForms = $inlines.children(`#id_${prefix}-INITIAL_FORMS`);\n        const $maxNumForms = $inlines.children(`#id_${prefix}-MAX_NUM_FORMS`);\n        const $minNumForms = $inlines.children(`#id_${prefix}-MIN_NUM_FORMS`);\n        const $totalForms = $inlines.children(`#id_${prefix}-TOTAL_FORMS`);\n\n        console.assert($initialForms.length === 1);\n        console.assert($maxNumForms.length === 1);\n        console.assert($minNumForms.length === 1);\n        console.assert($totalForms.length === 1);\n\n        const maxInlines = $maxNumForms.val();\n\n        model.set({\n            initialInlines: parseInt($initialForms.val(), 10),\n            maxInlines: maxInlines === '' ? null : parseInt(maxInlines, 10),\n            minInlines: parseInt($minNumForms.val(), 10),\n        });\n\n        /*\n         * Update the total forms state and the visibility of the Add button\n         * whenever we change the number of inlines in the group. This will also\n         * update just below when we first populate the value on the model.\n         */\n        this.listenTo(model.inlines, 'update', () => {\n            $addButton.toggle(model.canAddInline());\n            $totalForms.val(model.inlines.length);\n        });\n\n        this.listenTo(model.inlines, 'remove', this._onInlineRemoved);\n\n        /*\n         * Create and track views for every inline.\n         */\n        $inlines.children('.rb-c-admin-form-inline').each((index, el) => {\n            this._setupInlineForm(el, {\n                index: index,\n                isInitial: true,\n            });\n        });\n\n        console.assert(\n            parseInt($totalForms.val(), 10) === model.inlines.length);\n\n        return this;\n    },\n\n    /**\n     * Add a new inline form.\n     *\n     * This will add a new inline form and register it, scheduling it to be\n     * sent to the server when the main form is submitted.\n     *\n     * Returns:\n     *     RB.Admin.InlineFormView:\n     *     The new inline form view.\n     */\n    addInlineForm() {\n        const newIndex = this.model.inlines.length;\n\n        const $inline = this._$inlineTemplate.clone();\n        const view = this._setupInlineForm($inline[0]);\n        view.model.set('index', newIndex);\n\n        this._$inlines.append($inline);\n\n        this.trigger('inlineFormAdded', view);\n\n        return view;\n    },\n\n    /**\n     * Set up an inline form.\n     *\n     * This will construct a :js:class:`RB.Admin.InlineFormView` for the\n     * element, show it, and update any form state.\n     *\n     * Args:\n     *     el (Element):\n     *         The element representing the inline form.\n     *\n     *     attrs (object):\n     *         Attributes for the model.\n     *\n     * Returns:\n     *     RB.Admin.InlineFormView:\n     *     The new view for the element.\n     */\n    _setupInlineForm(el, attrs) {\n        const model = this.model;\n\n        const inline = new RB.Admin.InlineForm(_.extend({\n            prefix: model.get('prefix'),\n        }, attrs));\n\n        const inlineView = new RB.Admin.InlineFormView({\n            el: el,\n            model: inline,\n        });\n        inlineView.render();\n\n        this._inlineViews.push(inlineView);\n        model.inlines.add(inline);\n\n        return inlineView;\n    },\n\n    /**\n     * Handle the removal of an inline form.\n     *\n     * This will remove the inline form and its view from the page, and update\n     * the indexes of all other inline forms.\n     *\n     * Args:\n     *     inline (RB.Admin.InlineForm):\n     *         The inline form that was removed.\n     */\n    _onInlineRemoved(inline) {\n        const index = inline.get('index');\n        const inlineView = this._inlineViews[index];\n\n        this._inlineViews.splice(index, 1);\n        inlineView.remove();\n\n        /* Update the indexes of all remaining form views. */\n        this._inlineViews.forEach((view, i) => view.model.set('index', i));\n\n        this.trigger('inlineFormRemoved', inlineView);\n    },\n\n    /**\n     * Handle an click on Add <inline name>.\n     *\n     * This will add a new inline form view.\n     *\n     * Args:\n     *     e (jQuery.Event):\n     *         The click event.\n     */\n    _onAddClicked(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.addInlineForm();\n    },\n});\n"],"mappings":"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","ignoreList":[]}