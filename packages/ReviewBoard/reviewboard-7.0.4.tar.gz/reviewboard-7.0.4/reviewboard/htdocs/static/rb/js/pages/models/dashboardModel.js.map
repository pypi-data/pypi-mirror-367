{"version":3,"file":"dashboardModel.js","names":["RB","Dashboard","DatagridPage","extend","rowObjectType","ReviewRequest","closeReviewRequests","options","localSiteName","get","localSitePrefix","reviewRequests","selection","clone","closeTypeToOp","CLOSE_SUBMITTED","CLOSE_DISCARDED","Promise","resolve","reject","apiCall","url","SITE_ROOT","data","batch","JSON","stringify","op","closeType","review_requests","map","reviewRequest","success","rsp","reset","trigger","successes","review_requests_closed","failures","review_requests_not_closed","error","xhr","responseJSON","stat","console","statusText","updateVisibility","visibility"],"sources":["../../../../../../static/rb/js/pages/models/dashboardModel.es6.js"],"sourcesContent":["/**\n * Models the dashboard and its operations.\n *\n * This will keep track of any selected review requests, and can\n * perform operations on them.\n */\nRB.Dashboard = RB.DatagridPage.extend({\n    rowObjectType: RB.ReviewRequest,\n\n    /**\n     * Close all selected review requests.\n     *\n     * This will keep track of all the successes and failures and report\n     * them back to the caller once completed.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the operation.\n     *\n     * Option Args:\n     *     closeType (string):\n     *         The close type to use (submitted or discarded).\n     *\n     *     onDone (function):\n     *         A function to call when the operation is complete.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    closeReviewRequests(options) {\n        const localSiteName = this.get('localSiteName');\n        const localSitePrefix = localSiteName ? `s/${localSiteName}/` : '';\n        const reviewRequests = this.selection.clone();\n\n        const closeTypeToOp = {\n            [RB.ReviewRequest.CLOSE_SUBMITTED]: 'close',\n            [RB.ReviewRequest.CLOSE_DISCARDED]: 'discard',\n        };\n\n        return new Promise((resolve, reject) => {\n            RB.apiCall({\n                url: `${SITE_ROOT}${localSitePrefix}r/_batch/`,\n                data: {\n                    batch: JSON.stringify({\n                        op: closeTypeToOp[options.closeType],\n                        review_requests: reviewRequests.map(\n                            reviewRequest => reviewRequest.get('id')),\n                    }),\n                },\n                success: (rsp) => {\n                    this.selection.reset();\n                    this.trigger('refresh');\n\n                    resolve({\n                        successes: rsp.review_requests_closed,\n                        failures: rsp.review_requests_not_closed,\n                    });\n                },\n                error: xhr => {\n                    const rsp = xhr.responseJSON;\n\n                    if (rsp.stat) {\n                        this.trigger('refresh');\n                        resolve({\n                            successes: rsp.review_requests_closed,\n                            failures: rsp.review_requests_not_closed,\n                        });\n                    } else {\n                        console.error('Failed to run close batch operation', xhr);\n                        reject(xhr.statusText);\n                    }\n                },\n            });\n        });\n    },\n\n    /**\n     * Update the visibility of the selected review requests.\n     *\n     * Args:\n     *     visibility (string):\n     *         The visibility state to set (one of \"archive\", \"mute\", or\n     *         \"unarchive\").\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves when the operation is complete.\n     */\n    updateVisibility(visibility) {\n        const localSiteName = this.get('localSiteName');\n        const localSitePrefix = localSiteName ? `s/${localSiteName}/` : '';\n        const reviewRequests = this.selection.clone();\n\n        return new Promise((resolve, reject) => {\n            RB.apiCall({\n                url: `${SITE_ROOT}${localSitePrefix}r/_batch/`,\n                data: {\n                    batch: JSON.stringify({\n                        op: visibility,\n                        review_requests: reviewRequests.map(\n                            reviewRequest => reviewRequest.get('id')),\n                    }),\n                },\n                success: rsp => {\n                    this.selection.reset();\n                    this.trigger('refresh');\n\n                    resolve({\n                    });\n                },\n                error: xhr => {\n                    const rsp = xhr.responseJSON;\n\n                    if (rsp.stat) {\n                        this.trigger('refresh');\n                        resolve({\n                        });\n                    } else {\n                        console.error('Failed to run visibility batch operation', xhr);\n                        reject(xhr.statusText);\n                    }\n                },\n            });\n        });\n    },\n});\n"],"mappings":"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","ignoreList":[]}