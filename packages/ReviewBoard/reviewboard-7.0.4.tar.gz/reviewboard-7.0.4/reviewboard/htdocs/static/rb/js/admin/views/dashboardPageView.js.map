{"version":3,"file":"dashboardPageView.js","names":["RB","Admin","DashboardPageView","PageView","extend","events","initialize","prototype","apply","arguments","_widgetViews","_widgetWidths","_orderedWidgets","_$dashboardView","_$widgetsContainer","_$widgetsMain","_$widgets","_masonry","renderPage","call","$","find","children","$sizerGutter","$sizerColumn","Masonry","columnWidth","gutter","transitionDuration","initLayout","supportData","model","get","supportBanner","SupportBannerView","el","render","_loadWidgets","on","_onLayoutComplete","bind","css","sortableWidgets","index","loadWidgets","widgetOptions","widgetModel","widgetView","ViewType","_","defaults","domID","viewOptions","$el","addClass","listenTo","_onWidgetSizeChanged","id","widgetEl","width","offsetWidth","push","isFullWidth","hasClass","sort","a","b","items","addItems","pluck","layout","widgets","each","widget","newWidth","updateSize","widgetID","$widget"],"sources":["../../../../../../static/rb/js/admin/views/dashboardPageView.es6.js"],"sourcesContent":["/**\n * The administration UI's main dashboard page.\n *\n * This displays all the widgets rendered on the dashboard, allowing users to\n * see important details about their install from one place.\n */\nRB.Admin.DashboardPageView = RB.Admin.PageView.extend({\n    events: {\n        'click .js-action-remove-widget': '_onRemoveWidgetClicked',\n    },\n\n    /**\n     * Initialize the page.\n     */\n    initialize() {\n        RB.Admin.PageView.prototype.initialize.apply(this, arguments);\n\n        this._widgetViews = {};\n        this._widgetWidths = {};\n        this._orderedWidgets = [];\n        this._$dashboardView = null;\n        this._$widgetsContainer = null;\n        this._$widgetsMain = null;\n        this._$widgets = null;\n        this._masonry = null;\n    },\n\n    /**\n     * Render the page.\n     *\n     * This will set up the support banner and the dashboard widgets.\n     */\n    renderPage() {\n        RB.Admin.PageView.prototype.renderPage.call(this);\n\n        /* Set up the main dashboard widgets area. */\n        this._$dashboardView = this.$('#admin-dashboard');\n        this._$widgetsContainer = this._$dashboardView.find(\n            '.rb-c-admin-widgets');\n        this._$widgetsMain = this._$widgetsContainer.children(\n            '.rb-c-admin-widgets__main');\n        this._$widgets = this._$widgetsMain.children('.rb-c-admin-widget');\n\n        const $sizerGutter = this._$widgetsContainer.children(\n            '.rb-c-admin-widgets__sizer-gutter');\n        const $sizerColumn = this._$widgetsContainer.children(\n            '.rb-c-admin-widgets__sizer-column');\n\n        this._masonry = new Masonry(this._$widgetsMain[0], {\n            columnWidth: $sizerColumn[0],\n            gutter: $sizerGutter[0],\n            transitionDuration: 0,\n            initLayout: false,\n        });\n\n        /* Show a banner detailing the support coverage for the server. */\n        const supportData = this.model.get('supportData');\n\n        if (supportData) {\n            const supportBanner = new RB.SupportBannerView({\n                el: $('#support-banner'),\n                supportData: this.model.get('supportData'),\n            });\n            supportBanner.render();\n        }\n\n        this._loadWidgets();\n\n        this._masonry.on('layoutComplete', this._onLayoutComplete.bind(this));\n\n        /* Now that everything is in place, show the dashboard. */\n        this._$dashboardView.css('visibility', 'visible');\n    },\n\n    /**\n     * Load all widgets for the view.\n     *\n     * The widgets will be loaded based on the data passed to the model,\n     * and will then be added to Masonry in order of largest to smallest\n     * widget.\n     */\n    _loadWidgets() {\n        const sortableWidgets = [];\n        let index = 0;\n\n        /* Render all the widgets. */\n        this.model.loadWidgets(widgetOptions => {\n            const widgetModel = widgetOptions.widgetModel;\n            const widgetView = new widgetOptions.ViewType(_.defaults(\n                {\n                    el: $(`#${widgetOptions.domID}`),\n                    model: widgetModel,\n                },\n                widgetOptions.viewOptions));\n\n            widgetView.$el.addClass('js-masonry-item');\n            widgetView.render();\n\n            this.listenTo(widgetView, 'sizeChanged',\n                          () => this._onWidgetSizeChanged(widgetModel.id,\n                                                          widgetView.$el));\n\n            const widgetEl = widgetView.el;\n            const width = widgetEl.offsetWidth;\n\n            this._widgetViews[widgetModel.id] = widgetView;\n            this._widgetWidths[widgetModel.id] = width;\n            sortableWidgets.push({\n                el: widgetEl,\n                index: index,\n                isFullWidth: widgetView.$el.hasClass('-is-full-size'),\n                width: width,\n            });\n        });\n\n        /*\n         * Force a specific sort order for the widgets to ensure the most\n         * compact layout, ideally keeping everything on screen.\n         *\n         * We require a stable order (widgets of the same size should be in a\n         * predictable order), and we have to account for full-width widgets,\n         * so our comparator is a little bit more complex. We use the\n         * following rules:\n         *\n         * 1) Full-size widgets are positioned at the top.\n         * 2) Column-based widgets are then ordered from largest to smallest.\n         * 3) Any widgets of the same size are sorted according to their\n         *    registration index.\n         */\n        sortableWidgets.sort((a, b) => {\n            if (a.isFullWidth && !b.isFullWidth) {\n                return -1;\n            } else if (!a.isFullWidth && b.isFullWidth) {\n                return 1;\n            } else if (!a.isFullWidth && !b.isFullWidth &&\n                       a.width !== b.width) {\n                if (a.width > b.width) {\n                    return -1;\n                } else if (a.width < b.width) {\n                    return 1;\n                }\n            }\n\n            /* The widths are equal. Keep the widgets in index order. */\n            return a.index - b.index;\n        });\n\n        this._masonry.items = [];\n        this._masonry.addItems(_.pluck(sortableWidgets, 'el'));\n        this._masonry.layout();\n    },\n\n    /**\n     * Handle a completed widget re-layout.\n     *\n     * This will go through all the widgets and determine if any have changed\n     * their sizes (widths). If so, their\n     * :js:func:`RB.Admin.WidgetView.updateSize` method will be called.\n     */\n    _onLayoutComplete() {\n        this.model.widgets.each(widget => {\n            const widgetView = this._widgetViews[widget.id];\n            const newWidth = widgetView.$el.width();\n\n            if (newWidth !== this._widgetWidths[widget.id]) {\n                widgetView.updateSize();\n                this._widgetWidths[widget.id] = newWidth;\n            }\n        });\n    },\n\n    /**\n     * Handle changes to widget sizes.\n     *\n     * This is called in response to the ``sizeChanged`` events on widgets. If\n     * the size of the widget has actually changed, this will record the new\n     * width and then update the positions of widgets accordingly.\n     *\n     * Args:\n     *     widgetID (string):\n     *         The ID of the widget that changed size.\n     *\n     *     $widget (jQuery):\n     *         The widget's jQuery-wrapped element.\n     */\n    _onWidgetSizeChanged(widgetID, $widget) {\n        const newWidth = $widget.width();\n\n        if (newWidth !== this._widgetWidths[widgetID]) {\n            this._widgetWidths[widgetID] = newWidth;\n            this._masonry.layout();\n        }\n    },\n});\n"],"mappings":"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","ignoreList":[]}