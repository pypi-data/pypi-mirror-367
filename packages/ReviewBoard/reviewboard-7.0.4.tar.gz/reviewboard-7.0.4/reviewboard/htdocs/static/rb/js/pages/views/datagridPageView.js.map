{"version":3,"file":"datagridPageView.js","names":["RB","DatagridPageView","PageView","extend","RELOAD_INTERVAL_MS","actionsViewType","events","initialize","options","prototype","call","periodicReload","_reloadTimer","_datagrid","_$wrapper","_$datagridBody","_$datagridBodyContainer","_menuShown","renderPage","InfoboxManagerView","getInstance","setPositioning","ReviewRequestInfoboxView","side","LDistance","lDistance","yOffset","_setupActionsDrawer","listenTo","model","_reload","_setupDatagrid","_startReloadTimer","onResize","resizeToFit","drawer","DrawerView","setDrawer","_actionsView","datagridView","render","$el","appendTo","$content","count","showMenu","_showActions","_stopReloadTimer","_hideActions","$","_$datagrid","find","data","_$main","timesince","user_infobox","bug_infobox","review_request_infobox","clearSelection","_","each","checkbox","select","UserSession","instance","get","_starManager","StarManagerView","StarManager","el","datagridMode","on","bind","_reselectBatchCheckboxes","checkboxMap","idx","checkboxEl","checked","dataset","objectId","selection","id","show","hide","setInterval","window","clearInterval","$editCols","width","getExtents","html","load","location","datagrid","_onRowSelected","e","$checkbox","target","objectID","prop","unselect"],"sources":["../../../../../../static/rb/js/pages/views/datagridPageView.es6.js"],"sourcesContent":["/**\n * Manages the UI for the page containing a main datagrid.\n *\n * This renders the datagrid, handles events, and allows for multi-row\n * actions.\n */\nRB.DatagridPageView = RB.PageView.extend({\n    RELOAD_INTERVAL_MS: 5 * 60 * 1000,\n\n    /* The View class to use for an actions menu, if any. */\n    actionsViewType: null,\n\n    events: {\n        'change tbody input[data-checkbox-name=select]': '_onRowSelected',\n        'reloaded .datagrid-wrapper': '_setupDatagrid',\n    },\n\n    /**\n     * Initialize the datagrid page.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     periodicReload (boolean):\n     *         Whether to periodically reload the contents of the datagrid.\n     */\n    initialize(options={}) {\n        RB.PageView.prototype.initialize.call(this, options);\n\n        this.periodicReload = !!options.periodicReload;\n\n        this._reloadTimer = null;\n        this._datagrid = null;\n        this._$wrapper = null;\n        this._$datagridBody = null;\n        this._$datagridBodyContainer = null;\n        this._menuShown = false;\n    },\n\n    /**\n     * Render the datagrid page view, and begins listening for events.\n     */\n    renderPage() {\n        RB.InfoboxManagerView.getInstance().setPositioning(\n            RB.ReviewRequestInfoboxView,\n            {\n                /*\n                 * The order on the side matters. If the Summary column is\n                 * on the left-hand side of the datagrid, and \"l\" is first,\n                 * it can end up taking priority, even if \"L\" was a better\n                 * fit (since, if the infobox would need to be pushed a bit\n                 * to fit on screen, it will prefer \"l\"). If the column is on\n                 * the right-hand side of the dashboard, it will prefer \"l\",\n                 * given the room available (taking into account the sidebar).\n                 *\n                 * So \"L\" is a better priority for the common use, and \"l\"\n                 * works well as a fallback.\n                 */\n                side: 'Ll',\n                LDistance: 300,\n                lDistance: 20,\n                yOffset: -20,\n            });\n\n        if (this.actionsViewType) {\n            this._setupActionsDrawer();\n        }\n\n        this.listenTo(this.model, 'refresh', () => this._reload(false));\n\n        this._setupDatagrid();\n\n        if (this.periodicReload) {\n            this._startReloadTimer();\n        }\n\n        return this;\n    },\n\n    /**\n     * Handle page resizes.\n     *\n     * This will update the datagrid to fit on the page after a resize.\n     */\n    onResize() {\n        if (this._datagrid !== null) {\n            this._datagrid.resizeToFit();\n        }\n    },\n\n    /**\n     * Set up the actions pane view.\n     */\n    _setupActionsDrawer() {\n        const drawer = new RB.DrawerView();\n        this.setDrawer(drawer);\n\n        this._actionsView = new this.actionsViewType({\n            model: this.model,\n            datagridView: this,\n        });\n        this._actionsView.render().$el.appendTo(drawer.$content);\n\n        this.listenTo(this.model, 'change:count', (model, count) => {\n            const showMenu = (count > 0);\n\n            if (showMenu === this._menuShown) {\n                return;\n            }\n\n            if (showMenu) {\n                this._showActions();\n\n                /*\n                 * Don't reload the datagrid while the user is\n                 * preparing any actions.\n                 */\n                this._stopReloadTimer();\n            } else {\n                this._hideActions();\n\n                if (this.periodicReload) {\n                    this._startReloadTimer();\n                }\n            }\n\n            this._menuShown = showMenu;\n        });\n    },\n\n    /**\n     * Set up parts of the datagrid.\n     *\n     * This will reference elements inside the datagrid and set up UI.\n     * This is called when first rendering the datagrid, and any time\n     * the datagrid is reloaded from the server.\n     */\n    _setupDatagrid() {\n        this._$wrapper = this.$('#content_container');\n        this._$datagrid = this._$wrapper.find('.datagrid-wrapper');\n        this._datagrid = this._$datagrid.data('datagrid');\n        this._$main = this._$wrapper.find('.datagrid-main');\n\n        this.$('time.timesince').timesince();\n        this.$('.user').user_infobox();\n        this.$('.bugs').find('a').bug_infobox();\n        this.$('.review-request-link').review_request_infobox();\n\n        this.model.clearSelection();\n\n        _.each(this.$('input[data-checkbox-name=select]:checked'),\n               checkbox => this.model.select($(checkbox).data('object-id')));\n\n        if (RB.UserSession.instance.get('authenticated')) {\n            this._starManager = new RB.StarManagerView({\n                model: new RB.StarManager(),\n                el: this._$main,\n                datagridMode: true,\n            });\n        }\n\n        this._$datagrid\n            .on('reloaded', this._setupDatagrid.bind(this))\n            .on('datagridDisplayModeChanged',\n                this._reselectBatchCheckboxes.bind(this));\n        this._datagrid.resizeToFit();\n    },\n\n    /**\n     * Re-select any checkboxes that are part of the current selection.\n     *\n     * When the datagrid transitions between mobile and desktop modes,\n     * we use two different versions of the table, meaning two sets of\n     * checkboxes. This function updates the checkbox selection based on the\n     * currently selected items.\n     */\n    _reselectBatchCheckboxes() {\n        const checkboxMap = {};\n\n        this.$('input[data-checkbox-name=select]').each((idx, checkboxEl) => {\n            if (checkboxEl.checked) {\n                checkboxEl.checked = false;\n            }\n\n            checkboxMap[checkboxEl.dataset.objectId] = checkboxEl;\n        });\n\n        this.model.selection.each(selection => {\n            checkboxMap[selection.id].checked = true;\n        });\n    },\n\n    /**\n     * Show the actions drawer.\n     */\n    _showActions() {\n        this.drawer.show();\n    },\n\n    /**\n     * Hide the actions drawer.\n     */\n    _hideActions() {\n        this.drawer.hide();\n    },\n\n    /**\n     * Start the reload timer, if it's not already running.\n     */\n    _startReloadTimer() {\n        if (!this._reloadTimer) {\n            this._reloadTimer = setInterval(this._reload.bind(this),\n                                            this.RELOAD_INTERVAL_MS);\n        }\n    },\n\n    /**\n     * Stop the reload timer, if it's running.\n     */\n    _stopReloadTimer() {\n        if (this._reloadTimer) {\n            window.clearInterval(this._reloadTimer);\n            this._reloadTimer = null;\n        }\n    },\n\n    /**\n     * Reload the datagrid contents.\n     *\n     * This may be called periodically to reload the contents of the\n     * datagrid, if specified by the subclass.\n     *\n     * Args:\n     *     periodicReload (boolean):\n     *         Whether the datagrid should reload periodically.\n     */\n    _reload(periodicReload) {\n        const $editCols = this.$('.edit-columns');\n\n        if (periodicReload === false) {\n            this._stopReloadTimer();\n        }\n\n        this.model.clearSelection();\n\n        $editCols\n            .width($editCols.width() - $editCols.getExtents('b', 'lr'))\n            .html('<span class=\"djblets-o-spinner\"></span>');\n\n        this._$wrapper.load(window.location + ' #content_container', () => {\n            this.$('.datagrid-wrapper').datagrid();\n\n            this._setupDatagrid();\n\n            if (periodicReload !== false) {\n                this._startReloadTimer();\n            }\n        });\n    },\n\n    /**\n     * Handler for when a row is selected.\n     *\n     * Records the row for any actions the user may wish to invoke.\n     *\n     * Args:\n     *     e (Event):\n     *         The event that triggered the callback.\n     */\n    _onRowSelected(e) {\n        const $checkbox = $(e.target);\n        const objectID = $checkbox.data('object-id');\n\n        if ($checkbox.prop('checked')) {\n            this.model.select(objectID);\n        } else {\n            this.model.unselect(objectID);\n        }\n    },\n});\n"],"mappings":"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","ignoreList":[]}