{"version":3,"file":"commitsView.js","names":["RB","CommitsView","CollectionView","extend","className","itemViewType","CommitView","initialize","options","prototype","call","_$scrollContainer","$scrollContainer","_fetchingCommits","render","scroll","checkFetchNext","bind","setPending","commit","views","forEach","view","model","showProgress","cancelProgress","cancelPending","collection","scrollContainerEl","scrollThresholdPx","canFetchNext","scrollTop","offsetHeight","scrollHeight","fetchNext","then","catch","err","trigger","xhr"],"sources":["../../../../../../static/rb/js/newReviewRequest/views/commitsView.es6.js"],"sourcesContent":["/**\n * A view that lists a series of commits.\n *\n * This is intended to be used for creating new review requests from committed\n * revisions. The containing view can call setPending/cancelPending to ask an\n * individual commit to show a spinner.\n */\nRB.CommitsView = RB.CollectionView.extend({\n    className: 'commits',\n    itemViewType: RB.CommitView,\n\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     $scrollContainer (jQuery):\n     *         The parent container handling all content scrolling.\n     */\n    initialize(options) {\n        RB.CollectionView.prototype.initialize.call(this, options);\n\n        this._$scrollContainer = options.$scrollContainer;\n        this._fetchingCommits = false;\n    },\n\n    /**\n     * Render the view.\n     *\n     * Delegates the hard work to the parent class, and sets up the scroll\n     * handler.\n     *\n     * Returns:\n     *     RB.CommitsView:\n     *     This object, for chaining.\n     */\n    render() {\n        RB.CollectionView.prototype.render.call(this);\n\n        this._$scrollContainer.scroll(this.checkFetchNext.bind(this));\n\n        return this;\n    },\n\n    /**\n     * Set a given commit \"pending\".\n     *\n     * This is used while creating a new review request, and will ask the\n     * correct commit view to show a spinner.\n     *\n     * Args:\n     *     commit (RB.RepositoryCommit):\n     *         The selected commit.\n     */\n    setPending(commit) {\n        this.views.forEach(view => {\n            if (view.model === commit) {\n                view.showProgress();\n            } else {\n                view.cancelProgress();\n            }\n        });\n    },\n\n    /**\n     * Cancel the pending state on all commits.\n     */\n    cancelPending() {\n        this.views.forEach(view => view.cancelProgress());\n    },\n\n    /**\n     * Check whether we need to fetch more commits.\n     *\n     * Commits need to be fetched if the scroll container hasn't been filled\n     * yet (due to too few commits for the available window height) or if\n     * the user has scrolled close to the end of the scroll container.\n     *\n     * Once new commits have been fetched, they'll be rendered, and an\n     * immediate check will be performed to see if we still need to fetch\n     * more commits, in case the scroll container is still not filled.\n     */\n    checkFetchNext() {\n        if (this._fetchingCommits) {\n            return;\n        }\n\n        const collection = this.collection;\n        const scrollContainerEl = this._$scrollContainer[0];\n        const scrollThresholdPx = 50;\n\n        if (collection.canFetchNext() &&\n            (scrollContainerEl.scrollTop + scrollContainerEl.offsetHeight) >\n            (scrollContainerEl.scrollHeight - scrollThresholdPx)) {\n            this._fetchingCommits = true;\n\n            collection.fetchNext()\n                .then(() => {\n                    this._fetchingCommits = false;\n\n                    if (collection.canFetchNext()) {\n                        /*\n                         * There may still be room left for more commits.\n                         * We need to populate past the scroll point, so\n                         * check again.\n                         */\n                        this.checkFetchNext();\n                    }\n                })\n                .catch(err => {\n                    this._fetchingCommits = false;\n                    this.trigger('loadError', err.xhr);\n                });\n        }\n    },\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,WAAW,GAAGD,EAAE,CAACE,cAAc,CAACC,MAAM,CAAC;EACtCC,SAAS,EAAE,SAAS;EACpBC,YAAY,EAAEL,EAAE,CAACM,UAAU;EAE3B;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAACC,OAAO,EAAE;IAChBR,EAAE,CAACE,cAAc,CAACO,SAAS,CAACF,UAAU,CAACG,IAAI,CAAC,IAAI,EAAEF,OAAO,CAAC;IAE1D,IAAI,CAACG,iBAAiB,GAAGH,OAAO,CAACI,gBAAgB;IACjD,IAAI,CAACC,gBAAgB,GAAG,KAAK;EACjC,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,MAAMA,CAAA,EAAG;IACLd,EAAE,CAACE,cAAc,CAACO,SAAS,CAACK,MAAM,CAACJ,IAAI,CAAC,IAAI,CAAC;IAE7C,IAAI,CAACC,iBAAiB,CAACI,MAAM,CAAC,IAAI,CAACC,cAAc,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;IAE7D,OAAO,IAAI;EACf,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAACC,MAAM,EAAE;IACf,IAAI,CAACC,KAAK,CAACC,OAAO,CAACC,IAAI,IAAI;MACvB,IAAIA,IAAI,CAACC,KAAK,KAAKJ,MAAM,EAAE;QACvBG,IAAI,CAACE,YAAY,CAAC,CAAC;MACvB,CAAC,MAAM;QACHF,IAAI,CAACG,cAAc,CAAC,CAAC;MACzB;IACJ,CAAC,CAAC;EACN,CAAC;EAED;AACJ;AACA;EACIC,aAAaA,CAAA,EAAG;IACZ,IAAI,CAACN,KAAK,CAACC,OAAO,CAACC,IAAI,IAAIA,IAAI,CAACG,cAAc,CAAC,CAAC,CAAC;EACrD,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIT,cAAcA,CAAA,EAAG;IACb,IAAI,IAAI,CAACH,gBAAgB,EAAE;MACvB;IACJ;IAEA,MAAMc,UAAU,GAAG,IAAI,CAACA,UAAU;IAClC,MAAMC,iBAAiB,GAAG,IAAI,CAACjB,iBAAiB,CAAC,CAAC,CAAC;IACnD,MAAMkB,iBAAiB,GAAG,EAAE;IAE5B,IAAIF,UAAU,CAACG,YAAY,CAAC,CAAC,IACxBF,iBAAiB,CAACG,SAAS,GAAGH,iBAAiB,CAACI,YAAY,GAC5DJ,iBAAiB,CAACK,YAAY,GAAGJ,iBAAkB,EAAE;MACtD,IAAI,CAAChB,gBAAgB,GAAG,IAAI;MAE5Bc,UAAU,CAACO,SAAS,CAAC,CAAC,CACjBC,IAAI,CAAC,MAAM;QACR,IAAI,CAACtB,gBAAgB,GAAG,KAAK;QAE7B,IAAIc,UAAU,CAACG,YAAY,CAAC,CAAC,EAAE;UAC3B;AACxB;AACA;AACA;AACA;UACwB,IAAI,CAACd,cAAc,CAAC,CAAC;QACzB;MACJ,CAAC,CAAC,CACDoB,KAAK,CAACC,GAAG,IAAI;QACV,IAAI,CAACxB,gBAAgB,GAAG,KAAK;QAC7B,IAAI,CAACyB,OAAO,CAAC,WAAW,EAAED,GAAG,CAACE,GAAG,CAAC;MACtC,CAAC,CAAC;IACV;EACJ;AACJ,CAAC,CAAC","ignoreList":[]}