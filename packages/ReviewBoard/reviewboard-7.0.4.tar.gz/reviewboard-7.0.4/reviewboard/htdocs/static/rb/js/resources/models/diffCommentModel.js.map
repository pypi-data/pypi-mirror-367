{"version":3,"file":"diffCommentModel.js","names":["RB","DiffComment","BaseComment","extend","defaults","_","beginLineNum","endLineNum","fileDiff","fileDiffID","interFileDiff","interFileDiffID","baseFileDiffID","prototype","rspNamespace","expandedFields","attrToJsonMap","numLines","serializedAttrs","concat","deserializedAttrs","serializers","JSONSerializers","onlyIfUnloaded","onlyIfUnloadedAndValue","getNumLines","get","parseResourceData","rsp","result","call","num_lines","FileDiff","filediff","parse","interfilediff","validate","attrs","isNew","has","strings","INVALID_FILEDIFF_ID","hasBeginLineNum","BEGINLINENUM_GTE_0","hasEndLineNum","ENDLINENUM_GTE_0","BEGINLINENUM_LTE_ENDLINENUM","apply","arguments"],"sources":["../../../../../../static/rb/js/resources/models/diffCommentModel.es6.js"],"sourcesContent":["/**\n * Provides commenting functionality for diffs.\n *\n * A DiffComment represents a comment on a range of lines on either a\n * FileDiff or an interdiff consisting of two FileDiffs.\n *\n * Model Attributes:\n *     beginLineNum (number):\n *         The first line number in the range (0-indexed).\n *\n *     endLineNum (number):\n *         The last line number in the range (0-indexed).\n *\n *     fileDiff (RB.FileDiff):\n *         The FileDiff that the comment applies to.\n *\n *     fileDiffID (number):\n *         The ID of the FileDiff that the comment applies to.\n *\n *     interFileDiff (RB.FileDiff):\n *         The FileDiff at the end of an interdiff range that the comment\n *         applies to, if appropriate.\n *\n *         This attribute is mutually exclusive with ``baseFileDiffID``.\n *\n *     interFileDiffID (number):\n *         The ID of the FileDiff at the end of an interdiff range that the\n *         comment applies to.\n *\n *         This attribute is mutually exclusive with ``baseFileDiffID``.\n *\n *     baseFileDiffID (number):\n *         The ID of the base FileDiff in the cumulative diff that the\n *         comment is on.\n *\n *         This attribute is mutually exclusive with ``interFileDiffID``.\n */\nRB.DiffComment = RB.BaseComment.extend({\n    defaults: _.defaults({\n        beginLineNum: 0,\n        endLineNum: 0,\n        fileDiff: null,\n        fileDiffID: null,\n        interFileDiff: null,\n        interFileDiffID: null,\n        baseFileDiffID: null,\n    }, RB.BaseComment.prototype.defaults()),\n\n    rspNamespace: 'diff_comment',\n    expandedFields: ['filediff', 'interfilediff'],\n\n    attrToJsonMap: _.defaults({\n        baseFileDiffID: 'base_filediff_id',\n        beginLineNum: 'first_line',\n        fileDiffID: 'filediff_id',\n        interFileDiffID: 'interfilediff_id',\n        numLines: 'num_lines',\n    }, RB.BaseComment.prototype.attrToJsonMap),\n\n    serializedAttrs: [\n        'baseFileDiffID',\n        'beginLineNum',\n        'fileDiffID',\n        'interFileDiffID',\n        'numLines',\n    ].concat(RB.BaseComment.prototype.serializedAttrs),\n\n    deserializedAttrs: [\n        'beginLineNum',\n        'endLineNum'\n    ].concat(RB.BaseComment.prototype.deserializedAttrs),\n\n    serializers: _.defaults({\n        fileDiffID: RB.JSONSerializers.onlyIfUnloaded,\n        interFileDiffID: RB.JSONSerializers.onlyIfUnloadedAndValue,\n        baseFileDiffID: RB.JSONSerializers.onlyIfUnloadedAndValue,\n        numLines: function() {\n            return this.getNumLines();\n        }\n    }, RB.BaseComment.prototype.serializers),\n\n    /**\n     * Return the total number of lines the comment spans.\n     *\n     * Returns:\n     *     number:\n     *     The total number of lines for the comment.\n     */\n    getNumLines() {\n        return this.get('endLineNum') - this.get('beginLineNum') + 1;\n    },\n\n    /**\n     * Deserialize comment data from an API payload.\n     *\n     * Args:\n     *     rsp (object):\n     *         The data from the server.\n     *\n     * Returns:\n     *     object:\n     *     The model attributes to assign.\n     */\n    parseResourceData(rsp) {\n        const result = RB.BaseComment.prototype.parseResourceData.call(\n            this, rsp);\n\n        result.endLineNum = rsp.num_lines + result.beginLineNum - 1;\n\n        result.fileDiff = new RB.FileDiff(rsp.filediff, {\n            parse: true\n        });\n\n        if (rsp.interfilediff) {\n            result.interFileDiff = new RB.FileDiff(rsp.interfilediff, {\n                parse: true\n            });\n        }\n        return result;\n    },\n\n    /**\n     * Perform validation on the attributes of the model.\n     *\n     * This will check the range of line numbers to make sure they're\n     * a valid ordered range, along with the default comment validation.\n     *\n     * Args:\n     *     attrs (object):\n     *         The set of attributes to validate.\n     *\n     * Returns:\n     *     string:\n     *     An error string, if appropriate.\n     */\n    validate(attrs) {\n        /*\n         * XXX: Existing diff comments won't have the \"fileDiffID\" attribute\n         * populated when we load the object from the API. Since we don't do\n         * anything that needs that attribute unless we're trying to create a\n         * new diff comment, only check it if isNew().\n         */\n        if (this.isNew() && _.has(attrs, 'fileDiffID') && !attrs.fileDiffID) {\n            return RB.DiffComment.strings.INVALID_FILEDIFF_ID;\n        }\n\n        const hasBeginLineNum = _.has(attrs, 'beginLineNum');\n\n        if (hasBeginLineNum && attrs.beginLineNum < 0) {\n            return RB.DiffComment.strings.BEGINLINENUM_GTE_0;\n        }\n\n        const hasEndLineNum = _.has(attrs, 'endLineNum');\n\n        if (hasEndLineNum && attrs.endLineNum < 0) {\n            return RB.DiffComment.strings.ENDLINENUM_GTE_0;\n        }\n\n        if (hasBeginLineNum && hasEndLineNum &&\n            attrs.beginLineNum > attrs.endLineNum) {\n            return RB.DiffComment.strings.BEGINLINENUM_LTE_ENDLINENUM;\n        }\n\n        return RB.BaseComment.prototype.validate.apply(this, arguments);\n    }\n}, {\n    strings: {\n        INVALID_FILEDIFF_ID: 'fileDiffID must be a valid ID',\n        BEGINLINENUM_GTE_0: 'beginLineNum must be >= 0',\n        ENDLINENUM_GTE_0: 'endLineNum must be >= 0',\n        BEGINLINENUM_LTE_ENDLINENUM: 'beginLineNum must be <= endLineNum'\n    }\n});\n"],"mappings":"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","ignoreList":[]}