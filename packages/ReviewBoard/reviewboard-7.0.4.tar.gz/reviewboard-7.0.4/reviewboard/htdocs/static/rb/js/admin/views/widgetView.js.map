{"version":3,"file":"widgetView.js","names":["RB","Admin","WidgetView","Backbone","View","extend","events","canReload","reloadTitle","initialize","$header","$content","$footer","$headerActions","$footerActions","_$reloadAction","addHeaderAction","options","_buildAction","appendTo","addFooterAction","setReloading","reloading","console","assert","toggleClass","render","$el","children","id","cssClasses","title","renderWidget","trigger","updateSize","reloadContent","$action","$","addClass","el","append","html","text","attr"],"sources":["../../../../../../static/rb/js/admin/views/widgetView.es6.js"],"sourcesContent":["/**\n * The UI for an administration dashboard widget.\n *\n * This can be subclassed by widgets in order to add custom widget actions and\n * content. Subclasses can render the widget by overriding\n * :js:func:`RB.Admin.WidgetView.renderWidget()`, and respond to layout and\n * size changes by overriding :js:func:`RB.Admin.WidgetView.updateSize()`.\n */\nRB.Admin.WidgetView = Backbone.View.extend({\n    events: {\n        'click .js-action-reload': 'reloadContent',\n    },\n\n    /** Whether this widget can reload its contents on request. */\n    canReload: false,\n\n    /** Whether this widget can reload its contents on request. */\n    reloadTitle: null,\n\n    /**\n     * Initialize the widget.\n     */\n    initialize() {\n        this.$header = null;\n        this.$content = null;\n        this.$footer = null;\n        this.$headerActions = null;\n        this.$footerActions = null;\n        this._$reloadAction = null;\n    },\n\n    /**\n     * Add an action to the header.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the action.\n     *\n     * Option Args:\n     *     id (string):\n     *         The ID of the action. This will be used to add a CSS class\n     *         in the form of :samp:`js-action-{id}`.\n     *\n     *     cssClasses (string, optional):\n     *         A space-separated list of CSS class names to add to the\n     *         action.\n     *\n     *     el (Element or jQuery, optional):\n     *         An optional element to add to the action. This takes\n     *         precedence over ``html`` and ``text``.\n     *\n     *     html (string, optional):\n     *         Optional HTML to insert into the action. This takes\n     *         precedence over ``text``.\n     *\n     *     text (string, optional):\n     *         Optional plain text to set inside the action.\n     *\n     *     title (string, optional):\n     *         Optional title to display when hovering over the action,\n     *         or for screen readers.\n     *\n     * Returns:\n     *     jQuery:\n     *     The resulting action element.\n     */\n    addHeaderAction(options) {\n        return this._buildAction(options)\n            .appendTo(this.$headerActions);\n    },\n\n    /**\n     * Add an action to the footer.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the action.\n     *\n     * Option Args:\n     *     id (string):\n     *         The ID of the action. This will be used to add a CSS class\n     *         in the form of :samp:`js-action-{id}`.\n     *\n     *     cssClasses (string, optional):\n     *         A space-separated list of CSS class names to add to the\n     *         action.\n     *\n     *     el (Element or jQuery, optional):\n     *         An optional element to add to the action. This takes\n     *         precedence over ``html`` and ``text``.\n     *\n     *     html (string, optional):\n     *         Optional HTML to insert into the action. This takes\n     *         precedence over ``text``.\n     *\n     *     text (string, optional):\n     *         Optional plain text to set inside the action.\n     *\n     *     title (string, optional):\n     *         Optional title to display when hovering over the action,\n     *         or for screen readers.\n     *\n     * Returns:\n     *     jQuery:\n     *     The resulting action element.\n     */\n    addFooterAction(options) {\n        return this._buildAction(options)\n            .appendTo(this.$footerActions);\n    },\n\n    /**\n     * Show to the user whether or not content is loading/reloading.\n     *\n     * This will set whether the reloading action icon is spinning.\n     *\n     * Args:\n     *     reloading (boolean):\n     *         Whether to show to the user that content is reloading.\n     */\n    setReloading(reloading) {\n        console.assert(this.canReload,\n                       'This widget did not set canReload=true.');\n\n        this._$reloadAction.toggleClass('fa-spin', reloading);\n    },\n\n    /**\n     * Render the widget.\n     *\n     * Returns:\n     *     RB.Admin.WidgetView:\n     *     This widget, for chaining purposes.\n     */\n    render() {\n        this.$header = this.$el.children('.rb-c-admin-widget__header');\n        this.$content = this.$el.children('.rb-c-admin-widget__content');\n        this.$footer = this.$el.children('.rb-c-admin-widget__footer');\n        this.$headerActions = this.$header.children(\n            '.rb-c-admin-widget__actions');\n        this.$footerActions = this.$footer.children(\n            '.rb-c-admin-widget__actions');\n\n        if (this.canReload) {\n            this._$reloadAction = this.addHeaderAction({\n                id: 'reload',\n                cssClasses: 'fa fa-refresh',\n                title: this.reloadTitle,\n            });\n        }\n\n        this.renderWidget();\n\n        /* This is needed only for legacy widgets. */\n        this.$el.trigger('widget-shown');\n\n        return this;\n    },\n\n    /**\n     * Render the content of the widget.\n     *\n     * This will only be called once, when the widget is first rendered. It\n     * should take care of any initial content shown in the widget, and should\n     * attach any event listeners needed to perform updates to the content.\n     */\n    renderWidget() {\n    },\n\n    /**\n     * Update the rendered size of the widget.\n     *\n     * This may be called in response to changes in the widget size, such as\n     * when manually resizing the page or switching between desktop and mobile\n     * modes.\n     *\n     * This should perform any changes needed to the rendered size of any\n     * non-responsive UI elements in the widget.\n     */\n    updateSize() {\n    },\n\n    /**\n     * Reload the content inside the widget.\n     *\n     * This is called in response to a user clicking the Reload action,\n     * if :js:attr:`RB.Admin.WidgetView.canReload` is set to ``true``.\n     */\n    reloadContent() {\n    },\n\n    /**\n     * Build an action.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the action.\n     *\n     * Option Args:\n     *     id (string):\n     *         The ID of the action. This will be used to add a CSS class\n     *         in the form of :samp:`js-action-{id}`.\n     *\n     *     cssClasses (string, optional):\n     *         A space-separated list of CSS class names to add to the\n     *         action.\n     *\n     *     el (Element or jQuery, optional):\n     *         An optional element to add to the action. This takes\n     *         precedence over ``html`` and ``text``.\n     *\n     *     html (string, optional):\n     *         Optional HTML to insert into the action. This takes\n     *         precedence over ``text``.\n     *\n     *     text (string, optional):\n     *         Optional plain text to set inside the action.\n     *\n     *     title (string, optional):\n     *         Optional title to display when hovering over the action,\n     *         or for screen readers.\n     *\n     * Returns:\n     *     jQuery:\n     *     The resulting action element.\n     */\n    _buildAction(options) {\n        console.assert(options.id, 'An \"id\" value must be provided');\n\n        const $action = $('<li class=\"rb-c-admin-widget__action\">')\n            .addClass(`js-action-${options.id}`);\n\n        if (options.cssClasses) {\n            $action.addClass(options.cssClasses);\n        }\n\n        if (options.el) {\n            $action.append(options.el);\n        } else if (options.html) {\n            $action.html(options.html);\n        } else if (options.text) {\n            $action.text(options.text);\n        }\n\n        if (options.title) {\n            $action.attr('title', options.title);\n        }\n\n        return $action;\n    },\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,KAAK,CAACC,UAAU,GAAGC,QAAQ,CAACC,IAAI,CAACC,MAAM,CAAC;EACvCC,MAAM,EAAE;IACJ,yBAAyB,EAAE;EAC/B,CAAC;EAED;EACAC,SAAS,EAAE,KAAK;EAEhB;EACAC,WAAW,EAAE,IAAI;EAEjB;AACJ;AACA;EACIC,UAAUA,CAAA,EAAG;IACT,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,OAAO,GAAG,IAAI;IACnB,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B,IAAI,CAACC,cAAc,GAAG,IAAI;EAC9B,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,eAAeA,CAACC,OAAO,EAAE;IACrB,OAAO,IAAI,CAACC,YAAY,CAACD,OAAO,CAAC,CAC5BE,QAAQ,CAAC,IAAI,CAACN,cAAc,CAAC;EACtC,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIO,eAAeA,CAACH,OAAO,EAAE;IACrB,OAAO,IAAI,CAACC,YAAY,CAACD,OAAO,CAAC,CAC5BE,QAAQ,CAAC,IAAI,CAACL,cAAc,CAAC;EACtC,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIO,YAAYA,CAACC,SAAS,EAAE;IACpBC,OAAO,CAACC,MAAM,CAAC,IAAI,CAACjB,SAAS,EACd,yCAAyC,CAAC;IAEzD,IAAI,CAACQ,cAAc,CAACU,WAAW,CAAC,SAAS,EAAEH,SAAS,CAAC;EACzD,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACII,MAAMA,CAAA,EAAG;IACL,IAAI,CAAChB,OAAO,GAAG,IAAI,CAACiB,GAAG,CAACC,QAAQ,CAAC,4BAA4B,CAAC;IAC9D,IAAI,CAACjB,QAAQ,GAAG,IAAI,CAACgB,GAAG,CAACC,QAAQ,CAAC,6BAA6B,CAAC;IAChE,IAAI,CAAChB,OAAO,GAAG,IAAI,CAACe,GAAG,CAACC,QAAQ,CAAC,4BAA4B,CAAC;IAC9D,IAAI,CAACf,cAAc,GAAG,IAAI,CAACH,OAAO,CAACkB,QAAQ,CACvC,6BAA6B,CAAC;IAClC,IAAI,CAACd,cAAc,GAAG,IAAI,CAACF,OAAO,CAACgB,QAAQ,CACvC,6BAA6B,CAAC;IAElC,IAAI,IAAI,CAACrB,SAAS,EAAE;MAChB,IAAI,CAACQ,cAAc,GAAG,IAAI,CAACC,eAAe,CAAC;QACvCa,EAAE,EAAE,QAAQ;QACZC,UAAU,EAAE,eAAe;QAC3BC,KAAK,EAAE,IAAI,CAACvB;MAChB,CAAC,CAAC;IACN;IAEA,IAAI,CAACwB,YAAY,CAAC,CAAC;;IAEnB;IACA,IAAI,CAACL,GAAG,CAACM,OAAO,CAAC,cAAc,CAAC;IAEhC,OAAO,IAAI;EACf,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACID,YAAYA,CAAA,EAAG,CACf,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,UAAUA,CAAA,EAAG,CACb,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIC,aAAaA,CAAA,EAAG,CAChB,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIjB,YAAYA,CAACD,OAAO,EAAE;IAClBM,OAAO,CAACC,MAAM,CAACP,OAAO,CAACY,EAAE,EAAE,gCAAgC,CAAC;IAE5D,MAAMO,OAAO,GAAGC,CAAC,CAAC,wCAAwC,CAAC,CACtDC,QAAQ,CAAC,aAAarB,OAAO,CAACY,EAAE,EAAE,CAAC;IAExC,IAAIZ,OAAO,CAACa,UAAU,EAAE;MACpBM,OAAO,CAACE,QAAQ,CAACrB,OAAO,CAACa,UAAU,CAAC;IACxC;IAEA,IAAIb,OAAO,CAACsB,EAAE,EAAE;MACZH,OAAO,CAACI,MAAM,CAACvB,OAAO,CAACsB,EAAE,CAAC;IAC9B,CAAC,MAAM,IAAItB,OAAO,CAACwB,IAAI,EAAE;MACrBL,OAAO,CAACK,IAAI,CAACxB,OAAO,CAACwB,IAAI,CAAC;IAC9B,CAAC,MAAM,IAAIxB,OAAO,CAACyB,IAAI,EAAE;MACrBN,OAAO,CAACM,IAAI,CAACzB,OAAO,CAACyB,IAAI,CAAC;IAC9B;IAEA,IAAIzB,OAAO,CAACc,KAAK,EAAE;MACfK,OAAO,CAACO,IAAI,CAAC,OAAO,EAAE1B,OAAO,CAACc,KAAK,CAAC;IACxC;IAEA,OAAOK,OAAO;EAClB;AACJ,CAAC,CAAC","ignoreList":[]}