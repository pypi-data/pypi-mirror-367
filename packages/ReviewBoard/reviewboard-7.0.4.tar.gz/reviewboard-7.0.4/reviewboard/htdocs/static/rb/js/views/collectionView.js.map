{"version":3,"file":"collectionView.js","names":["RB","CollectionView","Backbone","View","extend","itemViewType","initialize","options","itemViewOptions","collection","views","_viewsByModelID","each","_onAdded","listenTo","_onRemoved","_onSorted","_onReset","$container","$el","render","_rendered","empty","_addCollectionViews","forEach","view","append","el","item","console","assert","_","defaults","model","push","cid","toRemove","without","remove","models","oldViews","orderChanged","length","i","map","children","detach"],"sources":["../../../../../static/rb/js/views/collectionView.es6.js"],"sourcesContent":["/**\n * An abstract view for rendering a collection.\n *\n * This provides core, reusable functionality for any view that wants to render\n * a collection and respond to add/remove events. Types that extend this should\n * make sure to define the 'itemViewType' attribute, which will be the view\n * instantiated for each model in the collection.\n *\n * Items are added to the view's :js:attr:`RB.CollectionView.$container`\n * element. By default, this is the view's :js:attr:`RB.CollectionView.$el`\n * element. Subclasses that want to add to an inner child should explicitly\n * set ``$container`` to the appropriate element.\n */\nRB.CollectionView = Backbone.View.extend({\n    /**\n     * The view that will be instantiated for rendering items in the collection.\n     */\n    itemViewType: null,\n\n    /**\n     * Initialize the CollectionView.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     collection (Backbone.Collection):\n     *         The collection to display.\n     *\n     *     itemViewType (function):\n     *         The constructor for the child views.\n     *\n     *     itemViewOptions (object):\n     *         Options to pass into the item view constructor.\n     */\n    initialize(options) {\n        if (options.itemViewType) {\n            this.itemViewType = options.itemViewType;\n        }\n\n        this.itemViewOptions = options.itemViewOptions || {};\n\n        const collection = options.collection;\n        this.collection = collection;\n        this.views = [];\n        this._viewsByModelID = {};\n\n        collection.each(this._onAdded, this);\n        this.listenTo(collection, 'add', this._onAdded);\n        this.listenTo(collection, 'remove', this._onRemoved);\n        this.listenTo(collection, 'sort', this._onSorted);\n        this.listenTo(collection, 'reset', this._onReset);\n\n        this.$container = this.$el;\n    },\n\n    /**\n     * Render the view.\n     *\n     * This will iterate over all the child views and render them as well.\n     *\n     * Returns:\n     *     RB.CollectionView:\n     *     This object, for chaining.\n     */\n    render() {\n        this._rendered = true;\n\n        this.$container.empty();\n        this._addCollectionViews();\n\n        return this;\n    },\n\n    /**\n     * Add each view to the collection's container.\n     *\n     * This will iterate through all views and append them to the container.\n     */\n    _addCollectionViews() {\n        this.views.forEach(view => this.$container.append(view.render().el));\n    },\n\n    /**\n     * Add a view for an item in the collection.\n     *\n     * This will instantiate the itemViewType, and if the CollectionView has\n     * been rendered, render and append it as well.\n     *\n     * Args:\n     *     item (Backbone.Model):\n     *         The item to add.\n     */\n    _onAdded(item) {\n        console.assert(this.itemViewType,\n                       'itemViewType must be defined by the subclass');\n\n        const view = new this.itemViewType(_.defaults({\n            model: item,\n        }, this.itemViewOptions));\n\n        this.views.push(view);\n        this._viewsByModelID[item.cid] = view;\n\n        if (this._rendered) {\n            this.$container.append(view.render().el);\n        }\n    },\n\n    /**\n     * Remove a view for an item in the collection.\n     *\n     * Args:\n     *     item (Backbone.Model):\n     *         The item to remove.\n     */\n    _onRemoved(item) {\n        const toRemove = this._viewsByModelID[item.cid];\n\n        if (toRemove) {\n            delete this._viewsByModelID[item.cid];\n            this.views = _.without(this.views, toRemove);\n\n            if (this._rendered) {\n                toRemove.remove();\n            }\n        }\n    },\n\n    /**\n     * Respond to a change in the collection's sort order.\n     *\n     * This will detach all of the child views and re-add them in the new\n     * order.\n     */\n    _onSorted() {\n        let views = this.views;\n\n        /*\n         * See if the order of models has changed from our views. This may\n         * not be the case. An initial collection.fetch() will add each\n         * model and then emit a \"sort\", and this can end up causing us to\n         * rebuild our list of views unnecessarily (which can be problematic\n         * for, say, <option selected> items, as the 'selected' attribute\n         * will no longer be respected).\n         */\n        const models = this.collection.models;\n        const oldViews = this.views;\n        let orderChanged = false;\n\n        if (models.length === oldViews.length) {\n            for (let i = 0; i < oldViews.length; i++) {\n                if (oldViews[i].model !== models[i]) {\n                    orderChanged = true;\n                    break;\n                }\n            }\n        } else {\n            orderChanged = true;\n        }\n\n        if (!orderChanged) {\n            return;\n        }\n\n        this.views = this.collection.map(\n            model => this._viewsByModelID[model.cid]);\n\n        if (this._rendered) {\n            this.$container.children().detach();\n            this._addCollectionViews();\n        }\n    },\n\n    /**\n     * Handle the collection being reset.\n     *\n     * This will remove all existing views and create new ones for the new\n     * state of the collection.\n     */\n    _onReset() {\n        this.views.forEach(view => view.remove());\n        this.views = [];\n        this._viewsByModelID = {};\n        this.collection.each(this._onAdded, this);\n    },\n});\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,EAAE,CAACC,cAAc,GAAGC,QAAQ,CAACC,IAAI,CAACC,MAAM,CAAC;EACrC;AACJ;AACA;EACIC,YAAY,EAAE,IAAI;EAElB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,UAAUA,CAACC,OAAO,EAAE;IAChB,IAAIA,OAAO,CAACF,YAAY,EAAE;MACtB,IAAI,CAACA,YAAY,GAAGE,OAAO,CAACF,YAAY;IAC5C;IAEA,IAAI,CAACG,eAAe,GAAGD,OAAO,CAACC,eAAe,IAAI,CAAC,CAAC;IAEpD,MAAMC,UAAU,GAAGF,OAAO,CAACE,UAAU;IACrC,IAAI,CAACA,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,eAAe,GAAG,CAAC,CAAC;IAEzBF,UAAU,CAACG,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE,IAAI,CAAC;IACpC,IAAI,CAACC,QAAQ,CAACL,UAAU,EAAE,KAAK,EAAE,IAAI,CAACI,QAAQ,CAAC;IAC/C,IAAI,CAACC,QAAQ,CAACL,UAAU,EAAE,QAAQ,EAAE,IAAI,CAACM,UAAU,CAAC;IACpD,IAAI,CAACD,QAAQ,CAACL,UAAU,EAAE,MAAM,EAAE,IAAI,CAACO,SAAS,CAAC;IACjD,IAAI,CAACF,QAAQ,CAACL,UAAU,EAAE,OAAO,EAAE,IAAI,CAACQ,QAAQ,CAAC;IAEjD,IAAI,CAACC,UAAU,GAAG,IAAI,CAACC,GAAG;EAC9B,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,MAAMA,CAAA,EAAG;IACL,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB,IAAI,CAACH,UAAU,CAACI,KAAK,CAAC,CAAC;IACvB,IAAI,CAACC,mBAAmB,CAAC,CAAC;IAE1B,OAAO,IAAI;EACf,CAAC;EAED;AACJ;AACA;AACA;AACA;EACIA,mBAAmBA,CAAA,EAAG;IAClB,IAAI,CAACb,KAAK,CAACc,OAAO,CAACC,IAAI,IAAI,IAAI,CAACP,UAAU,CAACQ,MAAM,CAACD,IAAI,CAACL,MAAM,CAAC,CAAC,CAACO,EAAE,CAAC,CAAC;EACxE,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACId,QAAQA,CAACe,IAAI,EAAE;IACXC,OAAO,CAACC,MAAM,CAAC,IAAI,CAACzB,YAAY,EACjB,8CAA8C,CAAC;IAE9D,MAAMoB,IAAI,GAAG,IAAI,IAAI,CAACpB,YAAY,CAAC0B,CAAC,CAACC,QAAQ,CAAC;MAC1CC,KAAK,EAAEL;IACX,CAAC,EAAE,IAAI,CAACpB,eAAe,CAAC,CAAC;IAEzB,IAAI,CAACE,KAAK,CAACwB,IAAI,CAACT,IAAI,CAAC;IACrB,IAAI,CAACd,eAAe,CAACiB,IAAI,CAACO,GAAG,CAAC,GAAGV,IAAI;IAErC,IAAI,IAAI,CAACJ,SAAS,EAAE;MAChB,IAAI,CAACH,UAAU,CAACQ,MAAM,CAACD,IAAI,CAACL,MAAM,CAAC,CAAC,CAACO,EAAE,CAAC;IAC5C;EACJ,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;AACA;EACIZ,UAAUA,CAACa,IAAI,EAAE;IACb,MAAMQ,QAAQ,GAAG,IAAI,CAACzB,eAAe,CAACiB,IAAI,CAACO,GAAG,CAAC;IAE/C,IAAIC,QAAQ,EAAE;MACV,OAAO,IAAI,CAACzB,eAAe,CAACiB,IAAI,CAACO,GAAG,CAAC;MACrC,IAAI,CAACzB,KAAK,GAAGqB,CAAC,CAACM,OAAO,CAAC,IAAI,CAAC3B,KAAK,EAAE0B,QAAQ,CAAC;MAE5C,IAAI,IAAI,CAACf,SAAS,EAAE;QAChBe,QAAQ,CAACE,MAAM,CAAC,CAAC;MACrB;IACJ;EACJ,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACItB,SAASA,CAAA,EAAG;IACR,IAAIN,KAAK,GAAG,IAAI,CAACA,KAAK;;IAEtB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,MAAM6B,MAAM,GAAG,IAAI,CAAC9B,UAAU,CAAC8B,MAAM;IACrC,MAAMC,QAAQ,GAAG,IAAI,CAAC9B,KAAK;IAC3B,IAAI+B,YAAY,GAAG,KAAK;IAExB,IAAIF,MAAM,CAACG,MAAM,KAAKF,QAAQ,CAACE,MAAM,EAAE;MACnC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAACE,MAAM,EAAEC,CAAC,EAAE,EAAE;QACtC,IAAIH,QAAQ,CAACG,CAAC,CAAC,CAACV,KAAK,KAAKM,MAAM,CAACI,CAAC,CAAC,EAAE;UACjCF,YAAY,GAAG,IAAI;UACnB;QACJ;MACJ;IACJ,CAAC,MAAM;MACHA,YAAY,GAAG,IAAI;IACvB;IAEA,IAAI,CAACA,YAAY,EAAE;MACf;IACJ;IAEA,IAAI,CAAC/B,KAAK,GAAG,IAAI,CAACD,UAAU,CAACmC,GAAG,CAC5BX,KAAK,IAAI,IAAI,CAACtB,eAAe,CAACsB,KAAK,CAACE,GAAG,CAAC,CAAC;IAE7C,IAAI,IAAI,CAACd,SAAS,EAAE;MAChB,IAAI,CAACH,UAAU,CAAC2B,QAAQ,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC;MACnC,IAAI,CAACvB,mBAAmB,CAAC,CAAC;IAC9B;EACJ,CAAC;EAED;AACJ;AACA;AACA;AACA;AACA;EACIN,QAAQA,CAAA,EAAG;IACP,IAAI,CAACP,KAAK,CAACc,OAAO,CAACC,IAAI,IAAIA,IAAI,CAACa,MAAM,CAAC,CAAC,CAAC;IACzC,IAAI,CAAC5B,KAAK,GAAG,EAAE;IACf,IAAI,CAACC,eAAe,GAAG,CAAC,CAAC;IACzB,IAAI,CAACF,UAAU,CAACG,IAAI,CAAC,IAAI,CAACC,QAAQ,EAAE,IAAI,CAAC;EAC7C;AACJ,CAAC,CAAC","ignoreList":[]}