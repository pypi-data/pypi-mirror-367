{"version":3,"file":"dashboardView.js","names":["DashboardActionsView","Backbone","View","extend","template","_","events","render","show_archived","model","get","$el","html","close_discarded_text","gettext","close_submitted_text","archive_text","mute_text","read_only","RB","UserSession","instance","unarchive_text","unmute_text","$summary","$","listenTo","count","text","interpolate","ngettext","_onCloseDiscardedClicked","ev","stopPropagation","preventDefault","_closeReviewRequests","ReviewRequest","CLOSE_DISCARDED","_onCloseCompletedClicked","CLOSE_SUBMITTED","closeType","confirmed","_confirmClose","results","closeReviewRequests","_showCloseResults","successes","failures","err","alert","$dlg","append","modalBox","title","buttons","Ink","paintComponent","type","on","Promise","resolve","reject","resolveAndClose","result","$dialog","onClick","_onArchiveClicked","updateVisibility","_onUnarchiveClicked","_onMuteClicked","_onUnmuteClicked","DashboardView","DatagridPageView","actionsViewType"],"sources":["../../../../../../static/rb/js/pages/views/dashboardView.es6.js"],"sourcesContent":["(function() {\n\n\n/**\n * Displays and invokes actions for one or more review requests.\n *\n * This presents available actions to the user that can be performed\n * across one or more selected review requests in the dashboard.\n * The actions will appear in a layer above the sidebar.\n */\nconst DashboardActionsView = Backbone.View.extend({\n    template: _.template(dedent`\n        <p class=\"rb-c-drawer__summary\"></p>\n        <% if (!read_only) { %>\n         <div class=\"rb-c-drawer__actions\">\n          <ul class=\"rb-c-drawer__action-group\">\n           <li class=\"rb-c-drawer__action js-action-discard\">\n            <%= close_discarded_text %>\n           </li>\n           <li class=\"rb-c-drawer__action js-action-submit\">\n            <%= close_submitted_text %>\n           </li>\n          </ul>\n          <ul class=\"rb-c-drawer__action-group\">\n           <li class=\"rb-c-drawer__action js-action-archive\">\n            <%= archive_text %>\n           </li>\n           <% if (show_archived) { %>\n            <li class=\"rb-c-drawer__action\n                       js-action-unarchive\">\n             <%= unarchive_text %>\n            </li>\n           <% } %>\n          </ul>\n          <ul class=\"rb-c-drawer__action-group\">\n           <li class=\"rb-c-drawer__action js-action-mute\">\n            <%= mute_text %></a></li>\n           </li>\n           <% if (show_archived) { %>\n            <li class=\"rb-c-drawer__action js-action-unmute\">\n             <%= unmute_text %>\n            </li>\n           <% } %>\n          </ul>\n         </div>\n        <% } %>\n    `),\n\n    events: {\n        'click .js-action-discard': '_onCloseDiscardedClicked',\n        'click .js-action-submit': '_onCloseCompletedClicked',\n        'click .js-action-archive': '_onArchiveClicked',\n        'click .js-action-unarchive': '_onUnarchiveClicked',\n        'click .js-action-mute': '_onMuteClicked',\n        'click .js-action-unmute': '_onUnmuteClicked',\n    },\n\n    /**\n     * Render the actions pane.\n     *\n     * Returns:\n     *     DashboardActionsView:\n     *     This object, for chaining.\n     */\n    render() {\n        const show_archived = (this.model.get('data') || {}).show_archived;\n\n        this.$el\n            .html(this.template({\n                close_discarded_text: gettext('<b>Close</b> Discarded'),\n                close_submitted_text: gettext('<b>Close</b> Completed'),\n                archive_text: gettext('<b>Archive</b>'),\n                mute_text: gettext('<b>Mute</b>'),\n                read_only: RB.UserSession.instance.get('readOnly'),\n                unarchive_text: gettext('<b>Unarchive</b>'),\n                unmute_text: gettext('<b>Unmute</b>'),\n                show_archived: show_archived,\n            }));\n\n        const $summary = this.$('.rb-c-drawer__summary');\n\n        this.listenTo(this.model, 'change:count', (model, count) => {\n            $summary.text(interpolate(\n                ngettext('%s review request selected',\n                         '%s review requests selected',\n                         count),\n                [count]));\n        });\n\n        return this;\n    },\n\n    /**\n     * Handler for when the Close Discarded action is clicked.\n     *\n     * This will confirm that the user wants to close the selected\n     * review requests. Once they confirm, the review requests will\n     * be closed.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onCloseDiscardedClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        this._closeReviewRequests(RB.ReviewRequest.CLOSE_DISCARDED);\n    },\n\n    /**\n     * Handler for when the Close Completed action is clicked.\n     *\n     * This will confirm that the user wants to close the selected\n     * review requests. Once they confirm, the review requests will\n     * be closed.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onCloseCompletedClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        this._closeReviewRequests(RB.ReviewRequest.CLOSE_SUBMITTED);\n    },\n\n    /**\n     * Common code for confirming and closing review requests.\n     *\n     * This will confirm that the user wants to close the selected\n     * review requests. Once they confirm, the review requests will\n     * be closed.\n     *\n     * Args:\n     *     closeType (string):\n     *         The close type to use.\n     */\n    async _closeReviewRequests(closeType) {\n        try {\n            const confirmed = await this._confirmClose();\n\n            if (confirmed) {\n                const results = await this.model.closeReviewRequests({\n                    closeType: closeType,\n                });\n                this._showCloseResults(results.successes, results.failures);\n            }\n        } catch (err) {\n            alert(_`An error occurred when attempting to close review requests: ${err}`);\n        }\n    },\n\n    /**\n     * Shows the results of the close operation in a dialog.\n     *\n     * This will say how many review requests have been closed successfully,\n     * and will also list the number that have failed (due to access\n     * permissions or other errors).\n     *\n     * Args:\n     *     successes (int):\n     *         Number of successfully closed review requests.\n     *\n     *     failures (int):\n     *         Number of unsuccessfully closed review requests.\n     */\n    _showCloseResults(successes, failures) {\n        const $dlg = $('<div>')\n            .append($('<p>')\n                .text(interpolate(\n                    ngettext('%s review request has been closed.',\n                             '%s review requests have been closed.',\n                             successes),\n                    [successes])));\n\n        if (failures > 0) {\n            $dlg\n                .append($('<p>').text(\n                    interpolate(\n                        ngettext('%s review request could not be closed.',\n                                 '%s review requests could not be closed.',\n                                 failures),\n                        [failures])))\n                .append($('<p>').text(\n                    _`You may not have permission to close them.`));\n        }\n\n        $dlg\n            .modalBox({\n                title: _`Close review requests`,\n                buttons: [\n                    Ink.paintComponent(\n                        'Ink.Button',\n                        {\n                            type: 'primary',\n                        },\n                        _`Close`,\n                    ),\n                ],\n            })\n            .on('close', () => $dlg.modalBox('destroy'));\n    },\n\n    /**\n     * Prompt the user for confirmation before closing review requests.\n     *\n     * If the user confirms, the review requests will be closed.\n     *\n     * Returns:\n     *     Promise:\n     *     A promise which resolves to true if the close was confirmed, or\n     *     false if the close was cancelled.\n     */\n    _confirmClose: function() {\n        return new Promise((resolve, reject) => {\n            function resolveAndClose(result) {\n                resolve(result);\n                $dialog.modalBox('destroy');\n            }\n\n            const $dialog = $('<div>')\n                .append($('<p>')\n                    .text(_`If these review requests have unpublished drafts, they will be discarded.`))\n                .append($('<p>')\n                    .text(_`Are you sure you want to close these review requests?`))\n\n                .modalBox({\n                    title: _`Close review requests`,\n                    buttons: [\n                        Ink.paintComponent(\n                            'Ink.Button',\n                            {\n                                onClick: () => resolveAndClose(false),\n                            },\n                            _`Cancel`,\n                        ),\n                        Ink.paintComponent(\n                            'Ink.Button',\n                            {\n                                onClick: () => resolveAndClose(true),\n                                type: 'danger',\n                            },\n                            _`Close Review Requests`,\n                        ),\n                    ],\n                })\n                .on('close', () => {\n                    $dialog.modalBox('destroy');\n                    resolve(false);\n                });\n        });\n    },\n\n    /**\n     * Handler for when the Archive action is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onArchiveClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        this.model.updateVisibility('archive');\n    },\n\n    /**\n     * Handler for when the Unarchive action is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onUnarchiveClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        this.model.updateVisibility('unarchive');\n    },\n\n    /**\n     * Handler for when the Mute action is clicked.\n     *\n     * This will confirm that the user wants to mute the selected review\n     * requests. Once they confirm, the review requests will be archived.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onMuteClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        const $dialog = $('<div>')\n            .append($('<p>')\n                .text(_`Are you sure you want to mute these review requests?`))\n            .modalBox({\n                title: _`Mute review requests`,\n                buttons: [\n                    Ink.paintComponent(\n                        'Ink.Button',\n                        {},\n                        _`Cancel`,\n                    ),\n                    Ink.paintComponent(\n                        'Ink.Button',\n                        {\n                            onClick: () => {\n                                this.model.updateVisibility('mute');\n                                $dialog.modalBox('destroy');\n                            },\n                            type: 'danger',\n                        },\n                        _`Mute Review Requests`,\n                    ),\n                ],\n            })\n            .on('close', () => $dialog.modalBox('destroy'));\n    },\n\n    /**\n     * Handler for when the Unmute action is clicked.\n     *\n     * Args:\n     *     ev (Event):\n     *         The event that triggered the callback.\n     */\n    _onUnmuteClicked(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n\n        this.model.updateVisibility('unarchive');\n    },\n});\n\n\n/**\n * Manages the UI for the dashboard.\n *\n * This renders the dashboard, handles events, and allows for multi-row\n * actions (like closing review requests).\n */\nRB.DashboardView = RB.DatagridPageView.extend({\n    actionsViewType: DashboardActionsView,\n});\n\n\n})();\n"],"mappings":"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","ignoreList":[]}