{"version":3,"file":"dataUtils.js","names":["RB","DataUtils","ArrayBufferTypes","int8","size","funcName","uint8","int16","uint16","int32","uint32","float32","float64","readBlobAsArrayBuffer","blob","onLoaded","_readBlobAs","readBlobAsString","readManyBlobsAsArrayBuffers","blobs","_readManyBlobsAs","readManyBlobsAsStrings","buildArrayBuffer","schema","arrayLen","i","length","item","type","values","arrayBuffer","ArrayBuffer","dataView","DataView","pos","littleEndian","bigEndian","typeInfo","func","j","call","buildBlob","parts","schemaItem","_","isArray","push","Blob","readFuncName","reader","FileReader","addEventListener","result","loadFunc","Array","numLoaded","onBlobLoaded","text","apply","forEach"],"sources":["../../../../../static/rb/js/utils/dataUtils.es6.js"],"sourcesContent":["RB.DataUtils = {\n    ArrayBufferTypes: {\n        int8: {\n            size: 1,\n            funcName: 'setInt8',\n        },\n        uint8: {\n            size: 1,\n            funcName: 'setUint8',\n        },\n        int16: {\n            size: 2,\n            funcName: 'setInt16',\n        },\n        uint16: {\n            size: 2,\n            funcName: 'setUint16',\n        },\n        int32: {\n            size: 4,\n            funcName: 'setInt32',\n        },\n        uint32: {\n            size: 4,\n            funcName: 'setUint32',\n        },\n        float32: {\n            size: 4,\n            funcName: 'setFloat32',\n        },\n        float64: {\n            size: 8,\n            funcName: 'setFloat64',\n        },\n    },\n\n    /**\n     * Read a Blob as an ArrayBuffer.\n     *\n     * This is an asynchronous operation.\n     *\n     * Args:\n     *     blob (Blob):\n     *         The blob to read as an :js:class:`ArrayBuffer`.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blob has loaded. This will take\n     *         the resulting :js:class:`ArrayBuffer` as an argument.\n     */\n    readBlobAsArrayBuffer(blob, onLoaded) {\n        RB.DataUtils._readBlobAs('readAsArrayBuffer', blob, onLoaded);\n    },\n\n    /**\n     * Read a Blob as a text string.\n     *\n     * This is an asynchronous operation.\n     *\n     * Args:\n     *     blob (Blob):\n     *         The blob to read as text.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blob has loaded. This will take\n     *         the resulting string as an argument.\n     */\n    readBlobAsString(blob, onLoaded) {\n        RB.DataUtils._readBlobAs('readAsText', blob, onLoaded);\n    },\n\n    /**\n     * Read several Blobs as individual ArrayBuffers.\n     *\n     * This is an asynchronous operation.\n     *\n     * Args:\n     *     blobs (Array):\n     *         The array of :js:class:`Blob`s instances to read as\n     *         :js:class:`ArrayBuffer`s\n     *\n     *     onLoaded (function):\n     *         The function to call when the blobs have loaded. This will take\n     *         one parameter per loaded :js:class:`ArrayBuffer`, in the order\n     *         provided for the blobs.\n     */\n    readManyBlobsAsArrayBuffers(blobs, onLoaded) {\n        RB.DataUtils._readManyBlobsAs('readBlobAsArrayBuffer', blobs,\n                                      onLoaded);\n    },\n\n    /**\n     * Read several Blobs as individual text strings.\n     *\n     * This is an asynchronous operation.\n     *\n     * Args:\n     *     blobs (Array):\n     *         The array of :js:class:`Blob`s to read as text.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blobs have loaded. This will take\n     *         one parameter per loaded string, in the order provided for the\n     *         blobs.\n     */\n    readManyBlobsAsStrings(blobs, onLoaded) {\n        RB.DataUtils._readManyBlobsAs('readBlobAsString', blobs, onLoaded);\n    },\n\n    /**\n     * Build an ArrayBuffer based on a schema.\n     *\n     * This takes a schema that specifies the data that should go into the\n     * :js:class:`ArrayBuffer`. Each item in the schema is an object specifying\n     * the type and the list of values of that type to add.\n     *\n     * Args:\n     *     schema (Array):\n     *         The schema containing the data to load. Each item in the array\n     *         is an object that looks like::\n     *\n     *             {\n     *                 type: 'uint8', // Or another type\n     *                 values: [1, 2, 3, ...],\n     *             }\n     *\n     *         See :js:data:`RB.DataUtils.ArrayBufferTypes`.\n     *\n     * Returns:\n     *     ArrayBuffer:\n     *     The resulting buffer built from the schema.\n     */\n    buildArrayBuffer(schema) {\n        const ArrayBufferTypes = RB.DataUtils.ArrayBufferTypes;\n        let arrayLen = 0;\n\n        for (let i = 0; i < schema.length; i++) {\n            const item = schema[i];\n\n            arrayLen += ArrayBufferTypes[item.type].size * item.values.length;\n        }\n\n        const arrayBuffer = new ArrayBuffer(arrayLen);\n        const dataView = new DataView(arrayBuffer);\n        let pos = 0;\n\n        for (let i = 0; i < schema.length; i++) {\n            const item = schema[i];\n            const values = item.values;\n            const littleEndian = !item.bigEndian;\n            const typeInfo = ArrayBufferTypes[item.type];\n            const func = dataView[typeInfo.funcName];\n            const size = typeInfo.size;\n\n            for (let j = 0; j < values.length; j++) {\n                func.call(dataView, pos, values[j], littleEndian);\n                pos += size;\n            }\n        }\n\n        return arrayBuffer;\n    },\n\n    /**\n     * Build a Blob based on a schema.\n     *\n     * This takes a schema that specifies the data that should go into the\n     * :js:class:`Blob`. Each item in the schema is either an array of objects\n     * specifying the type and the list of values of that type to add (see\n     * :js:func:`RB.DataUtils.buildArrayBuffer` for details), a\n     * :js:class:`Blob`, or string to add.\n     *\n     * Args:\n     *     schema (Array):\n     *         The schema containing the data to load. Each item in the array\n     *         must be a :js:class:`Blob`, string, or an array of objects\n     *         supported by :js:func:`RB.DataUtils.buildArrayBuffer`.\n     *\n     * Returns:\n     *     Blob:\n     *     The resulting blob built from the schema.\n     */\n    buildBlob(schema) {\n        const parts = [];\n\n        for (let i = 0; i < schema.length; i++) {\n            const schemaItem = schema[i];\n\n            if (_.isArray(schemaItem)) {\n                parts.push(RB.DataUtils.buildArrayBuffer(schemaItem));\n            } else {\n                parts.push(schemaItem);\n            }\n        }\n\n        return new Blob(parts);\n    },\n\n    /**\n     * Read a Blob using a specific FileReader function.\n     *\n     * This is a convenience function that wraps a :js:class:`FileReader`\n     * function designed to load a blob as a certain type.\n     *\n     * Args:\n     *     readFuncName (string):\n     *         The function name on :js:class:`FileReader` to call.\n     *\n     *     blob (Blob):\n     *         The blob to load.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blob has loaded. This will take\n     *         the resulting value as an argument.\n     */\n    _readBlobAs(readFuncName, blob, onLoaded) {\n        const reader = new FileReader();\n\n        reader.addEventListener('loadend', () => onLoaded(reader.result));\n        reader[readFuncName](blob);\n    },\n\n    /**\n     * Read several Blobs using a specific FileReader function.\n     *\n     * This is a convenience function that wraps a :js:class:`FileReader`\n     * function, chaining multiple results in order to asynchronously load\n     * each of the blobs as a certain type.\n     *\n     * Args:\n     *     readFuncName (string):\n     *         The function name on :js:class:`FileReader` to call.\n     *\n     *     blobs (Array):\n     *         The array of Blobs to load.\n     *\n     *     onLoaded (function):\n     *         The function to call when the blobs have loaded. This will take\n     *         an argument per value loaded.\n     */\n    _readManyBlobsAs(readFuncName, blobs, onLoaded) {\n        const loadFunc = RB.DataUtils[readFuncName];\n        let result = new Array(blobs.length);\n        let numLoaded = 0;\n\n        function onBlobLoaded(i, text) {\n            result[i] = text;\n            numLoaded++;\n\n            if (numLoaded === blobs.length) {\n                onLoaded.apply(null, result);\n            }\n        }\n\n        blobs.forEach((blob, i) => {\n            loadFunc(blob, text => onBlobLoaded(i, text));\n        });\n    },\n};\n"],"mappings":"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","ignoreList":[]}