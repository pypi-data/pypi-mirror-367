{"version":3,"file":"dataUtilsTests.js","names":["suite","it","done","str","blob","Blob","RB","DataUtils","readBlobAsArrayBuffer","result","expect","byteLength","toBe","dataView","DataView","i","getUint8","charCodeAt","readBlobAsString","str1","str2","blob1","blob2","readManyBlobsAsArrayBuffers","result1","result2","dataView1","dataView2","readManyBlobsAsStrings","describe","values","arrayBuffer","buildArrayBuffer","type","length","getInt8","getInt16","bigEndian","getUint16","getInt32","getUint32","getFloat32","getFloat64","toEqual","buildBlob"],"sources":["../../../../../../static/rb/js/utils/tests/dataUtilsTests.es6.js"],"sourcesContent":["suite('rb/utils/dataUtils', function() {\n    it('readBlobAsArrayBuffer', function(done) {\n        const str = 'abc123';\n        const blob = new Blob([str]);\n\n        RB.DataUtils.readBlobAsArrayBuffer(blob, result => {\n            expect(result.byteLength).toBe(6);\n\n            const dataView = new DataView(result);\n\n            for (let i = 0; i < result.byteLength; i++) {\n                expect(dataView.getUint8(i)).toBe(str.charCodeAt(i));\n            }\n\n            done();\n        });\n    });\n\n    it('readBlobAsString', function(done) {\n        const blob = new Blob(['This is a test.']);\n\n        RB.DataUtils.readBlobAsString(blob, result => {\n            expect(typeof result).toBe('string');\n            expect(result).toBe('This is a test.');\n\n            done();\n        });\n    });\n\n    it('readManyBlobsAsArrayBuffers', function(done) {\n        const str1 = 'abc123';\n        const str2 = 'foo';\n\n        const blob1 = new Blob([str1]);\n        const blob2 = new Blob([str2]);\n\n        RB.DataUtils.readManyBlobsAsArrayBuffers([blob1, blob2],\n                                                 (result1, result2) => {\n            expect(result1.byteLength).toBe(6);\n            expect(result2.byteLength).toBe(3);\n\n            const dataView1 = new DataView(result1);\n\n            for (let i = 0; i < result1.byteLength; i++) {\n                expect(dataView1.getUint8(i)).toBe(str1.charCodeAt(i));\n            }\n\n            const dataView2 = new DataView(result2);\n\n            for (let i = 0; i < result2.byteLength; i++) {\n                expect(dataView2.getUint8(i)).toBe(str2.charCodeAt(i));\n            }\n\n            done();\n        });\n    });\n\n    it('readManyBlobsAsStrings', function(done) {\n        const blob1 = new Blob(['This is a test.']);\n        const blob2 = new Blob(['hello world']);\n\n        RB.DataUtils.readManyBlobsAsStrings([blob1, blob2],\n                                            (result1, result2) => {\n            expect(typeof result1).toBe('string');\n            expect(typeof result2).toBe('string');\n            expect(result1).toBe('This is a test.');\n            expect(result2).toBe('hello world');\n\n            done();\n        });\n    });\n\n    describe('buildArrayBuffer', function() {\n        it('With int8', function() {\n            const values = [-1, 0, 1];\n            const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                {\n                    type: 'int8',\n                    values: values,\n                },\n            ]);\n            expect(arrayBuffer.byteLength).toBe(3);\n\n            const dataView = new DataView(arrayBuffer);\n\n            for (let i = 0; i < values.length; i++) {\n                expect(dataView.getInt8(i)).toBe(values[i]);\n            }\n        });\n\n        it('With uint8', function() {\n            const values = [1, 2, 3];\n            const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                {\n                    type: 'uint8',\n                    values: values,\n                },\n            ]);\n            expect(arrayBuffer.byteLength).toBe(3);\n\n            const dataView = new DataView(arrayBuffer);\n\n            for (let i = 0; i < values.length; i++) {\n                expect(dataView.getUint8(i)).toBe(values[i]);\n            }\n        });\n\n        describe('With int16', function() {\n            const values = [-1, 0, 1];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'int16',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(6);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getInt16(i * 2, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'int16',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(6);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getInt16(i * 2)).toBe(values[i]);\n                }\n            });\n        });\n\n        describe('With uint16', function() {\n            const values = [1, 2, 3];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'uint16',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(6);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getUint16(i * 2, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'uint16',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(6);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getUint16(i * 2)).toBe(values[i]);\n                }\n            });\n        });\n\n        describe('With int32', function() {\n            const values = [-1, 0, 1];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'int32',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getInt32(i * 4, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'int32',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getInt32(i * 4)).toBe(values[i]);\n                }\n            });\n        });\n\n        describe('With uint32', function() {\n            const values = [1, 2, 3];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'uint32',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getUint32(i * 4, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'uint32',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getUint32(i * 4)).toBe(values[i]);\n                }\n            });\n        });\n\n        describe('With float32', function() {\n            const values = [1, 2, 3];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'float32',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getFloat32(i * 4, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'float32',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(12);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getFloat32(i * 4)).toBe(values[i]);\n                }\n            });\n        });\n\n        describe('With float64', function() {\n            const values = [1, 2, 3];\n\n            it('Little endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'float64',\n                        values: values,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(24);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getFloat64(i * 8, true)).toBe(values[i]);\n                }\n            });\n\n            it('Big endian', function() {\n                const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                    {\n                        type: 'float64',\n                        values: values,\n                        bigEndian: true,\n                    },\n                ]);\n                expect(arrayBuffer.byteLength).toBe(24);\n\n                const dataView = new DataView(arrayBuffer);\n\n                for (let i = 0; i < values.length; i++) {\n                    expect(dataView.getFloat64(i * 8)).toBe(values[i]);\n                }\n            });\n        });\n\n        it('With complex schema', function() {\n            const arrayBuffer = RB.DataUtils.buildArrayBuffer([\n                {\n                    type: 'int32',\n                    values: [10, 20],\n                    bigEndian: true,\n                },\n                {\n                    type: 'uint8',\n                    values: [100],\n                },\n                {\n                    type: 'uint16',\n                    values: [64],\n                },\n                {\n                    type: 'float64',\n                    values: [1.234],\n                },\n            ]);\n            expect(arrayBuffer.byteLength).toBe(19);\n\n            const dataView = new DataView(arrayBuffer);\n            expect(dataView.getInt32(0)).toBe(10);\n            expect(dataView.getInt32(4)).toBe(20);\n            expect(dataView.getUint8(8)).toBe(100);\n            expect(dataView.getUint16(9, true)).toBe(64);\n            expect(dataView.getFloat64(11, true)).toEqual(1.234);\n        });\n    });\n\n    it('buildBlob', function(done) {\n        const blob = RB.DataUtils.buildBlob([\n            'abc',\n            [\n                {\n                    type: 'uint8',\n                    values: [1, 2],\n                },\n                {\n                    type: 'uint32',\n                    values: [100],\n                },\n            ],\n            new Blob(['def']),\n        ]);\n\n        RB.DataUtils.readBlobAsArrayBuffer(blob, arrayBuffer => {\n            expect(arrayBuffer.byteLength).toBe(12);\n\n            const dataView = new DataView(arrayBuffer);\n            expect(dataView.getUint8(0)).toBe('a'.charCodeAt(0));\n            expect(dataView.getUint8(1)).toBe('b'.charCodeAt(0));\n            expect(dataView.getUint8(2)).toBe('c'.charCodeAt(0));\n            expect(dataView.getUint8(3)).toBe(1);\n            expect(dataView.getUint8(4)).toBe(2);\n            expect(dataView.getUint32(5, true)).toBe(100);\n            expect(dataView.getUint8(9)).toBe('d'.charCodeAt(0));\n            expect(dataView.getUint8(10)).toBe('e'.charCodeAt(0));\n            expect(dataView.getUint8(11)).toBe('f'.charCodeAt(0));\n\n            done();\n        });\n    });\n});\n"],"mappings":"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","ignoreList":[]}