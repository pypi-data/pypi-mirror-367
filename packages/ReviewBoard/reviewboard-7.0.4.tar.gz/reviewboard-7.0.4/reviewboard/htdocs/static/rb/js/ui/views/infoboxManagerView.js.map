{"version":3,"file":"infoboxManagerView.js","names":["RB","InfoboxManagerView","Backbone","View","extend","POPUP_DELAY_MS","HIDE_DELAY_MS","FADE_IN_MS","FADE_OUT_MS","initialize","_infoboxViews","_activeInfoboxView","_cache","_showTimeout","_hideTimeout","remove","prototype","call","key","hasOwnProperty","addTargets","infoboxViewType","$targets","each","idx","target","$target","$","data","on","_onTargetMouseEnter","bind","_onMouseLeave","setPositioning","positioning","getOrCreateInfobox","InfoboxViewType","infoboxID","console","assert","view","$el","hide","_onInfoboxMouseEnter","appendTo","document","body","_loadInfobox","infoboxView","length","url","getURLForTarget","cachedData","undefined","setContents","_showInfobox","_fetchInfoboxContents","html","onDone","ajax","ifModified","done","positionToSide","_","defaults","fitOnScreen","fadeIn","_hideInfobox","curInfoboxView","fadeOut","clearTimeout","setTimeout","_instance","getInstance","instance","createJQueryFn"],"sources":["../../../../../../static/rb/js/ui/views/infoboxManagerView.es6.js"],"sourcesContent":["/**\n * Manages the registration, display, and interaction of infoboxes.\n *\n * This view is responsible for tracking the various forms of infoboxes needed\n * on a page and handling their display when hovering over a target. It can\n * also create jQuery functions for registering elements with particular\n * infoboxes.\n *\n * There's only one instance used per page, accessed via\n * :js:func:`RB.InfoboxManagerView.getInstance`.\n */\nRB.InfoboxManagerView = Backbone.View.extend({\n    /** The delay after hovering over a target before displaying an infobox. */\n    POPUP_DELAY_MS: 700,\n\n    /** The delay after leaving a target before hiding an infobox. */\n    HIDE_DELAY_MS: 400,\n\n    /** The animation time for fading in an infobox. */\n    FADE_IN_MS: 200,\n\n    /** The animation time for fading out an infobox. */\n    FADE_OUT_MS: 150,\n\n    /**\n     * Initialize the manager.\n     */\n    initialize() {\n        this._infoboxViews = {};\n        this._activeInfoboxView = null;\n        this._cache = {};\n        this._showTimeout = null;\n        this._hideTimeout = null;\n    },\n\n    /**\n     * Remove the manager's infoboxes from the DOM.\n     */\n    remove() {\n        Backbone.View.prototype.remove.call(this);\n\n        for (let key in this._infoboxViews) {\n            if (this._infoboxViews.hasOwnProperty(key)) {\n                this._infoboxViews[key].remove();\n            }\n        }\n\n        this._infoboxViews = {};\n        this._cache = {};\n        this._activeInfoboxView = null;\n    },\n\n    /**\n     * Add one or more targets for a particular type of infobox.\n     *\n     * These targets will trigger the specified infobox when hovering over\n     * them.\n     *\n     * Args:\n     *     infoboxViewType (prototype):\n     *         The type of infobox to register with. This must be a subclass\n     *         of :js:class:`RB.BaseInfoboxView`.\n     *\n     *     $targets (jQuery):\n     *         A set of jQuery targets to register with the infobox.\n     */\n    addTargets(infoboxViewType, $targets) {\n        $targets.each((idx, target) => {\n            const $target = $(target);\n\n            if (!$target.data('has-infobox')) {\n                /*\n                 * Note that we're wanting to bind the functions instead of\n                 * using fat arrow functions in order to avoid having two\n                 * new anonymous functions per target, which is wasteful and\n                 * unnecessary.\n                 */\n                $target\n                    .data('has-infobox', true)\n                    .on('mouseenter',\n                        this._onTargetMouseEnter.bind(this, $target,\n                                                      infoboxViewType))\n                    .on('mouseleave', this._onMouseLeave.bind(this));\n            }\n        });\n    },\n\n    /**\n     * Set the positioning for a particular type of infobox.\n     *\n     * This is used to control how an infobox would be positioned on the\n     * page, relative to the target element. It completely overrides the\n     * default positioning for that type of infobox.\n     *\n     * Args:\n     *     infoboxViewType (prototype):\n     *         The type of infobox to alter the position for.\n     *\n     *     positioning (object):\n     *         The positioning information. This must be a value compatible\n     *         with :js:func:`$.fn.positionToSide`.\n     */\n    setPositioning(infoboxViewType, positioning) {\n        this.getOrCreateInfobox(infoboxViewType).positioning = positioning;\n    },\n\n    /**\n     * Return an instance of a particular type of infobox.\n     *\n     * If the instance doesn't yet exist, it will be created and registered\n     * with the manager.\n     *\n     * Args:\n     *     InfoboxViewType (prototype):\n     *         The type of infobox to return.\n     *\n     * Returns:\n     *     RB.BaseInfoboxView:\n     *     The resulting infobox instance.\n     */\n    getOrCreateInfobox(InfoboxViewType) {\n        const infoboxID = InfoboxViewType.prototype.infoboxID;\n        console.assert(infoboxID,\n                       'RB.BaseInfoboxView subclasses must have an ' +\n                       'infoboxID defined.');\n\n        let view = this._infoboxViews[infoboxID];\n\n        if (view) {\n            return view;\n        }\n\n        view = new InfoboxViewType();\n        view.$el\n            .hide()\n            .on('mouseenter', this._onInfoboxMouseEnter.bind(this))\n            .on('mouseleave', this._onMouseLeave.bind(this))\n            .appendTo(document.body);\n\n        this._infoboxViews[infoboxID] = view;\n\n        return view;\n    },\n\n    /**\n     * Load the contents for an infobox and display it.\n     *\n     * This will perform a HTTP GET on the infobox URL for the given target\n     * and then show the infobox with those contents. If the URL has already\n     * been fetched, the infobox will be displayed immediately and then the\n     * contents replaced once fetched.\n     *\n     * Args:\n     *     $target (jQuery):\n     *         The jQuery target element the infobox is being shown for.\n     *\n     *     infoboxView (RB.BaseInfoboxView):\n     *         The infobox view that will contain the HTML contents.\n     */\n    _loadInfobox($target, infoboxView) {\n        console.assert(\n            $target.length === 1,\n            'Too many targets matched when fetching infobox contents');\n\n        const url = infoboxView.getURLForTarget($target);\n        const cachedData = this._cache[url];\n\n        if (cachedData !== undefined) {\n            /*\n             * If we have cached data, show that immediately and update once we\n             * have the result from the server.\n             */\n            infoboxView.setContents(cachedData);\n            this._showInfobox(infoboxView, $target);\n        }\n\n        this._fetchInfoboxContents(url, html => {\n            this._cache[url] = html;\n            infoboxView.setContents(html);\n\n            if (cachedData === undefined) {\n                this._showInfobox(infoboxView, $target);\n            }\n        });\n    },\n\n    /**\n     * Fetch the contents for an infobox from the given URL.\n     *\n     * Args:\n     *     url (string):\n     *         The URL containing the infobox HTML.\n     *\n     *     onDone (function):\n     *         The handler to call when the infobox HTML has been fetched.\n     */\n    _fetchInfoboxContents(url, onDone) {\n        $.ajax(url, {\n            ifModified: true,\n        }).done(onDone);\n    },\n\n    /**\n     * Display an infobox alongside the given target.\n     *\n     * Args:\n     *     infoboxView (RB.BaseInfoboxView):\n     *         The infobox instance to use.\n     *\n     *     $target (jQuery):\n     *         The jQuery element to position the infobox beside.\n     */\n    _showInfobox(infoboxView, $target) {\n        infoboxView.$el\n            .positionToSide($target, _.defaults(infoboxView.positioning, {\n                fitOnScreen: true,\n            }))\n            .fadeIn(this.FADE_IN_MS);\n\n        this._activeInfoboxView = infoboxView;\n    },\n\n    /**\n     * Hide the active infobox.\n     */\n    _hideInfobox() {\n        if (this._activeInfoboxView) {\n            const curInfoboxView = this._activeInfoboxView;\n\n            this._activeInfoboxView.$el.fadeOut(\n                this.FADE_OUT_MS,\n                () => {\n                    /*\n                     * Only clear the active infobox if it hasn't been\n                     * replaced with a new one.\n                     */\n                    if (curInfoboxView === this._activeInfoboxView) {\n                        this._activeInfoboxView = null;\n                    }\n                });\n        }\n    },\n\n    /**\n     * Handler for when the mouse enters the infobox.\n     *\n     * This will prevent the infobox from being hidden after having left the\n     * target.\n     */\n    _onInfoboxMouseEnter() {\n        clearTimeout(this._hideTimeout);\n        this._hideTimeout = null;\n    },\n\n    /**\n     * Handler for when the mouse enters a target.\n     *\n     * This will wait a small amount of time (in case the user is simply\n     * temporarily mousing over the element) and then show the infobox.\n     *\n     * Args:\n     *     $target (jQuery):\n     *         The jQuery target element.\n     *\n     *     InfoboxViewType (prototype):\n     *         The type of infobox to show.\n     */\n    _onTargetMouseEnter($target, InfoboxViewType) {\n        clearTimeout(this._hideTimeout);\n        this._hideTimeout = null;\n\n        this._showTimeout = setTimeout(\n            () => {\n                this._showTimeout = null;\n                this._loadInfobox(\n                    $target,\n                    this.getOrCreateInfobox(InfoboxViewType));\n            },\n            this.POPUP_DELAY_MS);\n    },\n\n    /**\n     * Handler for when the mouse leaves a target or infobox.\n     *\n     * If an existing infobox is currently on-screen, it will be faded\n     * out after a brief delay (allowing time to move the mouse onto the\n     * infobox or back onto the target).\n     */\n    _onMouseLeave() {\n        // If we were going to show an infobox, cancel that.\n        clearTimeout(this._showTimeout);\n        this._showTimeout = null;\n\n        // Check if we need to hide any current infobox.\n        if (this._activeInfoboxView) {\n            /*\n             * We have an infobox on the screen, and the mouse is\n             * leaving it. Since there's no other infobox queued up,\n             * begin the process of fading it out, after a delay.\n             */\n            clearTimeout(this._hideTimeout);\n\n            this._hideTimeout = setTimeout(\n                () => {\n                    this._hideInfobox();\n                    this._hideTimeout = null;\n                },\n                this.HIDE_DELAY_MS);\n        }\n    },\n}, {\n    _instance: null,\n\n    /**\n     * Return an instance of the infobox manager.\n     *\n     * If one does not already exist, it will be created.\n     *\n     * Callers should always use this instead of creating an instance\n     * manually.\n     *\n     * Returns:\n     *     RB.InfoboxManagerView:\n     *     The infobox manager instance.\n     */\n    getInstance() {\n        let instance = RB.InfoboxManagerView._instance;\n\n        if (!instance) {\n            instance = new RB.InfoboxManagerView();\n            this._instance = instance;\n        }\n\n        return instance;\n    },\n\n    /**\n     * Create a jQuery function for registering elements with an infobox.\n     *\n     * This is used to create ``$.fn.`` functions that will register all\n     * matching elements as targets for a particular type of infobox.\n     *\n     * Args:\n     *     infoboxViewType (prototype):\n     *         The type of infobox to use for these elements.\n     *\n     * Returns:\n     *     function:\n     *     The resulting function. This should be assigned to a ``$.fn.``\n     *     function.\n     */\n    createJQueryFn(infoboxViewType) {\n        return function() {\n            RB.InfoboxManagerView.getInstance().addTargets(infoboxViewType,\n                                                           this);\n\n            return this;\n        };\n    },\n});\n"],"mappings":"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","ignoreList":[]}