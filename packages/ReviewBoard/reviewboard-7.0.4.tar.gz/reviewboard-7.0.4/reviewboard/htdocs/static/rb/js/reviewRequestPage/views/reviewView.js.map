{"version":3,"file":"reviewView.js","names":["RB","ReviewRequestPage","ReviewView","Backbone","View","extend","initialize","options","entryModel","reviewRequestEditorView","_bannerView","_draftBannerShown","_openIssueCount","_reviewReply","_replyEditors","_replyEditorViews","_replyDraftsCount","_diffFragmentViews","_$reviewComments","_$bodyTop","_$bodyBottom","model","set","_setupNewReply","listenTo","get","forEach","view","hideControls","render","reviewRequestEditor","$","$comment","find","on","hasDraft","EnabledFeatures","unifiedBanner","banner","UnifiedBannerView","getInstance","updateReplyDraftState","_showReplyDraftBanner","_hideReplyDraftBanner","issueBarEls","issueBarEl","issueStatus","dataset","BaseComment","isStateOpen","issueBar","CommentIssueBarView","el","canVerify","commentID","parseInt","commentId","commentType","interactive","reviewID","id","oldStatus","newStatus","oldOpen","newOpen","trigger","_","each","$el","editor","ReviewReplyEditor","anchorPrefix","data","contextID","contextType","review","reviewReply","ReviewReplyEditorView","push","addReviewReplyEditorView","page","PageManager","getPage","diffCommentsData","i","length","diffCommentData","queueLoadDiff","reviewRequest","bugTrackerURL","formatText","_onBodyTopChanged","_onBodyBottomChanged","_onBodyTopRichTextChanged","_onBodyBottomRichTextChanged","html","bodyTop","addClass","removeClass","bodyBottom","closest","toggle","hasOpenIssues","getOpenIssueCount","getReviewReplyEditorView","undefined","getReviewReply","createReply","stopListening","ReviewReplyDraftStaticBannerView","ReviewReplyDraftBannerView","$floatContainer","$bannerFloatContainer","noFloatContainerClass","bannerNoFloatContainerClass","appendTo","$bannerParent","remove"],"sources":["../../../../../../static/rb/js/reviewRequestPage/views/reviewView.es6.js"],"sourcesContent":["/**\n * Handles interaction for a review on the review request page. These can be\n * contained within the main review entries, but also for status updates in\n * change description entries or the initial status updates entry.\n */\nRB.ReviewRequestPage.ReviewView = Backbone.View.extend({\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     *\n     * Option Args:\n     *     entryModel (RB.ReviewRequestPage.Entry):\n     *         The entry model.\n     *\n     *     reviewRequestEditorView (RB.ReviewRequestEditorView):\n     *         The review request editor view.\n     */\n    initialize(options) {\n        this.options = options;\n        this.entryModel = options.entryModel;\n        this.reviewRequestEditorView = options.reviewRequestEditorView;\n\n        this._bannerView = null;\n        this._draftBannerShown = false;\n        this._openIssueCount = 0;\n        this._reviewReply = null;\n        this._replyEditors = [];\n        this._replyEditorViews = [];\n        this._replyDraftsCount = 0;\n        this._diffFragmentViews = [];\n\n        this._$reviewComments = null;\n        this._$bodyTop = null;\n        this._$bodyBottom = null;\n\n        this.model.set('includeTextTypes', 'html,raw,markdown');\n\n        this._setupNewReply();\n\n        this.listenTo(this.entryModel, 'change:collapsed', () => {\n            if (!this.entryModel.get('collapsed')) {\n                this._diffFragmentViews.forEach(\n                    view => view.hideControls(false));\n            }\n        });\n    },\n\n    /**\n     * Render the view.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewView:\n     *     This object, for chaining.\n     */\n    render() {\n        const reviewRequestEditor = this.entryModel.get('reviewRequestEditor');\n\n        this._$reviewComments = this.$('.review-comments');\n\n        const $comment = this._$reviewComments.find(\n            '.review-comment-details .review-comment');\n        this._$bodyTop = $comment.find('.body_top');\n        this._$bodyBottom = $comment.find('.body_bottom');\n\n        this._replyDraftsCount = 0;\n\n        this.on('hasDraftChanged', hasDraft => {\n            if (RB.EnabledFeatures.unifiedBanner) {\n                const banner = RB.UnifiedBannerView.getInstance(false);\n\n                /*\n                 * We make this conditional to make unit tests easier to write.\n                 */\n                if (banner) {\n                    banner.model.updateReplyDraftState(\n                        this._reviewReply, hasDraft);\n                }\n            }\n\n            if (hasDraft) {\n                this._showReplyDraftBanner();\n            } else {\n                this._hideReplyDraftBanner();\n            }\n        });\n\n        const issueBarEls = this._$reviewComments.find('.rb-c-issue-bar');\n\n        for (const issueBarEl of issueBarEls) {\n            const issueStatus = issueBarEl.dataset.issueStatus;\n\n            if (RB.BaseComment.isStateOpen(issueStatus)) {\n                this._openIssueCount++;\n            }\n\n            const issueBar = new RB.CommentIssueBarView({\n                el: issueBarEl,\n\n                canVerify: issueBarEl.dataset.canVerify === 'true',\n                commentID: parseInt(issueBarEl.dataset.commentId, 10),\n                commentType: issueBarEl.dataset.commentType,\n                interactive: issueBarEl.dataset.interactive === 'true',\n                issueStatus: issueStatus,\n                reviewID: this.model.id,\n            });\n\n            issueBar.render();\n\n            this.listenTo(\n                issueBar,\n                'statusChanged',\n                (oldStatus, newStatus) => {\n                    const oldOpen = RB.BaseComment.isStateOpen(oldStatus);\n                    const newOpen = RB.BaseComment.isStateOpen(newStatus);\n\n                    if (oldOpen !== newOpen) {\n                        if (newOpen) {\n                            this._openIssueCount++;\n                        } else {\n                            this._openIssueCount--;\n                        }\n                    }\n\n                    this.trigger('openIssuesChanged');\n                });\n        }\n\n        _.each(this.$('.comment-section'), el => {\n            const $el = $(el);\n            const editor = new RB.ReviewRequestPage.ReviewReplyEditor({\n                anchorPrefix: $el.data('reply-anchor-prefix'),\n                contextID: $el.data('context-id'),\n                contextType: $el.data('context-type'),\n                review: this.model,\n                reviewReply: this._reviewReply,\n            });\n\n            const view = new RB.ReviewRequestPage.ReviewReplyEditorView({\n                el: el,\n                model: editor,\n                reviewRequestEditor: reviewRequestEditor,\n            });\n            view.render();\n\n            this.listenTo(editor, 'change:hasDraft', (model, hasDraft) => {\n                if (hasDraft) {\n                    this._replyDraftsCount++;\n                    this.trigger('hasDraftChanged', true);\n                } else {\n                    this._replyDraftsCount--;\n\n                    if (this._replyDraftsCount === 0) {\n                        this.trigger('hasDraftChanged', false);\n                    }\n                }\n            });\n\n            this._replyEditors.push(editor);\n            this._replyEditorViews.push(view);\n\n            if (this.reviewRequestEditorView) {\n                this.reviewRequestEditorView.addReviewReplyEditorView(view);\n            }\n\n            if (editor.get('hasDraft')) {\n                this._replyDraftsCount++;\n            }\n        });\n\n        this.trigger('hasDraftChanged', this._replyDraftsCount > 0);\n\n        /*\n         * Load any diff fragments for comments made on this review. Each\n         * will be queued up and loaded when the page is rendered.\n         */\n        this._diffFragmentViews = [];\n\n        const page = RB.PageManager.getPage();\n        const diffCommentsData = this.entryModel.get('diffCommentsData');\n\n        for (let i = 0; i < diffCommentsData.length; i++) {\n            const diffCommentData = diffCommentsData[i];\n\n            page.queueLoadDiff(diffCommentData[0], diffCommentData[1],\n                               view => this._diffFragmentViews.push(view));\n        }\n\n        /*\n         * Do this last, after ReviewReplyEditorView has already set up the\n         * inline editors.\n         */\n        const reviewRequest = this.model.get('parentObject');\n        const bugTrackerURL = reviewRequest.get('bugTrackerURL');\n        _.each(this.$('pre.reviewtext'), el => {\n            RB.formatText($(el), { bugTrackerURL: bugTrackerURL });\n        });\n\n        this.listenTo(this.model, 'change:bodyTop',\n                      this._onBodyTopChanged);\n        this.listenTo(this.model, 'change:bodyBottom',\n                      this._onBodyBottomChanged);\n        this.listenTo(this.model, 'change:bodyTopRichText',\n                      this._onBodyTopRichTextChanged);\n        this.listenTo(this.model, 'change:bodyBottomRichText',\n                      this._onBodyBottomRichTextChanged);\n\n        return this;\n    },\n\n    /**\n     * Handler for when the Body Top field of a review changes.\n     *\n     * Updates the HTML for the field to show the new content.\n     */\n    _onBodyTopChanged() {\n        this._$bodyTop.html(this.model.get('htmlTextFields').bodyTop);\n    },\n\n    /**\n     * Handler for when the Body Top's Rich Text field of a review changes.\n     *\n     * Updates the class on the field to reflect the Rich Text state.\n     */\n    _onBodyTopRichTextChanged() {\n        if (this.model.get('bodyTopRichText')) {\n            this._$bodyTop.addClass('rich-text');\n        } else {\n            this._$bodyTop.removeClass('rich-text');\n        }\n    },\n\n    /**\n     * Handler for when the Body Bottom field of a review changes.\n     *\n     * Updates the HTML for the field to show the new content. The visibility\n     * of the body section will also be dependent on whether there is any\n     * content (mimicking the logic used when rendering the page).\n     */\n    _onBodyBottomChanged() {\n        const html = this.model.get('htmlTextFields').bodyBottom;\n\n        this._$bodyBottom\n            .html(html)\n            .closest('li').toggle(html && html.length > 0);\n    },\n\n    /**\n     * Handler for when the Body Bottom's Rich Text field of a review changes.\n     *\n     * Updates the class on the field to reflect the Rich Text state.\n     */\n    _onBodyBottomRichTextChanged() {\n        if (this.model.get('bodyBottomRichText')) {\n            this._$bodyBottom.addClass('rich-text');\n        } else {\n            this._$bodyBottom.removeClass('rich-text');\n        }\n    },\n\n    /**\n     * Return whether there are any open issues in the review.\n     *\n     * Returns:\n     *     boolean:\n     *     true if there are any open issues.\n     */\n    hasOpenIssues() {\n        return this._openIssueCount > 0;\n    },\n\n    /**\n     * Return the number of open issues in the review.\n     *\n     * Returns:\n     *     number:\n     *     The number of open issues.\n     */\n    getOpenIssueCount() {\n        return this._openIssueCount;\n    },\n\n    /**\n     * Return the ReviewReplyEditorView with the given context type and ID.\n     *\n     * Args:\n     *     contextType (string):\n     *         The type of object being replied to (such as ``body_top`` or\n     *         ``diff_comments``)\n     *\n     *     contextID (number, optional):\n     *         The ID of the comment being replied to, if appropriate.\n     *\n     * Returns:\n     *     RB.ReviewRequestPage.ReviewReplyEditorView:\n     *     The matching editor view.\n     */\n    getReviewReplyEditorView(contextType, contextID) {\n        if (contextID === undefined) {\n            contextID = null;\n        }\n\n        return _.find(this._replyEditorViews, view => {\n            const editor = view.model;\n            return editor.get('contextID') === contextID &&\n                   editor.get('contextType') === contextType;\n        });\n    },\n\n    /**\n     * Return the active reply.\n     *\n     * Returns:\n     *     RB.ReviewReply:\n     *     The active draft reply, or null if none exists.\n     */\n    getReviewReply() {\n        return this._reviewReply;\n    },\n\n    /**\n     * Set up a new ReviewReply for the editors.\n     *\n     * The new ReviewReply will be used for any new comments made on this\n     * review.\n     *\n     * A ReviewReply is set until it's either destroyed or published, at\n     * which point a new one is set.\n     *\n     * Args:\n     *     reviewReply (RB.ReviewReply, optional):\n     *         The reply object. If this is ``null``, a new ``RB.ReviewReply``\n     *         will be created. Note that this argument is only expected to be\n     *         used for unit testing.\n     */\n    _setupNewReply(reviewReply) {\n        if (!reviewReply) {\n            reviewReply = this.model.createReply();\n        }\n\n        if (this._reviewReply !== null) {\n            this.stopListening(this._reviewReply);\n\n            // Update all the existing editors to point to the new object.\n            this._replyEditors.forEach(\n                editor => editor.set('reviewReply', reviewReply));\n\n            this.trigger('hasDraftChanged', false);\n        }\n\n        this.listenTo(reviewReply, 'destroyed published',\n                      () => this._setupNewReply());\n\n        this._reviewReply = reviewReply;\n    },\n\n    /**\n     * Show the reply draft banner.\n     *\n     * This will be called in response to any new replies made on a review,\n     * or if there are pending replies that already exist on the review.\n     */\n    _showReplyDraftBanner() {\n        if (!this._draftBannerShown) {\n            if (RB.EnabledFeatures.unifiedBanner) {\n                this._bannerView =\n                    new RB.ReviewRequestPage.ReviewReplyDraftStaticBannerView({\n                        model: this._reviewReply,\n                    });\n            } else {\n                this._bannerView =\n                    new RB.ReviewRequestPage.ReviewReplyDraftBannerView({\n                        model: this._reviewReply,\n                        $floatContainer: this.options.$bannerFloatContainer,\n                        noFloatContainerClass:\n                            this.options.bannerNoFloatContainerClass,\n                        reviewRequestEditor: this.entryModel.get(\n                            'reviewRequestEditor'),\n                    });\n            }\n\n            this._bannerView.render();\n            this._bannerView.$el.appendTo(this.options.$bannerParent);\n            this._draftBannerShown = true;\n        }\n    },\n\n    /**\n     * Hide the reply draft banner.\n     */\n    _hideReplyDraftBanner() {\n        if (this._draftBannerShown) {\n            this._bannerView.remove();\n            this._bannerView = null;\n            this._draftBannerShown = false;\n        }\n    },\n});\n"],"mappings":"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","ignoreList":[]}