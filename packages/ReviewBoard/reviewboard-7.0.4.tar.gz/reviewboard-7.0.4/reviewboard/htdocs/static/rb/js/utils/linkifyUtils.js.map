{"version":3,"file":"linkifyUtils.js","names":["RB","LinkifyUtils","URL_RE","RegExp","join","linkifyURLs","text","replace","url","parts","match","openParen","extra","linkifyReviewRequests","m1","m2","href","SITE_ROOT","substr","linkifyBugs","bugTrackerURL","m3","bugnum1","bugnum2","bugnum","linkifyText","isHTMLEncoded","_","escape","linkifyChildren","el","i","childNodes","length","node","nodeType","TEXT_NODE","textContent","newText","$","replaceWith","ELEMENT_NODE","nodeName"],"sources":["../../../../../static/rb/js/utils/linkifyUtils.es6.js"],"sourcesContent":["RB.LinkifyUtils = {\n    URL_RE: new RegExp(\n        '\\\\b((' + [\n            'https://',\n            'http://',\n            'ftp://',\n            'ftps://',\n            'gopher://',\n            'mailto:',\n            'news:',\n            'sms:'\n        ].join('|') +\n        ')[\\\\-A-Za-z0-9+&@#\\/%?=~_()|!:,.;]*([\\\\-A-Za-z0-9+@#\\/%=~_();|]|))',\n        'g'\n    ),\n\n    /**\n     * Linkify all URLs within some text.\n     *\n     * This will turn things that look like URLs into clickable links.\n     *\n     * Args:\n     *     text (string):\n     *         The text to linkify.\n     *\n     * Returns:\n     *     string:\n     *     The given text with all URLs replaced by <a> tags.\n     */\n    linkifyURLs(text) {\n        return text.replace(\n            RB.LinkifyUtils.URL_RE,\n            function(url) {\n                /*\n                 * We might catch an entity at the end of the URL. This is hard\n                 * to avoid, since we can't rely on advanced RegExp techniques\n                 * in all browsers. So, we'll now search for it and prevent it\n                 * from being part of the URL if it exists. However, a URL with\n                 * an open bracket will not have its close bracket removed. This\n                 * was a modification to the original bug fix.\n                 *\n                 * See bug 1069.\n                 */\n                const parts = url.match(/^(.*)(&[a-z]+;|\\))$/);\n                const openParen = url.match(/.*\\(.*/);\n\n                let extra = '';\n\n                if (parts !== null && openParen === null) {\n                    /* We caught an entity. Set it free. */\n                    url = parts[1];\n                    extra = parts[2];\n                }\n\n                return `<a target=\"_blank\" href=\"${url}\">${url}</a>${extra}`;\n            });\n    },\n\n    /**\n     * Linkify /r/# review request numbers.\n     *\n     * This will turn things that look like references to other review requests\n     * into clickable links.\n     *\n     * Args:\n     *     text (string):\n     *         The text to linkify.\n     *\n     * Returns:\n     *     string:\n     *     The given text with all \"/r/#\" text replaced by <a> tags.\n     */\n    linkifyReviewRequests(text) {\n        return text.replace(\n            /(^|\\s|&lt;|\\(|\\[|{)\\/(r\\/\\d+(\\/[\\-A-Za-z0-9+&@#\\/%?=~_()|!:,.;]*[\\-A-Za-z0-9+&@#\\/%=~_()|]*)?)/g,\n            function(text, m1, m2) {\n                const parts = m2.match(/^(.*)(&[a-z]+;|\\))$/);\n\n                let extra = '';\n                let url = m2;\n\n                if (parts !== null) {\n                    /* We caught an entity. Set it free. */\n                    url = parts[1];\n                    extra = parts[2];\n                }\n\n                const href = SITE_ROOT + url + (url.substr(-1) === '/' ? '' : '/');\n\n                return `${m1}<a target=\"_blank\" href=\"${href}\" class=\"review-request-link\">/${url}</a>${extra}`;\n            });\n    },\n\n    /**\n     * Linkify bug numbers.\n     *\n     * This will turn things that look like references to bugs (such as\n     * \"bug 408\") into clickable links.\n     *\n     * Args:\n     *     text (string):\n     *         The text to linkify.\n     *\n     *     bugTrackerURL (string):\n     *         The URL to use when formatting the bug number. This is expected\n     *         to have the literal ``--bug_id--`` in it, which will be replaced\n     *         by the captured bug ID.\n     *\n     * Returns:\n     *     string:\n     *     The given text with all bug references replaced by <a> tags.\n     */\n    linkifyBugs(text, bugTrackerURL) {\n        if (bugTrackerURL) {\n            return text.replace(\n                /\\b(bug|issue) (#([^.,)\\]\\s]+)|#?(\\d+))/gi,\n                function(text, m2, m3, bugnum1, bugnum2) {\n                    /*\n                     * The bug number can appear in either of those groups,\n                     * depending on how this was typed, so try both.\n                     */\n                    const bugnum = bugnum1 || bugnum2;\n                    const href = bugTrackerURL.replace(\"--bug_id--\", bugnum);\n\n                    return `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\n                });\n        } else {\n            return text;\n        }\n    },\n\n    /**\n     * Linkify text using all available methods.\n     *\n     * Linkifies a block of text, turning URLs, /r/#/ paths, and bug numbers\n     * into clickable links.\n     *\n     * Args:\n     *     text (string):\n     *         The text to linkify.\n     *\n     *     bugTrackerURL (string):\n     *         The URL to use when formatting the bug number. This is expected\n     *         to have the literal ``--bug_id--`` in it, which will be replaced\n     *         by the captured bug ID.\n     *\n     *     isHTMLEncoded (boolean):\n     *         Whether or not the given text has already had dangerous\n     *         characters (like < or >) replaced by their HTML entities. If\n     *         this is false, the text will first be encoded.\n     *\n     * Returns:\n     *     string:\n     *     The given text with all linkifyable items replaced by <a> tags.\n     */\n    linkifyText(text, bugTrackerURL, isHTMLEncoded) {\n        if (!isHTMLEncoded) {\n            text = _.escape(text);\n        }\n\n        text = RB.LinkifyUtils.linkifyURLs(text);\n        text = RB.LinkifyUtils.linkifyReviewRequests(text);\n        text = RB.LinkifyUtils.linkifyBugs(text, bugTrackerURL);\n        return text;\n    },\n\n    /**\n     * Linkify text within a pre-established DOM tree.\n     *\n     * This iterates through a tree of nodes, linkifying any text nodes that\n     * reference bug URLs, review requests, or contain unlinked plain-text\n     * URLs.\n     *\n     * This will avoid linking anything within a <pre> tag, to avoid messing\n     * with code blocks, and <a> tags, to avoid linkifying existing links.\n     *\n     * Args:\n     *     el (Element):\n     *         The element to linkify.\n     *\n     *     bugTrackerURL (string):\n     *         The URL to use when formatting the bug number. This is expected\n     *         to have the literal ``--bug_id--`` in it, which will be replaced\n     *         by the captured bug ID.\n     */\n    linkifyChildren(el, bugTrackerURL) {\n        for (let i = 0; i < el.childNodes.length; i++) {\n            const node = el.childNodes[i];\n\n            if (node.nodeType === node.TEXT_NODE) {\n                if (node.textContent) {\n                    const newText = RB.LinkifyUtils.linkifyText(\n                        node.textContent, bugTrackerURL);\n\n                    if (newText !== node.textContent) {\n                        $(node).replaceWith(newText);\n                    }\n                }\n            } else if (node.nodeType === node.ELEMENT_NODE) {\n                if (node.nodeName !== 'PRE' && node.nodeName !== 'A') {\n                    RB.LinkifyUtils.linkifyChildren(node, bugTrackerURL);\n                }\n            }\n        }\n    }\n};\n"],"mappings":"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","ignoreList":[]}