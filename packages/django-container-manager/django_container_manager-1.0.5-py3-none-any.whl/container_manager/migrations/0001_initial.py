# Generated by Django 5.2.4 on 2025-07-31 17:38

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ExecutorHost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('host_type', models.CharField(choices=[('tcp', 'TCP'), ('unix', 'Unix Socket')], default='unix', max_length=10)),
                ('connection_string', models.CharField(help_text='e.g., tcp://192.168.1.100:2376 or unix:///var/run/docker.sock', max_length=500)),
                ('tls_enabled', models.BooleanField(default=False)),
                ('tls_verify', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('auto_pull_images', models.BooleanField(default=True, help_text="Automatically pull Docker images that don't exist locally")),
                ('executor_type', models.CharField(choices=[('docker', 'Docker'), ('cloudrun', 'Google Cloud Run'), ('fargate', 'AWS Fargate'), ('scaleway', 'Scaleway Containers')], default='docker', help_text='Type of container executor this host represents', max_length=50)),
                ('executor_config', models.JSONField(blank=True, default=dict, help_text="Executor-specific configuration for this host. Examples:\n• Docker: {'base_url': 'tcp://host:2376', 'tls_verify': true}\n• Cloud Run: {'project': 'my-project', 'region': 'us-central1', 'service_account': 'sa@project.iam'}\n• AWS Fargate: {'cluster': 'my-cluster', 'subnets': ['subnet-123'], 'security_groups': ['sg-456']}\n• General: Any JSON config your custom executor implementation needs")),
                ('max_concurrent_jobs', models.PositiveIntegerField(default=10, help_text='Maximum number of concurrent jobs for this executor')),
                ('weight', models.PositiveIntegerField(default=100, help_text='Routing weight (higher = more preferred, 1-1000)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(1000)])),
                ('current_job_count', models.PositiveIntegerField(default=0, help_text='Current number of running jobs on this host')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Executor Host',
                'verbose_name_plural': 'Executor Hosts',
            },
        ),
        migrations.CreateModel(
            name='EnvironmentVariableTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('environment_variables_text', models.TextField(blank=True, help_text='Environment variables, one per line in KEY=value format. Example:\nDEBUG=true\nAPI_KEY=secret123\nTIMEOUT=300', verbose_name='Environment Variables')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Environment Variable Template',
                'verbose_name_plural': 'Environment Variable Templates',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ContainerJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('launching', 'Launching'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('timeout', 'Timeout'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('description', models.TextField(blank=True)),
                ('docker_image', models.CharField(blank=True, default='', max_length=500)),
                ('command', models.TextField(blank=True, help_text='Command to run in container (optional)')),
                ('working_directory', models.CharField(blank=True, max_length=500)),
                ('memory_limit', models.PositiveIntegerField(blank=True, help_text='Memory limit in MB', null=True)),
                ('cpu_limit', models.FloatField(blank=True, help_text='CPU limit (e.g., 1.5 for 1.5 cores)', null=True, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(32.0)])),
                ('timeout_seconds', models.PositiveIntegerField(default=3600, help_text='Maximum execution time in seconds')),
                ('network_configuration', models.JSONField(blank=True, default=list, help_text='Network configuration for the container. Examples:\n[{"network_name": "bridge", "aliases": []}]\n[{"network_name": "app-network", "aliases": ["api", "backend"]}]\n[{"network_name": "database-network", "aliases": []}]')),
                ('override_environment', models.TextField(blank=True, default='', help_text='Environment variable overrides, one per line in KEY=value format. These override any variables from the template. Example:\nDEBUG=true\nWORKER_COUNT=4', verbose_name='Environment Variable Overrides')),
                ('execution_id', models.CharField(blank=True, default='', help_text='Unified execution identifier for all executor types', max_length=255)),
                ('exit_code', models.IntegerField(blank=True, null=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('executor_metadata', models.JSONField(blank=True, default=dict, help_text="Executor-specific runtime data and identifiers. Examples:\n• Docker: {'container_name': 'my-job-123', 'network': 'bridge'}\n• Cloud Run: {'job_name': 'job-abc123', 'region': 'us-central1', 'project': 'my-project'}\n• AWS Fargate: {'task_arn': 'arn:aws:ecs:...', 'cluster': 'my-cluster', 'task_definition': 'my-task:1'}\n• Custom: Any JSON data your executor needs to track or reference the job")),
                ('max_memory_usage', models.PositiveIntegerField(blank=True, help_text='Peak memory usage in bytes', null=True)),
                ('cpu_usage_percent', models.FloatField(blank=True, help_text='Average CPU usage percentage', null=True)),
                ('stdout_log', models.TextField(blank=True)),
                ('stderr_log', models.TextField(blank=True)),
                ('docker_log', models.TextField(blank=True, help_text='Docker daemon logs and events')),
                ('clean_output', models.TextField(blank=True, help_text='Stdout with timestamps and metadata stripped')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('environment_template', models.ForeignKey(blank=True, help_text='Environment variable template to use as base configuration', null=True, on_delete=django.db.models.deletion.SET_NULL, to='container_manager.environmentvariabletemplate')),
                ('docker_host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='container_manager.executorhost')),
            ],
            options={
                'verbose_name': 'Container Job',
                'verbose_name_plural': 'Container Jobs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['status', 'created_at'], name='cjob_status_created_idx'), models.Index(fields=['created_by', 'status'], name='cjob_created_by_status_idx'), models.Index(fields=['docker_host', 'status'], name='cjob_host_status_idx'), models.Index(fields=['status'], name='cjob_status_idx')],
            },
        ),
    ]
