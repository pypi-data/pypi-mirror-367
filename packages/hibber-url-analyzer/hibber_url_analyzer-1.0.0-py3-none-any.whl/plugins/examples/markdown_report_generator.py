"""
Markdown Report Generator Plugin

This plugin provides a custom report generator that creates markdown reports.
It demonstrates how to create a custom report generator plugin for the URL Analyzer.
"""

import os
import pandas as pd
from typing import Dict, Any, Optional, List

from url_analyzer.plugins.interface import ReportGeneratorPlugin
from url_analyzer.reporting.generators import ReportGenerator


class MarkdownReportGenerator(ReportGenerator):
    """
    Custom report generator for markdown reports.
    
    This generator creates markdown reports with the processed data and stats.
    """
    
    def generate_report(self, df: pd.DataFrame, output_path: str, stats: Dict[str, Any]) -> str:
        """
        Generate a markdown report from the provided data.
        
        Args:
            df: DataFrame containing URL data
            output_path: Path where to save the markdown report
            stats: Dictionary of statistics for the report
            
        Returns:
            Path to the generated markdown report
        """
        # Ensure the output path has the correct extension
        if not output_path.lower().endswith('.md'):
            output_path = f"{os.path.splitext(output_path)[0]}.md"
        
        # Create the directory if it doesn't exist
        os.makedirs(os.path.dirname(os.path.abspath(output_path)), exist_ok=True)
        
        # Generate the markdown content
        markdown_content = self._generate_markdown_content(df, stats)
        
        # Write the markdown content to the file
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(markdown_content)
        
        print(f"Generated markdown report: {output_path}")
        return output_path
    
    def get_format(self) -> str:
        """
        Get the format of reports generated by this generator.
        
        Returns:
            Report format ('markdown')
        """
        return 'markdown'
    
    def _generate_markdown_content(self, df: pd.DataFrame, stats: Dict[str, Any]) -> str:
        """
        Generate the markdown content for the report.
        
        Args:
            df: DataFrame containing URL data
            stats: Dictionary of statistics for the report
            
        Returns:
            Markdown content as a string
        """
        # Start with the report title
        content = "# URL Analysis Report\n\n"
        
        # Add summary statistics
        content += "## Summary Statistics\n\n"
        
        # Add total URLs
        content += f"- **Total URLs**: {stats.get('total', 0)}\n"
        
        # Add sensitive URLs
        content += f"- **Sensitive URLs**: {stats.get('sensitive', 0)}\n"
        
        # Add category counts
        content += "\n### URL Categories\n\n"
        if 'category_counts' in stats:
            for category, count in stats['category_counts'].items():
                content += f"- **{category}**: {count}\n"
        
        # Add data table
        content += "\n## URL Data\n\n"
        
        # Convert DataFrame to markdown table
        if not df.empty:
            # Select a subset of columns for readability
            display_columns = ['Domain_name', 'URL_Category', 'Is_Sensitive', 'Base_Domain']
            display_columns = [col for col in display_columns if col in df.columns]
            
            # Create the table header
            content += "| " + " | ".join(display_columns) + " |\n"
            content += "| " + " | ".join(["---"] * len(display_columns)) + " |\n"
            
            # Add the table rows (limit to 100 rows for performance)
            for _, row in df.head(100).iterrows():
                content += "| " + " | ".join([str(row[col]) for col in display_columns]) + " |\n"
            
            # Add a note if there are more rows
            if len(df) > 100:
                content += "\n*Note: Only showing the first 100 rows.*\n"
        else:
            content += "*No data available.*\n"
        
        # Add generation timestamp
        from datetime import datetime
        content += f"\n\n*Report generated on {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n"
        
        return content


class MarkdownReportGeneratorPlugin(ReportGeneratorPlugin):
    """
    Report generator plugin for markdown reports.
    
    This plugin provides a custom report generator that creates markdown reports
    from URL analysis data.
    """
    
    def __init__(self):
        """
        Initialize the markdown report generator plugin.
        """
        self._generator = None
        self._initialized = False
    
    def get_name(self) -> str:
        """
        Returns the name of the plugin.
        
        Returns:
            String name of the plugin
        """
        return "Markdown Report Generator"
    
    def get_version(self) -> str:
        """
        Returns the version of the plugin.
        
        Returns:
            String version of the plugin
        """
        return "1.0.0"
    
    def get_description(self) -> str:
        """
        Returns a description of the plugin.
        
        Returns:
            String description of the plugin
        """
        return "Generates markdown reports from URL analysis data"
    
    def get_author(self) -> str:
        """
        Returns the author of the plugin.
        
        Returns:
            String author of the plugin
        """
        return "URL Analyzer Team"
    
    def initialize(self, config: Dict[str, Any]) -> bool:
        """
        Initializes the plugin with the given configuration.
        
        Args:
            config: Dictionary containing configuration values
            
        Returns:
            Boolean indicating whether initialization was successful
        """
        try:
            self._generator = MarkdownReportGenerator()
            self._initialized = True
            return True
        except Exception as e:
            print(f"Error initializing Markdown Report Generator plugin: {e}")
            return False
    
    def shutdown(self) -> bool:
        """
        Performs cleanup when the plugin is being unloaded.
        
        Returns:
            Boolean indicating whether shutdown was successful
        """
        self._generator = None
        self._initialized = False
        return True
    
    def get_generator(self) -> Optional[ReportGenerator]:
        """
        Returns the report generator implemented by this plugin.
        
        Returns:
            ReportGenerator instance or None if not initialized
        """
        return self._generator if self._initialized else None
    
    def get_format(self) -> str:
        """
        Returns the format name supported by this plugin.
        
        Returns:
            String format name ('markdown')
        """
        return 'markdown'
    
    def generate_report(self, df: pd.DataFrame, output_path: str, stats: Dict[str, Any]) -> str:
        """
        Generates a report using the plugin's generator.
        
        Args:
            df: DataFrame containing URL data
            output_path: Path where to save the report
            stats: Dictionary of statistics for the report
            
        Returns:
            Path to the generated report
        """
        if not self._initialized or self._generator is None:
            raise RuntimeError("Plugin not initialized")
        
        return self._generator.generate_report(df, output_path, stats)