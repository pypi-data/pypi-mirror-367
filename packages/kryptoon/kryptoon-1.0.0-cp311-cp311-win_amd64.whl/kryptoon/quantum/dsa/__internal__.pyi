# IMPORT
import typing as _typing
import enum as _enum

# MAIN
class Algorithm:
    class CROSS(_enum.Enum):
        CROSSR128B = ...
        CROSSR128F = ...
        CROSSR128S = ...
        CROSSR192B = ...
        CROSSR192F = ...
        CROSSR192S = ...
        CROSSR256B = ...
        CROSSR256F = ...
        CROSSR256S = ...
        CROSSRG128B = ...
        CROSSRG128F = ...
        CROSSRG128S = ...
        CROSSRG192B = ...
        CROSSRG192F = ...
        CROSSRG192S = ...
        CROSSRG256B = ...
        CROSSRG256F = ...
        CROSSRG256S = ...
    #
    class DILITHIUM(_enum.Enum):
        DILITHIUM2 = ...
        DILITHIUM3 = ...
        DILITHIUM5 = ...
    #
    class FALCON(_enum.Enum):
        FALCON512 = ...
        FALCON1024 = ...
    #
    class MAYO(_enum.Enum):
        MAYO1 = ...
        MAYO2 = ...
        MAYO3 = ...
        MAYO5 = ...
    #
    class MLDSA(_enum.Enum):
        MLDSA44 = ...
        MLDSA65 = ...
        MLDSA87 = ...
    #
    class SPHINCS(_enum.Enum):
        SHA2128F = ...
        SHA2128S = ...
        SHA2192F = ...
        SHA2192S = ...
        SHA2256F = ...
        SHA2256S = ...
        SHAKE128F = ...
        SHAKE128S = ...
        SHAKE192F = ...
        SHAKE192S = ...
        SHAKE256F = ...
        SHAKE256S = ...
    #
    class UOV(_enum.Enum):
        UOVOVIII = ...
        UOVOVIIIPKC = ...
        UOVOVIIIPKCSKC = ...
        UOVOVIP = ...
        UOVOVIPPKC = ...
        UOVOVIPPKCSKC = ...
        UOVOVIS = ...
        UOVOVISPKC = ...
        UOVOVISPKCSKC = ...
        UOVOVV = ...
        UOVOVVPKC = ...
        UOVOVVPKCSKC = ...



class SecretKey:
    def __init__(self, secretkey: bytes) -> None:
        self.secretkey = secretkey
        ...
    #
    def sign(self, message: _typing.Any) -> _typing.Any:
        ...



class CROSSSecretKey(SecretKey):
    def __init__(self, name: Algorithm.CROSS, secretkey: bytes) -> None:
        ...
    #
    def sign(self, message: bytes) -> bytes:
        ...



class DILITHIUMSecretKey(SecretKey):
    def __init__(self, name: Algorithm.DILITHIUM, secretkey: bytes) -> None:
        ...
    #
    def sign(self, message: bytes) -> bytes:
        ...



class FALCONSecretKey(SecretKey):
    def __init__(self, name: Algorithm.FALCON, secretkey: bytes) -> None:
        ...
    #
    def sign(self, message: bytes) -> bytes:
        ...



class MAYOSecretKey(SecretKey):
    def __init__(self, name: Algorithm.MAYO, secretkey: bytes) -> None:
        ...
    #
    def sign(self, message: bytes) -> bytes:
        ...



class MLDSASecretKey(SecretKey):
    def __init__(self, name: Algorithm.MLDSA, secretkey: bytes) -> None:
        ...
    #
    def sign(self, message: bytes) -> bytes:
        ...



class SPHINCSSecretKey(SecretKey):
    def __init__(self, name: Algorithm.SPHINCS, secretkey: bytes) -> None:
        ...
    #
    def sign(self, message: bytes) -> bytes:
        ...



class UOVSecretKey(SecretKey):
    def __init__(self, name: Algorithm.UOV, secretkey: bytes) -> None:
        ...
    #
    def sign(self, message: bytes) -> bytes:
        ...



class PublicKey:
    def __init__(self, publickey: bytes) -> None:
        self.publickey = publickey
        ...
    #
    def verify(self, signature: _typing.Any, message: _typing.Any) -> _typing.Any:
        ...



class CROSSPublicKey(PublicKey):
    def __init__(self, name: Algorithm.CROSS, publickey: bytes) -> None:
        ...
    #
    def verify(self, signature: bytes, message: bytes) -> bool:
        ...



class DILITHIUMPublicKey(PublicKey):
    def __init__(self, name: Algorithm.DILITHIUM, publickey: bytes) -> None:
        ...
    #
    def verify(self, signature: bytes, message: bytes) -> bool:
        ...



class FALCONPublicKey(PublicKey):
    def __init__(self, name: Algorithm.FALCON, publickey: bytes) -> None:
        ...
    #
    def verify(self, signature: bytes, message: bytes) -> bool:
        ...



class MAYOPublicKey(PublicKey):
    def __init__(self, name: Algorithm.MAYO, publickey: bytes) -> None:
        ...
    #
    def verify(self, signature: bytes, message: bytes) -> bool:
        ...



class MLDSAPublicKey(PublicKey):
    def __init__(self, name: Algorithm.MLDSA, publickey: bytes) -> None:
        ...
    #
    def verify(self, signature: bytes, message: bytes) -> bool:
        ...



class SPHINCSPublicKey(PublicKey):
    def __init__(self, name: Algorithm.SPHINCS, publickey: bytes) -> None:
        ...
    #
    def verify(self, signature: bytes, message: bytes) -> bool:
        ...



class UOVPublicKey(PublicKey):
    def __init__(self, name: Algorithm.UOV, publickey: bytes) -> None:
        ...
    #
    def verify(self, signature: bytes, message: bytes) -> bool:
        ...



@_typing.overload
def KeyPair(
    name: Algorithm,
    *,
    secretkey: bytes,
    publickey: bytes
) -> tuple[SecretKey, PublicKey]:
    ...
@_typing.overload
def KeyPair(name: Algorithm, *, secretkey: bytes) -> SecretKey:
    ...
@_typing.overload
def KeyPair(name: Algorithm, *, publickey: bytes) -> PublicKey:
    ...
@_typing.overload
def KeyPair(name: Algorithm) -> tuple[SecretKey, PublicKey]:
    ...



@_typing.overload
def KeyPair(
    name: Algorithm.CROSS,
    *,
    secretkey: bytes,
    publickey: bytes
) -> tuple[CROSSSecretKey, CROSSPublicKey]:
    ...
@_typing.overload
def KeyPair(name: Algorithm.CROSS, *, secretkey: bytes) -> CROSSSecretKey:
    ...
@_typing.overload
def KeyPair(name: Algorithm.CROSS, *, publickey: bytes) -> CROSSPublicKey:
    ...
@_typing.overload
def KeyPair(name: Algorithm.CROSS) -> tuple[CROSSSecretKey, CROSSPublicKey]:
    ...



@_typing.overload
def KeyPair(
    name: Algorithm.DILITHIUM,
    *,
    secretkey: bytes,
    publickey: bytes
) -> tuple[DILITHIUMSecretKey, DILITHIUMPublicKey]:
    ...
@_typing.overload
def KeyPair(name: Algorithm.DILITHIUM, *, secretkey: bytes) -> DILITHIUMSecretKey:
    ...
@_typing.overload
def KeyPair(name: Algorithm.DILITHIUM, *, publickey: bytes) -> DILITHIUMPublicKey:
    ...
@_typing.overload
def KeyPair(name: Algorithm.DILITHIUM) -> tuple[DILITHIUMSecretKey, DILITHIUMPublicKey]:
    ...



@_typing.overload
def KeyPair(
    name: Algorithm.FALCON,
    *,
    secretkey: bytes,
    publickey: bytes
) -> tuple[FALCONSecretKey, FALCONPublicKey]:
    ...
@_typing.overload
def KeyPair(name: Algorithm.FALCON, *, secretkey: bytes) -> FALCONSecretKey:
    ...
@_typing.overload
def KeyPair(name: Algorithm.FALCON, *, publickey: bytes) -> FALCONPublicKey:
    ...
@_typing.overload
def KeyPair(name: Algorithm.FALCON) -> tuple[FALCONSecretKey, FALCONPublicKey]:
    ...



@_typing.overload
def KeyPair(
    name: Algorithm.MAYO,
    *,
    secretkey: bytes,
    publickey: bytes
) -> tuple[MAYOSecretKey, MAYOPublicKey]:
    ...
@_typing.overload
def KeyPair(name: Algorithm.MAYO, *, secretkey: bytes) -> MAYOSecretKey:
    ...
@_typing.overload
def KeyPair(name: Algorithm.MAYO, *, publickey: bytes) -> MAYOPublicKey:
    ...
@_typing.overload
def KeyPair(name: Algorithm.MAYO) -> tuple[MAYOSecretKey, MAYOPublicKey]:
    ...



@_typing.overload
def KeyPair(
    name: Algorithm.MLDSA,
    *,
    secretkey: bytes,
    publickey: bytes
) -> tuple[MLDSASecretKey, MLDSAPublicKey]:
    ...
@_typing.overload
def KeyPair(name: Algorithm.MLDSA, *, secretkey: bytes) -> MLDSASecretKey:
    ...
@_typing.overload
def KeyPair(name: Algorithm.MLDSA, *, publickey: bytes) -> MLDSAPublicKey:
    ...
@_typing.overload
def KeyPair(name: Algorithm.MLDSA) -> tuple[MLDSASecretKey, MLDSAPublicKey]:
    ...



@_typing.overload
def KeyPair(
    name: Algorithm.SPHINCS,
    *,
    secretkey: bytes,
    publickey: bytes
) -> tuple[SPHINCSSecretKey, SPHINCSPublicKey]:
    ...
@_typing.overload
def KeyPair(name: Algorithm.SPHINCS, *, secretkey: bytes) -> SPHINCSSecretKey:
    ...
@_typing.overload
def KeyPair(name: Algorithm.SPHINCS, *, publickey: bytes) -> SPHINCSPublicKey:
    ...
@_typing.overload
def KeyPair(name: Algorithm.SPHINCS) -> tuple[SPHINCSSecretKey, SPHINCSPublicKey]:
    ...



@_typing.overload
def KeyPair(
    name: Algorithm.UOV,
    *,
    secretkey: bytes,
    publickey: bytes
) -> tuple[UOVSecretKey, UOVPublicKey]:
    ...
@_typing.overload
def KeyPair(name: Algorithm.UOV, *, secretkey: bytes) -> UOVSecretKey:
    ...
@_typing.overload
def KeyPair(name: Algorithm.UOV, *, publickey: bytes) -> UOVPublicKey:
    ...
@_typing.overload
def KeyPair(name: Algorithm.UOV) -> tuple[UOVSecretKey, UOVPublicKey]:
    ...



Algorithms = Algorithm.CROSS | Algorithm.DILITHIUM | Algorithm.FALCON | Algorithm.MAYO | Algorithm.MLDSA | Algorithm.SPHINCS | Algorithm.UOV
def KeyPair(
        name: Algorithm | Algorithms,
        *,
        secretkey: bytes | None = ...,
        publickey: bytes | None = ...
    ) -> tuple[SecretKey, PublicKey] | SecretKey | PublicKey:
    ...
