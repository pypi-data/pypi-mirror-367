{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "RecvMessage",
  "oneOf": [
    {
      "type": "object",
      "oneOf": [
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "Control"
              ]
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "$ref": "#/definitions/VeilidState"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "GetState"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "op",
            "value"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "IsShutdown"
              ]
            },
            "value": {
              "type": "boolean"
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "null"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "Attach"
              ]
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "null"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "Detach"
              ]
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "$ref": "#/definitions/NewPrivateRouteResult"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "NewPrivateRoute"
              ]
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "$ref": "#/definitions/NewPrivateRouteResult"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "NewCustomPrivateRoute"
              ]
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "ImportRemotePrivateRoute"
              ]
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "null"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "ReleasePrivateRoute"
              ]
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "null"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "AppCallReply"
              ]
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "NewRoutingContext"
              ]
            }
          }
        },
        {
          "type": "object",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "rc_op"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "InvalidId"
                  ]
                }
              }
            },
            {
              "type": "object",
              "required": [
                "rc_op"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "Release"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "integer",
                      "format": "uint32",
                      "minimum": 0.0
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "rc_op"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "WithDefaultSafety"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "integer",
                      "format": "uint32",
                      "minimum": 0.0
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "rc_op"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "WithSafety"
                  ]
                }
              }
            },
            {
              "type": "object",
              "required": [
                "rc_op",
                "value"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "WithSequencing"
                  ]
                },
                "value": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            {
              "type": "object",
              "required": [
                "rc_op",
                "value"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "Safety"
                  ]
                },
                "value": {
                  "$ref": "#/definitions/SafetySelection"
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "rc_op"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "AppCall"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "null"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "rc_op"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "AppMessage"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "$ref": "#/definitions/DHTRecordDescriptor"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "rc_op"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "CreateDhtRecord"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "$ref": "#/definitions/DHTRecordDescriptor"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "rc_op"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "OpenDhtRecord"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "null"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "rc_op"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "CloseDhtRecord"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "null"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "rc_op"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "DeleteDhtRecord"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "value": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/ValueData"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "rc_op"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "GetDhtValue"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "value": {
                      "anyOf": [
                        {
                          "$ref": "#/definitions/ValueData"
                        },
                        {
                          "type": "null"
                        }
                      ]
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "rc_op"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "SetDhtValue"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "rc_op"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "WatchDhtValues"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "rc_op"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "CancelDhtWatch"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "$ref": "#/definitions/DHTRecordReport"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "rc_op"
              ],
              "properties": {
                "rc_op": {
                  "type": "string",
                  "enum": [
                    "InspectDhtRecord"
                  ]
                }
              }
            }
          ],
          "required": [
            "op",
            "rc_id"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "RoutingContext"
              ]
            },
            "rc_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "OpenTableDb"
              ]
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "boolean"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "DeleteTableDb"
              ]
            }
          }
        },
        {
          "type": "object",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "db_op"
              ],
              "properties": {
                "db_op": {
                  "type": "string",
                  "enum": [
                    "InvalidId"
                  ]
                }
              }
            },
            {
              "type": "object",
              "required": [
                "db_op"
              ],
              "properties": {
                "db_op": {
                  "type": "string",
                  "enum": [
                    "Release"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "integer",
                      "format": "uint32",
                      "minimum": 0.0
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "db_op"
              ],
              "properties": {
                "db_op": {
                  "type": "string",
                  "enum": [
                    "GetColumnCount"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "db_op"
              ],
              "properties": {
                "db_op": {
                  "type": "string",
                  "enum": [
                    "GetKeys"
                  ]
                }
              }
            },
            {
              "type": "object",
              "required": [
                "db_op",
                "value"
              ],
              "properties": {
                "db_op": {
                  "type": "string",
                  "enum": [
                    "Transact"
                  ]
                },
                "value": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "null"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "db_op"
              ],
              "properties": {
                "db_op": {
                  "type": "string",
                  "enum": [
                    "Store"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "db_op"
              ],
              "properties": {
                "db_op": {
                  "type": "string",
                  "enum": [
                    "Load"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": [
                        "string",
                        "null"
                      ]
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "db_op"
              ],
              "properties": {
                "db_op": {
                  "type": "string",
                  "enum": [
                    "Delete"
                  ]
                }
              }
            }
          ],
          "required": [
            "db_id",
            "op"
          ],
          "properties": {
            "db_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "op": {
              "type": "string",
              "enum": [
                "TableDb"
              ]
            }
          }
        },
        {
          "type": "object",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "tx_op"
              ],
              "properties": {
                "tx_op": {
                  "type": "string",
                  "enum": [
                    "InvalidId"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "null"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "tx_op"
              ],
              "properties": {
                "tx_op": {
                  "type": "string",
                  "enum": [
                    "Commit"
                  ]
                }
              }
            },
            {
              "type": "object",
              "required": [
                "tx_op"
              ],
              "properties": {
                "tx_op": {
                  "type": "string",
                  "enum": [
                    "Rollback"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "null"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "tx_op"
              ],
              "properties": {
                "tx_op": {
                  "type": "string",
                  "enum": [
                    "Store"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "null"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "tx_op"
              ],
              "properties": {
                "tx_op": {
                  "type": "string",
                  "enum": [
                    "Delete"
                  ]
                }
              }
            }
          ],
          "required": [
            "op",
            "tx_id"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "TableDbTransaction"
              ]
            },
            "tx_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "GetCryptoSystem"
              ]
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "BestCryptoSystem"
              ]
            }
          }
        },
        {
          "type": "object",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "cs_op"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "InvalidId"
                  ]
                }
              }
            },
            {
              "type": "object",
              "required": [
                "cs_op"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "Release"
                  ]
                }
              }
            },
            {
              "type": "object",
              "required": [
                "cs_op",
                "value"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "Kind"
                  ]
                },
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "cs_op"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "CachedDh"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "cs_op"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "ComputeDh"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "cs_op"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "GenerateSharedSecret"
                  ]
                }
              }
            },
            {
              "type": "object",
              "required": [
                "cs_op",
                "value"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "RandomBytes"
                  ]
                },
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "cs_op",
                "value"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "DefaultSaltLength"
                  ]
                },
                "value": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "cs_op"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "HashPassword"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "cs_op"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "VerifyPassword"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "cs_op"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "DeriveSharedSecret"
                  ]
                }
              }
            },
            {
              "type": "object",
              "required": [
                "cs_op",
                "value"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "RandomNonce"
                  ]
                },
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "cs_op",
                "value"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "RandomSharedSecret"
                  ]
                },
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "cs_op",
                "value"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "GenerateKeyPair"
                  ]
                },
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "cs_op",
                "value"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "GenerateHash"
                  ]
                },
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "cs_op",
                "value"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "ValidateKeyPair"
                  ]
                },
                "value": {
                  "type": "boolean"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "cs_op",
                "value"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "ValidateHash"
                  ]
                },
                "value": {
                  "type": "boolean"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "cs_op",
                "value"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "Distance"
                  ]
                },
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "cs_op"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "Sign"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "boolean"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "cs_op"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "Verify"
                  ]
                }
              }
            },
            {
              "type": "object",
              "required": [
                "cs_op",
                "value"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "AeadOverhead"
                  ]
                },
                "value": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "cs_op"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "DecryptAead"
                  ]
                }
              }
            },
            {
              "type": "object",
              "anyOf": [
                {
                  "type": "object",
                  "required": [
                    "value"
                  ],
                  "properties": {
                    "value": {
                      "type": "string"
                    }
                  }
                },
                {
                  "type": "object",
                  "required": [
                    "error"
                  ],
                  "properties": {
                    "error": {
                      "$ref": "#/definitions/VeilidAPIError"
                    }
                  }
                }
              ],
              "required": [
                "cs_op"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "EncryptAead"
                  ]
                }
              }
            },
            {
              "type": "object",
              "required": [
                "cs_op",
                "value"
              ],
              "properties": {
                "cs_op": {
                  "type": "string",
                  "enum": [
                    "CryptNoAuth"
                  ]
                },
                "value": {
                  "type": "string"
                }
              }
            }
          ],
          "required": [
            "cs_id",
            "op"
          ],
          "properties": {
            "cs_id": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "op": {
              "type": "string",
              "enum": [
                "CryptoSystem"
              ]
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "properties": {
                "value": {
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "VerifySignatures"
              ]
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "GenerateSignatures"
              ]
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "GenerateKeyPair"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "op",
            "value"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "Now"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "value"
              ],
              "properties": {
                "value": {
                  "type": "string"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "error"
              ],
              "properties": {
                "error": {
                  "$ref": "#/definitions/VeilidAPIError"
                }
              }
            }
          ],
          "required": [
            "op"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "Debug"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "op",
            "value"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "VeilidVersionString"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "major",
            "minor",
            "op",
            "patch"
          ],
          "properties": {
            "major": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "minor": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "op": {
              "type": "string",
              "enum": [
                "VeilidVersion"
              ]
            },
            "patch": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        },
        {
          "type": "object",
          "required": [
            "op",
            "value"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "DefaultVeilidConfig"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "op",
            "value"
          ],
          "properties": {
            "op": {
              "type": "string",
              "enum": [
                "VeilidFeatures"
              ]
            },
            "value": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      ],
      "required": [
        "type"
      ],
      "properties": {
        "id": {
          "description": "Operation Id (pairs with Request, or empty if unidirectional).",
          "default": 0,
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "type": {
          "type": "string",
          "enum": [
            "Response"
          ]
        }
      }
    },
    {
      "description": "An update from the veilid-core to the host application describing a change to the internal state of the Veilid node.",
      "type": "object",
      "oneOf": [
        {
          "description": "A VeilidCore log message with optional backtrace.",
          "type": "object",
          "required": [
            "kind",
            "log_level",
            "message"
          ],
          "properties": {
            "backtrace": {
              "type": [
                "string",
                "null"
              ]
            },
            "kind": {
              "type": "string",
              "enum": [
                "Log"
              ]
            },
            "log_level": {
              "$ref": "#/definitions/VeilidLogLevel"
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "description": "Direct statement blob passed to hosting application for processing.",
          "type": "object",
          "required": [
            "kind",
            "message"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "AppMessage"
              ]
            },
            "message": {
              "type": "string"
            },
            "route_id": {
              "type": [
                "string",
                "null"
              ]
            },
            "sender": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        {
          "description": "Direct question blob passed to hosting application for processing to send an eventual AppReply.",
          "type": "object",
          "required": [
            "call_id",
            "kind",
            "message"
          ],
          "properties": {
            "call_id": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "enum": [
                "AppCall"
              ]
            },
            "message": {
              "type": "string"
            },
            "route_id": {
              "type": [
                "string",
                "null"
              ]
            },
            "sender": {
              "type": [
                "string",
                "null"
              ]
            }
          }
        },
        {
          "description": "Describe the attachment state of the Veilid node",
          "type": "object",
          "required": [
            "kind",
            "local_network_ready",
            "public_internet_ready",
            "state",
            "uptime"
          ],
          "properties": {
            "attached_uptime": {
              "description": "Uptime since last attach, empty if the node is currently detached",
              "type": [
                "string",
                "null"
              ]
            },
            "kind": {
              "type": "string",
              "enum": [
                "Attachment"
              ]
            },
            "local_network_ready": {
              "description": "If attached and there are enough reachable nodes in the routing table to perform all the actions of the LocalNetwork RoutingDomain.",
              "type": "boolean"
            },
            "public_internet_ready": {
              "description": "If attached and there are enough reachable nodes in the routing table to perform all the actions of the PublicInternet RoutingDomain, including things like private/safety route allocation and DHT operations.",
              "type": "boolean"
            },
            "state": {
              "description": "The overall quality of the routing table if attached, or the current state the attachment state machine.",
              "allOf": [
                {
                  "$ref": "#/definitions/AttachmentState"
                }
              ]
            },
            "uptime": {
              "description": "Node uptime",
              "type": "string"
            }
          }
        },
        {
          "description": "Describe the current network state of the Veilid node",
          "type": "object",
          "required": [
            "bps_down",
            "bps_up",
            "kind",
            "peers",
            "started"
          ],
          "properties": {
            "bps_down": {
              "description": "The total number of bytes per second used by Veilid currently in the download direction.",
              "type": "string"
            },
            "bps_up": {
              "description": "The total number of bytes per second used by Veilid currently in the upload direction.",
              "type": "string"
            },
            "kind": {
              "type": "string",
              "enum": [
                "Network"
              ]
            },
            "peers": {
              "description": "The list of most recently accessed peers. This is not an active connection table, nor is representative of the entire routing table.",
              "type": "array",
              "items": {
                "$ref": "#/definitions/PeerTableData"
              }
            },
            "started": {
              "description": "If the network has been started or not.",
              "type": "boolean"
            }
          }
        },
        {
          "description": "Describe changes to the Veilid node configuration Currently this is only ever emitted once, however we reserve the right to add the ability to change the configuration or have it changed by the Veilid node itself during runtime.",
          "type": "object",
          "required": [
            "config",
            "kind"
          ],
          "properties": {
            "config": {
              "description": "If the Veilid node configuration has changed the full new config will be here.",
              "allOf": [
                {
                  "$ref": "#/definitions/VeilidConfig"
                }
              ]
            },
            "kind": {
              "type": "string",
              "enum": [
                "Config"
              ]
            }
          }
        },
        {
          "description": "Describe a private route change that has happened",
          "type": "object",
          "required": [
            "dead_remote_routes",
            "dead_routes",
            "kind"
          ],
          "properties": {
            "dead_remote_routes": {
              "description": "If a private route that was imported has died, it is listed here.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "dead_routes": {
              "description": "If a private route that was allocated has died, it is listed here.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "kind": {
              "type": "string",
              "enum": [
                "RouteChange"
              ]
            }
          }
        },
        {
          "description": "Describe when DHT records have subkey values changed",
          "type": "object",
          "required": [
            "count",
            "key",
            "kind",
            "subkeys"
          ],
          "properties": {
            "count": {
              "description": "The count remaining on the watch that triggered this value change If there is no watch and this is received, it will be set to u32::MAX If this value is zero, any watch present on the value has died.",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "key": {
              "description": "The DHT Record key that changed",
              "type": "string"
            },
            "kind": {
              "type": "string",
              "enum": [
                "ValueChange"
              ]
            },
            "subkeys": {
              "description": "The portion of the DHT Record's subkeys that have changed If the subkey range is empty, any watch present on the value has died.",
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            },
            "value": {
              "description": "The (optional) value data for the first subkey in the subkeys range If 'subkeys' is not a single value, other values than the first value must be retrieved with RoutingContext::get_dht_value().",
              "anyOf": [
                {
                  "$ref": "#/definitions/ValueData"
                },
                {
                  "type": "null"
                }
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Shutdown"
              ]
            }
          }
        }
      ],
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "Update"
          ]
        }
      }
    }
  ],
  "definitions": {
    "AnswerStats": {
      "description": "Measurement of round-trip RPC question/answer performance",
      "type": "object",
      "required": [
        "answers",
        "consecutive_answers_average",
        "consecutive_answers_maximum",
        "consecutive_answers_minimum",
        "consecutive_lost_answers_average",
        "consecutive_lost_answers_maximum",
        "consecutive_lost_answers_minimum",
        "lost_answers",
        "questions",
        "span"
      ],
      "properties": {
        "answers": {
          "description": "number of answers received in this span",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "consecutive_answers_average": {
          "description": "average number of received answers before a lost answer in this span",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "consecutive_answers_maximum": {
          "description": "maximum number of received answers before a lost answer in this span",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "consecutive_answers_minimum": {
          "description": "minimum number of received answers before a lost answer in this span",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "consecutive_lost_answers_average": {
          "description": "average number of timeouts before a received answer in this span",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "consecutive_lost_answers_maximum": {
          "description": "maximum number of timeouts before a received answer in this span",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "consecutive_lost_answers_minimum": {
          "description": "minimum number of timeouts before a received answer in this span",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "lost_answers": {
          "description": "number of lost answers in this span",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "questions": {
          "description": "number of questions sent in this span",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "span": {
          "description": "total amount of time measured",
          "type": "string"
        }
      }
    },
    "AttachmentState": {
      "description": "Attachment abstraction for network 'signal strength'.",
      "type": "string",
      "enum": [
        "Detached",
        "Attaching",
        "AttachedWeak",
        "AttachedGood",
        "AttachedStrong",
        "FullyAttached",
        "OverAttached",
        "Detaching"
      ]
    },
    "DHTRecordDescriptor": {
      "description": "DHT Record Descriptor",
      "type": "object",
      "required": [
        "key",
        "owner",
        "schema"
      ],
      "properties": {
        "key": {
          "description": "DHT Key = Hash(ownerKeyKind) of: [ ownerKeyValue, schema ]",
          "type": "string"
        },
        "owner": {
          "description": "The public key of the owner",
          "type": "string"
        },
        "owner_secret": {
          "description": "If this key is being created: Some(the secret key of the owner) If this key is just being opened: None",
          "type": [
            "string",
            "null"
          ]
        },
        "schema": {
          "description": "The schema in use associated with the key",
          "allOf": [
            {
              "$ref": "#/definitions/DHTSchema"
            }
          ]
        }
      }
    },
    "DHTRecordReport": {
      "description": "DHT Record Report",
      "type": "object",
      "required": [
        "local_seqs",
        "network_seqs",
        "offline_subkeys",
        "subkeys"
      ],
      "properties": {
        "local_seqs": {
          "description": "The sequence numbers of each subkey requested from a locally stored DHT Record",
          "type": "array",
          "items": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "network_seqs": {
          "description": "The sequence numbers of each subkey requested from the DHT over the network",
          "type": "array",
          "items": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "offline_subkeys": {
          "description": "The subkeys that have been writen offline that still need to be flushed",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        },
        "subkeys": {
          "description": "The actual subkey range within the schema being reported on This may be a subset of the requested range if it exceeds the schema limits or has more than 512 subkeys",
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              },
              {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      }
    },
    "DHTSchema": {
      "description": "Enum over all the supported DHT Schemas",
      "oneOf": [
        {
          "description": "Default DHT Schema (DFLT)",
          "type": "object",
          "required": [
            "kind",
            "o_cnt"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "DFLT"
              ]
            },
            "o_cnt": {
              "description": "Owner subkey count",
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          }
        },
        {
          "description": "Simple DHT Schema (SMPL)",
          "type": "object",
          "required": [
            "kind",
            "members",
            "o_cnt"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "SMPL"
              ]
            },
            "members": {
              "description": "Members",
              "type": "array",
              "items": {
                "$ref": "#/definitions/DHTSchemaSMPLMember"
              }
            },
            "o_cnt": {
              "description": "Owner subkey count",
              "type": "integer",
              "format": "uint16",
              "minimum": 0.0
            }
          }
        }
      ]
    },
    "DHTSchemaSMPLMember": {
      "description": "Simple DHT Schema (SMPL) Member",
      "type": "object",
      "required": [
        "m_cnt",
        "m_key"
      ],
      "properties": {
        "m_cnt": {
          "description": "Member subkey count",
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "m_key": {
          "description": "Member key",
          "type": "string"
        }
      }
    },
    "LatencyStats": {
      "description": "Measurement of communications latency to this node over all RPC questions",
      "type": "object",
      "required": [
        "average",
        "fastest",
        "slowest"
      ],
      "properties": {
        "average": {
          "description": "average latency over the ROLLING_LATENCIES_SIZE last latencies",
          "type": "string"
        },
        "fastest": {
          "description": "fastest latency in the ROLLING_LATENCIES_SIZE last latencies",
          "type": "string"
        },
        "p75": {
          "description": "p75 latency in the ROLLING_LATENCIES_SIZE",
          "default": "0",
          "type": "string"
        },
        "p90": {
          "description": "p90 latency in the ROLLING_LATENCIES_SIZE",
          "default": "0",
          "type": "string"
        },
        "slowest": {
          "description": "slowest latency in the ROLLING_LATENCIES_SIZE last latencies",
          "type": "string"
        },
        "tm75": {
          "description": "trimmed mean with lowest 75% latency in the ROLLING_LATENCIES_SIZE",
          "default": "0",
          "type": "string"
        },
        "tm90": {
          "description": "trimmed mean with lowest 90% latency in the ROLLING_LATENCIES_SIZE",
          "default": "0",
          "type": "string"
        }
      }
    },
    "NewPrivateRouteResult": {
      "type": "object",
      "required": [
        "blob",
        "route_id"
      ],
      "properties": {
        "blob": {
          "type": "string"
        },
        "route_id": {
          "type": "string"
        }
      }
    },
    "PeerStats": {
      "description": "Statistics for a peer in the routing table",
      "type": "object",
      "required": [
        "time_added"
      ],
      "properties": {
        "latency": {
          "description": "latency stats for this peer",
          "default": null,
          "anyOf": [
            {
              "$ref": "#/definitions/LatencyStats"
            },
            {
              "type": "null"
            }
          ]
        },
        "rpc_stats": {
          "description": "information about RPCs",
          "default": {
            "answer_ordered": {
              "answers": 0,
              "consecutive_answers_average": 0,
              "consecutive_answers_maximum": 0,
              "consecutive_answers_minimum": 0,
              "consecutive_lost_answers_average": 0,
              "consecutive_lost_answers_maximum": 0,
              "consecutive_lost_answers_minimum": 0,
              "lost_answers": 0,
              "questions": 0,
              "span": "0"
            },
            "answer_unordered": {
              "answers": 0,
              "consecutive_answers_average": 0,
              "consecutive_answers_maximum": 0,
              "consecutive_answers_minimum": 0,
              "consecutive_lost_answers_average": 0,
              "consecutive_lost_answers_maximum": 0,
              "consecutive_lost_answers_minimum": 0,
              "lost_answers": 0,
              "questions": 0,
              "span": "0"
            },
            "failed_to_send": 0,
            "first_consecutive_seen_ts": null,
            "last_question_ts": null,
            "last_seen_ts": null,
            "messages_rcvd": 0,
            "messages_sent": 0,
            "questions_in_flight": 0,
            "recent_lost_answers_ordered": 0,
            "recent_lost_answers_unordered": 0
          },
          "allOf": [
            {
              "$ref": "#/definitions/RPCStats"
            }
          ]
        },
        "state": {
          "description": "state stats for this peer",
          "default": {
            "dead": "0",
            "punished": "0",
            "reason": {
              "can_not_send": "0",
              "failed_to_send": "0",
              "in_unreliable_ping_span": "0",
              "lost_answers": "0",
              "no_ping_response": "0",
              "not_seen_consecutively": "0",
              "too_many_lost_answers": "0"
            },
            "reliable": "0",
            "span": "0",
            "unreliable": "0"
          },
          "allOf": [
            {
              "$ref": "#/definitions/StateStats"
            }
          ]
        },
        "time_added": {
          "description": "when the peer was added to the routing table",
          "type": "string"
        },
        "transfer": {
          "description": "transfer stats for this peer",
          "default": {
            "down": {
              "average": "0",
              "maximum": "0",
              "minimum": "0",
              "total": "0"
            },
            "up": {
              "average": "0",
              "maximum": "0",
              "minimum": "0",
              "total": "0"
            }
          },
          "allOf": [
            {
              "$ref": "#/definitions/TransferStatsDownUp"
            }
          ]
        }
      }
    },
    "PeerTableData": {
      "description": "Describe a recently accessed peer",
      "type": "object",
      "required": [
        "node_ids",
        "peer_address",
        "peer_stats"
      ],
      "properties": {
        "node_ids": {
          "description": "The node ids used by this peer",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "peer_address": {
          "description": "The peer's human readable address.",
          "type": "string"
        },
        "peer_stats": {
          "description": "Statistics we have collected on this peer.",
          "allOf": [
            {
              "$ref": "#/definitions/PeerStats"
            }
          ]
        }
      }
    },
    "RPCStats": {
      "description": "Statistics for RPC operations performed on a node",
      "type": "object",
      "required": [
        "failed_to_send",
        "messages_rcvd",
        "messages_sent",
        "questions_in_flight"
      ],
      "properties": {
        "answer_ordered": {
          "description": "ordered rpc answer stats for this peer",
          "default": {
            "answers": 0,
            "consecutive_answers_average": 0,
            "consecutive_answers_maximum": 0,
            "consecutive_answers_minimum": 0,
            "consecutive_lost_answers_average": 0,
            "consecutive_lost_answers_maximum": 0,
            "consecutive_lost_answers_minimum": 0,
            "lost_answers": 0,
            "questions": 0,
            "span": "0"
          },
          "allOf": [
            {
              "$ref": "#/definitions/AnswerStats"
            }
          ]
        },
        "answer_unordered": {
          "description": "unordered rpc answer stats for this peer",
          "default": {
            "answers": 0,
            "consecutive_answers_average": 0,
            "consecutive_answers_maximum": 0,
            "consecutive_answers_minimum": 0,
            "consecutive_lost_answers_average": 0,
            "consecutive_lost_answers_maximum": 0,
            "consecutive_lost_answers_minimum": 0,
            "lost_answers": 0,
            "questions": 0,
            "span": "0"
          },
          "allOf": [
            {
              "$ref": "#/definitions/AnswerStats"
            }
          ]
        },
        "failed_to_send": {
          "description": "number of messages that have failed to send or connections dropped since we last successfully sent one",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "first_consecutive_seen_ts": {
          "description": "the timestamp of the first consecutive proof-of-life for this node (an answer or received question)",
          "type": [
            "string",
            "null"
          ]
        },
        "last_question_ts": {
          "description": "when the peer was last questioned (either successfully or not) and we wanted an answer",
          "type": [
            "string",
            "null"
          ]
        },
        "last_seen_ts": {
          "description": "when the peer was last seen for any reason, including when we first attempted to reach out to it",
          "type": [
            "string",
            "null"
          ]
        },
        "messages_rcvd": {
          "description": "number of rpcs that have been received in the total entry time range",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "messages_sent": {
          "description": "number of rpcs that have been sent in the total entry time range",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "questions_in_flight": {
          "description": "number of questions issued that have yet to be answered",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "recent_lost_answers_ordered": {
          "description": "number of answers that have been lost consecutively over an ordered channel",
          "default": 0,
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "recent_lost_answers_unordered": {
          "description": "number of answers that have been lost consecutively over an unordered channel",
          "default": 0,
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "SafetySelection": {
      "description": "The choice of safety route to include in compiled routes.",
      "oneOf": [
        {
          "description": "Don't use a safety route, only specify the sequencing preference.",
          "type": "object",
          "required": [
            "Unsafe"
          ],
          "properties": {
            "Unsafe": {
              "$ref": "#/definitions/Sequencing"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Use a safety route and parameters specified by a SafetySpec.",
          "type": "object",
          "required": [
            "Safe"
          ],
          "properties": {
            "Safe": {
              "$ref": "#/definitions/SafetySpec"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SafetySpec": {
      "description": "Options for safety routes (sender privacy).",
      "type": "object",
      "required": [
        "hop_count",
        "sequencing",
        "stability"
      ],
      "properties": {
        "hop_count": {
          "description": "Must be greater than 0.",
          "type": "integer",
          "format": "uint",
          "minimum": 0.0
        },
        "preferred_route": {
          "description": "Preferred safety route set id if it still exists.",
          "type": [
            "string",
            "null"
          ]
        },
        "sequencing": {
          "description": "Prefer connection-oriented sequenced protocols.",
          "allOf": [
            {
              "$ref": "#/definitions/Sequencing"
            }
          ]
        },
        "stability": {
          "description": "Prefer reliability over speed.",
          "allOf": [
            {
              "$ref": "#/definitions/Stability"
            }
          ]
        }
      }
    },
    "Sequencing": {
      "type": "string",
      "enum": [
        "NoPreference",
        "PreferOrdered",
        "EnsureOrdered"
      ]
    },
    "Stability": {
      "type": "string",
      "enum": [
        "LowLatency",
        "Reliable"
      ]
    },
    "StateReasonStats": {
      "description": "Measurement of what state reasons the node has been in over a time span",
      "type": "object",
      "required": [
        "can_not_send",
        "failed_to_send",
        "in_unreliable_ping_span",
        "lost_answers",
        "no_ping_response",
        "not_seen_consecutively",
        "too_many_lost_answers"
      ],
      "properties": {
        "can_not_send": {
          "description": "time spent dead due to being unable to send",
          "type": "string"
        },
        "failed_to_send": {
          "description": "time spent unreliable because of failures to send",
          "type": "string"
        },
        "in_unreliable_ping_span": {
          "description": "time spent unreliable because we are in the unreliable ping span",
          "type": "string"
        },
        "lost_answers": {
          "description": "time spent unreliable because of lost answers",
          "type": "string"
        },
        "no_ping_response": {
          "description": "time spent dead because of no ping response",
          "type": "string"
        },
        "not_seen_consecutively": {
          "description": "time spent unreliable because of not being seen consecutively",
          "type": "string"
        },
        "too_many_lost_answers": {
          "description": "time spent dead because of too many lost answers",
          "type": "string"
        }
      }
    },
    "StateStats": {
      "description": "Measurement of what states the node has been in over a time span",
      "type": "object",
      "required": [
        "dead",
        "punished",
        "reliable",
        "span",
        "unreliable"
      ],
      "properties": {
        "dead": {
          "description": "amount of time spent in a dead state",
          "type": "string"
        },
        "punished": {
          "description": "amount of time spent in a punished state",
          "type": "string"
        },
        "reason": {
          "description": "state reason stats for this peer",
          "default": {
            "can_not_send": "0",
            "failed_to_send": "0",
            "in_unreliable_ping_span": "0",
            "lost_answers": "0",
            "no_ping_response": "0",
            "not_seen_consecutively": "0",
            "too_many_lost_answers": "0"
          },
          "allOf": [
            {
              "$ref": "#/definitions/StateReasonStats"
            }
          ]
        },
        "reliable": {
          "description": "amount of time spent in a reliable state",
          "type": "string"
        },
        "span": {
          "description": "total amount of time measured",
          "type": "string"
        },
        "unreliable": {
          "description": "amount of time spent in an unreliable state",
          "type": "string"
        }
      }
    },
    "TransferStats": {
      "description": "Measurement of how much data has transferred to or from this node over a time span",
      "type": "object",
      "required": [
        "average",
        "maximum",
        "minimum",
        "total"
      ],
      "properties": {
        "average": {
          "description": "average rate over the ROLLING_TRANSFERS_SIZE last amounts",
          "type": "string"
        },
        "maximum": {
          "description": "maximum rate over the ROLLING_TRANSFERS_SIZE last amounts",
          "type": "string"
        },
        "minimum": {
          "description": "minimum rate over the ROLLING_TRANSFERS_SIZE last amounts",
          "type": "string"
        },
        "total": {
          "description": "total amount transferred ever",
          "type": "string"
        }
      }
    },
    "TransferStatsDownUp": {
      "description": "Transfer statistics from a node to our own (down) and",
      "type": "object",
      "required": [
        "down",
        "up"
      ],
      "properties": {
        "down": {
          "$ref": "#/definitions/TransferStats"
        },
        "up": {
          "$ref": "#/definitions/TransferStats"
        }
      }
    },
    "ValueData": {
      "type": "object",
      "required": [
        "data",
        "seq",
        "writer"
      ],
      "properties": {
        "data": {
          "description": "The contents of a DHT Record",
          "type": "string"
        },
        "seq": {
          "description": "An increasing sequence number to time-order the DHT record changes",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "writer": {
          "description": "The public identity key of the writer of the data",
          "type": "string"
        }
      }
    },
    "VeilidAPIError": {
      "oneOf": [
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "NotInitialized"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "AlreadyInitialized"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Timeout"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "message"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "TryAgain"
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Shutdown"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "message"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "InvalidTarget"
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "message"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "NoConnection"
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "key",
            "kind"
          ],
          "properties": {
            "key": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "enum": [
                "KeyNotFound"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "message"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Internal"
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "message"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Unimplemented"
              ]
            },
            "message": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "message",
            "value"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "ParseError"
              ]
            },
            "message": {
              "type": "string"
            },
            "value": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "argument",
            "context",
            "kind",
            "value"
          ],
          "properties": {
            "argument": {
              "type": "string"
            },
            "context": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "enum": [
                "InvalidArgument"
              ]
            },
            "value": {
              "type": "string"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "argument",
            "context",
            "kind"
          ],
          "properties": {
            "argument": {
              "type": "string"
            },
            "context": {
              "type": "string"
            },
            "kind": {
              "type": "string",
              "enum": [
                "MissingArgument"
              ]
            }
          }
        },
        {
          "type": "object",
          "required": [
            "kind",
            "message"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "Generic"
              ]
            },
            "message": {
              "type": "string"
            }
          }
        }
      ]
    },
    "VeilidCapability": {
      "description": "A four-character code",
      "type": "array",
      "items": {
        "type": "integer",
        "format": "uint8",
        "minimum": 0.0
      },
      "maxItems": 4,
      "minItems": 4
    },
    "VeilidConfig": {
      "description": "Top level of the Veilid configuration tree",
      "type": "object",
      "required": [
        "block_store",
        "capabilities",
        "namespace",
        "network",
        "program_name",
        "protected_store",
        "table_store"
      ],
      "properties": {
        "block_store": {
          "description": "Configuring the block store (storage of large content-addressable content)",
          "allOf": [
            {
              "$ref": "#/definitions/VeilidConfigBlockStore"
            }
          ]
        },
        "capabilities": {
          "description": "Capabilities to enable for your application/node",
          "allOf": [
            {
              "$ref": "#/definitions/VeilidConfigCapabilities"
            }
          ]
        },
        "namespace": {
          "description": "To run multiple Veilid nodes within the same application, either through a single process running api_startup/api_startup_json multiple times, or your application running mulitple times side-by-side there needs to be a key used to partition the application's storage (in the TableStore, ProtectedStore, etc). An empty value here is the default, but if you run multiple veilid nodes concurrently, you should set this to a string that uniquely identifies this -instance- within the same 'program_name'. Must be a valid filename for all Veilid-capable systems, which means no backslashes or forward slashes in the name. Stick to a-z,0-9,_ and space and you should be fine.",
          "type": "string"
        },
        "network": {
          "description": "Configuring how Veilid interacts with the low level network",
          "allOf": [
            {
              "$ref": "#/definitions/VeilidConfigNetwork"
            }
          ]
        },
        "program_name": {
          "description": "An identifier used to describe the program using veilid-core. Used to partition storage locations in places like the ProtectedStore. Must be non-empty and a valid filename for all Veilid-capable systems, which means no backslashes or forward slashes in the name. Stick to a-z,0-9,_ and space and you should be fine.\n\nCaution: If you change this string, there is no migration support. Your app's protected store and table store will very likely experience data loss. Pick a program name and stick with it. This is not a 'visible' identifier and it should uniquely identify your application.",
          "type": "string"
        },
        "protected_store": {
          "description": "Configuring the protected store (keychain/keyring/etc)",
          "allOf": [
            {
              "$ref": "#/definitions/VeilidConfigProtectedStore"
            }
          ]
        },
        "table_store": {
          "description": "Configuring the table store (persistent encrypted database)",
          "allOf": [
            {
              "$ref": "#/definitions/VeilidConfigTableStore"
            }
          ]
        }
      }
    },
    "VeilidConfigApplication": {
      "description": "Application configuration.\n\nConfigure web access to the Progressive Web App (PWA).\n\nTo be implemented...",
      "type": "object",
      "required": [
        "http",
        "https"
      ],
      "properties": {
        "http": {
          "$ref": "#/definitions/VeilidConfigHTTP"
        },
        "https": {
          "$ref": "#/definitions/VeilidConfigHTTPS"
        }
      }
    },
    "VeilidConfigBlockStore": {
      "type": "object",
      "required": [
        "delete",
        "directory"
      ],
      "properties": {
        "delete": {
          "type": "boolean"
        },
        "directory": {
          "type": "string"
        }
      }
    },
    "VeilidConfigCapabilities": {
      "type": "object",
      "required": [
        "disable"
      ],
      "properties": {
        "disable": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VeilidCapability"
          }
        }
      }
    },
    "VeilidConfigDHT": {
      "description": "Configure the Distributed Hash Table (DHT). Defaults should be used here unless you are absolutely sure you know what you're doing. If you change the count/fanout/timeout parameters, you may render your node inoperable for correct DHT operations.",
      "type": "object",
      "required": [
        "get_value_count",
        "get_value_fanout",
        "get_value_timeout_ms",
        "local_max_subkey_cache_memory_mb",
        "local_subkey_cache_size",
        "max_find_node_count",
        "max_watch_expiration_ms",
        "member_watch_limit",
        "min_peer_count",
        "min_peer_refresh_time_ms",
        "public_watch_limit",
        "remote_max_records",
        "remote_max_storage_space_mb",
        "remote_max_subkey_cache_memory_mb",
        "remote_subkey_cache_size",
        "resolve_node_count",
        "resolve_node_fanout",
        "resolve_node_timeout_ms",
        "set_value_count",
        "set_value_fanout",
        "set_value_timeout_ms",
        "validate_dial_info_receipt_time_ms"
      ],
      "properties": {
        "get_value_count": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "get_value_fanout": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "get_value_timeout_ms": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "local_max_subkey_cache_memory_mb": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "local_subkey_cache_size": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_find_node_count": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_watch_expiration_ms": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "member_watch_limit": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "min_peer_count": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "min_peer_refresh_time_ms": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "public_watch_limit": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "remote_max_records": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "remote_max_storage_space_mb": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "remote_max_subkey_cache_memory_mb": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "remote_subkey_cache_size": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "resolve_node_count": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "resolve_node_fanout": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "resolve_node_timeout_ms": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "set_value_count": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "set_value_fanout": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "set_value_timeout_ms": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "validate_dial_info_receipt_time_ms": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "VeilidConfigHTTP": {
      "description": "Enable and configure HTTP access to the Veilid node.\n\n```yaml http: enabled: false listen_address: ':5150' path: 'app\" url: 'https://localhost:5150' ```",
      "type": "object",
      "required": [
        "enabled",
        "listen_address",
        "path"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "listen_address": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "url": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "VeilidConfigHTTPS": {
      "description": "Enable and configure HTTPS access to the Veilid node.\n\n```yaml https: enabled: false listen_address: ':5150' path: 'app' url: 'https://localhost:5150' ```",
      "type": "object",
      "required": [
        "enabled",
        "listen_address",
        "path"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "listen_address": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "url": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "VeilidConfigNetwork": {
      "type": "object",
      "required": [
        "application",
        "client_allowlist_timeout_ms",
        "connection_inactivity_timeout_ms",
        "connection_initial_timeout_ms",
        "dht",
        "hole_punch_receipt_time_ms",
        "max_connection_frequency_per_min",
        "max_connections_per_ip4",
        "max_connections_per_ip6_prefix",
        "max_connections_per_ip6_prefix_size",
        "privacy",
        "protocol",
        "restricted_nat_retries",
        "reverse_connection_receipt_time_ms",
        "routing_table",
        "rpc",
        "tls",
        "upnp"
      ],
      "properties": {
        "application": {
          "$ref": "#/definitions/VeilidConfigApplication"
        },
        "client_allowlist_timeout_ms": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "connection_inactivity_timeout_ms": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "connection_initial_timeout_ms": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "detect_address_changes": {
          "type": [
            "boolean",
            "null"
          ]
        },
        "dht": {
          "$ref": "#/definitions/VeilidConfigDHT"
        },
        "hole_punch_receipt_time_ms": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_connection_frequency_per_min": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_connections_per_ip4": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_connections_per_ip6_prefix": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "max_connections_per_ip6_prefix_size": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "network_key_password": {
          "type": [
            "string",
            "null"
          ]
        },
        "privacy": {
          "$ref": "#/definitions/VeilidConfigPrivacy"
        },
        "protocol": {
          "$ref": "#/definitions/VeilidConfigProtocol"
        },
        "restricted_nat_retries": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "reverse_connection_receipt_time_ms": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "routing_table": {
          "$ref": "#/definitions/VeilidConfigRoutingTable"
        },
        "rpc": {
          "$ref": "#/definitions/VeilidConfigRPC"
        },
        "tls": {
          "$ref": "#/definitions/VeilidConfigTLS"
        },
        "upnp": {
          "type": "boolean"
        }
      }
    },
    "VeilidConfigPrivacy": {
      "description": "Privacy preferences for routes.\n\n```yaml privacy: require_inbound_relay: false country_code_denylist: [] # only with `--features=geolocation` ```",
      "type": "object",
      "required": [
        "require_inbound_relay"
      ],
      "properties": {
        "require_inbound_relay": {
          "type": "boolean"
        }
      }
    },
    "VeilidConfigProtectedStore": {
      "type": "object",
      "required": [
        "allow_insecure_fallback",
        "always_use_insecure_storage",
        "delete",
        "device_encryption_key_password",
        "directory"
      ],
      "properties": {
        "allow_insecure_fallback": {
          "type": "boolean"
        },
        "always_use_insecure_storage": {
          "type": "boolean"
        },
        "delete": {
          "type": "boolean"
        },
        "device_encryption_key_password": {
          "type": "string"
        },
        "directory": {
          "type": "string"
        },
        "new_device_encryption_key_password": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "VeilidConfigProtocol": {
      "description": "Configure Network Protocols.\n\nVeilid can communicate over UDP, TCP, and Web Sockets.\n\nAll protocols are available by default, and the Veilid node will sort out which protocol is used for each peer connection.",
      "type": "object",
      "required": [
        "tcp",
        "udp",
        "ws",
        "wss"
      ],
      "properties": {
        "tcp": {
          "$ref": "#/definitions/VeilidConfigTCP"
        },
        "udp": {
          "$ref": "#/definitions/VeilidConfigUDP"
        },
        "ws": {
          "$ref": "#/definitions/VeilidConfigWS"
        },
        "wss": {
          "$ref": "#/definitions/VeilidConfigWSS"
        }
      }
    },
    "VeilidConfigRPC": {
      "description": "Configure RPC.",
      "type": "object",
      "required": [
        "concurrency",
        "default_route_hop_count",
        "max_route_hop_count",
        "queue_size",
        "timeout_ms"
      ],
      "properties": {
        "concurrency": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "default_route_hop_count": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "max_route_hop_count": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "max_timestamp_ahead_ms": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "max_timestamp_behind_ms": {
          "type": [
            "integer",
            "null"
          ],
          "format": "uint32",
          "minimum": 0.0
        },
        "queue_size": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "timeout_ms": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "VeilidConfigRoutingTable": {
      "description": "Configure the network routing table.",
      "type": "object",
      "required": [
        "bootstrap",
        "bootstrap_keys",
        "limit_attached_good",
        "limit_attached_strong",
        "limit_attached_weak",
        "limit_fully_attached",
        "limit_over_attached",
        "node_id",
        "node_id_secret"
      ],
      "properties": {
        "bootstrap": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "bootstrap_keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "limit_attached_good": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "limit_attached_strong": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "limit_attached_weak": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "limit_fully_attached": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "limit_over_attached": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "node_id": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "node_id_secret": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "VeilidConfigTCP": {
      "description": "Enable and configure TCP.\n\n```yaml tcp: connect: true listen: true max_connections: 32 listen_address: ':5150' public_address: ''",
      "type": "object",
      "required": [
        "connect",
        "listen",
        "listen_address",
        "max_connections"
      ],
      "properties": {
        "connect": {
          "type": "boolean"
        },
        "listen": {
          "type": "boolean"
        },
        "listen_address": {
          "type": "string"
        },
        "max_connections": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "public_address": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "VeilidConfigTLS": {
      "description": "Configure TLS.\n\n```yaml tls: certificate_path: /path/to/cert private_key_path: /path/to/private/key connection_initial_timeout_ms: 2000",
      "type": "object",
      "required": [
        "certificate_path",
        "connection_initial_timeout_ms",
        "private_key_path"
      ],
      "properties": {
        "certificate_path": {
          "type": "string"
        },
        "connection_initial_timeout_ms": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "private_key_path": {
          "type": "string"
        }
      }
    },
    "VeilidConfigTableStore": {
      "type": "object",
      "required": [
        "delete",
        "directory"
      ],
      "properties": {
        "delete": {
          "type": "boolean"
        },
        "directory": {
          "type": "string"
        }
      }
    },
    "VeilidConfigUDP": {
      "description": "Enable and configure UDP.\n\n```yaml udp: enabled: true socket_pool_size: 0 listen_address: ':5150' public_address: '' ```",
      "type": "object",
      "required": [
        "enabled",
        "listen_address",
        "socket_pool_size"
      ],
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "listen_address": {
          "type": "string"
        },
        "public_address": {
          "type": [
            "string",
            "null"
          ]
        },
        "socket_pool_size": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "VeilidConfigWS": {
      "description": "Enable and configure Web Sockets.\n\n```yaml ws: connect: true listen: true max_connections: 32 listen_address: ':5150' path: 'ws' url: 'ws://localhost:5150/ws'",
      "type": "object",
      "required": [
        "connect",
        "listen",
        "listen_address",
        "max_connections",
        "path"
      ],
      "properties": {
        "connect": {
          "type": "boolean"
        },
        "listen": {
          "type": "boolean"
        },
        "listen_address": {
          "type": "string"
        },
        "max_connections": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "path": {
          "type": "string"
        },
        "url": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "VeilidConfigWSS": {
      "description": "Enable and configure Secure Web Sockets.\n\n```yaml wss: connect: true listen: false max_connections: 32 listen_address: ':5150' path: 'ws' url: ''",
      "type": "object",
      "required": [
        "connect",
        "listen",
        "listen_address",
        "max_connections",
        "path"
      ],
      "properties": {
        "connect": {
          "type": "boolean"
        },
        "listen": {
          "type": "boolean"
        },
        "listen_address": {
          "type": "string"
        },
        "max_connections": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "path": {
          "type": "string"
        },
        "url": {
          "type": [
            "string",
            "null"
          ]
        }
      }
    },
    "VeilidLogLevel": {
      "description": "Log level for VeilidCore.",
      "type": "string",
      "enum": [
        "Error",
        "Warn",
        "Info",
        "Debug",
        "Trace"
      ]
    },
    "VeilidState": {
      "description": "A queriable state of the internals of veilid-core.",
      "type": "object",
      "required": [
        "attachment",
        "config",
        "network"
      ],
      "properties": {
        "attachment": {
          "$ref": "#/definitions/VeilidStateAttachment"
        },
        "config": {
          "$ref": "#/definitions/VeilidStateConfig"
        },
        "network": {
          "$ref": "#/definitions/VeilidStateNetwork"
        }
      }
    },
    "VeilidStateAttachment": {
      "description": "Describe the attachment state of the Veilid node",
      "type": "object",
      "required": [
        "local_network_ready",
        "public_internet_ready",
        "state",
        "uptime"
      ],
      "properties": {
        "attached_uptime": {
          "description": "Uptime since last attach, empty if the node is currently detached",
          "type": [
            "string",
            "null"
          ]
        },
        "local_network_ready": {
          "description": "If attached and there are enough reachable nodes in the routing table to perform all the actions of the LocalNetwork RoutingDomain.",
          "type": "boolean"
        },
        "public_internet_ready": {
          "description": "If attached and there are enough reachable nodes in the routing table to perform all the actions of the PublicInternet RoutingDomain, including things like private/safety route allocation and DHT operations.",
          "type": "boolean"
        },
        "state": {
          "description": "The overall quality of the routing table if attached, or the current state the attachment state machine.",
          "allOf": [
            {
              "$ref": "#/definitions/AttachmentState"
            }
          ]
        },
        "uptime": {
          "description": "Node uptime",
          "type": "string"
        }
      }
    },
    "VeilidStateConfig": {
      "description": "Describe changes to the Veilid node configuration Currently this is only ever emitted once, however we reserve the right to add the ability to change the configuration or have it changed by the Veilid node itself during runtime.",
      "type": "object",
      "required": [
        "config"
      ],
      "properties": {
        "config": {
          "description": "If the Veilid node configuration has changed the full new config will be here.",
          "allOf": [
            {
              "$ref": "#/definitions/VeilidConfig"
            }
          ]
        }
      }
    },
    "VeilidStateNetwork": {
      "description": "Describe the current network state of the Veilid node",
      "type": "object",
      "required": [
        "bps_down",
        "bps_up",
        "peers",
        "started"
      ],
      "properties": {
        "bps_down": {
          "description": "The total number of bytes per second used by Veilid currently in the download direction.",
          "type": "string"
        },
        "bps_up": {
          "description": "The total number of bytes per second used by Veilid currently in the upload direction.",
          "type": "string"
        },
        "peers": {
          "description": "The list of most recently accessed peers. This is not an active connection table, nor is representative of the entire routing table.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PeerTableData"
          }
        },
        "started": {
          "description": "If the network has been started or not.",
          "type": "boolean"
        }
      }
    }
  }
}
