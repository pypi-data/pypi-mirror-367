{"solved_by": "agent2", "enriched_column_names": ["avg_carrier_delay", "avg_route_delay", "trip_departure_month", "carrier_popularity", "departure_day_count", "route_popularity", "carrier_route_popularity", "is_weekend", "trip_day_of_week", "route_seasonality", "trip_departure_hour", "departure_time_period", "avg_weather_delay"], "solution_type": "SolutionType.FeatureEngineering", "new_feature_functions": [], "sorted_feature_functions": {"0.45258427054755346": {"name": "avg_carrier_delay", "code": "import pandas as pd\n\ndef avg_carrier_delay(row, df_train: pd.DataFrame):\n    carrier_id = row.get(\"carrier_id\", None)\n    planned_departure_date = row.get(\"planned_departure_date\", None)\n    \n    if carrier_id is None or planned_departure_date is None:\n        return None\n    \n    # Filter the training data to exclude the current row and any rows with future dates\n    filtered_df = df_train[\n        (df_train[\"carrier_id\"] == carrier_id) & \n        (df_train[\"planned_departure_date\"] < planned_departure_date)\n    ]\n    \n    # Calculate the average delay for the carrier\n    avg_delay = filtered_df[\"is_late\"].mean()\n    \n    # Return the average delay, or 0.0 if no data is available\n    return avg_delay if pd.notnull(avg_delay) else 0.0\n"}, "0.1714267269730595": {"name": "avg_route_delay", "code": "import pandas as pd\n\ndef avg_route_delay(row, df_train: pd.DataFrame):\n    route_id = row.get(\"route_id\", None)\n    planned_departure_date = row.get(\"planned_departure_date\", None)\n    \n    if route_id is None or planned_departure_date is None:\n        return None\n    \n    # Filter the training data to exclude the current row and any rows with future dates\n    filtered_df = df_train[\n        (df_train[\"route_id\"] == route_id) & \n        (df_train[\"planned_departure_date\"] < planned_departure_date)\n    ]\n    \n    # Calculate the average delay for the route\n    avg_delay = filtered_df[\"is_late\"].mean()\n    \n    # If no data is available for the route, return 0.0\n    return avg_delay if pd.notnull(avg_delay) else 0.0\n"}, "0.15924537452499393": {"name": "trip_departure_month", "code": "import pandas as pd\n\ndef trip_departure_month(row: Dict) -> int:\n    # Get the planned departure date from the row\n    planned_departure_date = row.get(\"planned_departure_date\")\n    \n    # Ensure the date is not None and can be converted to a datetime object\n    if planned_departure_date:\n        try:\n            return pd.to_datetime(planned_departure_date).month\n        except Exception:\n            pass  # If conversion fails, we can handle it below\n    \n    # Return a default value (e.g., None or -1) if the date is invalid\n    return None\n"}, "0.11338236987269426": {"name": "carrier_popularity", "code": "\n\ndef carrier_popularity(row, df_train: pd.DataFrame):\n    carrier_id = row.get(\"carrier_id\", None)\n    if carrier_id is None:\n        return 0\n    return df_train[df_train[\"carrier_id\"] == carrier_id].shape[0]\n"}, "0.04849036952449561": {"name": "departure_day_count", "code": "import pandas as pd\n\ndef departure_day_count(row, df_train: pd.DataFrame):\n    # Extract the planned departure date from the row\n    planned_departure = row.get(\"planned_departure_date\")\n    \n    # Ensure the planned_departure is not None and can be converted to a datetime\n    if planned_departure is None:\n        return 0\n    \n    try:\n        # Convert the planned_departure to a datetime object and extract the date\n        departure_day = pd.to_datetime(planned_departure).date()\n    except Exception:\n        # If conversion fails, return 0\n        return 0\n    \n    # Ensure the df_train has the correct column for comparison\n    if \"planned_departure_date\" not in df_train.columns:\n        raise ValueError(\"The dataframe does not contain the 'planned_departure_date' column.\")\n    \n    # Convert the planned_departure_date column in df_train to datetime and extract the date\n    df_train[\"departure_day\"] = pd.to_datetime(df_train[\"planned_departure_date\"], errors='coerce').dt.date\n    \n    # Count the number of rows in df_train that match the departure_day\n    return df_train[df_train[\"departure_day\"] == departure_day].shape[0]\n"}, "0.037620366361057575": {"name": "route_popularity", "code": "\n\ndef route_popularity(row, df_train: pd.DataFrame):\n    route_id = row.get(\"route_id\", None)\n    if route_id is None:\n        return 0\n    return df_train[df_train[\"route_id\"] == route_id].shape[0]\n"}, "0.02489729355716286": {"name": "carrier_route_popularity", "code": "\n\ndef carrier_route_popularity(row, df_train: pd.DataFrame):\n    route_id = row.get(\"route_id\", None)\n    carrier_id = row.get(\"carrier_id\", None)\n    if route_id is None or carrier_id is None:\n        return 0\n    return df_train[(df_train[\"route_id\"] == route_id) & (df_train[\"carrier_id\"] == carrier_id)].shape[0]\n"}, "0.023007053926488812": {"name": "is_weekend", "code": "import pandas as pd\n\ndef is_weekend(row: pd.Series) -> int:\n    # Get the planned departure date from the row\n    planned_departure_date = row.get(\"planned_departure_date\")\n    \n    # Ensure the value is not None and can be converted to a datetime object\n    if planned_departure_date is not None:\n        try:\n            day_of_week = pd.to_datetime(planned_departure_date).dayofweek\n            # Return 1 if the day is Saturday (5) or Sunday (6), otherwise return 0\n            return 1 if day_of_week in [5, 6] else 0\n        except Exception as e:\n            # Handle any exceptions during datetime conversion\n            print(f\"Error converting {planned_departure_date} to datetime: {e}\")\n            return 0\n    else:\n        # If the value is None, return 0\n        return 0\n"}, "0.020950946984928": {"name": "trip_day_of_week", "code": "import pandas as pd\n\ndef trip_day_of_week(row: pd.Series) -> int:\n    \"\"\"\n    Returns the day of the week (0=Monday, 6=Sunday) for the planned departure date.\n    \n    Args:\n        row (pd.Series): A row of the dataframe containing the planned departure date.\n    \n    Returns:\n        int: The day of the week for the planned departure date, or -1 if the date is invalid.\n    \"\"\"\n    planned_departure = row.get(\"planned_departure_date\")\n    if planned_departure:\n        try:\n            return pd.to_datetime(planned_departure).dayofweek\n        except Exception:\n            return -1  # Return -1 if the date cannot be parsed\n    return -1  # Return -1 if the planned_departure_date is None\n"}, "0.018318564223477718": {"name": "route_seasonality", "code": "import pandas as pd\n\ndef route_seasonality(row, df_train: pd.DataFrame):\n    # Extract route_id and planned_departure_date from the row\n    route_id = row.get(\"route_id\", None)\n    planned_departure_date = row.get(\"planned_departure_date\", None)\n    \n    # Ensure both route_id and planned_departure_date are valid\n    if route_id is None or planned_departure_date is None:\n        return 0\n    \n    try:\n        # Convert planned_departure_date to a datetime object and extract the month\n        month = pd.to_datetime(planned_departure_date).month\n    except Exception:\n        # If conversion fails, return 0\n        return 0\n    \n    # Filter the training dataframe for the same route_id and month\n    return df_train[\n        (df_train[\"route_id\"] == route_id) & \n        (pd.to_datetime(df_train[\"planned_departure_date\"]).dt.month == month)\n    ].shape[0]\n"}, "0.009100369793815684": {"name": "trip_departure_hour", "code": "import pandas as pd\n\ndef trip_departure_hour(row: pd.Series) -> int:\n    # Use the correct column name for departure date\n    departure_date = row.get(\"planned_departure_date\")\n    \n    # Ensure the value is not None and can be converted to a datetime\n    if departure_date is not None:\n        try:\n            return pd.to_datetime(departure_date).hour\n        except Exception:\n            pass  # Handle cases where conversion fails\n    \n    # Return a default value (e.g., -1) if the hour cannot be determined\n    return -1\n"}, "-0.0007573786792178794": {"name": "departure_time_period", "code": "import pandas as pd\n\ndef departure_time_period(row: pd.Series, aux_data: Dict[str, pd.DataFrame] = None) -> str:\n    # Use the correct column name 'planned_departure_date'\n    scheduled_departure = row.get(\"planned_departure_date\")\n    \n    # Ensure the value is not None and can be converted to a datetime\n    if scheduled_departure is not None:\n        try:\n            hour = pd.to_datetime(scheduled_departure).hour\n            if 6 <= hour < 12:\n                return \"Morning\"\n            elif 12 <= hour < 18:\n                return \"Afternoon\"\n            elif 18 <= hour < 24:\n                return \"Evening\"\n            return \"Night\"\n        except Exception as e:\n            # Handle any unexpected errors during datetime conversion\n            return \"Invalid Time\"\n    else:\n        # Handle cases where the column value is None\n        return \"Invalid Time\"\n"}, "0": {"name": "avg_weather_delay", "code": "import pandas as pd\n\ndef avg_weather_delay(row, df_train: pd.DataFrame, aux_dataframes: Dict[str, pd.DataFrame]):\n    # Check if \"weather_table\" exists in aux_dataframes\n    if \"weather_table\" not in aux_dataframes:\n        return 0.0\n    \n    weather_table = aux_dataframes[\"weather_table\"]\n    weather_id = row.get(\"weather_id\", None)\n    \n    # If no weather ID, return default\n    if weather_id is None:\n        return 0.0\n    \n    # Get weather details for the ID\n    weather = weather_table[weather_table[\"weather_id\"] == weather_id]\n    if weather.shape[0] == 0:  # Weather ID not found\n        return 0.0\n    \n    # Extract the weather condition\n    condition = weather.iloc[0][\"weather_condition\"]\n    \n    # Calculate average delay associated with this condition in training data\n    weather_ids_with_condition = weather_table[\n        weather_table[\"weather_condition\"].str.contains(condition, case=False, na=False)\n    ][\"weather_id\"]\n    \n    avg_delay = df_train[df_train[\"weather_id\"].isin(weather_ids_with_condition)][\"is_late\"].mean()\n    return avg_delay if pd.notnull(avg_delay) else 0.0\n"}}, "feature_descriptions": ["avg carrier delay", "avg route delay", "trip departure month", "carrier popularity", "departure day count", "route popularity", "carrier route popularity", "is weekend", "trip day of week", "route seasonality", "trip departure hour", "departure time period", "avg weather delay"]}