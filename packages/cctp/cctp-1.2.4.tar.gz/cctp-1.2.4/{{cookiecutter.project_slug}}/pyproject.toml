# -------------------- build-system --------------------- #
[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

# -------------------- project-config -------------------- #
[project]
name = "{{cookiecutter.project_slug}}"
version = "{{cookiecutter.version}}"
description = "{{cookiecutter.project_short_description}}"
readme = "README.rst"
authors = [
  { name = "{{cookiecutter.username}}", email = "{{cookiecutter.email}}" },
]
maintainers = [
  { name = "{{cookiecutter.username}}", email = "{{cookiecutter.email}}" },
]
requires-python = ">=3.8"
dependencies = [
  {% if "no command-line" not in cookiecutter.command_line_interface|lower %}"rich>=13.9.4",
  "typer>=0.15.1",{% endif %}
]
classifiers = []
license = { text = "{{cookiecutter.open_source_license}}" }

{% if "no command-line" not in cookiecutter.command_line_interface|lower %}
[project.scripts]
{{cookiecutter.project_slug}} = "{{cookiecutter.project_slug}}.cli:app"
{% endif %}

[project.urls]
Repository = "{{cookiecutter.__project_home}}"
Documentation = "https://{{cookiecutter.project_slug}}.readthedocs.io/zh-cn/stable/"
Issues = "{{cookiecutter.__project_home}}/issues"

# ---------------------- coverage ----------------------- #
[tool.coverage.report]
exclude_lines = ["coverage: ignore", "def main", "if __name__ == .__main__.:"]

[tool.coverage.run]
source = ["src/{{cookiecutter.project_slug}}"]
omit = ["tests/*", "examples/*"]

# -------------------- hatch-version -------------------- #
[tool.hatch]
[tool.hatch.version]
path = "src/{{cookiecutter.project_slug}}/__init__.py"

{% if cookiecutter.use_pytest == 'y' -%}
# ----------------------- pytest ------------------------ #
[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = ["error"]
markers = [
   "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]
{% endif %}

# ------------------------ ruff ------------------------- #
[tool.ruff]
exclude = ["**/*_rc.py", "**/ui_*.py", "docs/*.py"]
fix = true
line-length = 80
output-format = "full"
preview = true
show-fixes = true
target-version = "py38"
unsafe-fixes = true

# 格式化配置 (Ruff 的格式化器)
[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = "dynamic"
quote-style = "double"

[tool.ruff.lint]
select = [
  "A",     # flake8-builtins
  "ANN",   # flake8-annotations
  "ARG",   # flake8-arguments
  "ASYNC", # flake8-async
  "B",     # flake8-bugbear
  "BLE",   # flake8-blind-except
  "C",     # flake8-comprehensions
  "C4",    # flake8-comprehensions
  "COM",   # flake8-commas
  # "CPY",    # flake8-copyright
  "DJ",  # flake8-django
  "DTZ", # flake8-datetimez
  "EM",  # flake8-errmsg
  "EXE", # flake8-executable
  "FA",  # flake8-future-annotations
  "FBT", # flake8-boolean-trap
  "FIX", # flake8-fixme
  # "G",      # flake8-logging-format
  "ICN", # flake8-import-conventions
  "INP", # flake8-no-pep420
  "INT", # flake8-gettext
  "ISC", # flake8-implicit-str-concat
  "LOG", # flake8-logging
  "PIE", # flake8-pie
  "PT",  # flake8-pytest-style
  "PTH", # flake8-use-pathlib
  "PYI", # flake8-pyi
  "Q",   # flake8-quotes
  "RET", # flake8-return
  "RSE", # flake8-raise
  # "S",      # flake8-bandit
  "AIR",  # Airflow
  "C90",  # mccabe
  "D",    # pydocstyle (文档字符串)
  "DOC",  # docstrings
  "E",    # Pycodestyle 错误
  "ERA",  # Eradicate
  "F",    # Pyflakes
  "FAST", # FastAPI
  "FLY",  # flynt
  "FURB", # refurb
  "I",    # isort (导入排序)
  "N",    # pep8-naming
  "NPY",  # numpy-specific
  "PD",   # pandas-set
  "PERF", # perflint
  "PGH",  # pygrep-hooks
  "PL",   # Pylint
  "RUF",  # Ruff 特有规则
  "SIM",  # flake8-simplify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  "TC",   # flake8-type-checking
  "TD",   # flake8-todo
  "TID",  # flake8-tidy-imports
  "TRY",  # tryceratops
  "UP",   # pyupgrade (现代化语法)
  "W",    # Pycodestyle 警告
  "YTT",  # flake8-2020
]
# 忽略的规则
ignore = [
  "D100",
  "D103",
  "D104",
  "D107",
  "D203",    # D 规则中与 Black 冲突的部分
  "N802",
  "N999",
  "PGH003",
  "PLR0915",
]

# 导入排序配置
[tool.ruff.lint.isort]
force-single-line = true
order-by-type = false

[tool.ruff.lint.pydocstyle]
convention = "google" # 可选: "pep257", "numpy", "google"

# ----------------------- uv-dependencies ------------------------ #
[tool.uv]
default-groups = "all"

[dependency-groups]
build = ["hatch>=1.14.1", "pip>=25.0.1", "wheel>=0.45.1"]
dev = [
  {% if cookiecutter.theme == 'piccolo_theme' -%}"piccolo-theme",{% endif %}
  "pre-commit>=3.5.0",
  "pycmd2",
  {% if cookiecutter.theme == 'press' -%}"sphinx-press-theme",{% endif %}
  {% if cookiecutter.theme == 'sphinx_rtd_theme' -%}"sphinx-rtd-theme",{% endif %}
  { include-group = "build" },
  { include-group = "doc" },
  { include-group = "lint" },
  { include-group = "test" },
]
doc = ["sphinx-autobuild>=2021.3.14"]
lint = ["ruff>=0.12.7"]
test = [
  "pillow>=10.4.0",
  "pypdf>=5.9.0",
  "pyside2>=5.15.2.1",
  {% if cookiecutter.use_pytest == 'y' -%}"pytest-benchmark>=4.0.0",
  "pytest-cov>=5.0.0",
  "pytest-html>=4.1.1",
  "pytest-mock>=3.14.1",
  "pytest-xdist>=3.6.1",
  "pytest>=8.3.4",{% endif %}
  "reportlab>=4.4.3",
  "tox-uv>=1.13.1",
  "tox>=4.25.0",
]
