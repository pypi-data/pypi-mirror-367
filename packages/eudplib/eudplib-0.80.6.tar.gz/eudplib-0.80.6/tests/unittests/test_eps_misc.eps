function switch_test(): EUDArray {
    const ret = EUDArray(6);
    static var x = 1234;
    static var s = EPD(x.getValueAddr());
    // empty switch statements should not raise error
    switch(x) {}
    epdswitch(s) {}

    // binary search with CP trick
    epdswitch (s, 240) {
        case 96:
            x += 1;
            break;
        case 160:
            x += 3;
            break;
        case 208:  // OK
            x += 5;
            break;
        default:
            x = 0;
    }
    ret[0] = x;  // 1239

    // jump table with CP trick
    epdswitch (s, 56) {
        case 8:
            x += 2;
            break;
        case 16:  // OK
            x += 4;
            break;
        case 24:
            x += 6;
            break;
        case 32:
            x += 8;
            break;
        default:
            x = 0;
    }
    ret[1] = x;  // 1243

    // simple value comparison
    switch (x, 432) {
        case 16:
        case 144:  // OK
            x += 3;
            break;
        default:
            x = 0;
    }
    ret[2] = x;  // 1246

    // simple value comparison 2
    switch (x, 211) {
        case 208:
            x += 5;
            break;
        case 210:
            x += 10;
            break;
        case 211:
            x += 15;
            break;
        default:
            x = 0;
    }
    ret[3] = x;  // 1256

    // jump table
    switch (x, 373) {
        case 96:  // OK
            x += 2;
            break;
        case 100:
            x += 5;
            break;
        case 112:
            x += 8;
            break;
        case 116:
            x += 11;
            break;
        default:
            x = 0;
    }
    ret[4] = x;  // 1258

    // binary search
    switch (x, 511) {
        case 121:
            x += 1;
            break;
        case 179:
            x += 4;
            break;
        case 234:  // OK
            x += 2;
            break;
        case 338:
            x += 8;
            break;
        case 428:
            x += 5;
            break;
        case 453:
            x += 7;
            break;
        default:
            x = 0;
    }
    ret[5] = x;  // 1260
    return ret;
}

const ack = PVariable(list(1, 2, 3, 4, 5, 6, 7, 8));
const ackMax = 8;
function test_array() {
    var ret = 0;
    const p = EUDVariable(1);
    ret += ack[p] % ackMax > 4 ? 1 : 2;  // ret = 2

    const arr = [1, 2, 3, 4, 5, 6, 7, 8];
    ack[0] %= arr[p];
    ret = ret >> 0;  // ret = 2

    ack[p] &= 1;  // ack[1] = 0
    ack[p] &= arr[p];
    ack[p] -= -2;  // ack[1] = 2
    const x = ack[p];
    ack[p] = x & arr[p];  // 2 & 2
    arr[p] &= ack[p];
    ret *= ack[p] * arr[p];  // ret = 8

    arr[p] ^= ack[p];  // arr[1] = 0
    arr[p] |= ack[0];  // arr[1] = 1
    arr[p] <<= ack[p];  // arr[1] = 4
    ret |= arr[p];  // ret = 12

    if (ack[p] > arr[p]) ret = 0;
    if (arr[p]) ret <<= 1;  // ret = 24
    ret -= ack[p] + p / 2;  // ret = 22

    switch(arr[p]) {
      case 4:  // fall-through
      case 1:
        ret += 1;  // ret = 23
    }
    switch(ack[p]) {
      case 2:
        break;
      default:
        ret = 0;
    }

    return ret;  // ret = 23
}

function test_all_actions() {
    var sound = $T("sound\\Misc\\PError.WAV");
    PlayWAVAll(sound);
}
