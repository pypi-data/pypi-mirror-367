name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test data files exist
      run: |
        test -f Data/Rail_Carloadings_originated.csv
        test -f Data/port_dataset.json
        echo "✅ Data files verified"
    
    - name: Test imports
      run: |
        python -c "
        import streamlit
        import pandas
        import plotly
        import matplotlib
        import numpy
        print('✅ All imports successful')
        "
    
    - name: Test data loading
      run: |
        python -c "
        import pandas as pd
        import json
        
        # Test rail data
        df = pd.read_csv('Data/Rail_Carloadings_originated.csv')
        assert len(df) > 0, 'Rail data is empty'
        print(f'✅ Rail data: {len(df):,} records')
        
        # Test port data
        with open('Data/port_dataset.json', 'r') as f:
            data = json.load(f)
        assert len(data) > 0, 'Port data is empty'
        print(f'✅ Port data: {len(data)} records')
        "
    
    - name: Test Streamlit app syntax
      run: |
        python -m py_compile streamlit_app.py
        echo "✅ Streamlit app compiles successfully"

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        pip install -r requirements.txt
        safety check
    
    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . || true

  deploy-test:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test deployment readiness
      run: |
        # Verify all required files for Streamlit Cloud
        test -f streamlit_app.py
        test -f requirements.txt
        test -d Data/
        echo "✅ Deployment files verified"
    
    - name: Simulate Streamlit run
      run: |
        # Test that Streamlit can start (kill after 10 seconds)
        timeout 10s streamlit run streamlit_app.py --server.headless true || true
        echo "✅ Streamlit app starts successfully"
