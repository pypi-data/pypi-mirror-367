[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"


[tool.poetry]
name = "pypwsqc"
version = "0.2.1"
authors = [
  "Christian Chwala <christian.chwala@kit.edu>",
]
homepage = "https://github.com/OpenSenseAction/pypwsqc"
repository = "https://github.com/OpenSenseAction/pypwsqc"
license = "BSD-3-Clause"
description = "Quality control for PWS data"
readme = "README.md"

classifiers = [
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "Operating System :: OS Independent",
  "Topic :: Scientific/Engineering",
  "Typing :: Typed",
]

[tool.poetry.dependencies]
python = ">=3.9, <4.0.0"

furo = { version = ">=2023.08.17", optional = true }
myst_parser = { version = ">=0.13", optional = true }
pytest = { version = ">=6", optional = true }
pytest-cov = { version = ">=3", optional = true }
sphinx = { version = ">=7.0", optional = true }
sphinx_copybutton = { version = ">=0.3.0", optional = true }
sphinx-autodoc-typehints = { version = "*", optional = true }
ipython = { version = "*", optional = true }
numpy = ">=1.26.3"
nbsphinx = { version = "*", optional = true }
nbmake = { version = ">=1.4.6", optional = true}
netcdf4 = ">=1.6.5"
tqdm = ">=4.66.5"
xarray = ">=2023.12.0"
matplotlib = ">=3.8.2"
poligrain = ">=0.1.0"
bottleneck = ">=1.4.1"

[tool.poetry.dev-dependencies]
pytest = ">= 6"
pytest-cov = ">= 3"
jupyterlab = ">=4.0.10"
ipympl = ">=0.9.3"

[tool.poetry.extras]
test = ["pytest", "pytest-cov", "nbmake"]
dev = ["pytest", "pytest-cov", "nbmake"]
docs = [
  "furo",
  "myst_parser",
  "sphinx",
  "sphinx_autodoc_typehints",
  "sphinx_copybutton",
  "nbsphinx",
  "ipython",
]

[tool.poetry-dynamic-versioning]
enable = false
substitution.files = ["src/pypwsqc/__init__.py"]


[tool.setuptools_scm]
write_to = "src/pypwsqc/_version.py"


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
  "error",
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.coverage]
run.source = ["pypwsqc"]
report.exclude_also = [
  '\.\.\.',
  'if typing.TYPE_CHECKING:',
]

[tool.mypy]
files = ["src", "tests"]
python_version = "3.10"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pypwsqc.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]
src = ["src"]
line-length = 88
target-version = "py39"
extend-include = ["*.ipynb"]

[tool.ruff.lint]
extend-select = [
  "B",        # flake8-bugbear
  "I",        # isort
  "ARG",      # flake8-unused-arguments
  "C4",       # flake8-comprehensions
  "EM",       # flake8-errmsg
  "ICN",      # flake8-import-conventions
  "G",        # flake8-logging-format
  "PGH",      # pygrep-hooks
  "PIE",      # flake8-pie
  "PL",       # pylint
  "A001",     # flake8-builtins
  "PT",       # flake8-pytest-style
  "PTH",      # flake8-use-pathlib
  "RET",      # flake8-return
  "RUF",      # Ruff-specific
  "SIM",      # flake8-simplify
  "T20",      # flake8-print
  "UP",       # pyupgrade
  "YTT",      # flake8-2020
  "EXE",      # flake8-executable
  "NPY",      # NumPy specific rules
  "PD",       # pandas-vet
  "E",        # style errors
  "W",        # style warnings
  "F",        # flakes
  "D",        # pydocstyle
  "U",        # pyupgrade
]
ignore = [
  "PLR09",    # Too many <...>
  "PLR2004",  # Magic value used in comparison
  "ISC001",   # Conflicts with formatter
  "T201",     # print statement should be allowed
  "PD003",    # false positive when using xarray
]

# Disabled because this would also be forced in notebooks where
# it does not make sense. We also do not require it now in module
# files. We do currently not do type checking anyway...
#isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["pypwsqc._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20", "D", "E501"]
"noxfile.py" = ["T20", "D100"]
"docs/conf.py" = ["D100", "A001"]
"docs/notebooks/**" = ["E501"]

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pylint]
py-version = "3.10"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "wrong-import-position",
]
