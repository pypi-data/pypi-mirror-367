# This file provides configurations for tox-based project automation tasks. Generally, this project uses tox similar
# to how some other projects use build-systems.

# Base tox configurations. Note, the 'envlist' will run in the listed order whenever 'tox' is used without an -e
# specifier.
[tox]
requires =
    tox==4.28.4
    tox-uv==1.26.2
envlist =
    lint
    stubs
    docs
    install

# This forces tox to create a 'sterile' environment into which the project with all dependencies is installed prior to
# running the requested tasks, isolating the process from the rest of the system. This is almost always the desired
# runtime mode.
isolated_build = True

# Note: The 'basepython' argument should either be set to the oldest version in the supported stack or to the main
# version. It controls the specific ruleset used to format and (especially) style-check the code. Also, existing
# stubs prevent mypy from checking source code, so they are removed before linting.
[testenv: lint]
description =
    Runs static code formatting, style and typing checkers. Mypy may not work properly until py.typed marker is
    added by 'stubs' task.
deps =
    mypy[faster-cache]==1.17.1
    ruff==0.12.7
    ataraxis-automation==5.0.0
    types-tqdm==4.67.0.20250516
    pandas-stubs==2.3.0.250703
    scipy-stubs==1.16.1.0
basepython = py311
commands =
    automation-cli purge-stubs
    ruff check --select I --fix
    ruff format
    mypy . --strict --extra-checks

# Note: if py.typed is not present, generates the marker in the highest library directory before generating stub files.
# Builds and uses the distribution package to generate the stubs.
[testenv: stubs]
description =
    Generates the py.typed marker and the stub files using the built library wheel. Formats the stubs with ruff before
    moving them to appropriate source sub-directories.
deps =
    mypy[faster-cache]==1.17.1
    ruff==0.12.7
    ataraxis-automation==5.0.0
depends = lint
commands =
    automation-cli process-typed-markers
    stubgen -o stubs --include-private --include-docstrings -p sl_behavior -v
    automation-cli process-stubs
    ruff check --select I --fix
    ruff format

# Uses '-j auto' to parallelize the build process and '-v' to make it verbose.
[testenv:docs]
description =
    Builds the API documentation from source code docstrings using Sphinx. The result can be viewed by loading
    'docs/build/html/index.html'.
deps =
    sphinx==8.2.3
    importlib_metadata==8.7.0
    sphinx-rtd-theme==3.0.2
    sphinx-click==6.0.0
    sphinx-autodoc-typehints==3.2.0
    sphinx-rtd-dark-mode==1.3.0
commands =
    sphinx-build -b html -d docs/build/doctrees docs/source docs/build/html -j auto -v

[testenv:build]
skip_install = true
description =
    Builds the source code distribution (sdist) and the binary distribution package (wheel). Use 'upload' task to
    subsequently upload built wheels to PyPI.
deps =
    build==1.3.0
    hatchling==1.27.0
allowlist_externals =
    docker
commands =
    python -m build . --sdist
    python -m build . --wheel

# You can pass the '--replace-token' flag from the command line to replace the token stored in the .pypirc file.
[testenv:upload]
skip_install = true
description =
    Uses twine to upload all files inside the '/dist' folder to PyPI, ignoring any files that are already uploaded.
    Uses API token stored in '.pypirc' file or provided by user to authenticate the upload.
deps =
    twine==6.1.0
    ataraxis-automation==5.0.0
allowlist_externals =
    distutils
commands =
    automation-cli acquire-pypi-token {posargs:}
    twine upload dist/* --skip-existing --config-file .pypirc

[testenv:install]
skip_install = true
deps =
    ataraxis-automation==5.0.0
depends =
    lint
    stubs
    docs
description =
    Builds and installs the project into the specified conda environment. If the environment does not exist, creates
    it before installing the project.
commands =
    automation-cli install-project --environment-name slb_dev

[testenv:uninstall]
skip_install = true
deps =
    ataraxis-automation==5.0.0
description =
    Uninstalls the project from the specified conda environment. If the environment does not exist
    this task silently succeeds.
commands =
    automation-cli uninstall-project --environment-name slb_dev

[testenv:create]
skip_install = true
deps =
    ataraxis-automation==5.0.0
description =
    Creates a minimally-configured conda environment using the requested python version and installs conda- and pip-
    dependencies extracted from pyproject.toml file into the environment. Does not install the project!
commands =
    automation-cli create-env --environment-name slb_dev --python-version 3.11

[testenv:remove]
skip_install = true
deps =
    ataraxis-automation==5.0.0
description =
    Removes the requested conda environment, if it is installed locally.
commands =
    automation-cli remove-env --environment-name slb_dev

[testenv:provision]
skip_install = true
deps =
    ataraxis-automation==5.0.0
description =
    Provisions an already existing environment by uninstalling all packages from the environment and then installing the
    project dependencies using pyproject.toml specifications.
commands =
    automation-cli provision-env --environment-name slb_dev --python-version 3.11

[testenv:export]
skip_install = true
deps =
    ataraxis-automation==5.0.0
description =
    Exports the requested conda environment to the 'envs' folder as a .yml file and as a spec.txt with revision history.
commands =
    automation-cli export-env --environment-name slb_dev

[testenv:import]
skip_install = true
deps =
    ataraxis-automation==5.0.0
description =
    Discovers and imports (installs) a new or updates an already existing environment using the .yml file
    stored in the 'envs' directory.
commands =
    automation-cli import-env --environment-name slb_dev

[testenv:rename]
skip_install = true
deps =
    ataraxis-automation==5.0.0
description =
    Replaces the base environment name used by all files inside the 'envs' directory with the user-input name.
commands =
    automation-cli rename-environments
