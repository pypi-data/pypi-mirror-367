from typing import Any
from dataclasses import field, dataclass

import pandas as pd
from _typeshed import Incomplete
from numpy.typing import NDArray as NDArray

from .extract import movement_speed as movement_speed
from .transform import add_ranged_timestamp_values as add_ranged_timestamp_values

@dataclass
class IdleData:
    """Stores data specific to the 'Idle' VR task state.

    The 'Idle' state is defined as the state where the animal does not move or interact with the task environment for
    a prolonged period of time.

    Attributes:
        sound: Stores data about auditory cues emitted during the idle states.
    """

    sound: str | None | pd.DataFrame = ...

@dataclass
class TimeData:
    """Stores managed session's time data, which includes timestamps for each Mesoscope frame.

    Attributes:
        time: A NumPy array of session timestamps.
        frame: A Pandas DataFrame describing the state of the Virtual Reality task at each Mesoscope frame timestamp.
    """

    time: pd.DataFrame | None = ...
    frame: pd.DataFrame | None = ...

@dataclass
class ControllerData:
    """Stores managed session's Gimbl Virtual Reality controller data.

    Primarily, this includes the settings of the Gimbl task controller at each Mesoscope frame timestamp.

    Attributes:
        settings: A dictionary that stores the VR controller settings or configuration parameters.
        time: A NumPy array that stores the timestamps for controller parameter updates.
        frame: A Pandas DataFrame that captures the controller state at each Mesoscope frame.
    """

    settings: dict[str, Any] | None | pd.DataFrame = ...
    time: pd.DataFrame | None = ...
    frame: pd.DataFrame | None = ...

@dataclass
class GimblData:
    """Stores all data extracted from the .json log file generated by the Gimbl Virtual Reality controller library.

    This class encapsulates multiple other nested classes for specialized data types (e.g., time-related or
    controller-related data). It also provides methods for converting between path coordinates and XYZ coordinates.

    Notes:
        This is a hybrid implementation adapted from the original VR2P parsing codebase referenced in the OSM
        manuscript: https://www.nature.com/articles/s41586-024-08548-w.

    Attributes:
        time: A NumPy array that stores the global (UTC) session timestamps.
        info: A dictionary that stores the session's general information and metadata.
        frames: A Pandas DataFrame that stores Mesoscope frame data (e.g., frame indices, timestamps).
        position: A TimeData instance that stores position data, such as animal's VR coordinates at each Mesoscope
            frame.
        path: A TimeData instance that stores VR path-related data, such as path names or positions along the path.
        camera: A dictionary that stores the face-camera data (e.g., camera parameters or transforms).
        reward: A dictionary that stores the water reward data (e.g., reward timings or amounts).
        lick: A dictionary that stores the lick-related data (e.g., lick detection or timing).
        idle: An IdleData instance that stores the data specific to Idle task states.
        linear_controller: A ControllerData instance used to store linear VR controller data. This is mutually exclusive
            with the spherical_controller attribute.
        spherical_controller: A ControllerData instance used to store spherical VR controller data. This is mutually
            exclusive with the linear_controller attribute.
    """

    time: NDArray[Any] | None = ...
    info: dict[str, Any] | None | pd.DataFrame = ...
    frames: pd.DataFrame | None = ...
    position: TimeData = field(default_factory=TimeData)
    path: TimeData = field(default_factory=TimeData)
    camera: dict[str, Any] | None | pd.DataFrame = ...
    reward: dict[str, Any] | None | pd.DataFrame = ...
    lick: dict[str, Any] | None | pd.DataFrame = ...
    idle: IdleData = field(default_factory=IdleData)
    linear_controller: ControllerData = field(default_factory=ControllerData)
    spherical_controller: ControllerData = field(default_factory=ControllerData)
    def path_to_xyz(self, values: NDArray[Any], path: str) -> NDArray[Any]:
        """Interpolates XYZ coordinates from input path positions using a B-spline fit.

        Args:
            values: The one-dimensional NumPy array of path positions.
            path: The name of the path to interpolate (must exist in self.path.frame).

        Returns:
            A multidimensional NumPy array that stores interpolated XYZ position values with shape (num_positions x 3).

        Raises:
            NameError: If the specified path is not found in self.path.frame.
        """
    def xyz_to_path(self, values: NDArray[Any]) -> pd.DataFrame:
        """Interpolate path positions from the input XYZ coordinates using a radial basis function (RBF).

        For each input 3D coordinate, this method determines the closest path among all available paths, then evaluates
        a radial basis function (RBF) fit to compute the corresponding path position.

        Args:
            values: A NumPy array that stores XYZ coordinates with shape (num_positions x 3).

        Returns:
            A DataFrame containing the inferred path positions. It has two columns: "position" (the path position) and
                "path" (the path name).
        """

class Vr2pNamespace:
    """A Pandas DataFrame namespace that provides VR2P-specific methods for analyzing and transforming virtual reality
    data.

    This namespace allows rolling speed calculations and timed value assignments in a Pandas DataFrame, ensuring the
    necessary columns and formats are present. It is used when converting Gimbl .json logs to .feather files used in
    the modern Sun lab pipeline.

    Args:
        df: The DataFrame to access.

    Attributes:
        _df: Stores the Pandas DataFrame wrapped by the class.

    Raises:
        AttributeError: If required columns are missing from the input DataFrame.
    """

    _df: Incomplete
    def __init__(self, df: pd.DataFrame) -> None: ...
    def rolling_speed(self, window_size: int, ignore_threshold: int = 50) -> NDArray[Any]:
        """Calculates animal's movement speed during the session using a specific rolling time window.

        Args:
            window_size: The size of the rolling window, in milliseconds.
            ignore_threshold: The speed threshold above which measurements are considered invalid
                (teleport artifacts).

        Returns:
            The one-dimensional NumPy array that stores the calculated rolling movement speed values.
        """
    def ranged_values(self, df: pd.DataFrame, fields: list[str]) -> pd.DataFrame:
        """Adds columns from the input DataFrame to the wrapped DataFrame, based on their timestamps.

        This method is used to iteratively merge information stored in various DataFrames into the DataFrame wrapped
        by this class instance. Uses the input \'df\' DataFrame to look up the time range specified by the
        instance-wrapped \'_df\' DataFrame (columns "time_start" and "time_end"), then merges requested columns into the
        wrapped DataFrame.

        Args:
            df: A DataFrame with time ranges ("time_start" and "time_end") and the fields to add to the wrapped
                dataframe.
            fields: A list of column names from `df` to merge into the namespace\'s DataFrame.

        Returns:
            A Pandas DataFrame with the requested columns added and populated by matching timestamp ranges.
        """

@dataclass
class FieldTypes:
    """Registry of field data types used in GIMBL data processing.

    This class provides a centralized mapping of field names to their corresponding Pandas data types to ensure
    consistent data type conversion when loading or processing data.

    Attributes:
        fields: A Dictionary mapping field names to Pandas dtypes.
    """

    fields: dict[str, str] = field(default_factory=Incomplete)
