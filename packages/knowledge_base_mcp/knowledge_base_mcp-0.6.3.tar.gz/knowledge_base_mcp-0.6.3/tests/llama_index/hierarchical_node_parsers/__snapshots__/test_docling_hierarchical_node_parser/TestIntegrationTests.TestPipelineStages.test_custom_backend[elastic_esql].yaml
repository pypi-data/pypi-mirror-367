- node_id: '0'
  node_depth: 0
  node_type: Node
  content_length: 26433
  content: |-
    # ES|QL aggregation functions

    The STATS command supports these aggregate functions:

    - AVG
    - COUNT
    - COUNT_DISTINCT
    - MAX
    - MEDIAN
    - MEDIAN_ABSOLUTE_DEVIATION
    - MIN
    - PERCENTILE
    - [preview] ST_CENTROID_AGG
    - [preview] ST_EXTENT_AGG
    - STD_DEV
    - SUM
    - TOP
    - [preview] VALUES
    - WEIGHTED_AVG

    ## AVG

    Syntax

    Parameters

    - number
        - Expression that outputs values to average.

    Description

    The average of a numeric field.

    Supported types

    | number   | result   |
    |----------|----------|
    | double   | double   |
    | integer  | double   |
    | long     | double   |

    Examples

    ```
    FROM employees
    | STATS AVG(height)
    ```

    |   AVG(height):double |
    |----------------------|
    |               1.7682 |

    The expression can use inline functions. For example, to calculate the average over a multivalued column, first use MV_AVG to average the multiple values per row, and use the result with the AVG function

    ```
    FROM employees
    | STATS avg_salary_change = ROUND(AVG(MV_AVG(salary_change)), 10)
    ```

    |   avg_salary...
  metadata:
    docling_label: title
    docling_ref: '#/texts/9'
    headings:
    - '# ES|QL aggregation functions'
  relationships:
    children:
    - '1'
    - '2'
    - '3'
    - '4'
    - '19'
    - '43'
    - '71'
    - '86'
    - '103'
    - '120'
    - '135'
    - '160'
    - '173'
    - '186'
    - '201'
    - '216'
    - '228'
    - '243'
- node_id: '1'
  node_depth: 1
  node_type: Node
  content_length: 29
  content: '# ES|QL aggregation functions'
  metadata:
    docling_label: title
    docling_ref: '#/texts/9'
    headings:
    - '# ES|QL aggregation functions'
  relationships:
    next: '2'
    parent: '0'
- node_id: '2'
  node_depth: 1
  node_type: Node
  content_length: 53
  content: 'The STATS command supports these aggregate functions:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/10'
    headings:
    - '# ES|QL aggregation functions'
  relationships:
    next: '3'
    parent: '0'
    previous: '1'
- node_id: '3'
  node_depth: 1
  node_type: Node
  content_length: 202
  content: |-
    - AVG
    - COUNT
    - COUNT_DISTINCT
    - MAX
    - MEDIAN
    - MEDIAN_ABSOLUTE_DEVIATION
    - MIN
    - PERCENTILE
    - [preview] ST_CENTROID_AGG
    - [preview] ST_EXTENT_AGG
    - STD_DEV
    - SUM
    - TOP
    - [preview] VALUES
    - WEIGHTED_AVG
  metadata:
    docling_label: list
    docling_ref: '#/groups/1'
    headings:
    - '# ES|QL aggregation functions'
  relationships:
    next: '4'
    parent: '0'
    previous: '2'
- node_id: '4'
  node_depth: 1
  node_type: Node
  content_length: 788
  content: |-
    ## AVG

    Syntax

    Parameters

    - number
        - Expression that outputs values to average.

    Description

    The average of a numeric field.

    Supported types

    | number   | result   |
    |----------|----------|
    | double   | double   |
    | integer  | double   |
    | long     | double   |

    Examples

    ```
    FROM employees
    | STATS AVG(height)
    ```

    |   AVG(height):double |
    |----------------------|
    |               1.7682 |

    The expression can use inline functions. For example, to calculate the average over a multivalued column, first use MV_AVG to average the multiple values per row, and use the result with the AVG function

    ```
    FROM employees
    | STATS avg_salary_change = ROUND(AVG(MV_AVG(salary_change)), 10)
    ```

    |   avg_salary_change:double |
    |----------------------------|
    |                    1.39045 |
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/26'
    headings:
    - '# ES|QL aggregation functions'
    - '## AVG'
  relationships:
    children:
    - '5'
    - '6'
    - '7'
    - '8'
    - '9'
    - '10'
    - '11'
    - '12'
    - '13'
    - '14'
    - '15'
    - '16'
    - '17'
    - '18'
    next: '19'
    parent: '0'
    previous: '3'
- node_id: '5'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: '## AVG'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/26'
    headings:
    - '# ES|QL aggregation functions'
    - '## AVG'
  relationships:
    next: '6'
    parent: '4'
- node_id: '6'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: Syntax
  metadata:
    docling_label: text
    docling_ref: '#/texts/27'
    headings:
    - '# ES|QL aggregation functions'
    - '## AVG'
  relationships:
    next: '7'
    parent: '4'
    previous: '5'
- node_id: '7'
  node_depth: 2
  node_type: Node
  content_length: 10
  content: Parameters
  metadata:
    docling_label: text
    docling_ref: '#/texts/28'
    headings:
    - '# ES|QL aggregation functions'
    - '## AVG'
  relationships:
    next: '8'
    parent: '4'
    previous: '6'
- node_id: '8'
  node_depth: 2
  node_type: Node
  content_length: 57
  content: |-
    - number
        - Expression that outputs values to average.
  metadata:
    docling_label: list
    docling_ref: '#/groups/2'
    headings:
    - '# ES|QL aggregation functions'
    - '## AVG'
  relationships:
    next: '9'
    parent: '4'
    previous: '7'
- node_id: '9'
  node_depth: 2
  node_type: Node
  content_length: 11
  content: Description
  metadata:
    docling_label: text
    docling_ref: '#/texts/31'
    headings:
    - '# ES|QL aggregation functions'
    - '## AVG'
  relationships:
    next: '10'
    parent: '4'
    previous: '8'
- node_id: '10'
  node_depth: 2
  node_type: Node
  content_length: 31
  content: The average of a numeric field.
  metadata:
    docling_label: text
    docling_ref: '#/texts/32'
    headings:
    - '# ES|QL aggregation functions'
    - '## AVG'
  relationships:
    next: '11'
    parent: '4'
    previous: '9'
- node_id: '11'
  node_depth: 2
  node_type: Node
  content_length: 15
  content: Supported types
  metadata:
    docling_label: text
    docling_ref: '#/texts/33'
    headings:
    - '# ES|QL aggregation functions'
    - '## AVG'
  relationships:
    next: '12'
    parent: '4'
    previous: '10'
- node_id: '12'
  node_depth: 2
  node_type: Node
  content_length: 119
  content: |-
    | number   | result   |
    |----------|----------|
    | double   | double   |
    | integer  | double   |
    | long     | double   |
  metadata:
    docling_label: table
    docling_ref: '#/tables/0'
    headings:
    - '# ES|QL aggregation functions'
    - '## AVG'
  relationships:
    next: '13'
    parent: '4'
    previous: '11'
- node_id: '13'
  node_depth: 2
  node_type: Node
  content_length: 8
  content: Examples
  metadata:
    docling_label: text
    docling_ref: '#/texts/34'
    headings:
    - '# ES|QL aggregation functions'
    - '## AVG'
  relationships:
    next: '14'
    parent: '4'
    previous: '12'
- node_id: '14'
  node_depth: 2
  node_type: Node
  content_length: 42
  content: |-
    ```
    FROM employees
    | STATS AVG(height)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/35'
    headings:
    - '# ES|QL aggregation functions'
    - '## AVG'
  relationships:
    next: '15'
    parent: '4'
    previous: '13'
- node_id: '15'
  node_depth: 2
  node_type: Node
  content_length: 74
  content: |-
    |   AVG(height):double |
    |----------------------|
    |               1.7682 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/1'
    headings:
    - '# ES|QL aggregation functions'
    - '## AVG'
  relationships:
    next: '16'
    parent: '4'
    previous: '14'
- node_id: '16'
  node_depth: 2
  node_type: Node
  content_length: 203
  content: The expression can use inline functions. For example, to calculate the
    average over a multivalued column, first use MV_AVG to average the multiple values
    per row, and use the result with the AVG function
  metadata:
    docling_label: text
    docling_ref: '#/texts/36'
    headings:
    - '# ES|QL aggregation functions'
    - '## AVG'
  relationships:
    next: '17'
    parent: '4'
    previous: '15'
- node_id: '17'
  node_depth: 2
  node_type: Node
  content_length: 88
  content: |-
    ```
    FROM employees
    | STATS avg_salary_change = ROUND(AVG(MV_AVG(salary_change)), 10)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/37'
    headings:
    - '# ES|QL aggregation functions'
    - '## AVG'
  relationships:
    next: '18'
    parent: '4'
    previous: '16'
- node_id: '18'
  node_depth: 2
  node_type: Node
  content_length: 92
  content: |-
    |   avg_salary_change:double |
    |----------------------------|
    |                    1.39045 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/2'
    headings:
    - '# ES|QL aggregation functions'
    - '## AVG'
  relationships:
    parent: '4'
    previous: '17'
- node_id: '19'
  node_depth: 1
  node_type: Node
  content_length: 2347
  content: |-
    ## COUNT

    Syntax

    Parameters

    - field
        - Expression that outputs values to be counted. If omitted, equivalent to COUNT(*) (the number of rows).

    Description

    Returns the total number (count) of input values.

    Supported types

    | field           | result   |
    |-----------------|----------|
    | boolean         | long     |
    | cartesian_point | long     |
    | date            | long     |
    | double          | long     |
    | geo_point       | long     |
    | integer         | long     |
    | ip              | long     |
    | keyword         | long     |
    | long            | long     |
    | text            | long     |
    | unsigned_long   | long     |
    | version         | long     |

    Examples

    ```
    FROM employees
    | STATS COUNT(height)
    ```

    |   COUNT(height):long |
    |----------------------|
    |                  100 |

    To count the number of rows, use COUNT() or COUNT(*)

    ```
    FROM employees
    | STATS count = COUNT(*) BY languages
    | SORT languages DESC
    ```

    |   count:long | languages:integer   |
    |--------------|-----------...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/38'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    children:
    - '20'
    - '21'
    - '22'
    - '23'
    - '24'
    - '25'
    - '26'
    - '27'
    - '28'
    - '29'
    - '30'
    - '31'
    - '32'
    - '33'
    - '34'
    - '35'
    - '36'
    - '37'
    - '38'
    - '39'
    - '40'
    - '41'
    - '42'
    next: '43'
    parent: '0'
    previous: '4'
- node_id: '20'
  node_depth: 2
  node_type: Node
  content_length: 8
  content: '## COUNT'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/38'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '21'
    parent: '19'
- node_id: '21'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: Syntax
  metadata:
    docling_label: text
    docling_ref: '#/texts/39'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '22'
    parent: '19'
    previous: '20'
- node_id: '22'
  node_depth: 2
  node_type: Node
  content_length: 10
  content: Parameters
  metadata:
    docling_label: text
    docling_ref: '#/texts/40'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '23'
    parent: '19'
    previous: '21'
- node_id: '23'
  node_depth: 2
  node_type: Node
  content_length: 116
  content: |-
    - field
        - Expression that outputs values to be counted. If omitted, equivalent to COUNT(*) (the number of rows).
  metadata:
    docling_label: list
    docling_ref: '#/groups/4'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '24'
    parent: '19'
    previous: '22'
- node_id: '24'
  node_depth: 2
  node_type: Node
  content_length: 11
  content: Description
  metadata:
    docling_label: text
    docling_ref: '#/texts/43'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '25'
    parent: '19'
    previous: '23'
- node_id: '25'
  node_depth: 2
  node_type: Node
  content_length: 49
  content: Returns the total number (count) of input values.
  metadata:
    docling_label: text
    docling_ref: '#/texts/44'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '26'
    parent: '19'
    previous: '24'
- node_id: '26'
  node_depth: 2
  node_type: Node
  content_length: 15
  content: Supported types
  metadata:
    docling_label: text
    docling_ref: '#/texts/45'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '27'
    parent: '19'
    previous: '25'
- node_id: '27'
  node_depth: 2
  node_type: Node
  content_length: 433
  content: |-
    | field           | result   |
    |-----------------|----------|
    | boolean         | long     |
    | cartesian_point | long     |
    | date            | long     |
    | double          | long     |
    | geo_point       | long     |
    | integer         | long     |
    | ip              | long     |
    | keyword         | long     |
    | long            | long     |
    | text            | long     |
    | unsigned_long   | long     |
    | version         | long     |
  metadata:
    docling_label: table
    docling_ref: '#/tables/3'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '28'
    parent: '19'
    previous: '26'
- node_id: '28'
  node_depth: 2
  node_type: Node
  content_length: 8
  content: Examples
  metadata:
    docling_label: text
    docling_ref: '#/texts/46'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '29'
    parent: '19'
    previous: '27'
- node_id: '29'
  node_depth: 2
  node_type: Node
  content_length: 44
  content: |-
    ```
    FROM employees
    | STATS COUNT(height)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/47'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '30'
    parent: '19'
    previous: '28'
- node_id: '30'
  node_depth: 2
  node_type: Node
  content_length: 74
  content: |-
    |   COUNT(height):long |
    |----------------------|
    |                  100 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/4'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '31'
    parent: '19'
    previous: '29'
- node_id: '31'
  node_depth: 2
  node_type: Node
  content_length: 52
  content: To count the number of rows, use COUNT() or COUNT(*)
  metadata:
    docling_label: text
    docling_ref: '#/texts/48'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '32'
    parent: '19'
    previous: '30'
- node_id: '32'
  node_depth: 2
  node_type: Node
  content_length: 82
  content: |-
    ```
    FROM employees
    | STATS count = COUNT(*) BY languages
    | SORT languages DESC
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/49'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '33'
    parent: '19'
    previous: '31'
- node_id: '33'
  node_depth: 2
  node_type: Node
  content_length: 311
  content: |-
    |   count:long | languages:integer   |
    |--------------|---------------------|
    |           10 | null                |
    |           21 | 5                   |
    |           18 | 4                   |
    |           17 | 3                   |
    |           19 | 2                   |
    |           15 | 1                   |
  metadata:
    docling_label: table
    docling_ref: '#/tables/5'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '34'
    parent: '19'
    previous: '32'
- node_id: '34'
  node_depth: 2
  node_type: Node
  content_length: 137
  content: The expression can use inline functions. This example splits a string into
    multiple values using the SPLIT function and counts the values
  metadata:
    docling_label: text
    docling_ref: '#/texts/50'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '35'
    parent: '19'
    previous: '33'
- node_id: '35'
  node_depth: 2
  node_type: Node
  content_length: 90
  content: |-
    ```
    ROW words="foo;bar;baz;qux;quux;foo"
    | STATS word_count = COUNT(SPLIT(words, ";"))
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/51'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '36'
    parent: '19'
    previous: '34'
- node_id: '36'
  node_depth: 2
  node_type: Node
  content_length: 65
  content: |-
    |   word_count:long |
    |-------------------|
    |                 6 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/6'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '37'
    parent: '19'
    previous: '35'
- node_id: '37'
  node_depth: 2
  node_type: Node
  content_length: 117
  content: "To count the number of times an expression returns TRUE use a WHERE command\
    \ to remove rows that shouldn\u2019t be included"
  metadata:
    docling_label: text
    docling_ref: '#/texts/52'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '38'
    parent: '19'
    previous: '36'
- node_id: '38'
  node_depth: 2
  node_type: Node
  content_length: 46
  content: |-
    ```
    ROW n=1
    | WHERE n < 0
    | STATS COUNT(n)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/53'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '39'
    parent: '19'
    previous: '37'
- node_id: '39'
  node_depth: 2
  node_type: Node
  content_length: 59
  content: |-
    |   COUNT(n):long |
    |-----------------|
    |               0 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/7'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '40'
    parent: '19'
    previous: '38'
- node_id: '40'
  node_depth: 2
  node_type: Node
  content_length: 319
  content: 'To count the same stream of data based on two different expressions use
    the pattern COUNT(<expression> OR NULL). This builds on the three-valued logic
    (3VL) of the language: TRUE OR NULL is TRUE, but FALSE OR NULL is NULL, plus the
    way COUNT handles NULLs: COUNT(TRUE) and COUNT(FALSE) are both 1, but COUNT(NULL)
    is 0.'
  metadata:
    docling_label: text
    docling_ref: '#/texts/54'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '41'
    parent: '19'
    previous: '39'
- node_id: '41'
  node_depth: 2
  node_type: Node
  content_length: 66
  content: |-
    ```
    ROW n=1
    | STATS COUNT(n > 0 OR NULL), COUNT(n < 0 OR NULL)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/55'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    next: '42'
    parent: '19'
    previous: '40'
- node_id: '42'
  node_depth: 2
  node_type: Node
  content_length: 185
  content: |-
    |   COUNT(n > 0 OR NULL):long |   COUNT(n < 0 OR NULL):long |
    |-----------------------------|-----------------------------|
    |                           1 |                           0 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/8'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT'
  relationships:
    parent: '19'
    previous: '41'
- node_id: '43'
  node_depth: 1
  node_type: Node
  content_length: 5110
  content: |-
    ## COUNT_DISTINCT

    Syntax

    Parameters

    - field
        - Column or literal for which to count the number of distinct values.
    - precision
        - Precision threshold. Refer to AGG-COUNT-DISTINCT-APPROXIMATE. The maximum supported value is 40000. Thresholds above this number will have the same effect as a threshold of 40000. The default value is 3000.

    Description

    Returns the approximate number of distinct values.

    Supported types

    | field      | precision     | result   |
    |------------|---------------|----------|
    | boolean    | integer       | long     |
    | boolean    | long          | long     |
    | boolean    | unsigned_long | long     |
    | boolean    |               | long     |
    | date       | integer       | long     |
    | date       | long          | long     |
    | date       | unsigned_long | long     |
    | date       |               | long     |
    | date_nanos | integer       | long     |
    | date_nanos | long          | long     |
    | date_nanos | unsigned_long | long     |
    | date_nanos |           ...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/56'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    children:
    - '44'
    - '45'
    - '46'
    - '47'
    - '48'
    - '49'
    - '50'
    - '51'
    - '52'
    - '53'
    - '54'
    - '55'
    - '56'
    - '57'
    - '58'
    - '59'
    - '60'
    - '61'
    next: '71'
    parent: '0'
    previous: '19'
- node_id: '44'
  node_depth: 2
  node_type: Node
  content_length: 17
  content: '## COUNT_DISTINCT'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/56'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '45'
    parent: '43'
- node_id: '45'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: Syntax
  metadata:
    docling_label: text
    docling_ref: '#/texts/57'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '46'
    parent: '43'
    previous: '44'
- node_id: '46'
  node_depth: 2
  node_type: Node
  content_length: 10
  content: Parameters
  metadata:
    docling_label: text
    docling_ref: '#/texts/58'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '47'
    parent: '43'
    previous: '45'
- node_id: '47'
  node_depth: 2
  node_type: Node
  content_length: 306
  content: |-
    - field
        - Column or literal for which to count the number of distinct values.
    - precision
        - Precision threshold. Refer to AGG-COUNT-DISTINCT-APPROXIMATE. The maximum supported value is 40000. Thresholds above this number will have the same effect as a threshold of 40000. The default value is 3000.
  metadata:
    docling_label: list
    docling_ref: '#/groups/6'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '48'
    parent: '43'
    previous: '46'
- node_id: '48'
  node_depth: 2
  node_type: Node
  content_length: 11
  content: Description
  metadata:
    docling_label: text
    docling_ref: '#/texts/63'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '49'
    parent: '43'
    previous: '47'
- node_id: '49'
  node_depth: 2
  node_type: Node
  content_length: 50
  content: Returns the approximate number of distinct values.
  metadata:
    docling_label: text
    docling_ref: '#/texts/64'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '50'
    parent: '43'
    previous: '48'
- node_id: '50'
  node_depth: 2
  node_type: Node
  content_length: 15
  content: Supported types
  metadata:
    docling_label: text
    docling_ref: '#/texts/65'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '51'
    parent: '43'
    previous: '49'
- node_id: '51'
  node_depth: 2
  node_type: Node
  content_length: 1763
  content: |-
    | field      | precision     | result   |
    |------------|---------------|----------|
    | boolean    | integer       | long     |
    | boolean    | long          | long     |
    | boolean    | unsigned_long | long     |
    | boolean    |               | long     |
    | date       | integer       | long     |
    | date       | long          | long     |
    | date       | unsigned_long | long     |
    | date       |               | long     |
    | date_nanos | integer       | long     |
    | date_nanos | long          | long     |
    | date_nanos | unsigned_long | long     |
    | date_nanos |               | long     |
    | double     | integer       | long     |
    | double     | long          | long     |
    | double     | unsigned_long | long     |
    | double     |               | long     |
    | integer    | integer       | long     |
    | integer    | long          | long     |
    | integer    | unsigned_long | long     |
    | integer    |               | long     |
    | ip         | integer       | long     |
    | ip         | long          | lon...
  metadata:
    docling_label: table
    docling_ref: '#/tables/9'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '52'
    parent: '43'
    previous: '50'
- node_id: '52'
  node_depth: 2
  node_type: Node
  content_length: 8
  content: Examples
  metadata:
    docling_label: text
    docling_ref: '#/texts/66'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '53'
    parent: '43'
    previous: '51'
- node_id: '53'
  node_depth: 2
  node_type: Node
  content_length: 67
  content: |-
    ```
    FROM hosts
    | STATS COUNT_DISTINCT(ip0), COUNT_DISTINCT(ip1)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/67'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '54'
    parent: '43'
    previous: '52'
- node_id: '54'
  node_depth: 2
  node_type: Node
  content_length: 179
  content: |-
    |   COUNT_DISTINCT(ip0):long |   COUNT_DISTINCT(ip1):long |
    |----------------------------|----------------------------|
    |                          7 |                          8 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/10'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '55'
    parent: '43'
    previous: '53'
- node_id: '55'
  node_depth: 2
  node_type: Node
  content_length: 71
  content: With the optional second parameter to configure the precision threshold
  metadata:
    docling_label: text
    docling_ref: '#/texts/68'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '56'
    parent: '43'
    previous: '54'
- node_id: '56'
  node_depth: 2
  node_type: Node
  content_length: 77
  content: |-
    ```
    FROM hosts
    | STATS COUNT_DISTINCT(ip0, 80000), COUNT_DISTINCT(ip1, 5)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/69'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '57'
    parent: '43'
    previous: '55'
- node_id: '57'
  node_depth: 2
  node_type: Node
  content_length: 209
  content: |-
    |   COUNT_DISTINCT(ip0, 80000):long |   COUNT_DISTINCT(ip1, 5):long |
    |-----------------------------------|-------------------------------|
    |                                 7 |                             9 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/11'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '58'
    parent: '43'
    previous: '56'
- node_id: '58'
  node_depth: 2
  node_type: Node
  content_length: 144
  content: The expression can use inline functions. This example splits a string into
    multiple values using the SPLIT function and counts the unique values
  metadata:
    docling_label: text
    docling_ref: '#/texts/70'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '59'
    parent: '43'
    previous: '57'
- node_id: '59'
  node_depth: 2
  node_type: Node
  content_length: 108
  content: |-
    ```
    ROW words="foo;bar;baz;qux;quux;foo"
    | STATS distinct_word_count = COUNT_DISTINCT(SPLIT(words, ";"))
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/71'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '60'
    parent: '43'
    previous: '58'
- node_id: '60'
  node_depth: 2
  node_type: Node
  content_length: 92
  content: |-
    |   distinct_word_count:long |
    |----------------------------|
    |                          5 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/12'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
  relationships:
    next: '61'
    parent: '43'
    previous: '59'
- node_id: '61'
  node_depth: 2
  node_type: Node
  content_length: 1943
  content: "### Counts are approximate\n\nComputing exact counts requires loading\
    \ values into a set and returning its\nsize. This doesn\u2019t scale when working\
    \ on high-cardinality sets and/or large\nvalues as the required memory usage and\
    \ the need to communicate those\nper-shard sets between nodes would utilize too\
    \ many resources of the cluster.\n\nThis COUNT_DISTINCT function is based on the\n\
    HyperLogLog++\nalgorithm, which counts based on the hashes of the values with\
    \ some interesting\nproperties:\n\n- configurable precision, which decides on\
    \ how to trade memory for accuracy,\n- excellent accuracy on low-cardinality sets,\n\
    - fixed memory usage: no matter if there are tens or billions of unique values,\
    \ memory usage only depends on the configured precision.\n\nFor a precision threshold\
    \ of c, the implementation that we are using requires about c * 8 bytes.\n\nThe\
    \ following chart shows how the error varies before and after the threshold:\n\
    \nFor all 3 thresholds, counts have been accurate up to the configured threshold.\
    \ Al..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/72'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
    - '### Counts are approximate'
  relationships:
    children:
    - '62'
    - '63'
    - '64'
    - '65'
    - '66'
    - '67'
    - '68'
    - '69'
    - '70'
    parent: '43'
    previous: '60'
- node_id: '62'
  node_depth: 3
  node_type: Node
  content_length: 26
  content: '### Counts are approximate'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/72'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
    - '### Counts are approximate'
  relationships:
    next: '63'
    parent: '61'
- node_id: '63'
  node_depth: 3
  node_type: Node
  content_length: 299
  content: "Computing exact counts requires loading values into a set and returning\
    \ its\nsize. This doesn\u2019t scale when working on high-cardinality sets and/or\
    \ large\nvalues as the required memory usage and the need to communicate those\n\
    per-shard sets between nodes would utilize too many resources of the cluster."
  metadata:
    docling_label: text
    docling_ref: '#/texts/73'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
    - '### Counts are approximate'
  relationships:
    next: '64'
    parent: '61'
    previous: '62'
- node_id: '64'
  node_depth: 3
  node_type: Node
  content_length: 150
  content: |-
    This COUNT_DISTINCT function is based on the
    HyperLogLog++
    algorithm, which counts based on the hashes of the values with some interesting
    properties:
  metadata:
    docling_label: text
    docling_ref: '#/texts/74'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
    - '### Counts are approximate'
  relationships:
    next: '65'
    parent: '61'
    previous: '63'
- node_id: '65'
  node_depth: 3
  node_type: Node
  content_length: 257
  content: |-
    - configurable precision, which decides on how to trade memory for accuracy,
    - excellent accuracy on low-cardinality sets,
    - fixed memory usage: no matter if there are tens or billions of unique values, memory usage only depends on the configured precision.
  metadata:
    docling_label: list
    docling_ref: '#/groups/9'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
    - '### Counts are approximate'
  relationships:
    next: '66'
    parent: '61'
    previous: '64'
- node_id: '66'
  node_depth: 3
  node_type: Node
  content_length: 96
  content: For a precision threshold of c, the implementation that we are using requires
    about c * 8 bytes.
  metadata:
    docling_label: text
    docling_ref: '#/texts/78'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
    - '### Counts are approximate'
  relationships:
    next: '67'
    parent: '61'
    previous: '65'
- node_id: '67'
  node_depth: 3
  node_type: Node
  content_length: 78
  content: 'The following chart shows how the error varies before and after the threshold:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/79'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
    - '### Counts are approximate'
  relationships:
    next: '68'
    parent: '61'
    previous: '66'
- node_id: '68'
  node_depth: 3
  node_type: Node
  content_length: 402
  content: |-
    For all 3 thresholds, counts have been accurate up to the configured threshold. Although not guaranteed,
    this is likely to be the case. Accuracy in practice depends on the dataset in question. In general,
    most datasets show consistently good accuracy. Also note that even with a threshold as low as 100,
    the error remains very low (1-6% as seen in the above graph) even when counting millions of items.
  metadata:
    docling_label: text
    docling_ref: '#/texts/80'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
    - '### Counts are approximate'
  relationships:
    next: '69'
    parent: '61'
    previous: '67'
- node_id: '69'
  node_depth: 3
  node_type: Node
  content_length: 165
  content: |-
    The HyperLogLog++ algorithm depends on the leading zeros of hashed values, the exact distributions of
    hashes in a dataset can affect the accuracy of the cardinality.
  metadata:
    docling_label: text
    docling_ref: '#/texts/81'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
    - '### Counts are approximate'
  relationships:
    next: '70'
    parent: '61'
    previous: '68'
- node_id: '70'
  node_depth: 3
  node_type: Node
  content_length: 454
  content: |-
    The COUNT_DISTINCT function takes an optional second parameter to configure
    the precision threshold. The precision_threshold options allows to trade memory
    for accuracy, and defines a unique count below which counts are expected to be
    close to accurate. Above this value, counts might become a bit more fuzzy. The
    maximum supported value is 40000, thresholds above this number will have the
    same effect as a threshold of 40000. The default value is 3000.
  metadata:
    docling_label: text
    docling_ref: '#/texts/82'
    headings:
    - '# ES|QL aggregation functions'
    - '## COUNT_DISTINCT'
    - '### Counts are approximate'
  relationships:
    parent: '61'
    previous: '69'
- node_id: '71'
  node_depth: 1
  node_type: Node
  content_length: 986
  content: |-
    ## MAX

    Syntax

    Parameters

    - field

    Description

    The maximum value of a field.

    Supported types

    | field      | result     |
    |------------|------------|
    | boolean    | boolean    |
    | date       | date       |
    | date_nanos | date_nanos |
    | double     | double     |
    | integer    | integer    |
    | ip         | ip         |
    | keyword    | keyword    |
    | long       | long       |
    | text       | keyword    |
    | version    | version    |

    Examples

    ```
    FROM employees
    | STATS MAX(languages)
    ```

    |   MAX(languages):integer |
    |--------------------------|
    |                        5 |

    The expression can use inline functions. For example, to calculate the maximum over an average of a multivalued column, use MV_AVG to first average the multiple values per row, and use the result with the MAX function

    ```
    FROM employees
    | STATS max_avg_salary_change = MAX(MV_AVG(salary_change))
    ```

    |   max_avg_salary_change:double |
    |--------------------------------|
    |                          13.75 |
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/83'
    headings:
    - '# ES|QL aggregation functions'
    - '## MAX'
  relationships:
    children:
    - '72'
    - '73'
    - '74'
    - '75'
    - '76'
    - '77'
    - '78'
    - '79'
    - '80'
    - '81'
    - '82'
    - '83'
    - '84'
    - '85'
    next: '86'
    parent: '0'
    previous: '43'
- node_id: '72'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: '## MAX'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/83'
    headings:
    - '# ES|QL aggregation functions'
    - '## MAX'
  relationships:
    next: '73'
    parent: '71'
- node_id: '73'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: Syntax
  metadata:
    docling_label: text
    docling_ref: '#/texts/84'
    headings:
    - '# ES|QL aggregation functions'
    - '## MAX'
  relationships:
    next: '74'
    parent: '71'
    previous: '72'
- node_id: '74'
  node_depth: 2
  node_type: Node
  content_length: 10
  content: Parameters
  metadata:
    docling_label: text
    docling_ref: '#/texts/85'
    headings:
    - '# ES|QL aggregation functions'
    - '## MAX'
  relationships:
    next: '75'
    parent: '71'
    previous: '73'
- node_id: '75'
  node_depth: 2
  node_type: Node
  content_length: 7
  content: '- field'
  metadata:
    docling_label: list
    docling_ref: '#/groups/10'
    headings:
    - '# ES|QL aggregation functions'
    - '## MAX'
  relationships:
    next: '76'
    parent: '71'
    previous: '74'
- node_id: '76'
  node_depth: 2
  node_type: Node
  content_length: 11
  content: Description
  metadata:
    docling_label: text
    docling_ref: '#/texts/87'
    headings:
    - '# ES|QL aggregation functions'
    - '## MAX'
  relationships:
    next: '77'
    parent: '71'
    previous: '75'
- node_id: '77'
  node_depth: 2
  node_type: Node
  content_length: 29
  content: The maximum value of a field.
  metadata:
    docling_label: text
    docling_ref: '#/texts/88'
    headings:
    - '# ES|QL aggregation functions'
    - '## MAX'
  relationships:
    next: '78'
    parent: '71'
    previous: '76'
- node_id: '78'
  node_depth: 2
  node_type: Node
  content_length: 15
  content: Supported types
  metadata:
    docling_label: text
    docling_ref: '#/texts/89'
    headings:
    - '# ES|QL aggregation functions'
    - '## MAX'
  relationships:
    next: '79'
    parent: '71'
    previous: '77'
- node_id: '79'
  node_depth: 2
  node_type: Node
  content_length: 335
  content: |-
    | field      | result     |
    |------------|------------|
    | boolean    | boolean    |
    | date       | date       |
    | date_nanos | date_nanos |
    | double     | double     |
    | integer    | integer    |
    | ip         | ip         |
    | keyword    | keyword    |
    | long       | long       |
    | text       | keyword    |
    | version    | version    |
  metadata:
    docling_label: table
    docling_ref: '#/tables/13'
    headings:
    - '# ES|QL aggregation functions'
    - '## MAX'
  relationships:
    next: '80'
    parent: '71'
    previous: '78'
- node_id: '80'
  node_depth: 2
  node_type: Node
  content_length: 8
  content: Examples
  metadata:
    docling_label: text
    docling_ref: '#/texts/90'
    headings:
    - '# ES|QL aggregation functions'
    - '## MAX'
  relationships:
    next: '81'
    parent: '71'
    previous: '79'
- node_id: '81'
  node_depth: 2
  node_type: Node
  content_length: 45
  content: |-
    ```
    FROM employees
    | STATS MAX(languages)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/91'
    headings:
    - '# ES|QL aggregation functions'
    - '## MAX'
  relationships:
    next: '82'
    parent: '71'
    previous: '80'
- node_id: '82'
  node_depth: 2
  node_type: Node
  content_length: 86
  content: |-
    |   MAX(languages):integer |
    |--------------------------|
    |                        5 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/14'
    headings:
    - '# ES|QL aggregation functions'
    - '## MAX'
  relationships:
    next: '83'
    parent: '71'
    previous: '81'
- node_id: '83'
  node_depth: 2
  node_type: Node
  content_length: 217
  content: The expression can use inline functions. For example, to calculate the
    maximum over an average of a multivalued column, use MV_AVG to first average the
    multiple values per row, and use the result with the MAX function
  metadata:
    docling_label: text
    docling_ref: '#/texts/92'
    headings:
    - '# ES|QL aggregation functions'
    - '## MAX'
  relationships:
    next: '84'
    parent: '71'
    previous: '82'
- node_id: '84'
  node_depth: 2
  node_type: Node
  content_length: 81
  content: |-
    ```
    FROM employees
    | STATS max_avg_salary_change = MAX(MV_AVG(salary_change))
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/93'
    headings:
    - '# ES|QL aggregation functions'
    - '## MAX'
  relationships:
    next: '85'
    parent: '71'
    previous: '83'
- node_id: '85'
  node_depth: 2
  node_type: Node
  content_length: 104
  content: |-
    |   max_avg_salary_change:double |
    |--------------------------------|
    |                          13.75 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/15'
    headings:
    - '# ES|QL aggregation functions'
    - '## MAX'
  relationships:
    parent: '71'
    previous: '84'
- node_id: '86'
  node_depth: 1
  node_type: Node
  content_length: 1222
  content: |-
    ## MEDIAN

    Syntax

    Parameters

    - number
        - Expression that outputs values to calculate the median of.

    Description

    The value that is greater than half of all values and less than half of all values, also known as the 50% PERCENTILE.

    Like PERCENTILE, MEDIAN is usually approximate.

    Supported types

    | number   | result   |
    |----------|----------|
    | double   | double   |
    | integer  | double   |
    | long     | double   |

    Examples

    ```
    FROM employees
    | STATS MEDIAN(salary), PERCENTILE(salary, 50)
    ```

    |   MEDIAN(salary):double |   PERCENTILE(salary, 50):double |
    |-------------------------|---------------------------------|
    |                   47003 |                           47003 |

    The expression can use inline functions. For example, to calculate the median of the maximum values of a multivalued column, first use MV_MAX to get the maximum value per row, and use the result with the MEDIAN function

    ```
    FROM employees
    | STATS median_max_salary_change = MEDIAN(MV_MAX(salary_change))
    ``...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/94'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    children:
    - '87'
    - '88'
    - '89'
    - '90'
    - '91'
    - '92'
    - '93'
    - '94'
    - '95'
    - '96'
    - '97'
    - '98'
    - '99'
    - '100'
    - '101'
    - '102'
    next: '103'
    parent: '0'
    previous: '71'
- node_id: '87'
  node_depth: 2
  node_type: Node
  content_length: 9
  content: '## MEDIAN'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/94'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    next: '88'
    parent: '86'
- node_id: '88'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: Syntax
  metadata:
    docling_label: text
    docling_ref: '#/texts/95'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    next: '89'
    parent: '86'
    previous: '87'
- node_id: '89'
  node_depth: 2
  node_type: Node
  content_length: 10
  content: Parameters
  metadata:
    docling_label: text
    docling_ref: '#/texts/96'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    next: '90'
    parent: '86'
    previous: '88'
- node_id: '90'
  node_depth: 2
  node_type: Node
  content_length: 73
  content: |-
    - number
        - Expression that outputs values to calculate the median of.
  metadata:
    docling_label: list
    docling_ref: '#/groups/12'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    next: '91'
    parent: '86'
    previous: '89'
- node_id: '91'
  node_depth: 2
  node_type: Node
  content_length: 11
  content: Description
  metadata:
    docling_label: text
    docling_ref: '#/texts/99'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    next: '92'
    parent: '86'
    previous: '90'
- node_id: '92'
  node_depth: 2
  node_type: Node
  content_length: 117
  content: The value that is greater than half of all values and less than half of
    all values, also known as the 50% PERCENTILE.
  metadata:
    docling_label: text
    docling_ref: '#/texts/100'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    next: '93'
    parent: '86'
    previous: '91'
- node_id: '93'
  node_depth: 2
  node_type: Node
  content_length: 47
  content: Like PERCENTILE, MEDIAN is usually approximate.
  metadata:
    docling_label: text
    docling_ref: '#/texts/101'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    next: '94'
    parent: '86'
    previous: '92'
- node_id: '94'
  node_depth: 2
  node_type: Node
  content_length: 15
  content: Supported types
  metadata:
    docling_label: text
    docling_ref: '#/texts/102'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    next: '95'
    parent: '86'
    previous: '93'
- node_id: '95'
  node_depth: 2
  node_type: Node
  content_length: 119
  content: |-
    | number   | result   |
    |----------|----------|
    | double   | double   |
    | integer  | double   |
    | long     | double   |
  metadata:
    docling_label: table
    docling_ref: '#/tables/16'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    next: '96'
    parent: '86'
    previous: '94'
- node_id: '96'
  node_depth: 2
  node_type: Node
  content_length: 8
  content: Examples
  metadata:
    docling_label: text
    docling_ref: '#/texts/103'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    next: '97'
    parent: '86'
    previous: '95'
- node_id: '97'
  node_depth: 2
  node_type: Node
  content_length: 69
  content: |-
    ```
    FROM employees
    | STATS MEDIAN(salary), PERCENTILE(salary, 50)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/104'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    next: '98'
    parent: '86'
    previous: '96'
- node_id: '98'
  node_depth: 2
  node_type: Node
  content_length: 185
  content: |-
    |   MEDIAN(salary):double |   PERCENTILE(salary, 50):double |
    |-------------------------|---------------------------------|
    |                   47003 |                           47003 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/17'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    next: '99'
    parent: '86'
    previous: '97'
- node_id: '99'
  node_depth: 2
  node_type: Node
  content_length: 219
  content: The expression can use inline functions. For example, to calculate the
    median of the maximum values of a multivalued column, first use MV_MAX to get
    the maximum value per row, and use the result with the MEDIAN function
  metadata:
    docling_label: text
    docling_ref: '#/texts/105'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    next: '100'
    parent: '86'
    previous: '98'
- node_id: '100'
  node_depth: 2
  node_type: Node
  content_length: 87
  content: |-
    ```
    FROM employees
    | STATS median_max_salary_change = MEDIAN(MV_MAX(salary_change))
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/106'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    next: '101'
    parent: '86'
    previous: '99'
- node_id: '101'
  node_depth: 2
  node_type: Node
  content_length: 113
  content: |-
    |   median_max_salary_change:double |
    |-----------------------------------|
    |                              7.69 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/18'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    next: '102'
    parent: '86'
    previous: '100'
- node_id: '102'
  node_depth: 2
  node_type: Node
  content_length: 104
  content: |-
    MEDIAN is also non-deterministic.
    This means you can get slightly different results using the same data.
  metadata:
    docling_label: text
    docling_ref: '#/texts/107'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN'
  relationships:
    parent: '86'
    previous: '101'
- node_id: '103'
  node_depth: 1
  node_type: Node
  content_length: 1649
  content: "## MEDIAN_ABSOLUTE_DEVIATION\n\nSyntax\n\nParameters\n\n- number\n\nDescription\n\
    \nReturns the median absolute deviation, a measure of variability. It is a robust\
    \ statistic, meaning that it is useful for describing data that may have outliers,\
    \ or may not be normally distributed. For such data it can be more descriptive\
    \ than standard deviation.  It is calculated as the median of each data point\u2019\
    s deviation from the median of the entire sample. That is, for a random variable\
    \ X, the median absolute deviation is median(|median(X) - X|).\n\nLike PERCENTILE,\
    \ MEDIAN_ABSOLUTE_DEVIATION is usually approximate.\n\nSupported types\n\n| number\
    \   | result   |\n|----------|----------|\n| double   | double   |\n| integer\
    \  | double   |\n| long     | double   |\n\nExamples\n\n```\nFROM employees\n\
    | STATS MEDIAN(salary), MEDIAN_ABSOLUTE_DEVIATION(salary)\n```\n\n|   MEDIAN(salary):double\
    \ |   MEDIAN_ABSOLUTE_DEVIATION(salary):double |\n|-------------------------|--------------------------------------------|\n\
    |                   47003 ..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/108'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    children:
    - '104'
    - '105'
    - '106'
    - '107'
    - '108'
    - '109'
    - '110'
    - '111'
    - '112'
    - '113'
    - '114'
    - '115'
    - '116'
    - '117'
    - '118'
    - '119'
    next: '120'
    parent: '0'
    previous: '86'
- node_id: '104'
  node_depth: 2
  node_type: Node
  content_length: 28
  content: '## MEDIAN_ABSOLUTE_DEVIATION'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/108'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    next: '105'
    parent: '103'
- node_id: '105'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: Syntax
  metadata:
    docling_label: text
    docling_ref: '#/texts/109'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    next: '106'
    parent: '103'
    previous: '104'
- node_id: '106'
  node_depth: 2
  node_type: Node
  content_length: 10
  content: Parameters
  metadata:
    docling_label: text
    docling_ref: '#/texts/110'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    next: '107'
    parent: '103'
    previous: '105'
- node_id: '107'
  node_depth: 2
  node_type: Node
  content_length: 8
  content: '- number'
  metadata:
    docling_label: list
    docling_ref: '#/groups/14'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    next: '108'
    parent: '103'
    previous: '106'
- node_id: '108'
  node_depth: 2
  node_type: Node
  content_length: 11
  content: Description
  metadata:
    docling_label: text
    docling_ref: '#/texts/112'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    next: '109'
    parent: '103'
    previous: '107'
- node_id: '109'
  node_depth: 2
  node_type: Node
  content_length: 455
  content: "Returns the median absolute deviation, a measure of variability. It is\
    \ a robust statistic, meaning that it is useful for describing data that may have\
    \ outliers, or may not be normally distributed. For such data it can be more descriptive\
    \ than standard deviation.  It is calculated as the median of each data point\u2019\
    s deviation from the median of the entire sample. That is, for a random variable\
    \ X, the median absolute deviation is median(|median(X) - X|)."
  metadata:
    docling_label: text
    docling_ref: '#/texts/113'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    next: '110'
    parent: '103'
    previous: '108'
- node_id: '110'
  node_depth: 2
  node_type: Node
  content_length: 66
  content: Like PERCENTILE, MEDIAN_ABSOLUTE_DEVIATION is usually approximate.
  metadata:
    docling_label: text
    docling_ref: '#/texts/114'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    next: '111'
    parent: '103'
    previous: '109'
- node_id: '111'
  node_depth: 2
  node_type: Node
  content_length: 15
  content: Supported types
  metadata:
    docling_label: text
    docling_ref: '#/texts/115'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    next: '112'
    parent: '103'
    previous: '110'
- node_id: '112'
  node_depth: 2
  node_type: Node
  content_length: 119
  content: |-
    | number   | result   |
    |----------|----------|
    | double   | double   |
    | integer  | double   |
    | long     | double   |
  metadata:
    docling_label: table
    docling_ref: '#/tables/19'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    next: '113'
    parent: '103'
    previous: '111'
- node_id: '113'
  node_depth: 2
  node_type: Node
  content_length: 8
  content: Examples
  metadata:
    docling_label: text
    docling_ref: '#/texts/116'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    next: '114'
    parent: '103'
    previous: '112'
- node_id: '114'
  node_depth: 2
  node_type: Node
  content_length: 80
  content: |-
    ```
    FROM employees
    | STATS MEDIAN(salary), MEDIAN_ABSOLUTE_DEVIATION(salary)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/117'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    next: '115'
    parent: '103'
    previous: '113'
- node_id: '115'
  node_depth: 2
  node_type: Node
  content_length: 218
  content: |-
    |   MEDIAN(salary):double |   MEDIAN_ABSOLUTE_DEVIATION(salary):double |
    |-------------------------|--------------------------------------------|
    |                   47003 |                                    10096.5 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/20'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    next: '116'
    parent: '103'
    previous: '114'
- node_id: '116'
  node_depth: 2
  node_type: Node
  content_length: 257
  content: The expression can use inline functions. For example, to calculate the
    median absolute deviation of the maximum values of a multivalued column, first
    use MV_MAX to get the maximum value per row, and use the result with the MEDIAN_ABSOLUTE_DEVIATION
    function
  metadata:
    docling_label: text
    docling_ref: '#/texts/118'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    next: '117'
    parent: '103'
    previous: '115'
- node_id: '117'
  node_depth: 2
  node_type: Node
  content_length: 105
  content: |-
    ```
    FROM employees
    | STATS m_a_d_max_salary_change = MEDIAN_ABSOLUTE_DEVIATION(MV_MAX(salary_change))
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/119'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    next: '118'
    parent: '103'
    previous: '116'
- node_id: '118'
  node_depth: 2
  node_type: Node
  content_length: 110
  content: |-
    |   m_a_d_max_salary_change:double |
    |----------------------------------|
    |                             5.69 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/21'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    next: '119'
    parent: '103'
    previous: '117'
- node_id: '119'
  node_depth: 2
  node_type: Node
  content_length: 123
  content: |-
    MEDIAN_ABSOLUTE_DEVIATION is also non-deterministic.
    This means you can get slightly different results using the same data.
  metadata:
    docling_label: text
    docling_ref: '#/texts/120'
    headings:
    - '# ES|QL aggregation functions'
    - '## MEDIAN_ABSOLUTE_DEVIATION'
  relationships:
    parent: '103'
    previous: '118'
- node_id: '120'
  node_depth: 1
  node_type: Node
  content_length: 986
  content: |-
    ## MIN

    Syntax

    Parameters

    - field

    Description

    The minimum value of a field.

    Supported types

    | field      | result     |
    |------------|------------|
    | boolean    | boolean    |
    | date       | date       |
    | date_nanos | date_nanos |
    | double     | double     |
    | integer    | integer    |
    | ip         | ip         |
    | keyword    | keyword    |
    | long       | long       |
    | text       | keyword    |
    | version    | version    |

    Examples

    ```
    FROM employees
    | STATS MIN(languages)
    ```

    |   MIN(languages):integer |
    |--------------------------|
    |                        1 |

    The expression can use inline functions. For example, to calculate the minimum over an average of a multivalued column, use MV_AVG to first average the multiple values per row, and use the result with the MIN function

    ```
    FROM employees
    | STATS min_avg_salary_change = MIN(MV_AVG(salary_change))
    ```

    |   min_avg_salary_change:double |
    |--------------------------------|
    |                          -8.46 |
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/121'
    headings:
    - '# ES|QL aggregation functions'
    - '## MIN'
  relationships:
    children:
    - '121'
    - '122'
    - '123'
    - '124'
    - '125'
    - '126'
    - '127'
    - '128'
    - '129'
    - '130'
    - '131'
    - '132'
    - '133'
    - '134'
    next: '135'
    parent: '0'
    previous: '103'
- node_id: '121'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: '## MIN'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/121'
    headings:
    - '# ES|QL aggregation functions'
    - '## MIN'
  relationships:
    next: '122'
    parent: '120'
- node_id: '122'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: Syntax
  metadata:
    docling_label: text
    docling_ref: '#/texts/122'
    headings:
    - '# ES|QL aggregation functions'
    - '## MIN'
  relationships:
    next: '123'
    parent: '120'
    previous: '121'
- node_id: '123'
  node_depth: 2
  node_type: Node
  content_length: 10
  content: Parameters
  metadata:
    docling_label: text
    docling_ref: '#/texts/123'
    headings:
    - '# ES|QL aggregation functions'
    - '## MIN'
  relationships:
    next: '124'
    parent: '120'
    previous: '122'
- node_id: '124'
  node_depth: 2
  node_type: Node
  content_length: 7
  content: '- field'
  metadata:
    docling_label: list
    docling_ref: '#/groups/16'
    headings:
    - '# ES|QL aggregation functions'
    - '## MIN'
  relationships:
    next: '125'
    parent: '120'
    previous: '123'
- node_id: '125'
  node_depth: 2
  node_type: Node
  content_length: 11
  content: Description
  metadata:
    docling_label: text
    docling_ref: '#/texts/125'
    headings:
    - '# ES|QL aggregation functions'
    - '## MIN'
  relationships:
    next: '126'
    parent: '120'
    previous: '124'
- node_id: '126'
  node_depth: 2
  node_type: Node
  content_length: 29
  content: The minimum value of a field.
  metadata:
    docling_label: text
    docling_ref: '#/texts/126'
    headings:
    - '# ES|QL aggregation functions'
    - '## MIN'
  relationships:
    next: '127'
    parent: '120'
    previous: '125'
- node_id: '127'
  node_depth: 2
  node_type: Node
  content_length: 15
  content: Supported types
  metadata:
    docling_label: text
    docling_ref: '#/texts/127'
    headings:
    - '# ES|QL aggregation functions'
    - '## MIN'
  relationships:
    next: '128'
    parent: '120'
    previous: '126'
- node_id: '128'
  node_depth: 2
  node_type: Node
  content_length: 335
  content: |-
    | field      | result     |
    |------------|------------|
    | boolean    | boolean    |
    | date       | date       |
    | date_nanos | date_nanos |
    | double     | double     |
    | integer    | integer    |
    | ip         | ip         |
    | keyword    | keyword    |
    | long       | long       |
    | text       | keyword    |
    | version    | version    |
  metadata:
    docling_label: table
    docling_ref: '#/tables/22'
    headings:
    - '# ES|QL aggregation functions'
    - '## MIN'
  relationships:
    next: '129'
    parent: '120'
    previous: '127'
- node_id: '129'
  node_depth: 2
  node_type: Node
  content_length: 8
  content: Examples
  metadata:
    docling_label: text
    docling_ref: '#/texts/128'
    headings:
    - '# ES|QL aggregation functions'
    - '## MIN'
  relationships:
    next: '130'
    parent: '120'
    previous: '128'
- node_id: '130'
  node_depth: 2
  node_type: Node
  content_length: 45
  content: |-
    ```
    FROM employees
    | STATS MIN(languages)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/129'
    headings:
    - '# ES|QL aggregation functions'
    - '## MIN'
  relationships:
    next: '131'
    parent: '120'
    previous: '129'
- node_id: '131'
  node_depth: 2
  node_type: Node
  content_length: 86
  content: |-
    |   MIN(languages):integer |
    |--------------------------|
    |                        1 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/23'
    headings:
    - '# ES|QL aggregation functions'
    - '## MIN'
  relationships:
    next: '132'
    parent: '120'
    previous: '130'
- node_id: '132'
  node_depth: 2
  node_type: Node
  content_length: 217
  content: The expression can use inline functions. For example, to calculate the
    minimum over an average of a multivalued column, use MV_AVG to first average the
    multiple values per row, and use the result with the MIN function
  metadata:
    docling_label: text
    docling_ref: '#/texts/130'
    headings:
    - '# ES|QL aggregation functions'
    - '## MIN'
  relationships:
    next: '133'
    parent: '120'
    previous: '131'
- node_id: '133'
  node_depth: 2
  node_type: Node
  content_length: 81
  content: |-
    ```
    FROM employees
    | STATS min_avg_salary_change = MIN(MV_AVG(salary_change))
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/131'
    headings:
    - '# ES|QL aggregation functions'
    - '## MIN'
  relationships:
    next: '134'
    parent: '120'
    previous: '132'
- node_id: '134'
  node_depth: 2
  node_type: Node
  content_length: 104
  content: |-
    |   min_avg_salary_change:double |
    |--------------------------------|
    |                          -8.46 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/24'
    headings:
    - '# ES|QL aggregation functions'
    - '## MIN'
  relationships:
    parent: '120'
    previous: '133'
- node_id: '135'
  node_depth: 1
  node_type: Node
  content_length: 3314
  content: |-
    ## PERCENTILE

    Syntax

    Parameters

    - number
    - percentile

    Description

    Returns the value at which a certain percentage of observed values occur. For example, the 95th percentile is the value which is greater than 95% of the observed values and the 50th percentile is the MEDIAN.

    Supported types

    | number   | percentile   | result   |
    |----------|--------------|----------|
    | double   | double       | double   |
    | double   | integer      | double   |
    | double   | long         | double   |
    | integer  | double       | double   |
    | integer  | integer      | double   |
    | integer  | long         | double   |
    | long     | double       | double   |
    | long     | integer      | double   |
    | long     | long         | double   |

    Examples

    ```
    FROM employees
    | STATS p0 = PERCENTILE(salary,  0)
     , p50 = PERCENTILE(salary, 50)
     , p99 = PERCENTILE(salary, 99)
    ```

    |   p0:double |   p50:double |   p99:double |
    |-------------|--------------|--------------|
    |       25324 |        47003 |      74970.3 |

    ...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/132'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
  relationships:
    children:
    - '136'
    - '137'
    - '138'
    - '139'
    - '140'
    - '141'
    - '142'
    - '143'
    - '144'
    - '145'
    - '146'
    - '147'
    - '148'
    - '149'
    - '150'
    next: '160'
    parent: '0'
    previous: '120'
- node_id: '136'
  node_depth: 2
  node_type: Node
  content_length: 13
  content: '## PERCENTILE'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/132'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
  relationships:
    next: '137'
    parent: '135'
- node_id: '137'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: Syntax
  metadata:
    docling_label: text
    docling_ref: '#/texts/133'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
  relationships:
    next: '138'
    parent: '135'
    previous: '136'
- node_id: '138'
  node_depth: 2
  node_type: Node
  content_length: 10
  content: Parameters
  metadata:
    docling_label: text
    docling_ref: '#/texts/134'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
  relationships:
    next: '139'
    parent: '135'
    previous: '137'
- node_id: '139'
  node_depth: 2
  node_type: Node
  content_length: 21
  content: |-
    - number
    - percentile
  metadata:
    docling_label: list
    docling_ref: '#/groups/18'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
  relationships:
    next: '140'
    parent: '135'
    previous: '138'
- node_id: '140'
  node_depth: 2
  node_type: Node
  content_length: 11
  content: Description
  metadata:
    docling_label: text
    docling_ref: '#/texts/137'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
  relationships:
    next: '141'
    parent: '135'
    previous: '139'
- node_id: '141'
  node_depth: 2
  node_type: Node
  content_length: 207
  content: Returns the value at which a certain percentage of observed values occur.
    For example, the 95th percentile is the value which is greater than 95% of the
    observed values and the 50th percentile is the MEDIAN.
  metadata:
    docling_label: text
    docling_ref: '#/texts/138'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
  relationships:
    next: '142'
    parent: '135'
    previous: '140'
- node_id: '142'
  node_depth: 2
  node_type: Node
  content_length: 15
  content: Supported types
  metadata:
    docling_label: text
    docling_ref: '#/texts/139'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
  relationships:
    next: '143'
    parent: '135'
    previous: '141'
- node_id: '143'
  node_depth: 2
  node_type: Node
  content_length: 428
  content: |-
    | number   | percentile   | result   |
    |----------|--------------|----------|
    | double   | double       | double   |
    | double   | integer      | double   |
    | double   | long         | double   |
    | integer  | double       | double   |
    | integer  | integer      | double   |
    | integer  | long         | double   |
    | long     | double       | double   |
    | long     | integer      | double   |
    | long     | long         | double   |
  metadata:
    docling_label: table
    docling_ref: '#/tables/25'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
  relationships:
    next: '144'
    parent: '135'
    previous: '142'
- node_id: '144'
  node_depth: 2
  node_type: Node
  content_length: 8
  content: Examples
  metadata:
    docling_label: text
    docling_ref: '#/texts/140'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
  relationships:
    next: '145'
    parent: '135'
    previous: '143'
- node_id: '145'
  node_depth: 2
  node_type: Node
  content_length: 122
  content: |-
    ```
    FROM employees
    | STATS p0 = PERCENTILE(salary,  0)
     , p50 = PERCENTILE(salary, 50)
     , p99 = PERCENTILE(salary, 99)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/141'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
  relationships:
    next: '146'
    parent: '135'
    previous: '144'
- node_id: '146'
  node_depth: 2
  node_type: Node
  content_length: 137
  content: |-
    |   p0:double |   p50:double |   p99:double |
    |-------------|--------------|--------------|
    |       25324 |        47003 |      74970.3 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/26'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
  relationships:
    next: '147'
    parent: '135'
    previous: '145'
- node_id: '147'
  node_depth: 2
  node_type: Node
  content_length: 225
  content: The expression can use inline functions. For example, to calculate a percentile
    of the maximum values of a multivalued column, first use MV_MAX to get the maximum
    value per row, and use the result with the PERCENTILE function
  metadata:
    docling_label: text
    docling_ref: '#/texts/142'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
  relationships:
    next: '148'
    parent: '135'
    previous: '146'
- node_id: '148'
  node_depth: 2
  node_type: Node
  content_length: 92
  content: |-
    ```
    FROM employees
    | STATS p80_max_salary_change = PERCENTILE(MV_MAX(salary_change), 80)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/143'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
  relationships:
    next: '149'
    parent: '135'
    previous: '147'
- node_id: '149'
  node_depth: 2
  node_type: Node
  content_length: 104
  content: |-
    |   p80_max_salary_change:double |
    |--------------------------------|
    |                         12.132 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/27'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
  relationships:
    next: '150'
    parent: '135'
    previous: '148'
- node_id: '150'
  node_depth: 2
  node_type: Node
  content_length: 1887
  content: "### PERCENTILE is (usually) approximate\n\nThere are many different algorithms\
    \ to calculate percentiles. The naive implementation simply stores all the values\
    \ in a sorted array. To find the 50th percentile, you simply find the value that\
    \ is at my_array[count(my_array) * 0.5].\n\nClearly, the naive implementation\
    \ does not scale \u2014 the sorted array grows linearly with the number of values\
    \ in your dataset. To calculate percentiles across potentially billions of values\
    \ in an Elasticsearch cluster, approximate percentiles are calculated.\n\nThe\
    \ algorithm used by the percentile metric is called TDigest (introduced by Ted\
    \ Dunning in Computing Accurate Quantiles using T-Digests).\n\nWhen using this\
    \ metric, there are a few guidelines to keep in mind:\n\n- Accuracy is proportional\
    \ to q(1-q). This means that extreme percentiles (e.g. 99%) are more accurate\
    \ than less extreme percentiles, such as the median\n- For small sets of values,\
    \ percentiles are highly accurate (and potentially 100% accurate if the data ..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/144'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
    - '### PERCENTILE is (usually) approximate'
  relationships:
    children:
    - '151'
    - '152'
    - '153'
    - '154'
    - '155'
    - '156'
    - '157'
    - '158'
    - '159'
    parent: '135'
    previous: '149'
- node_id: '151'
  node_depth: 3
  node_type: Node
  content_length: 39
  content: '### PERCENTILE is (usually) approximate'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/144'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
    - '### PERCENTILE is (usually) approximate'
  relationships:
    next: '152'
    parent: '150'
- node_id: '152'
  node_depth: 3
  node_type: Node
  content_length: 233
  content: There are many different algorithms to calculate percentiles. The naive
    implementation simply stores all the values in a sorted array. To find the 50th
    percentile, you simply find the value that is at my_array[count(my_array) * 0.5].
  metadata:
    docling_label: text
    docling_ref: '#/texts/145'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
    - '### PERCENTILE is (usually) approximate'
  relationships:
    next: '153'
    parent: '150'
    previous: '151'
- node_id: '153'
  node_depth: 3
  node_type: Node
  content_length: 257
  content: "Clearly, the naive implementation does not scale \u2014 the sorted array\
    \ grows linearly with the number of values in your dataset. To calculate percentiles\
    \ across potentially billions of values in an Elasticsearch cluster, approximate\
    \ percentiles are calculated."
  metadata:
    docling_label: text
    docling_ref: '#/texts/146'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
    - '### PERCENTILE is (usually) approximate'
  relationships:
    next: '154'
    parent: '150'
    previous: '152'
- node_id: '154'
  node_depth: 3
  node_type: Node
  content_length: 138
  content: The algorithm used by the percentile metric is called TDigest (introduced
    by Ted Dunning in Computing Accurate Quantiles using T-Digests).
  metadata:
    docling_label: text
    docling_ref: '#/texts/147'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
    - '### PERCENTILE is (usually) approximate'
  relationships:
    next: '155'
    parent: '150'
    previous: '153'
- node_id: '155'
  node_depth: 3
  node_type: Node
  content_length: 67
  content: 'When using this metric, there are a few guidelines to keep in mind:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/148'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
    - '### PERCENTILE is (usually) approximate'
  relationships:
    next: '156'
    parent: '150'
    previous: '154'
- node_id: '156'
  node_depth: 3
  node_type: Node
  content_length: 565
  content: |-
    - Accuracy is proportional to q(1-q). This means that extreme percentiles (e.g. 99%) are more accurate than less extreme percentiles, such as the median
    - For small sets of values, percentiles are highly accurate (and potentially 100% accurate if the data is small enough).
    - As the quantity of values in a bucket grows, the algorithm begins to approximate the percentiles. It is effectively trading accuracy for memory savings. The exact level of inaccuracy is difficult to generalize, since it depends on your data distribution and volume of data being aggregated
  metadata:
    docling_label: list
    docling_ref: '#/groups/20'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
    - '### PERCENTILE is (usually) approximate'
  relationships:
    next: '157'
    parent: '150'
    previous: '155'
- node_id: '157'
  node_depth: 3
  node_type: Node
  content_length: 144
  content: 'The following chart shows the relative error on a uniform distribution
    depending on the number of collected values and the requested percentile:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/152'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
    - '### PERCENTILE is (usually) approximate'
  relationships:
    next: '158'
    parent: '150'
    previous: '156'
- node_id: '158'
  node_depth: 3
  node_type: Node
  content_length: 320
  content: It shows how precision is better for extreme percentiles. The reason why
    error diminishes for large number of values is that the law of large numbers makes
    the distribution of values more and more uniform and the t-digest tree can do
    a better job at summarizing it. It would not be the case on more skewed distributions.
  metadata:
    docling_label: text
    docling_ref: '#/texts/153'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
    - '### PERCENTILE is (usually) approximate'
  relationships:
    next: '159'
    parent: '150'
    previous: '157'
- node_id: '159'
  node_depth: 3
  node_type: Node
  content_length: 108
  content: |-
    PERCENTILE is also non-deterministic.
    This means you can get slightly different results using the same data.
  metadata:
    docling_label: text
    docling_ref: '#/texts/154'
    headings:
    - '# ES|QL aggregation functions'
    - '## PERCENTILE'
    - '### PERCENTILE is (usually) approximate'
  relationships:
    parent: '150'
    previous: '158'
- node_id: '160'
  node_depth: 1
  node_type: Node
  content_length: 611
  content: |-
    ## ST_CENTROID_AGG

    Elastic Stack
    Technical Preview



    Serverless
    Technical Preview

    Syntax

    Parameters

    - field

    Description

    Calculate the spatial centroid over a field with spatial point geometry type.

    Supported types

    | field           | result          |
    |-----------------|-----------------|
    | cartesian_point | cartesian_point |
    | geo_point       | geo_point       |

    Example

    ```
    FROM airports
    | STATS centroid=ST_CENTROID_AGG(location)
    ```

    | centroid:geo_point                             |
    |------------------------------------------------|
    | POINT(-0.030548143003023033 24.37553649504829) |
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/155'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_CENTROID_AGG'
  relationships:
    children:
    - '161'
    - '162'
    - '163'
    - '164'
    - '165'
    - '166'
    - '167'
    - '168'
    - '169'
    - '170'
    - '171'
    - '172'
    next: '173'
    parent: '0'
    previous: '135'
- node_id: '161'
  node_depth: 2
  node_type: Node
  content_length: 18
  content: '## ST_CENTROID_AGG'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/155'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_CENTROID_AGG'
  relationships:
    next: '162'
    parent: '160'
- node_id: '162'
  node_depth: 2
  node_type: Node
  content_length: 71
  content: |-
    Elastic Stack
    Technical Preview



    Serverless
    Technical Preview
  metadata:
    docling_label: text
    docling_ref: '#/texts/156'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_CENTROID_AGG'
  relationships:
    next: '163'
    parent: '160'
    previous: '161'
- node_id: '163'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: Syntax
  metadata:
    docling_label: text
    docling_ref: '#/texts/157'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_CENTROID_AGG'
  relationships:
    next: '164'
    parent: '160'
    previous: '162'
- node_id: '164'
  node_depth: 2
  node_type: Node
  content_length: 10
  content: Parameters
  metadata:
    docling_label: text
    docling_ref: '#/texts/158'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_CENTROID_AGG'
  relationships:
    next: '165'
    parent: '160'
    previous: '163'
- node_id: '165'
  node_depth: 2
  node_type: Node
  content_length: 7
  content: '- field'
  metadata:
    docling_label: list
    docling_ref: '#/groups/21'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_CENTROID_AGG'
  relationships:
    next: '166'
    parent: '160'
    previous: '164'
- node_id: '166'
  node_depth: 2
  node_type: Node
  content_length: 11
  content: Description
  metadata:
    docling_label: text
    docling_ref: '#/texts/160'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_CENTROID_AGG'
  relationships:
    next: '167'
    parent: '160'
    previous: '165'
- node_id: '167'
  node_depth: 2
  node_type: Node
  content_length: 77
  content: Calculate the spatial centroid over a field with spatial point geometry
    type.
  metadata:
    docling_label: text
    docling_ref: '#/texts/161'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_CENTROID_AGG'
  relationships:
    next: '168'
    parent: '160'
    previous: '166'
- node_id: '168'
  node_depth: 2
  node_type: Node
  content_length: 15
  content: Supported types
  metadata:
    docling_label: text
    docling_ref: '#/texts/162'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_CENTROID_AGG'
  relationships:
    next: '169'
    parent: '160'
    previous: '167'
- node_id: '169'
  node_depth: 2
  node_type: Node
  content_length: 151
  content: |-
    | field           | result          |
    |-----------------|-----------------|
    | cartesian_point | cartesian_point |
    | geo_point       | geo_point       |
  metadata:
    docling_label: table
    docling_ref: '#/tables/28'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_CENTROID_AGG'
  relationships:
    next: '170'
    parent: '160'
    previous: '168'
- node_id: '170'
  node_depth: 2
  node_type: Node
  content_length: 7
  content: Example
  metadata:
    docling_label: text
    docling_ref: '#/texts/163'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_CENTROID_AGG'
  relationships:
    next: '171'
    parent: '160'
    previous: '169'
- node_id: '171'
  node_depth: 2
  node_type: Node
  content_length: 64
  content: |-
    ```
    FROM airports
    | STATS centroid=ST_CENTROID_AGG(location)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/164'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_CENTROID_AGG'
  relationships:
    next: '172'
    parent: '160'
    previous: '170'
- node_id: '172'
  node_depth: 2
  node_type: Node
  content_length: 152
  content: |-
    | centroid:geo_point                             |
    |------------------------------------------------|
    | POINT(-0.030548143003023033 24.37553649504829) |
  metadata:
    docling_label: table
    docling_ref: '#/tables/29'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_CENTROID_AGG'
  relationships:
    parent: '160'
    previous: '171'
- node_id: '173'
  node_depth: 1
  node_type: Node
  content_length: 842
  content: |-
    ## ST_EXTENT_AGG

    Elastic Stack
    Technical Preview



    Serverless
    Technical Preview

    Syntax

    Parameters

    - field

    Description

    Calculate the spatial extent over a field with geometry type. Returns a bounding box for all values of the field.

    Supported types

    | field           | result          |
    |-----------------|-----------------|
    | cartesian_point | cartesian_shape |
    | cartesian_shape | cartesian_shape |
    | geo_point       | geo_shape       |
    | geo_shape       | geo_shape       |

    Example

    ```
    FROM airports
    | WHERE country == "India"
    | STATS extent = ST_EXTENT_AGG(location)
    ```

    | extent:geo_shape                                                               |
    |--------------------------------------------------------------------------------|
    | BBOX (70.77995480038226, 91.5882289968431, 33.9830909203738, 8.47650992218405) |
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/165'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_EXTENT_AGG'
  relationships:
    children:
    - '174'
    - '175'
    - '176'
    - '177'
    - '178'
    - '179'
    - '180'
    - '181'
    - '182'
    - '183'
    - '184'
    - '185'
    next: '186'
    parent: '0'
    previous: '160'
- node_id: '174'
  node_depth: 2
  node_type: Node
  content_length: 16
  content: '## ST_EXTENT_AGG'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/165'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_EXTENT_AGG'
  relationships:
    next: '175'
    parent: '173'
- node_id: '175'
  node_depth: 2
  node_type: Node
  content_length: 71
  content: |-
    Elastic Stack
    Technical Preview



    Serverless
    Technical Preview
  metadata:
    docling_label: text
    docling_ref: '#/texts/166'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_EXTENT_AGG'
  relationships:
    next: '176'
    parent: '173'
    previous: '174'
- node_id: '176'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: Syntax
  metadata:
    docling_label: text
    docling_ref: '#/texts/167'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_EXTENT_AGG'
  relationships:
    next: '177'
    parent: '173'
    previous: '175'
- node_id: '177'
  node_depth: 2
  node_type: Node
  content_length: 10
  content: Parameters
  metadata:
    docling_label: text
    docling_ref: '#/texts/168'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_EXTENT_AGG'
  relationships:
    next: '178'
    parent: '173'
    previous: '176'
- node_id: '178'
  node_depth: 2
  node_type: Node
  content_length: 7
  content: '- field'
  metadata:
    docling_label: list
    docling_ref: '#/groups/23'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_EXTENT_AGG'
  relationships:
    next: '179'
    parent: '173'
    previous: '177'
- node_id: '179'
  node_depth: 2
  node_type: Node
  content_length: 11
  content: Description
  metadata:
    docling_label: text
    docling_ref: '#/texts/170'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_EXTENT_AGG'
  relationships:
    next: '180'
    parent: '173'
    previous: '178'
- node_id: '180'
  node_depth: 2
  node_type: Node
  content_length: 113
  content: Calculate the spatial extent over a field with geometry type. Returns a
    bounding box for all values of the field.
  metadata:
    docling_label: text
    docling_ref: '#/texts/171'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_EXTENT_AGG'
  relationships:
    next: '181'
    parent: '173'
    previous: '179'
- node_id: '181'
  node_depth: 2
  node_type: Node
  content_length: 15
  content: Supported types
  metadata:
    docling_label: text
    docling_ref: '#/texts/172'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_EXTENT_AGG'
  relationships:
    next: '182'
    parent: '173'
    previous: '180'
- node_id: '182'
  node_depth: 2
  node_type: Node
  content_length: 227
  content: |-
    | field           | result          |
    |-----------------|-----------------|
    | cartesian_point | cartesian_shape |
    | cartesian_shape | cartesian_shape |
    | geo_point       | geo_shape       |
    | geo_shape       | geo_shape       |
  metadata:
    docling_label: table
    docling_ref: '#/tables/30'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_EXTENT_AGG'
  relationships:
    next: '183'
    parent: '173'
    previous: '181'
- node_id: '183'
  node_depth: 2
  node_type: Node
  content_length: 7
  content: Example
  metadata:
    docling_label: text
    docling_ref: '#/texts/173'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_EXTENT_AGG'
  relationships:
    next: '184'
    parent: '173'
    previous: '182'
- node_id: '184'
  node_depth: 2
  node_type: Node
  content_length: 89
  content: |-
    ```
    FROM airports
    | WHERE country == "India"
    | STATS extent = ST_EXTENT_AGG(location)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/174'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_EXTENT_AGG'
  relationships:
    next: '185'
    parent: '173'
    previous: '183'
- node_id: '185'
  node_depth: 2
  node_type: Node
  content_length: 248
  content: |-
    | extent:geo_shape                                                               |
    |--------------------------------------------------------------------------------|
    | BBOX (70.77995480038226, 91.5882289968431, 33.9830909203738, 8.47650992218405) |
  metadata:
    docling_label: table
    docling_ref: '#/tables/31'
    headings:
    - '# ES|QL aggregation functions'
    - '## ST_EXTENT_AGG'
  relationships:
    parent: '173'
    previous: '184'
- node_id: '186'
  node_depth: 1
  node_type: Node
  content_length: 791
  content: "## STD_DEV\n\nSyntax\n\nParameters\n\n- number\n\nDescription\n\nThe population\
    \ standard deviation of a numeric field.\n\nSupported types\n\n| number   | result\
    \   |\n|----------|----------|\n| double   | double   |\n| integer  | double \
    \  |\n| long     | double   |\n\nExamples\n\n```\nFROM employees\n| STATS STD_DEV(height)\n\
    ```\n\n|   STD_DEV(height):double |\n|--------------------------|\n|         \
    \         0.20637 |\n\nThe expression can use inline functions. For example, to\
    \ calculate the population standard deviation of each employee\u2019s maximum\
    \ salary changes, first use MV_MAX on each row, and then use STD_DEV on the result\n\
    \n```\nFROM employees\n| STATS stddev_salary_change = STD_DEV(MV_MAX(salary_change))\n\
    ```\n\n|   stddev_salary_change:double |\n|-------------------------------|\n\
    |                       6.87583 |"
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/175'
    headings:
    - '# ES|QL aggregation functions'
    - '## STD_DEV'
  relationships:
    children:
    - '187'
    - '188'
    - '189'
    - '190'
    - '191'
    - '192'
    - '193'
    - '194'
    - '195'
    - '196'
    - '197'
    - '198'
    - '199'
    - '200'
    next: '201'
    parent: '0'
    previous: '173'
- node_id: '187'
  node_depth: 2
  node_type: Node
  content_length: 10
  content: '## STD_DEV'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/175'
    headings:
    - '# ES|QL aggregation functions'
    - '## STD_DEV'
  relationships:
    next: '188'
    parent: '186'
- node_id: '188'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: Syntax
  metadata:
    docling_label: text
    docling_ref: '#/texts/176'
    headings:
    - '# ES|QL aggregation functions'
    - '## STD_DEV'
  relationships:
    next: '189'
    parent: '186'
    previous: '187'
- node_id: '189'
  node_depth: 2
  node_type: Node
  content_length: 10
  content: Parameters
  metadata:
    docling_label: text
    docling_ref: '#/texts/177'
    headings:
    - '# ES|QL aggregation functions'
    - '## STD_DEV'
  relationships:
    next: '190'
    parent: '186'
    previous: '188'
- node_id: '190'
  node_depth: 2
  node_type: Node
  content_length: 8
  content: '- number'
  metadata:
    docling_label: list
    docling_ref: '#/groups/25'
    headings:
    - '# ES|QL aggregation functions'
    - '## STD_DEV'
  relationships:
    next: '191'
    parent: '186'
    previous: '189'
- node_id: '191'
  node_depth: 2
  node_type: Node
  content_length: 11
  content: Description
  metadata:
    docling_label: text
    docling_ref: '#/texts/179'
    headings:
    - '# ES|QL aggregation functions'
    - '## STD_DEV'
  relationships:
    next: '192'
    parent: '186'
    previous: '190'
- node_id: '192'
  node_depth: 2
  node_type: Node
  content_length: 53
  content: The population standard deviation of a numeric field.
  metadata:
    docling_label: text
    docling_ref: '#/texts/180'
    headings:
    - '# ES|QL aggregation functions'
    - '## STD_DEV'
  relationships:
    next: '193'
    parent: '186'
    previous: '191'
- node_id: '193'
  node_depth: 2
  node_type: Node
  content_length: 15
  content: Supported types
  metadata:
    docling_label: text
    docling_ref: '#/texts/181'
    headings:
    - '# ES|QL aggregation functions'
    - '## STD_DEV'
  relationships:
    next: '194'
    parent: '186'
    previous: '192'
- node_id: '194'
  node_depth: 2
  node_type: Node
  content_length: 119
  content: |-
    | number   | result   |
    |----------|----------|
    | double   | double   |
    | integer  | double   |
    | long     | double   |
  metadata:
    docling_label: table
    docling_ref: '#/tables/32'
    headings:
    - '# ES|QL aggregation functions'
    - '## STD_DEV'
  relationships:
    next: '195'
    parent: '186'
    previous: '193'
- node_id: '195'
  node_depth: 2
  node_type: Node
  content_length: 8
  content: Examples
  metadata:
    docling_label: text
    docling_ref: '#/texts/182'
    headings:
    - '# ES|QL aggregation functions'
    - '## STD_DEV'
  relationships:
    next: '196'
    parent: '186'
    previous: '194'
- node_id: '196'
  node_depth: 2
  node_type: Node
  content_length: 46
  content: |-
    ```
    FROM employees
    | STATS STD_DEV(height)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/183'
    headings:
    - '# ES|QL aggregation functions'
    - '## STD_DEV'
  relationships:
    next: '197'
    parent: '186'
    previous: '195'
- node_id: '197'
  node_depth: 2
  node_type: Node
  content_length: 86
  content: |-
    |   STD_DEV(height):double |
    |--------------------------|
    |                  0.20637 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/33'
    headings:
    - '# ES|QL aggregation functions'
    - '## STD_DEV'
  relationships:
    next: '198'
    parent: '186'
    previous: '196'
- node_id: '198'
  node_depth: 2
  node_type: Node
  content_length: 208
  content: "The expression can use inline functions. For example, to calculate the\
    \ population standard deviation of each employee\u2019s maximum salary changes,\
    \ first use MV_MAX on each row, and then use STD_DEV on the result"
  metadata:
    docling_label: text
    docling_ref: '#/texts/184'
    headings:
    - '# ES|QL aggregation functions'
    - '## STD_DEV'
  relationships:
    next: '199'
    parent: '186'
    previous: '197'
- node_id: '199'
  node_depth: 2
  node_type: Node
  content_length: 84
  content: |-
    ```
    FROM employees
    | STATS stddev_salary_change = STD_DEV(MV_MAX(salary_change))
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/185'
    headings:
    - '# ES|QL aggregation functions'
    - '## STD_DEV'
  relationships:
    next: '200'
    parent: '186'
    previous: '198'
- node_id: '200'
  node_depth: 2
  node_type: Node
  content_length: 101
  content: |-
    |   stddev_salary_change:double |
    |-------------------------------|
    |                       6.87583 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/34'
    headings:
    - '# ES|QL aggregation functions'
    - '## STD_DEV'
  relationships:
    parent: '186'
    previous: '199'
- node_id: '201'
  node_depth: 1
  node_type: Node
  content_length: 724
  content: "## SUM\n\nSyntax\n\nParameters\n\n- number\n\nDescription\n\nThe sum of\
    \ a numeric expression.\n\nSupported types\n\n| number   | result   |\n|----------|----------|\n\
    | double   | double   |\n| integer  | long     |\n| long     | long     |\n\n\
    Examples\n\n```\nFROM employees\n| STATS SUM(languages)\n```\n\n|   SUM(languages):long\
    \ |\n|-----------------------|\n|                   281 |\n\nThe expression can\
    \ use inline functions. For example, to calculate the sum of each employee\u2019\
    s maximum salary changes, apply the MV_MAX function to each row and then sum the\
    \ results\n\n```\nFROM employees\n| STATS total_salary_changes = SUM(MV_MAX(salary_change))\n\
    ```\n\n|   total_salary_changes:double |\n|-------------------------------|\n\
    |                        446.75 |"
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/186'
    headings:
    - '# ES|QL aggregation functions'
    - '## SUM'
  relationships:
    children:
    - '202'
    - '203'
    - '204'
    - '205'
    - '206'
    - '207'
    - '208'
    - '209'
    - '210'
    - '211'
    - '212'
    - '213'
    - '214'
    - '215'
    next: '216'
    parent: '0'
    previous: '186'
- node_id: '202'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: '## SUM'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/186'
    headings:
    - '# ES|QL aggregation functions'
    - '## SUM'
  relationships:
    next: '203'
    parent: '201'
- node_id: '203'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: Syntax
  metadata:
    docling_label: text
    docling_ref: '#/texts/187'
    headings:
    - '# ES|QL aggregation functions'
    - '## SUM'
  relationships:
    next: '204'
    parent: '201'
    previous: '202'
- node_id: '204'
  node_depth: 2
  node_type: Node
  content_length: 10
  content: Parameters
  metadata:
    docling_label: text
    docling_ref: '#/texts/188'
    headings:
    - '# ES|QL aggregation functions'
    - '## SUM'
  relationships:
    next: '205'
    parent: '201'
    previous: '203'
- node_id: '205'
  node_depth: 2
  node_type: Node
  content_length: 8
  content: '- number'
  metadata:
    docling_label: list
    docling_ref: '#/groups/27'
    headings:
    - '# ES|QL aggregation functions'
    - '## SUM'
  relationships:
    next: '206'
    parent: '201'
    previous: '204'
- node_id: '206'
  node_depth: 2
  node_type: Node
  content_length: 11
  content: Description
  metadata:
    docling_label: text
    docling_ref: '#/texts/190'
    headings:
    - '# ES|QL aggregation functions'
    - '## SUM'
  relationships:
    next: '207'
    parent: '201'
    previous: '205'
- node_id: '207'
  node_depth: 2
  node_type: Node
  content_length: 32
  content: The sum of a numeric expression.
  metadata:
    docling_label: text
    docling_ref: '#/texts/191'
    headings:
    - '# ES|QL aggregation functions'
    - '## SUM'
  relationships:
    next: '208'
    parent: '201'
    previous: '206'
- node_id: '208'
  node_depth: 2
  node_type: Node
  content_length: 15
  content: Supported types
  metadata:
    docling_label: text
    docling_ref: '#/texts/192'
    headings:
    - '# ES|QL aggregation functions'
    - '## SUM'
  relationships:
    next: '209'
    parent: '201'
    previous: '207'
- node_id: '209'
  node_depth: 2
  node_type: Node
  content_length: 119
  content: |-
    | number   | result   |
    |----------|----------|
    | double   | double   |
    | integer  | long     |
    | long     | long     |
  metadata:
    docling_label: table
    docling_ref: '#/tables/35'
    headings:
    - '# ES|QL aggregation functions'
    - '## SUM'
  relationships:
    next: '210'
    parent: '201'
    previous: '208'
- node_id: '210'
  node_depth: 2
  node_type: Node
  content_length: 8
  content: Examples
  metadata:
    docling_label: text
    docling_ref: '#/texts/193'
    headings:
    - '# ES|QL aggregation functions'
    - '## SUM'
  relationships:
    next: '211'
    parent: '201'
    previous: '209'
- node_id: '211'
  node_depth: 2
  node_type: Node
  content_length: 45
  content: |-
    ```
    FROM employees
    | STATS SUM(languages)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/194'
    headings:
    - '# ES|QL aggregation functions'
    - '## SUM'
  relationships:
    next: '212'
    parent: '201'
    previous: '210'
- node_id: '212'
  node_depth: 2
  node_type: Node
  content_length: 77
  content: |-
    |   SUM(languages):long |
    |-----------------------|
    |                   281 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/36'
    headings:
    - '# ES|QL aggregation functions'
    - '## SUM'
  relationships:
    next: '213'
    parent: '201'
    previous: '211'
- node_id: '213'
  node_depth: 2
  node_type: Node
  content_length: 180
  content: "The expression can use inline functions. For example, to calculate the\
    \ sum of each employee\u2019s maximum salary changes, apply the MV_MAX function\
    \ to each row and then sum the results"
  metadata:
    docling_label: text
    docling_ref: '#/texts/195'
    headings:
    - '# ES|QL aggregation functions'
    - '## SUM'
  relationships:
    next: '214'
    parent: '201'
    previous: '212'
- node_id: '214'
  node_depth: 2
  node_type: Node
  content_length: 80
  content: |-
    ```
    FROM employees
    | STATS total_salary_changes = SUM(MV_MAX(salary_change))
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/196'
    headings:
    - '# ES|QL aggregation functions'
    - '## SUM'
  relationships:
    next: '215'
    parent: '201'
    previous: '213'
- node_id: '215'
  node_depth: 2
  node_type: Node
  content_length: 101
  content: |-
    |   total_salary_changes:double |
    |-------------------------------|
    |                        446.75 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/37'
    headings:
    - '# ES|QL aggregation functions'
    - '## SUM'
  relationships:
    parent: '201'
    previous: '214'
- node_id: '216'
  node_depth: 1
  node_type: Node
  content_length: 991
  content: |-
    ## TOP

    Syntax

    Parameters

    - field
        - The field to collect the top values for.
    - limit
        - The maximum number of values to collect.
    - order
        - The order to calculate the top values. Either asc or desc.

    Description

    Collects the top values for a field. Includes repeated values.

    Supported types

    | field   | limit   | order   | result   |
    |---------|---------|---------|----------|
    | boolean | integer | keyword | boolean  |
    | date    | integer | keyword | date     |
    | double  | integer | keyword | double   |
    | integer | integer | keyword | integer  |
    | ip      | integer | keyword | ip       |
    | keyword | integer | keyword | keyword  |
    | long    | integer | keyword | long     |
    | text    | integer | keyword | keyword  |

    Example

    ```
    FROM employees
    | STATS top_salaries = TOP(salary, 3, "desc"), top_salary = MAX(salary)
    ```

    | top_salaries:integer   |   top_salary:integer |
    |------------------------|----------------------|
    | [74999, 74970, 74572]  |                74999 |
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/197'
    headings:
    - '# ES|QL aggregation functions'
    - '## TOP'
  relationships:
    children:
    - '217'
    - '218'
    - '219'
    - '220'
    - '221'
    - '222'
    - '223'
    - '224'
    - '225'
    - '226'
    - '227'
    next: '228'
    parent: '0'
    previous: '201'
- node_id: '217'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: '## TOP'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/197'
    headings:
    - '# ES|QL aggregation functions'
    - '## TOP'
  relationships:
    next: '218'
    parent: '216'
- node_id: '218'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: Syntax
  metadata:
    docling_label: text
    docling_ref: '#/texts/198'
    headings:
    - '# ES|QL aggregation functions'
    - '## TOP'
  relationships:
    next: '219'
    parent: '216'
    previous: '217'
- node_id: '219'
  node_depth: 2
  node_type: Node
  content_length: 10
  content: Parameters
  metadata:
    docling_label: text
    docling_ref: '#/texts/199'
    headings:
    - '# ES|QL aggregation functions'
    - '## TOP'
  relationships:
    next: '220'
    parent: '216'
    previous: '218'
- node_id: '220'
  node_depth: 2
  node_type: Node
  content_length: 182
  content: |-
    - field
        - The field to collect the top values for.
    - limit
        - The maximum number of values to collect.
    - order
        - The order to calculate the top values. Either asc or desc.
  metadata:
    docling_label: list
    docling_ref: '#/groups/29'
    headings:
    - '# ES|QL aggregation functions'
    - '## TOP'
  relationships:
    next: '221'
    parent: '216'
    previous: '219'
- node_id: '221'
  node_depth: 2
  node_type: Node
  content_length: 11
  content: Description
  metadata:
    docling_label: text
    docling_ref: '#/texts/206'
    headings:
    - '# ES|QL aggregation functions'
    - '## TOP'
  relationships:
    next: '222'
    parent: '216'
    previous: '220'
- node_id: '222'
  node_depth: 2
  node_type: Node
  content_length: 62
  content: Collects the top values for a field. Includes repeated values.
  metadata:
    docling_label: text
    docling_ref: '#/texts/207'
    headings:
    - '# ES|QL aggregation functions'
    - '## TOP'
  relationships:
    next: '223'
    parent: '216'
    previous: '221'
- node_id: '223'
  node_depth: 2
  node_type: Node
  content_length: 15
  content: Supported types
  metadata:
    docling_label: text
    docling_ref: '#/texts/208'
    headings:
    - '# ES|QL aggregation functions'
    - '## TOP'
  relationships:
    next: '224'
    parent: '216'
    previous: '222'
- node_id: '224'
  node_depth: 2
  node_type: Node
  content_length: 429
  content: |-
    | field   | limit   | order   | result   |
    |---------|---------|---------|----------|
    | boolean | integer | keyword | boolean  |
    | date    | integer | keyword | date     |
    | double  | integer | keyword | double   |
    | integer | integer | keyword | integer  |
    | ip      | integer | keyword | ip       |
    | keyword | integer | keyword | keyword  |
    | long    | integer | keyword | long     |
    | text    | integer | keyword | keyword  |
  metadata:
    docling_label: table
    docling_ref: '#/tables/38'
    headings:
    - '# ES|QL aggregation functions'
    - '## TOP'
  relationships:
    next: '225'
    parent: '216'
    previous: '223'
- node_id: '225'
  node_depth: 2
  node_type: Node
  content_length: 7
  content: Example
  metadata:
    docling_label: text
    docling_ref: '#/texts/209'
    headings:
    - '# ES|QL aggregation functions'
    - '## TOP'
  relationships:
    next: '226'
    parent: '216'
    previous: '224'
- node_id: '226'
  node_depth: 2
  node_type: Node
  content_length: 94
  content: |-
    ```
    FROM employees
    | STATS top_salaries = TOP(salary, 3, "desc"), top_salary = MAX(salary)
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/210'
    headings:
    - '# ES|QL aggregation functions'
    - '## TOP'
  relationships:
    next: '227'
    parent: '216'
    previous: '225'
- node_id: '227'
  node_depth: 2
  node_type: Node
  content_length: 149
  content: |-
    | top_salaries:integer   |   top_salary:integer |
    |------------------------|----------------------|
    | [74999, 74970, 74572]  |                74999 |
  metadata:
    docling_label: table
    docling_ref: '#/tables/39'
    headings:
    - '# ES|QL aggregation functions'
    - '## TOP'
  relationships:
    parent: '216'
    previous: '226'
- node_id: '228'
  node_depth: 1
  node_type: Node
  content_length: 4701
  content: "## VALUES\n\nElastic Stack\nTechnical Preview\n\n\n\nServerless\nTechnical\
    \ Preview\n\nSyntax\n\nParameters\n\n- field\n\nDescription\n\nReturns unique\
    \ values as a multivalued field. The order of the returned values isn\u2019t guaranteed.\
    \ If you need the values returned in order use MV_SORT.\n\nSupported types\n\n\
    | field           | result          |\n|-----------------|-----------------|\n\
    | boolean         | boolean         |\n| cartesian_point | cartesian_point |\n\
    | cartesian_shape | cartesian_shape |\n| date            | date            |\n\
    | date_nanos      | date_nanos      |\n| double          | double          |\n\
    | geo_point       | geo_point       |\n| geo_shape       | geo_shape       |\n\
    | integer         | integer         |\n| ip              | ip              |\n\
    | keyword         | keyword         |\n| long            | long            |\n\
    | text            | keyword         |\n| version         | version         |\n\
    \nExample\n\n```\nFROM employees\n| EVAL first_letter = SUBSTRING(first_name,\
    \ 0, 1)\n| STATS first_name..."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/211'
    headings:
    - '# ES|QL aggregation functions'
    - '## VALUES'
  relationships:
    children:
    - '229'
    - '230'
    - '231'
    - '232'
    - '233'
    - '234'
    - '235'
    - '236'
    - '237'
    - '238'
    - '239'
    - '240'
    - '241'
    - '242'
    next: '243'
    parent: '0'
    previous: '216'
- node_id: '229'
  node_depth: 2
  node_type: Node
  content_length: 9
  content: '## VALUES'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/211'
    headings:
    - '# ES|QL aggregation functions'
    - '## VALUES'
  relationships:
    next: '230'
    parent: '228'
- node_id: '230'
  node_depth: 2
  node_type: Node
  content_length: 71
  content: |-
    Elastic Stack
    Technical Preview



    Serverless
    Technical Preview
  metadata:
    docling_label: text
    docling_ref: '#/texts/212'
    headings:
    - '# ES|QL aggregation functions'
    - '## VALUES'
  relationships:
    next: '231'
    parent: '228'
    previous: '229'
- node_id: '231'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: Syntax
  metadata:
    docling_label: text
    docling_ref: '#/texts/213'
    headings:
    - '# ES|QL aggregation functions'
    - '## VALUES'
  relationships:
    next: '232'
    parent: '228'
    previous: '230'
- node_id: '232'
  node_depth: 2
  node_type: Node
  content_length: 10
  content: Parameters
  metadata:
    docling_label: text
    docling_ref: '#/texts/214'
    headings:
    - '# ES|QL aggregation functions'
    - '## VALUES'
  relationships:
    next: '233'
    parent: '228'
    previous: '231'
- node_id: '233'
  node_depth: 2
  node_type: Node
  content_length: 7
  content: '- field'
  metadata:
    docling_label: list
    docling_ref: '#/groups/33'
    headings:
    - '# ES|QL aggregation functions'
    - '## VALUES'
  relationships:
    next: '234'
    parent: '228'
    previous: '232'
- node_id: '234'
  node_depth: 2
  node_type: Node
  content_length: 11
  content: Description
  metadata:
    docling_label: text
    docling_ref: '#/texts/216'
    headings:
    - '# ES|QL aggregation functions'
    - '## VALUES'
  relationships:
    next: '235'
    parent: '228'
    previous: '233'
- node_id: '235'
  node_depth: 2
  node_type: Node
  content_length: 150
  content: "Returns unique values as a multivalued field. The order of the returned\
    \ values isn\u2019t guaranteed. If you need the values returned in order use MV_SORT."
  metadata:
    docling_label: text
    docling_ref: '#/texts/217'
    headings:
    - '# ES|QL aggregation functions'
    - '## VALUES'
  relationships:
    next: '236'
    parent: '228'
    previous: '234'
- node_id: '236'
  node_depth: 2
  node_type: Node
  content_length: 15
  content: Supported types
  metadata:
    docling_label: text
    docling_ref: '#/texts/218'
    headings:
    - '# ES|QL aggregation functions'
    - '## VALUES'
  relationships:
    next: '237'
    parent: '228'
    previous: '235'
- node_id: '237'
  node_depth: 2
  node_type: Node
  content_length: 607
  content: |-
    | field           | result          |
    |-----------------|-----------------|
    | boolean         | boolean         |
    | cartesian_point | cartesian_point |
    | cartesian_shape | cartesian_shape |
    | date            | date            |
    | date_nanos      | date_nanos      |
    | double          | double          |
    | geo_point       | geo_point       |
    | geo_shape       | geo_shape       |
    | integer         | integer         |
    | ip              | ip              |
    | keyword         | keyword         |
    | long            | long            |
    | text            | keyword         |
    | version         | version         |
  metadata:
    docling_label: table
    docling_ref: '#/tables/40'
    headings:
    - '# ES|QL aggregation functions'
    - '## VALUES'
  relationships:
    next: '238'
    parent: '228'
    previous: '236'
- node_id: '238'
  node_depth: 2
  node_type: Node
  content_length: 7
  content: Example
  metadata:
    docling_label: text
    docling_ref: '#/texts/219'
    headings:
    - '# ES|QL aggregation functions'
    - '## VALUES'
  relationships:
    next: '239'
    parent: '228'
    previous: '237'
- node_id: '239'
  node_depth: 2
  node_type: Node
  content_length: 157
  content: |-
    ```
    FROM employees
    | EVAL first_letter = SUBSTRING(first_name, 0, 1)
    | STATS first_name = MV_SORT(VALUES(first_name)) BY first_letter
    | SORT first_letter
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/220'
    headings:
    - '# ES|QL aggregation functions'
    - '## VALUES'
  relationships:
    next: '240'
    parent: '228'
    previous: '238'
- node_id: '240'
  node_depth: 2
  node_type: Node
  content_length: 3301
  content: |-
    | first_name:keyword                                                                                | first_letter:keyword   |
    |---------------------------------------------------------------------------------------------------|------------------------|
    | [Alejandro, Amabile, Anneke, Anoosh, Arumugam]                                                    | A                      |
    | [Basil, Berhard, Berni, Bezalel, Bojan, Breannda, Brendon]                                        | B                      |
    | [Charlene, Chirstian, Claudi, Cristinel]                                                          | C                      |
    | [Danel, Divier, Domenick, Duangkaew]                                                              | D                      |
    | [Ebbe, Eberhardt, Erez]                                                                           | E                      |
    | Florian                                                                                           | F        ...
  metadata:
    docling_label: table
    docling_ref: '#/tables/41'
    headings:
    - '# ES|QL aggregation functions'
    - '## VALUES'
  relationships:
    next: '241'
    parent: '228'
    previous: '239'
- node_id: '241'
  node_depth: 2
  node_type: Node
  content_length: 44
  content: |-
    Use TOP
    if you need to keep repeated values.
  metadata:
    docling_label: text
    docling_ref: '#/texts/221'
    headings:
    - '# ES|QL aggregation functions'
    - '## VALUES'
  relationships:
    next: '242'
    parent: '228'
    previous: '240'
- node_id: '242'
  node_depth: 2
  node_type: Node
  content_length: 280
  content: "This can use a significant amount of memory and ES|QL doesn\u2019t yet\n\
    grow aggregations beyond memory. So this aggregation will work until\nit is used\
    \ to collect more values than can fit into memory. Once it\ncollects too many\
    \ values it will fail the query with\na Circuit Breaker Error."
  metadata:
    docling_label: text
    docling_ref: '#/texts/222'
    headings:
    - '# ES|QL aggregation functions'
    - '## VALUES'
  relationships:
    parent: '228'
    previous: '241'
- node_id: '243'
  node_depth: 1
  node_type: Node
  content_length: 1053
  content: |-
    ## WEIGHTED_AVG

    Syntax

    Parameters

    - number
        - A numeric value.
    - weight
        - A numeric weight.

    Description

    The weighted average of a numeric expression.

    Supported types

    | number   | weight   | result   |
    |----------|----------|----------|
    | double   | double   | double   |
    | double   | integer  | double   |
    | double   | long     | double   |
    | integer  | double   | double   |
    | integer  | integer  | double   |
    | integer  | long     | double   |
    | long     | double   | double   |
    | long     | integer  | double   |
    | long     | long     | double   |

    Example

    ```
    FROM employees
    | STATS w_avg = WEIGHTED_AVG(salary, height) BY languages
    | EVAL w_avg = ROUND(w_avg)
    | KEEP w_avg, languages
    | SORT languages
    ```

    |   w_avg:double | languages:integer   |
    |----------------|---------------------|
    |          51464 | 1                   |
    |          48477 | 2                   |
    |          52379 | 3                   |
    |          47990 | 4                   |
    |          42119 | 5        ...
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/223'
    headings:
    - '# ES|QL aggregation functions'
    - '## WEIGHTED_AVG'
  relationships:
    children:
    - '244'
    - '245'
    - '246'
    - '247'
    - '248'
    - '249'
    - '250'
    - '251'
    - '252'
    - '253'
    - '254'
    parent: '0'
    previous: '228'
- node_id: '244'
  node_depth: 2
  node_type: Node
  content_length: 15
  content: '## WEIGHTED_AVG'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/223'
    headings:
    - '# ES|QL aggregation functions'
    - '## WEIGHTED_AVG'
  relationships:
    next: '245'
    parent: '243'
- node_id: '245'
  node_depth: 2
  node_type: Node
  content_length: 6
  content: Syntax
  metadata:
    docling_label: text
    docling_ref: '#/texts/224'
    headings:
    - '# ES|QL aggregation functions'
    - '## WEIGHTED_AVG'
  relationships:
    next: '246'
    parent: '243'
    previous: '244'
- node_id: '246'
  node_depth: 2
  node_type: Node
  content_length: 10
  content: Parameters
  metadata:
    docling_label: text
    docling_ref: '#/texts/225'
    headings:
    - '# ES|QL aggregation functions'
    - '## WEIGHTED_AVG'
  relationships:
    next: '247'
    parent: '243'
    previous: '245'
- node_id: '247'
  node_depth: 2
  node_type: Node
  content_length: 64
  content: |-
    - number
        - A numeric value.
    - weight
        - A numeric weight.
  metadata:
    docling_label: list
    docling_ref: '#/groups/35'
    headings:
    - '# ES|QL aggregation functions'
    - '## WEIGHTED_AVG'
  relationships:
    next: '248'
    parent: '243'
    previous: '246'
- node_id: '248'
  node_depth: 2
  node_type: Node
  content_length: 11
  content: Description
  metadata:
    docling_label: text
    docling_ref: '#/texts/230'
    headings:
    - '# ES|QL aggregation functions'
    - '## WEIGHTED_AVG'
  relationships:
    next: '249'
    parent: '243'
    previous: '247'
- node_id: '249'
  node_depth: 2
  node_type: Node
  content_length: 45
  content: The weighted average of a numeric expression.
  metadata:
    docling_label: text
    docling_ref: '#/texts/231'
    headings:
    - '# ES|QL aggregation functions'
    - '## WEIGHTED_AVG'
  relationships:
    next: '250'
    parent: '243'
    previous: '248'
- node_id: '250'
  node_depth: 2
  node_type: Node
  content_length: 15
  content: Supported types
  metadata:
    docling_label: text
    docling_ref: '#/texts/232'
    headings:
    - '# ES|QL aggregation functions'
    - '## WEIGHTED_AVG'
  relationships:
    next: '251'
    parent: '243'
    previous: '249'
- node_id: '251'
  node_depth: 2
  node_type: Node
  content_length: 384
  content: |-
    | number   | weight   | result   |
    |----------|----------|----------|
    | double   | double   | double   |
    | double   | integer  | double   |
    | double   | long     | double   |
    | integer  | double   | double   |
    | integer  | integer  | double   |
    | integer  | long     | double   |
    | long     | double   | double   |
    | long     | integer  | double   |
    | long     | long     | double   |
  metadata:
    docling_label: table
    docling_ref: '#/tables/42'
    headings:
    - '# ES|QL aggregation functions'
    - '## WEIGHTED_AVG'
  relationships:
    next: '252'
    parent: '243'
    previous: '250'
- node_id: '252'
  node_depth: 2
  node_type: Node
  content_length: 7
  content: Example
  metadata:
    docling_label: text
    docling_ref: '#/texts/233'
    headings:
    - '# ES|QL aggregation functions'
    - '## WEIGHTED_AVG'
  relationships:
    next: '253'
    parent: '243'
    previous: '251'
- node_id: '253'
  node_depth: 2
  node_type: Node
  content_length: 149
  content: |-
    ```
    FROM employees
    | STATS w_avg = WEIGHTED_AVG(salary, height) BY languages
    | EVAL w_avg = ROUND(w_avg)
    | KEEP w_avg, languages
    | SORT languages
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/234'
    headings:
    - '# ES|QL aggregation functions'
    - '## WEIGHTED_AVG'
  relationships:
    next: '254'
    parent: '243'
    previous: '252'
- node_id: '254'
  node_depth: 2
  node_type: Node
  content_length: 327
  content: |-
    |   w_avg:double | languages:integer   |
    |----------------|---------------------|
    |          51464 | 1                   |
    |          48477 | 2                   |
    |          52379 | 3                   |
    |          47990 | 4                   |
    |          42119 | 5                   |
    |          52142 | null                |
  metadata:
    docling_label: table
    docling_ref: '#/tables/43'
    headings:
    - '# ES|QL aggregation functions'
    - '## WEIGHTED_AVG'
  relationships:
    parent: '243'
    previous: '253'
