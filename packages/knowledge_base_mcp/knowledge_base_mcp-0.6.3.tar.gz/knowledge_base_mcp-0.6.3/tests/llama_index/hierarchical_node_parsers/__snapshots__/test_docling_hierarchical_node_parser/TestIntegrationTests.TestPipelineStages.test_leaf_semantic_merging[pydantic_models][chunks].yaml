- node_id: '0'
  node_depth: 0
  node_type: Node
  content_length: 11
  content: '# BaseModel'
  metadata:
    docling_label: title
    docling_ref: '#/texts/0'
    headings:
    - '# BaseModel'
  is_isolated: true
  relationships: {}
- node_id: '1'
  node_depth: 0
  node_type: Node
  content_length: 106
  content: Pydantic models are simply classes which inherit from BaseModel and define
    fields as annotated attributes.
  metadata:
    docling_label: text
    docling_ref: '#/texts/1'
    headings:
    - '# BaseModel'
  is_isolated: true
  relationships: {}
- node_id: '2'
  node_depth: 0
  node_type: Node
  content_length: 21
  content: '## pydantic.BaseModel'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/2'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
  is_isolated: true
  relationships: {}
- node_id: '3'
  node_depth: 0
  node_type: Node
  content_length: 19
  content: Usage Documentation
  metadata:
    docling_label: text
    docling_ref: '#/texts/3'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
  is_isolated: true
  relationships: {}
- node_id: '4'
  node_depth: 0
  node_type: Node
  content_length: 6
  content: Models
  metadata:
    docling_label: text
    docling_ref: '#/texts/4'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
  is_isolated: true
  relationships: {}
- node_id: '5'
  node_depth: 0
  node_type: Node
  content_length: 42
  content: A base class for creating Pydantic models.
  metadata:
    docling_label: text
    docling_ref: '#/texts/5'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
  is_isolated: true
  relationships: {}
- node_id: '6'
  node_depth: 0
  node_type: Node
  content_length: 11
  content: 'Attributes:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/6'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
  is_isolated: true
  relationships: {}
- node_id: '159'
  node_depth: 1
  node_type: Node
  content_length: 4859
  content: |-
    | Name                          | Type                                       | Description                                                                                                                                                       |
    |-------------------------------|--------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------|
    | __class_vars__                | set[str]                                   | The names of the class variables defined on the model.                                                                                                            |
    | __private_attributes__        | Dict[str, ModelPrivateAttr]                | Metadata about the private attributes of the model.                                                                                                               |
    | __signature__             ...
  metadata:
    docling_label: table
    docling_ref: '#/tables/0'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
  relationships:
    next: '160'
    parent: '157'
    previous: '158'
- node_id: '8'
  node_depth: 0
  node_type: Node
  content_length: 31
  content: Source code in pydantic/main.py
  metadata:
    docling_label: section
    docling_ref: '#/groups/0'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
  is_isolated: true
  relationships: {}
- node_id: '9'
  node_depth: 0
  node_type: Node
  content_length: 238
  content: "### __init__\n\xB6\n\n```\n__init__(**data: Any) -> None\n```\n\nRaises\
    \ ValidationError if the input data cannot be\nvalidated to form a valid model.\n\
    \nself is explicitly positional-only to allow self as a field name.\n\nSource\
    \ code in pydantic/main.py"
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/8'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### __init__'
  is_isolated: true
  relationships: {}
- node_id: '10'
  node_depth: 0
  node_type: Node
  content_length: 164
  content: "### model_config\n\nclass-attribute\n\n\xB6\n\n```\nmodel_config: ConfigDict\
    \ = ConfigDict()\n```\n\nConfiguration for the model, should be a dictionary conforming\
    \ to ConfigDict."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/13'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_configclass-attribute'
  is_isolated: true
  relationships: {}
- node_id: '11'
  node_depth: 0
  node_type: Node
  content_length: 27
  content: '### model_fieldsclassmethod'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/16'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_fieldsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '12'
  node_depth: 0
  node_type: Node
  content_length: 46
  content: |-
    ```
    model_fields() -> dict[str, FieldInfo]
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/17'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_fieldsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '13'
  node_depth: 0
  node_type: Node
  content_length: 65
  content: A mapping of field names to their respective FieldInfo instances.
  metadata:
    docling_label: text
    docling_ref: '#/texts/18'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_fieldsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '14'
  node_depth: 0
  node_type: Node
  content_length: 7
  content: Warning
  metadata:
    docling_label: text
    docling_ref: '#/texts/19'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_fieldsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '15'
  node_depth: 0
  node_type: Node
  content_length: 159
  content: |-
    Accessing this attribute from a model instance is deprecated, and will not work in Pydantic V3.
    Instead, you should access this attribute from the model class.
  metadata:
    docling_label: text
    docling_ref: '#/texts/20'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_fieldsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '16'
  node_depth: 0
  node_type: Node
  content_length: 31
  content: Source code in pydantic/main.py
  metadata:
    docling_label: section
    docling_ref: '#/groups/2'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_fieldsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '17'
  node_depth: 0
  node_type: Node
  content_length: 36
  content: '### model_computed_fieldsclassmethod'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/22'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_computed_fieldsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '18'
  node_depth: 0
  node_type: Node
  content_length: 63
  content: |-
    ```
    model_computed_fields() -> dict[str, ComputedFieldInfo]
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/23'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_computed_fieldsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '19'
  node_depth: 0
  node_type: Node
  content_length: 82
  content: A mapping of computed field names to their respective ComputedFieldInfo
    instances.
  metadata:
    docling_label: text
    docling_ref: '#/texts/24'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_computed_fieldsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '20'
  node_depth: 0
  node_type: Node
  content_length: 7
  content: Warning
  metadata:
    docling_label: text
    docling_ref: '#/texts/25'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_computed_fieldsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '21'
  node_depth: 0
  node_type: Node
  content_length: 159
  content: |-
    Accessing this attribute from a model instance is deprecated, and will not work in Pydantic V3.
    Instead, you should access this attribute from the model class.
  metadata:
    docling_label: text
    docling_ref: '#/texts/26'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_computed_fieldsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '22'
  node_depth: 0
  node_type: Node
  content_length: 31
  content: Source code in pydantic/main.py
  metadata:
    docling_label: section
    docling_ref: '#/groups/3'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_computed_fieldsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '23'
  node_depth: 0
  node_type: Node
  content_length: 125
  content: "### __pydantic_core_schema__\n\nclass-attribute\n\n\xB6\n\n```\n__pydantic_core_schema__:\
    \ CoreSchema\n```\n\nThe core schema of the model."
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/28'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### __pydantic_core_schema__class-attribute'
  is_isolated: true
  relationships: {}
- node_id: '24'
  node_depth: 0
  node_type: Node
  content_length: 23
  content: '### model_extraproperty'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/31'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_extraproperty'
  is_isolated: true
  relationships: {}
- node_id: '25'
  node_depth: 0
  node_type: Node
  content_length: 42
  content: |-
    ```
    model_extra: dict[str, Any] | None
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/32'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_extraproperty'
  is_isolated: true
  relationships: {}
- node_id: '26'
  node_depth: 0
  node_type: Node
  content_length: 39
  content: Get extra fields set during validation.
  metadata:
    docling_label: text
    docling_ref: '#/texts/33'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_extraproperty'
  is_isolated: true
  relationships: {}
- node_id: '27'
  node_depth: 0
  node_type: Node
  content_length: 8
  content: 'Returns:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/34'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_extraproperty'
  is_isolated: true
  relationships: {}
- node_id: '28'
  node_depth: 0
  node_type: Node
  content_length: 314
  content: |-
    | Type                  | Description                                                                  |
    |-----------------------|------------------------------------------------------------------------------|
    | dict[str, Any] | None | A dictionary of extra fields, or None if config.extra is not set to "allow". |
  metadata:
    docling_label: table
    docling_ref: '#/tables/5'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_extraproperty'
  is_isolated: true
  relationships: {}
- node_id: '29'
  node_depth: 0
  node_type: Node
  content_length: 28
  content: '### model_fields_setproperty'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/35'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_fields_setproperty'
  is_isolated: true
  relationships: {}
- node_id: '30'
  node_depth: 0
  node_type: Node
  content_length: 34
  content: |-
    ```
    model_fields_set: set[str]
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/36'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_fields_setproperty'
  is_isolated: true
  relationships: {}
- node_id: '31'
  node_depth: 0
  node_type: Node
  content_length: 79
  content: Returns the set of fields that have been explicitly set on this model instance.
  metadata:
    docling_label: text
    docling_ref: '#/texts/37'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_fields_setproperty'
  is_isolated: true
  relationships: {}
- node_id: '32'
  node_depth: 0
  node_type: Node
  content_length: 8
  content: 'Returns:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/38'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_fields_setproperty'
  is_isolated: true
  relationships: {}
- node_id: '33'
  node_depth: 0
  node_type: Node
  content_length: 350
  content: |-
    | Type     | Description                                                                                           |
    |----------|-------------------------------------------------------------------------------------------------------|
    | set[str] | A set of strings representing the fields that have been set, i.e. that were not filled from defaults. |
  metadata:
    docling_label: table
    docling_ref: '#/tables/6'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_fields_setproperty'
  is_isolated: true
  relationships: {}
- node_id: '34'
  node_depth: 0
  node_type: Node
  content_length: 30
  content: '### model_constructclassmethod'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/39'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_constructclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '35'
  node_depth: 0
  node_type: Node
  content_length: 87
  content: |-
    ```
    model_construct(
      _fields_set: set[str] | None = None, **values: Any
    ) -> Self
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/40'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_constructclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '36'
  node_depth: 0
  node_type: Node
  content_length: 62
  content: Creates a new instance of the Model class with validated data.
  metadata:
    docling_label: text
    docling_ref: '#/texts/41'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_constructclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '37'
  node_depth: 0
  node_type: Node
  content_length: 168
  content: |-
    Creates a new model setting __dict__ and __pydantic_fields_set__ from trusted or pre-validated data.
    Default values are respected, but no other validation is performed.
  metadata:
    docling_label: text
    docling_ref: '#/texts/42'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_constructclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '38'
  node_depth: 0
  node_type: Node
  content_length: 4
  content: Note
  metadata:
    docling_label: text
    docling_ref: '#/texts/43'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_constructclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '39'
  node_depth: 0
  node_type: Node
  content_length: 516
  content: |-
    model_construct() generally respects the model_config.extra setting on the provided model.
    That is, if model_config.extra == 'allow', then all extra passed values are added to the model instance's __dict__
    and __pydantic_extra__ fields. If model_config.extra == 'ignore' (the default), then all extra passed values are ignored.
    Because no validation is performed with a call to model_construct(), having model_config.extra == 'forbid' does not result in
    an error if extra values are passed, but they will be ignored.
  metadata:
    docling_label: text
    docling_ref: '#/texts/44'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_constructclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '40'
  node_depth: 0
  node_type: Node
  content_length: 11
  content: 'Parameters:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/45'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_constructclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '171'
  node_depth: 1
  node_type: Node
  content_length: 1055
  content: |-
    | Name        | Type            | Description                                                                                                                                                                                                             | Default   |
    |-------------|-----------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|
    | _fields_set | set[str] | None | A set of field names that were originally explicitly set during instantiation. If provided, this is directly used for the model_fields_set attribute. Otherwise, the field names from the values argument will be used. | None      |
    | values      | Any             | Trusted or pre-validated data dictionary.                                                                                                                                     ...
  metadata:
    docling_label: table
    docling_ref: '#/tables/7'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_constructclassmethod'
  relationships:
    next: '172'
    parent: '169'
    previous: '170'
- node_id: '42'
  node_depth: 0
  node_type: Node
  content_length: 8
  content: 'Returns:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/46'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_constructclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '43'
  node_depth: 0
  node_type: Node
  content_length: 203
  content: |-
    | Type   | Description                                            |
    |--------|--------------------------------------------------------|
    | Self   | A new instance of the Model class with validated data. |
  metadata:
    docling_label: table
    docling_ref: '#/tables/8'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_constructclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '44'
  node_depth: 0
  node_type: Node
  content_length: 31
  content: Source code in pydantic/main.py
  metadata:
    docling_label: section
    docling_ref: '#/groups/4'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_constructclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '45'
  node_depth: 0
  node_type: Node
  content_length: 14
  content: '### model_copy'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/48'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_copy'
  is_isolated: true
  relationships: {}
- node_id: '46'
  node_depth: 0
  node_type: Node
  content_length: 98
  content: |-
    ```
    model_copy(
      *,
      update: Mapping[str, Any] | None = None,
      deep: bool = False
    ) -> Self
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/49'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_copy'
  is_isolated: true
  relationships: {}
- node_id: '47'
  node_depth: 0
  node_type: Node
  content_length: 19
  content: Usage Documentation
  metadata:
    docling_label: text
    docling_ref: '#/texts/50'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_copy'
  is_isolated: true
  relationships: {}
- node_id: '48'
  node_depth: 0
  node_type: Node
  content_length: 10
  content: model_copy
  metadata:
    docling_label: text
    docling_ref: '#/texts/51'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_copy'
  is_isolated: true
  relationships: {}
- node_id: '49'
  node_depth: 0
  node_type: Node
  content_length: 28
  content: Returns a copy of the model.
  metadata:
    docling_label: text
    docling_ref: '#/texts/52'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_copy'
  is_isolated: true
  relationships: {}
- node_id: '50'
  node_depth: 0
  node_type: Node
  content_length: 4
  content: Note
  metadata:
    docling_label: text
    docling_ref: '#/texts/53'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_copy'
  is_isolated: true
  relationships: {}
- node_id: '51'
  node_depth: 0
  node_type: Node
  content_length: 190
  content: |-
    The underlying instance's __dict__ attribute is copied. This
    might have unexpected side effects if you store anything in it, on top of the model
    fields (e.g. the value of cached properties).
  metadata:
    docling_label: text
    docling_ref: '#/texts/54'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_copy'
  is_isolated: true
  relationships: {}
- node_id: '52'
  node_depth: 0
  node_type: Node
  content_length: 11
  content: 'Parameters:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/55'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_copy'
  is_isolated: true
  relationships: {}
- node_id: '53'
  node_depth: 0
  node_type: Node
  content_length: 727
  content: |-
    | Name   | Type                     | Description                                                                                                                       | Default   |
    |--------|--------------------------|-----------------------------------------------------------------------------------------------------------------------------------|-----------|
    | update | Mapping[str, Any] | None | Values to change/add in the new model. Note: the data is not validated before creating the new model. You should trust this data. | None      |
    | deep   | bool                     | Set to True to make a deep copy of the model.                                                                                     | False     |
  metadata:
    docling_label: table
    docling_ref: '#/tables/10'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_copy'
  is_isolated: true
  relationships: {}
- node_id: '54'
  node_depth: 0
  node_type: Node
  content_length: 8
  content: 'Returns:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/56'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_copy'
  is_isolated: true
  relationships: {}
- node_id: '55'
  node_depth: 0
  node_type: Node
  content_length: 98
  content: |-
    | Type   | Description         |
    |--------|---------------------|
    | Self   | New model instance. |
  metadata:
    docling_label: table
    docling_ref: '#/tables/11'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_copy'
  is_isolated: true
  relationships: {}
- node_id: '56'
  node_depth: 0
  node_type: Node
  content_length: 31
  content: Source code in pydantic/main.py
  metadata:
    docling_label: section
    docling_ref: '#/groups/5'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_copy'
  is_isolated: true
  relationships: {}
- node_id: '57'
  node_depth: 0
  node_type: Node
  content_length: 14
  content: '### model_dump'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/58'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump'
  is_isolated: true
  relationships: {}
- node_id: '58'
  node_depth: 0
  node_type: Node
  content_length: 498
  content: |-
    ```
    model_dump(
      *,
      mode: Literal["json", "python"] | str = "python",
      include: IncEx | None = None,
      exclude: IncEx | None = None,
      context: Any | None = None,
      by_alias: bool | None = None,
      exclude_unset: bool = False,
      exclude_defaults: bool = False,
      exclude_none: bool = False,
      round_trip: bool = False,
      warnings: (
          bool | Literal["none", "warn", "error"]
      ) = True,
      fallback: Callable[[Any], Any] | None = None,
      serialize_as_any: bool = False
    ) -> dict[str, Any]
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/59'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump'
  is_isolated: true
  relationships: {}
- node_id: '59'
  node_depth: 0
  node_type: Node
  content_length: 19
  content: Usage Documentation
  metadata:
    docling_label: text
    docling_ref: '#/texts/60'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump'
  is_isolated: true
  relationships: {}
- node_id: '60'
  node_depth: 0
  node_type: Node
  content_length: 10
  content: model_dump
  metadata:
    docling_label: text
    docling_ref: '#/texts/61'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump'
  is_isolated: true
  relationships: {}
- node_id: '61'
  node_depth: 0
  node_type: Node
  content_length: 108
  content: Generate a dictionary representation of the model, optionally specifying
    which fields to include or exclude.
  metadata:
    docling_label: text
    docling_ref: '#/texts/62'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump'
  is_isolated: true
  relationships: {}
- node_id: '62'
  node_depth: 0
  node_type: Node
  content_length: 11
  content: 'Parameters:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/63'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump'
  is_isolated: true
  relationships: {}
- node_id: '178'
  node_depth: 1
  node_type: Node
  content_length: 3807
  content: |-
    | Name             | Type                                    | Description                                                                                                                                                                                        | Default   |
    |------------------|-----------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|
    | mode             | Literal['json', 'python'] | str         | The mode in which to_python should run. If mode is 'json', the output will only contain JSON serializable types. If mode is 'python', the output may contain non-JSON-serializable Python objects. | 'python'  |
    | include          | IncEx | None                            | A set of fields to include in the output.                                                                                ...
  metadata:
    docling_label: table
    docling_ref: '#/tables/13'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump'
  relationships:
    next: '179'
    parent: '176'
    previous: '177'
- node_id: '64'
  node_depth: 0
  node_type: Node
  content_length: 8
  content: 'Returns:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/64'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump'
  is_isolated: true
  relationships: {}
- node_id: '65'
  node_depth: 0
  node_type: Node
  content_length: 188
  content: |-
    | Type           | Description                               |
    |----------------|-------------------------------------------|
    | dict[str, Any] | A dictionary representation of the model. |
  metadata:
    docling_label: table
    docling_ref: '#/tables/14'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump'
  is_isolated: true
  relationships: {}
- node_id: '66'
  node_depth: 0
  node_type: Node
  content_length: 31
  content: Source code in pydantic/main.py
  metadata:
    docling_label: section
    docling_ref: '#/groups/6'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump'
  is_isolated: true
  relationships: {}
- node_id: '67'
  node_depth: 0
  node_type: Node
  content_length: 19
  content: '### model_dump_json'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/66'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump_json'
  is_isolated: true
  relationships: {}
- node_id: '68'
  node_depth: 0
  node_type: Node
  content_length: 499
  content: |-
    ```
    model_dump_json(
      *,
      indent: int | None = None,
      ensure_ascii: bool = False,
      include: IncEx | None = None,
      exclude: IncEx | None = None,
      context: Any | None = None,
      by_alias: bool | None = None,
      exclude_unset: bool = False,
      exclude_defaults: bool = False,
      exclude_none: bool = False,
      round_trip: bool = False,
      warnings: (
          bool | Literal["none", "warn", "error"]
      ) = True,
      fallback: Callable[[Any], Any] | None = None,
      serialize_as_any: bool = False
    ) -> str
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/67'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump_json'
  is_isolated: true
  relationships: {}
- node_id: '69'
  node_depth: 0
  node_type: Node
  content_length: 19
  content: Usage Documentation
  metadata:
    docling_label: text
    docling_ref: '#/texts/68'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump_json'
  is_isolated: true
  relationships: {}
- node_id: '70'
  node_depth: 0
  node_type: Node
  content_length: 15
  content: model_dump_json
  metadata:
    docling_label: text
    docling_ref: '#/texts/69'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump_json'
  is_isolated: true
  relationships: {}
- node_id: '71'
  node_depth: 0
  node_type: Node
  content_length: 77
  content: Generates a JSON representation of the model using Pydantic's to_json method.
  metadata:
    docling_label: text
    docling_ref: '#/texts/70'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump_json'
  is_isolated: true
  relationships: {}
- node_id: '72'
  node_depth: 0
  node_type: Node
  content_length: 11
  content: 'Parameters:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/71'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump_json'
  is_isolated: true
  relationships: {}
- node_id: '182'
  node_depth: 1
  node_type: Node
  content_length: 3374
  content: |-
    | Name             | Type                                    | Description                                                                                                                                         | Default   |
    |------------------|-----------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|-----------|
    | indent           | int | None                              | Indentation to use in the JSON output. If None is passed, the output will be compact.                                                               | None      |
    | ensure_ascii     | bool                                    | If True, the output is guaranteed to have all incoming non-ASCII characters escaped. If False (the default), these characters will be output as-is. | False     |
    | include          | IncEx | None                            | Field(s) to include in the JSON outpu...
  metadata:
    docling_label: table
    docling_ref: '#/tables/16'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump_json'
  relationships:
    next: '183'
    parent: '180'
    previous: '181'
- node_id: '74'
  node_depth: 0
  node_type: Node
  content_length: 8
  content: 'Returns:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/72'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump_json'
  is_isolated: true
  relationships: {}
- node_id: '75'
  node_depth: 0
  node_type: Node
  content_length: 167
  content: |-
    | Type   | Description                                |
    |--------|--------------------------------------------|
    | str    | A JSON string representation of the model. |
  metadata:
    docling_label: table
    docling_ref: '#/tables/17'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump_json'
  is_isolated: true
  relationships: {}
- node_id: '76'
  node_depth: 0
  node_type: Node
  content_length: 31
  content: Source code in pydantic/main.py
  metadata:
    docling_label: section
    docling_ref: '#/groups/7'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_dump_json'
  is_isolated: true
  relationships: {}
- node_id: '77'
  node_depth: 0
  node_type: Node
  content_length: 32
  content: '### model_json_schemaclassmethod'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/74'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_json_schemaclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '78'
  node_depth: 0
  node_type: Node
  content_length: 231
  content: |-
    ```
    model_json_schema(
      by_alias: bool = True,
      ref_template: str = DEFAULT_REF_TEMPLATE,
      schema_generator: type[
          GenerateJsonSchema
      ] = GenerateJsonSchema,
      mode: JsonSchemaMode = "validation",
    ) -> dict[str, Any]
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/75'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_json_schemaclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '79'
  node_depth: 0
  node_type: Node
  content_length: 42
  content: Generates a JSON schema for a model class.
  metadata:
    docling_label: text
    docling_ref: '#/texts/76'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_json_schemaclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '80'
  node_depth: 0
  node_type: Node
  content_length: 11
  content: 'Parameters:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/77'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_json_schemaclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '186'
  node_depth: 1
  node_type: Node
  content_length: 1181
  content: |-
    | Name             | Type                     | Description                                                                                                                 | Default              |
    |------------------|--------------------------|-----------------------------------------------------------------------------------------------------------------------------|----------------------|
    | by_alias         | bool                     | Whether to use attribute aliases or not.                                                                                    | True                 |
    | ref_template     | str                      | The reference template.                                                                                                     | DEFAULT_REF_TEMPLATE |
    | schema_generator | type[GenerateJsonSchema] | To override the logic used to generate the JSON schema, as a subclass of GenerateJsonSchema with your desired modifications | GenerateJsonSchema   |
    | mode         ...
  metadata:
    docling_label: table
    docling_ref: '#/tables/19'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_json_schemaclassmethod'
  relationships:
    next: '187'
    parent: '184'
    previous: '185'
- node_id: '82'
  node_depth: 0
  node_type: Node
  content_length: 8
  content: 'Returns:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/78'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_json_schemaclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '83'
  node_depth: 0
  node_type: Node
  content_length: 191
  content: |-
    | Type           | Description                                |
    |----------------|--------------------------------------------|
    | dict[str, Any] | The JSON schema for the given model class. |
  metadata:
    docling_label: table
    docling_ref: '#/tables/20'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_json_schemaclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '84'
  node_depth: 0
  node_type: Node
  content_length: 31
  content: Source code in pydantic/main.py
  metadata:
    docling_label: section
    docling_ref: '#/groups/8'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_json_schemaclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '85'
  node_depth: 0
  node_type: Node
  content_length: 38
  content: '### model_parametrized_nameclassmethod'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/80'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_parametrized_nameclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '86'
  node_depth: 0
  node_type: Node
  content_length: 73
  content: |-
    ```
    model_parametrized_name(
      params: tuple[type[Any], ...]
    ) -> str
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/81'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_parametrized_nameclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '87'
  node_depth: 0
  node_type: Node
  content_length: 63
  content: Compute the class name for parametrizations of generic classes.
  metadata:
    docling_label: text
    docling_ref: '#/texts/82'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_parametrized_nameclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '88'
  node_depth: 0
  node_type: Node
  content_length: 87
  content: This method can be overridden to achieve a custom naming scheme for generic
    BaseModels.
  metadata:
    docling_label: text
    docling_ref: '#/texts/83'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_parametrized_nameclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '89'
  node_depth: 0
  node_type: Node
  content_length: 11
  content: 'Parameters:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/84'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_parametrized_nameclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '90'
  node_depth: 0
  node_type: Node
  content_length: 641
  content: |-
    | Name   | Type                  | Description                                                                                                                                                          | Default   |
    |--------|-----------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|
    | params | tuple[type[Any], ...] | Tuple of types of the class. Given a generic class Model with 2 type variables and a concrete model Model[str, int], the value (str, int) would be passed to params. | required  |
  metadata:
    docling_label: table
    docling_ref: '#/tables/22'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_parametrized_nameclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '91'
  node_depth: 0
  node_type: Node
  content_length: 8
  content: 'Returns:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/85'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_parametrized_nameclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '92'
  node_depth: 0
  node_type: Node
  content_length: 290
  content: |-
    | Type   | Description                                                                         |
    |--------|-------------------------------------------------------------------------------------|
    | str    | String representing the new class where params are passed to cls as type variables. |
  metadata:
    docling_label: table
    docling_ref: '#/tables/23'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_parametrized_nameclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '93'
  node_depth: 0
  node_type: Node
  content_length: 7
  content: 'Raises:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/86'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_parametrized_nameclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '94'
  node_depth: 0
  node_type: Node
  content_length: 257
  content: |-
    | Type      | Description                                                           |
    |-----------|-----------------------------------------------------------------------|
    | TypeError | Raised when trying to generate concrete names for non-generic models. |
  metadata:
    docling_label: table
    docling_ref: '#/tables/24'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_parametrized_nameclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '95'
  node_depth: 0
  node_type: Node
  content_length: 31
  content: Source code in pydantic/main.py
  metadata:
    docling_label: section
    docling_ref: '#/groups/9'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_parametrized_nameclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '96'
  node_depth: 0
  node_type: Node
  content_length: 19
  content: '### model_post_init'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/88'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_post_init'
  is_isolated: true
  relationships: {}
- node_id: '97'
  node_depth: 0
  node_type: Node
  content_length: 45
  content: |-
    ```
    model_post_init(context: Any) -> None
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/89'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_post_init'
  is_isolated: true
  relationships: {}
- node_id: '98'
  node_depth: 0
  node_type: Node
  content_length: 192
  content: |-
    Override this method to perform additional initialization after __init__ and model_construct.
    This is useful if you want to do some validation that requires the entire model to be initialized.
  metadata:
    docling_label: text
    docling_ref: '#/texts/90'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_post_init'
  is_isolated: true
  relationships: {}
- node_id: '99'
  node_depth: 0
  node_type: Node
  content_length: 31
  content: Source code in pydantic/main.py
  metadata:
    docling_label: section
    docling_ref: '#/groups/10'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_post_init'
  is_isolated: true
  relationships: {}
- node_id: '100'
  node_depth: 0
  node_type: Node
  content_length: 28
  content: '### model_rebuildclassmethod'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/92'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_rebuildclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '101'
  node_depth: 0
  node_type: Node
  content_length: 183
  content: |-
    ```
    model_rebuild(
      *,
      force: bool = False,
      raise_errors: bool = True,
      _parent_namespace_depth: int = 2,
      _types_namespace: MappingNamespace | None = None
    ) -> bool | None
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/93'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_rebuildclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '102'
  node_depth: 0
  node_type: Node
  content_length: 54
  content: Try to rebuild the pydantic-core schema for the model.
  metadata:
    docling_label: text
    docling_ref: '#/texts/94'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_rebuildclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '103'
  node_depth: 0
  node_type: Node
  content_length: 173
  content: |-
    This may be necessary when one of the annotations is a ForwardRef which could not be resolved during
    the initial attempt to build the schema, and automatic rebuilding fails.
  metadata:
    docling_label: text
    docling_ref: '#/texts/95'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_rebuildclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '104'
  node_depth: 0
  node_type: Node
  content_length: 11
  content: 'Parameters:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/96'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_rebuildclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '105'
  node_depth: 0
  node_type: Node
  content_length: 839
  content: |-
    | Name                    | Type                    | Description                                                             | Default   |
    |-------------------------|-------------------------|-------------------------------------------------------------------------|-----------|
    | force                   | bool                    | Whether to force the rebuilding of the model schema, defaults to False. | False     |
    | raise_errors            | bool                    | Whether to raise errors, defaults to True.                              | True      |
    | _parent_namespace_depth | int                     | The depth level of the parent namespace, defaults to 2.                 | 2         |
    | _types_namespace        | MappingNamespace | None | The types namespace, defaults to None.                                  | None      |
  metadata:
    docling_label: table
    docling_ref: '#/tables/27'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_rebuildclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '106'
  node_depth: 0
  node_type: Node
  content_length: 8
  content: 'Returns:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/97'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_rebuildclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '107'
  node_depth: 0
  node_type: Node
  content_length: 423
  content: |-
    | Type        | Description                                                                             |
    |-------------|-----------------------------------------------------------------------------------------|
    | bool | None | Returns None if the schema is already "complete" and rebuilding was not required.       |
    | bool | None | If rebuilding was required, returns True if rebuilding was successful, otherwise False. |
  metadata:
    docling_label: table
    docling_ref: '#/tables/28'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_rebuildclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '108'
  node_depth: 0
  node_type: Node
  content_length: 31
  content: Source code in pydantic/main.py
  metadata:
    docling_label: section
    docling_ref: '#/groups/11'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_rebuildclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '109'
  node_depth: 0
  node_type: Node
  content_length: 29
  content: '### model_validateclassmethod'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/99'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validateclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '110'
  node_depth: 0
  node_type: Node
  content_length: 211
  content: |-
    ```
    model_validate(
      obj: Any,
      *,
      strict: bool | None = None,
      from_attributes: bool | None = None,
      context: Any | None = None,
      by_alias: bool | None = None,
      by_name: bool | None = None
    ) -> Self
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/100'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validateclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '111'
  node_depth: 0
  node_type: Node
  content_length: 35
  content: Validate a pydantic model instance.
  metadata:
    docling_label: text
    docling_ref: '#/texts/101'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validateclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '112'
  node_depth: 0
  node_type: Node
  content_length: 11
  content: 'Parameters:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/102'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validateclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '199'
  node_depth: 1
  node_type: Node
  content_length: 1039
  content: |-
    | Name            | Type        | Description                                                                       | Default   |
    |-----------------|-------------|-----------------------------------------------------------------------------------|-----------|
    | obj             | Any         | The object to validate.                                                           | required  |
    | strict          | bool | None | Whether to enforce types strictly.                                                | None      |
    | from_attributes | bool | None | Whether to extract data from object attributes.                                   | None      |
    | context         | Any | None  | Additional context to pass to the validator.                                      | None      |
    | by_alias        | bool | None | Whether to use the field's alias when validating against the provided input data. | None      |
    | by_name         | bool | None | Whether to use the field's name when validating against ...
  metadata:
    docling_label: table
    docling_ref: '#/tables/30'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validateclassmethod'
  relationships:
    next: '200'
    parent: '197'
    previous: '198'
- node_id: '114'
  node_depth: 0
  node_type: Node
  content_length: 7
  content: 'Raises:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/103'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validateclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '115'
  node_depth: 0
  node_type: Node
  content_length: 179
  content: |-
    | Type            | Description                           |
    |-----------------|---------------------------------------|
    | ValidationError | If the object could not be validated. |
  metadata:
    docling_label: table
    docling_ref: '#/tables/31'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validateclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '116'
  node_depth: 0
  node_type: Node
  content_length: 8
  content: 'Returns:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/104'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validateclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '117'
  node_depth: 0
  node_type: Node
  content_length: 128
  content: |-
    | Type   | Description                   |
    |--------|-------------------------------|
    | Self   | The validated model instance. |
  metadata:
    docling_label: table
    docling_ref: '#/tables/32'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validateclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '118'
  node_depth: 0
  node_type: Node
  content_length: 31
  content: Source code in pydantic/main.py
  metadata:
    docling_label: section
    docling_ref: '#/groups/12'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validateclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '119'
  node_depth: 0
  node_type: Node
  content_length: 34
  content: '### model_validate_jsonclassmethod'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/106'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_jsonclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '120'
  node_depth: 0
  node_type: Node
  content_length: 203
  content: |-
    ```
    model_validate_json(
      json_data: str | bytes | bytearray,
      *,
      strict: bool | None = None,
      context: Any | None = None,
      by_alias: bool | None = None,
      by_name: bool | None = None
    ) -> Self
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/107'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_jsonclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '121'
  node_depth: 0
  node_type: Node
  content_length: 19
  content: Usage Documentation
  metadata:
    docling_label: text
    docling_ref: '#/texts/108'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_jsonclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '122'
  node_depth: 0
  node_type: Node
  content_length: 12
  content: JSON Parsing
  metadata:
    docling_label: text
    docling_ref: '#/texts/109'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_jsonclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '123'
  node_depth: 0
  node_type: Node
  content_length: 56
  content: Validate the given JSON data against the Pydantic model.
  metadata:
    docling_label: text
    docling_ref: '#/texts/110'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_jsonclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '124'
  node_depth: 0
  node_type: Node
  content_length: 11
  content: 'Parameters:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/111'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_jsonclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '125'
  node_depth: 0
  node_type: Node
  content_length: 951
  content: |-
    | Name      | Type                    | Description                                                                       | Default   |
    |-----------|-------------------------|-----------------------------------------------------------------------------------|-----------|
    | json_data | str | bytes | bytearray | The JSON data to validate.                                                        | required  |
    | strict    | bool | None             | Whether to enforce types strictly.                                                | None      |
    | context   | Any | None              | Extra variables to pass to the validator.                                         | None      |
    | by_alias  | bool | None             | Whether to use the field's alias when validating against the provided input data. | None      |
    | by_name   | bool | None             | Whether to use the field's name when validating against the provided input data.  | None      |
  metadata:
    docling_label: table
    docling_ref: '#/tables/34'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_jsonclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '126'
  node_depth: 0
  node_type: Node
  content_length: 8
  content: 'Returns:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/112'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_jsonclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '127'
  node_depth: 0
  node_type: Node
  content_length: 128
  content: |-
    | Type   | Description                   |
    |--------|-------------------------------|
    | Self   | The validated Pydantic model. |
  metadata:
    docling_label: table
    docling_ref: '#/tables/35'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_jsonclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '128'
  node_depth: 0
  node_type: Node
  content_length: 7
  content: 'Raises:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/113'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_jsonclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '129'
  node_depth: 0
  node_type: Node
  content_length: 281
  content: |-
    | Type            | Description                                                             |
    |-----------------|-------------------------------------------------------------------------|
    | ValidationError | If json_data is not a JSON string or the object could not be validated. |
  metadata:
    docling_label: table
    docling_ref: '#/tables/36'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_jsonclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '130'
  node_depth: 0
  node_type: Node
  content_length: 31
  content: Source code in pydantic/main.py
  metadata:
    docling_label: section
    docling_ref: '#/groups/13'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_jsonclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '131'
  node_depth: 0
  node_type: Node
  content_length: 37
  content: '### model_validate_stringsclassmethod'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/115'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_stringsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '132'
  node_depth: 0
  node_type: Node
  content_length: 180
  content: |-
    ```
    model_validate_strings(
      obj: Any,
      *,
      strict: bool | None = None,
      context: Any | None = None,
      by_alias: bool | None = None,
      by_name: bool | None = None
    ) -> Self
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/116'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_stringsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '133'
  node_depth: 0
  node_type: Node
  content_length: 70
  content: Validate the given object with string data against the Pydantic model.
  metadata:
    docling_label: text
    docling_ref: '#/texts/117'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_stringsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '134'
  node_depth: 0
  node_type: Node
  content_length: 11
  content: 'Parameters:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/118'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_stringsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '135'
  node_depth: 0
  node_type: Node
  content_length: 860
  content: |-
    | Name     | Type        | Description                                                                       | Default   |
    |----------|-------------|-----------------------------------------------------------------------------------|-----------|
    | obj      | Any         | The object containing string data to validate.                                    | required  |
    | strict   | bool | None | Whether to enforce types strictly.                                                | None      |
    | context  | Any | None  | Extra variables to pass to the validator.                                         | None      |
    | by_alias | bool | None | Whether to use the field's alias when validating against the provided input data. | None      |
    | by_name  | bool | None | Whether to use the field's name when validating against the provided input data.  | None      |
  metadata:
    docling_label: table
    docling_ref: '#/tables/38'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_stringsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '136'
  node_depth: 0
  node_type: Node
  content_length: 8
  content: 'Returns:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/119'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_stringsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '137'
  node_depth: 0
  node_type: Node
  content_length: 128
  content: |-
    | Type   | Description                   |
    |--------|-------------------------------|
    | Self   | The validated Pydantic model. |
  metadata:
    docling_label: table
    docling_ref: '#/tables/39'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_stringsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '138'
  node_depth: 0
  node_type: Node
  content_length: 31
  content: Source code in pydantic/main.py
  metadata:
    docling_label: section
    docling_ref: '#/groups/14'
    headings:
    - '# BaseModel'
    - '## pydantic.BaseModel'
    - '### model_validate_stringsclassmethod'
  is_isolated: true
  relationships: {}
- node_id: '139'
  node_depth: 0
  node_type: Node
  content_length: 24
  content: '## pydantic.create_model'
  metadata:
    docling_label: section_header
    docling_ref: '#/texts/121'
    headings:
    - '# BaseModel'
    - '## pydantic.create_model'
  is_isolated: true
  relationships: {}
- node_id: '140'
  node_depth: 0
  node_type: Node
  content_length: 365
  content: |-
    ```
    create_model(
      model_name: str,
      /,
      *,
      __config__: ConfigDict | None = None,
      __doc__: str | None = None,
      __base__: None = None,
      __module__: str = __name__,
      __validators__: (
          dict[str, Callable[..., Any]] | None
      ) = None,
      __cls_kwargs__: dict[str, Any] | None = None,
      **field_definitions: Any | tuple[str, Any],
    ) -> type[BaseModel]
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/122'
    headings:
    - '# BaseModel'
    - '## pydantic.create_model'
  is_isolated: true
  relationships: {}
- node_id: '141'
  node_depth: 0
  node_type: Node
  content_length: 390
  content: |-
    ```
    create_model(
      model_name: str,
      /,
      *,
      __config__: ConfigDict | None = None,
      __doc__: str | None = None,
      __base__: type[ModelT] | tuple[type[ModelT], ...],
      __module__: str = __name__,
      __validators__: (
          dict[str, Callable[..., Any]] | None
      ) = None,
      __cls_kwargs__: dict[str, Any] | None = None,
      **field_definitions: Any | tuple[str, Any],
    ) -> type[ModelT]
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/123'
    headings:
    - '# BaseModel'
    - '## pydantic.create_model'
  is_isolated: true
  relationships: {}
- node_id: '142'
  node_depth: 0
  node_type: Node
  content_length: 419
  content: |-
    ```
    create_model(
      model_name: str,
      /,
      *,
      __config__: ConfigDict | None = None,
      __doc__: str | None = None,
      __base__: (
          type[ModelT] | tuple[type[ModelT], ...] | None
      ) = None,
      __module__: str | None = None,
      __validators__: (
          dict[str, Callable[..., Any]] | None
      ) = None,
      __cls_kwargs__: dict[str, Any] | None = None,
      **field_definitions: Any | tuple[str, Any],
    ) -> type[ModelT]
    ```
  metadata:
    docling_label: code
    docling_ref: '#/texts/124'
    headings:
    - '# BaseModel'
    - '## pydantic.create_model'
  is_isolated: true
  relationships: {}
- node_id: '143'
  node_depth: 0
  node_type: Node
  content_length: 19
  content: Usage Documentation
  metadata:
    docling_label: text
    docling_ref: '#/texts/125'
    headings:
    - '# BaseModel'
    - '## pydantic.create_model'
  is_isolated: true
  relationships: {}
- node_id: '144'
  node_depth: 0
  node_type: Node
  content_length: 22
  content: Dynamic Model Creation
  metadata:
    docling_label: text
    docling_ref: '#/texts/126'
    headings:
    - '# BaseModel'
    - '## pydantic.create_model'
  is_isolated: true
  relationships: {}
- node_id: '145'
  node_depth: 0
  node_type: Node
  content_length: 127
  content: |-
    Dynamically creates and returns a new Pydantic model, in other words, create_model dynamically creates a
    subclass of BaseModel.
  metadata:
    docling_label: text
    docling_ref: '#/texts/127'
    headings:
    - '# BaseModel'
    - '## pydantic.create_model'
  is_isolated: true
  relationships: {}
- node_id: '146'
  node_depth: 0
  node_type: Node
  content_length: 11
  content: 'Parameters:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/128'
    headings:
    - '# BaseModel'
    - '## pydantic.create_model'
  is_isolated: true
  relationships: {}
- node_id: '211'
  node_depth: 1
  node_type: Node
  content_length: 3289
  content: |-
    | Name                | Type                                           | Description                                                                                                                                                                                                                                       | Default   |
    |---------------------|------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|
    | model_name          | str                                            | The name of the newly created model.                                                                                                                                                                                                              | required  |
    | __config__ ...
  metadata:
    docling_label: table
    docling_ref: '#/tables/41'
    headings:
    - '# BaseModel'
    - '## pydantic.create_model'
  relationships:
    next: '212'
    parent: '208'
    previous: '210'
- node_id: '148'
  node_depth: 0
  node_type: Node
  content_length: 8
  content: 'Returns:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/129'
    headings:
    - '# BaseModel'
    - '## pydantic.create_model'
  is_isolated: true
  relationships: {}
- node_id: '149'
  node_depth: 0
  node_type: Node
  content_length: 101
  content: |-
    | Type         | Description    |
    |--------------|----------------|
    | type[ModelT] | The new model. |
  metadata:
    docling_label: table
    docling_ref: '#/tables/42'
    headings:
    - '# BaseModel'
    - '## pydantic.create_model'
  is_isolated: true
  relationships: {}
- node_id: '150'
  node_depth: 0
  node_type: Node
  content_length: 7
  content: 'Raises:'
  metadata:
    docling_label: text
    docling_ref: '#/texts/130'
    headings:
    - '# BaseModel'
    - '## pydantic.create_model'
  is_isolated: true
  relationships: {}
- node_id: '151'
  node_depth: 0
  node_type: Node
  content_length: 203
  content: |-
    | Type              | Description                                 |
    |-------------------|---------------------------------------------|
    | PydanticUserError | If __base__ and __config__ are both passed. |
  metadata:
    docling_label: table
    docling_ref: '#/tables/43'
    headings:
    - '# BaseModel'
    - '## pydantic.create_model'
  is_isolated: true
  relationships: {}
- node_id: '152'
  node_depth: 0
  node_type: Node
  content_length: 31
  content: Source code in pydantic/main.py
  metadata:
    docling_label: section
    docling_ref: '#/groups/15'
    headings:
    - '# BaseModel'
    - '## pydantic.create_model'
  is_isolated: true
  relationships: {}
- node_id: '153'
  node_depth: 0
  node_type: Node
  content_length: 25
  content: Thanks for your feedback!
  metadata:
    docling_label: text
    docling_ref: '#/texts/132'
    headings:
    - '# BaseModel'
    - '## pydantic.create_model'
  is_isolated: true
  relationships: {}
- node_id: '154'
  node_depth: 0
  node_type: Node
  content_length: 25
  content: Thanks for your feedback!
  metadata:
    docling_label: text
    docling_ref: '#/texts/133'
    headings:
    - '# BaseModel'
    - '## pydantic.create_model'
  is_isolated: true
  relationships: {}
