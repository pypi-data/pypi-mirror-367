- node_id: '0'
  node_depth: 0
  node_type: Node
  content_length: 909
  content: |-
    # PyCharm

    While pydantic will work well with any IDE out of the box, a
    PyCharm plugin
    offering improved pydantic integration is available on the JetBrains Plugins Repository for PyCharm.
    You can install the plugin for free from the plugin marketplace
    (PyCharm's Preferences -> Plugin -> Marketplace -> search "pydantic").

    The plugin currently supports the following features:

    - For pydantic.BaseModel.__init__ :
    For pydantic.BaseModel.__init__:
        - Inspection
        - Autocompletion
        - Type-checking
    - For fields of pydantic.BaseModel :
    For fields of pydantic.BaseModel:
        - Refactor-renaming fields updates __init__ calls, and affects sub- and super-classes
        - Refactor-renaming __init__ keyword arguments updates field names, and affects sub- and super-classes

    More information can be found on the
    official plugin page
    and Github repository.

    Thanks for your feedback!

    Thanks for your feedback!
  metadata:
    docling_label: title
    docling_ref: '#/texts/0'
    headings:
    - '# PyCharm'
  relationships:
    children:
    - '1'
- node_id: '1'
  node_depth: 1
  node_type: Node
  content_length: 909
  content: |-
    # PyCharm

    While pydantic will work well with any IDE out of the box, a
    PyCharm plugin
    offering improved pydantic integration is available on the JetBrains Plugins Repository for PyCharm.
    You can install the plugin for free from the plugin marketplace
    (PyCharm's Preferences -> Plugin -> Marketplace -> search "pydantic").

    The plugin currently supports the following features:

    - For pydantic.BaseModel.__init__ :
    For pydantic.BaseModel.__init__:
        - Inspection
        - Autocompletion
        - Type-checking
    - For fields of pydantic.BaseModel :
    For fields of pydantic.BaseModel:
        - Refactor-renaming fields updates __init__ calls, and affects sub- and super-classes
        - Refactor-renaming __init__ keyword arguments updates field names, and affects sub- and super-classes

    More information can be found on the
    official plugin page
    and Github repository.

    Thanks for your feedback!

    Thanks for your feedback!
  metadata:
    docling_label: title
    docling_ref: '#/texts/0'
    headings:
    - '# PyCharm'
  relationships:
    parent: '0'
