name: Build & Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for setuptools_scm

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[tests,dev]"

    - name: Show package info
      run: |
        python -c "import binlearn; print(f'📦 Package: binlearn v{binlearn.__version__}')"
        python -c "import sys; print(f'🐍 Python: {sys.version}')"

    - name: Run ruff linting
      run: |
        echo "🔍 Running ruff linting..."
        ruff check binlearn/

    - name: Run mypy type checking
      run: |
        echo "🔍 Running mypy type checking..."
        mypy binlearn/ --ignore-missing-imports

    - name: Run tests with coverage
      run: |
        echo "🧪 Running test suite..."
        pytest --cov=binlearn --cov-report=xml --cov-report=term-missing -v

    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'  # Only upload once
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[tests,dev]"

    - name: Final quality checks
      run: |
        echo "✅ All quality checks passed!"
        echo "📊 Code coverage: Available in artifacts"
        echo "🔍 Linting: ruff passed"
        echo "🔍 Type checking: mypy passed"
        echo "🧪 Tests: All tests passed across Python versions"

    - name: Build test package
      run: |
        pip install build
        python -m build
        echo "📦 Package built successfully for testing"

    - name: Validate package
      run: |
        pip install twine
        python -m twine check dist/*
        echo "✅ Package validation passed"

  # Summary job that can be used as a required status check
  build-success:
    name: Build Success
    runs-on: ubuntu-latest
    needs: [test, quality-gate]
    if: always()

    steps:
    - name: Check build status
      run: |
        if [[ "${{ needs.test.result }}" == "success" && "${{ needs.quality-gate.result }}" == "success" ]]; then
          echo "✅ Build pipeline completed successfully!"
          echo "🚀 Ready for release when needed"
        else
          echo "❌ Build pipeline failed"
          exit 1
        fi
