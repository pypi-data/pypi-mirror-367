# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ServerlessClusterArgs', 'ServerlessCluster']

@pulumi.input_type
class ServerlessClusterArgs:
    def __init__(__self__, *,
                 resource_group_id: pulumi.Input[_builtins.str],
                 serverless_region: pulumi.Input[_builtins.str],
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a ServerlessCluster resource.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the Resource Group in which to create the serverless cluster
        :param pulumi.Input[_builtins.str] serverless_region: Redpanda specific region of the serverless cluster
        :param pulumi.Input[_builtins.str] name: Name of the serverless cluster
        """
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        pulumi.set(__self__, "serverless_region", serverless_region)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the Resource Group in which to create the serverless cluster
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="serverlessRegion")
    def serverless_region(self) -> pulumi.Input[_builtins.str]:
        """
        Redpanda specific region of the serverless cluster
        """
        return pulumi.get(self, "serverless_region")

    @serverless_region.setter
    def serverless_region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "serverless_region", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the serverless cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _ServerlessClusterState:
    def __init__(__self__, *,
                 cluster_api_url: Optional[pulumi.Input[_builtins.str]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 serverless_region: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering ServerlessCluster resources.
        :param pulumi.Input[_builtins.str] cluster_api_url: The URL of the dataplane API for the serverless cluster
        :param pulumi.Input[_builtins.str] name: Name of the serverless cluster
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the Resource Group in which to create the serverless cluster
        :param pulumi.Input[_builtins.str] serverless_region: Redpanda specific region of the serverless cluster
        """
        if cluster_api_url is not None:
            pulumi.set(__self__, "cluster_api_url", cluster_api_url)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)
        if serverless_region is not None:
            pulumi.set(__self__, "serverless_region", serverless_region)

    @_builtins.property
    @pulumi.getter(name="clusterApiUrl")
    def cluster_api_url(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The URL of the dataplane API for the serverless cluster
        """
        return pulumi.get(self, "cluster_api_url")

    @cluster_api_url.setter
    def cluster_api_url(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_api_url", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the serverless cluster
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the Resource Group in which to create the serverless cluster
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="serverlessRegion")
    def serverless_region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Redpanda specific region of the serverless cluster
        """
        return pulumi.get(self, "serverless_region")

    @serverless_region.setter
    def serverless_region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "serverless_region", value)


@pulumi.type_token("redpanda:index/serverlessCluster:ServerlessCluster")
class ServerlessCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 serverless_region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Enables the provisioning and management of Redpanda Serverless clusters. A Serverless cluster requires a resource group.

        ## Usage

        ```python
        import pulumi
        import pulumiverse_redpanda as redpanda

        test_resource_group = redpanda.ResourceGroup("testResourceGroup")
        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "eu-west-1"
        test_serverless_cluster = redpanda.ServerlessCluster("testServerlessCluster",
            resource_group_id=test_resource_group.id,
            serverless_region=region)
        resource_group_name = config.get("resourceGroupName")
        if resource_group_name is None:
            resource_group_name = "testgroup"
        cluster_name = config.get("clusterName")
        if cluster_name is None:
            cluster_name = "testname"
        ```

        ## Limitations

        Serverless on GCP is currently in beta. To unlock this feature for your account, contact your Redpanda account team.

        ### Example: Create a Serverless cluster

        ```python
        import pulumi
        import pulumiverse_redpanda as redpanda

        test_resource_group = redpanda.ResourceGroup("testResourceGroup")
        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "eu-west-1"
        test_serverless_cluster = redpanda.ServerlessCluster("testServerlessCluster",
            resource_group_id=test_resource_group.id,
            serverless_region=region)
        resource_group_name = config.get("resourceGroupName")
        if resource_group_name is None:
            resource_group_name = "testgroup"
        cluster_name = config.get("clusterName")
        if cluster_name is None:
            cluster_name = "testname"
        ```

        ## Import

        ```sh
        $ pulumi import redpanda:index/serverlessCluster:ServerlessCluster example serverlessClusterId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] name: Name of the serverless cluster
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the Resource Group in which to create the serverless cluster
        :param pulumi.Input[_builtins.str] serverless_region: Redpanda specific region of the serverless cluster
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServerlessClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Enables the provisioning and management of Redpanda Serverless clusters. A Serverless cluster requires a resource group.

        ## Usage

        ```python
        import pulumi
        import pulumiverse_redpanda as redpanda

        test_resource_group = redpanda.ResourceGroup("testResourceGroup")
        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "eu-west-1"
        test_serverless_cluster = redpanda.ServerlessCluster("testServerlessCluster",
            resource_group_id=test_resource_group.id,
            serverless_region=region)
        resource_group_name = config.get("resourceGroupName")
        if resource_group_name is None:
            resource_group_name = "testgroup"
        cluster_name = config.get("clusterName")
        if cluster_name is None:
            cluster_name = "testname"
        ```

        ## Limitations

        Serverless on GCP is currently in beta. To unlock this feature for your account, contact your Redpanda account team.

        ### Example: Create a Serverless cluster

        ```python
        import pulumi
        import pulumiverse_redpanda as redpanda

        test_resource_group = redpanda.ResourceGroup("testResourceGroup")
        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "eu-west-1"
        test_serverless_cluster = redpanda.ServerlessCluster("testServerlessCluster",
            resource_group_id=test_resource_group.id,
            serverless_region=region)
        resource_group_name = config.get("resourceGroupName")
        if resource_group_name is None:
            resource_group_name = "testgroup"
        cluster_name = config.get("clusterName")
        if cluster_name is None:
            cluster_name = "testname"
        ```

        ## Import

        ```sh
        $ pulumi import redpanda:index/serverlessCluster:ServerlessCluster example serverlessClusterId
        ```

        :param str resource_name: The name of the resource.
        :param ServerlessClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServerlessClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 serverless_region: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServerlessClusterArgs.__new__(ServerlessClusterArgs)

            __props__.__dict__["name"] = name
            if resource_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_id'")
            __props__.__dict__["resource_group_id"] = resource_group_id
            if serverless_region is None and not opts.urn:
                raise TypeError("Missing required property 'serverless_region'")
            __props__.__dict__["serverless_region"] = serverless_region
            __props__.__dict__["cluster_api_url"] = None
        super(ServerlessCluster, __self__).__init__(
            'redpanda:index/serverlessCluster:ServerlessCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_api_url: Optional[pulumi.Input[_builtins.str]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
            serverless_region: Optional[pulumi.Input[_builtins.str]] = None) -> 'ServerlessCluster':
        """
        Get an existing ServerlessCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cluster_api_url: The URL of the dataplane API for the serverless cluster
        :param pulumi.Input[_builtins.str] name: Name of the serverless cluster
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the Resource Group in which to create the serverless cluster
        :param pulumi.Input[_builtins.str] serverless_region: Redpanda specific region of the serverless cluster
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServerlessClusterState.__new__(_ServerlessClusterState)

        __props__.__dict__["cluster_api_url"] = cluster_api_url
        __props__.__dict__["name"] = name
        __props__.__dict__["resource_group_id"] = resource_group_id
        __props__.__dict__["serverless_region"] = serverless_region
        return ServerlessCluster(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="clusterApiUrl")
    def cluster_api_url(self) -> pulumi.Output[_builtins.str]:
        """
        The URL of the dataplane API for the serverless cluster
        """
        return pulumi.get(self, "cluster_api_url")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the serverless cluster
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the Resource Group in which to create the serverless cluster
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="serverlessRegion")
    def serverless_region(self) -> pulumi.Output[_builtins.str]:
        """
        Redpanda specific region of the serverless cluster
        """
        return pulumi.get(self, "serverless_region")

