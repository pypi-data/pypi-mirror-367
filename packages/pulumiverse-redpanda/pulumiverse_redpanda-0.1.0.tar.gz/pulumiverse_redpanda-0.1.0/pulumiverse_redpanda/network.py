# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['NetworkArgs', 'Network']

@pulumi.input_type
class NetworkArgs:
    def __init__(__self__, *,
                 cloud_provider: pulumi.Input[_builtins.str],
                 cluster_type: pulumi.Input[_builtins.str],
                 region: pulumi.Input[_builtins.str],
                 resource_group_id: pulumi.Input[_builtins.str],
                 cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
                 customer_managed_resources: Optional[pulumi.Input['NetworkCustomerManagedResourcesArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Network resource.
        :param pulumi.Input[_builtins.str] cloud_provider: The cloud provider to create the network in.
        :param pulumi.Input[_builtins.str] cluster_type: The type of cluster this network is associated with, can be one of dedicated or cloud
        :param pulumi.Input[_builtins.str] region: The region to create the network in.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the resource group in which to create the network
        :param pulumi.Input[_builtins.str] cidr_block: The cidr_block to create the network in
        :param pulumi.Input[_builtins.str] name: Name of the network
        """
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        pulumi.set(__self__, "cluster_type", cluster_type)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if customer_managed_resources is not None:
            pulumi.set(__self__, "customer_managed_resources", customer_managed_resources)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Input[_builtins.str]:
        """
        The cloud provider to create the network in.
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cloud_provider", value)

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Input[_builtins.str]:
        """
        The type of cluster this network is associated with, can be one of dedicated or cloud
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "cluster_type", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Input[_builtins.str]:
        """
        The region to create the network in.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Input[_builtins.str]:
        """
        The ID of the resource group in which to create the network
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: pulumi.Input[_builtins.str]):
        pulumi.set(self, "resource_group_id", value)

    @_builtins.property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cidr_block to create the network in
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cidr_block", value)

    @_builtins.property
    @pulumi.getter(name="customerManagedResources")
    def customer_managed_resources(self) -> Optional[pulumi.Input['NetworkCustomerManagedResourcesArgs']]:
        return pulumi.get(self, "customer_managed_resources")

    @customer_managed_resources.setter
    def customer_managed_resources(self, value: Optional[pulumi.Input['NetworkCustomerManagedResourcesArgs']]):
        pulumi.set(self, "customer_managed_resources", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _NetworkState:
    def __init__(__self__, *,
                 cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 customer_managed_resources: Optional[pulumi.Input['NetworkCustomerManagedResourcesArgs']] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None):
        """
        Input properties used for looking up and filtering Network resources.
        :param pulumi.Input[_builtins.str] cidr_block: The cidr_block to create the network in
        :param pulumi.Input[_builtins.str] cloud_provider: The cloud provider to create the network in.
        :param pulumi.Input[_builtins.str] cluster_type: The type of cluster this network is associated with, can be one of dedicated or cloud
        :param pulumi.Input[_builtins.str] name: Name of the network
        :param pulumi.Input[_builtins.str] region: The region to create the network in.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the resource group in which to create the network
        """
        if cidr_block is not None:
            pulumi.set(__self__, "cidr_block", cidr_block)
        if cloud_provider is not None:
            pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_type is not None:
            pulumi.set(__self__, "cluster_type", cluster_type)
        if customer_managed_resources is not None:
            pulumi.set(__self__, "customer_managed_resources", customer_managed_resources)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if resource_group_id is not None:
            pulumi.set(__self__, "resource_group_id", resource_group_id)

    @_builtins.property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cidr_block to create the network in
        """
        return pulumi.get(self, "cidr_block")

    @cidr_block.setter
    def cidr_block(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cidr_block", value)

    @_builtins.property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The cloud provider to create the network in.
        """
        return pulumi.get(self, "cloud_provider")

    @cloud_provider.setter
    def cloud_provider(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cloud_provider", value)

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The type of cluster this network is associated with, can be one of dedicated or cloud
        """
        return pulumi.get(self, "cluster_type")

    @cluster_type.setter
    def cluster_type(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "cluster_type", value)

    @_builtins.property
    @pulumi.getter(name="customerManagedResources")
    def customer_managed_resources(self) -> Optional[pulumi.Input['NetworkCustomerManagedResourcesArgs']]:
        return pulumi.get(self, "customer_managed_resources")

    @customer_managed_resources.setter
    def customer_managed_resources(self, value: Optional[pulumi.Input['NetworkCustomerManagedResourcesArgs']]):
        pulumi.set(self, "customer_managed_resources", value)

    @_builtins.property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Name of the network
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "name", value)

    @_builtins.property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The region to create the network in.
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "region", value)

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID of the resource group in which to create the network
        """
        return pulumi.get(self, "resource_group_id")

    @resource_group_id.setter
    def resource_group_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "resource_group_id", value)


@pulumi.type_token("redpanda:index/network:Network")
class Network(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 customer_managed_resources: Optional[pulumi.Input[Union['NetworkCustomerManagedResourcesArgs', 'NetworkCustomerManagedResourcesArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        Creates a network in the Redpanda Cloud.

        ## Usage

        ```python
        import pulumi
        import pulumiverse_redpanda as redpanda

        test_resource_group = redpanda.ResourceGroup("testResourceGroup")
        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "us-east-1"
        cloud_provider = config.get("cloudProvider")
        if cloud_provider is None:
            cloud_provider = "aws"
        test_network = redpanda.Network("testNetwork",
            resource_group_id=test_resource_group.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            cidr_block="10.0.0.0/20")
        resource_group_name = config.get("resourceGroupName")
        if resource_group_name is None:
            resource_group_name = "testname"
        network_name = config.get("networkName")
        if network_name is None:
            network_name = "testname"
        ```

        ## Import

        ```sh
        $ pulumi import redpanda:index/network:Network example networkId
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cidr_block: The cidr_block to create the network in
        :param pulumi.Input[_builtins.str] cloud_provider: The cloud provider to create the network in.
        :param pulumi.Input[_builtins.str] cluster_type: The type of cluster this network is associated with, can be one of dedicated or cloud
        :param pulumi.Input[_builtins.str] name: Name of the network
        :param pulumi.Input[_builtins.str] region: The region to create the network in.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the resource group in which to create the network
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: NetworkArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates a network in the Redpanda Cloud.

        ## Usage

        ```python
        import pulumi
        import pulumiverse_redpanda as redpanda

        test_resource_group = redpanda.ResourceGroup("testResourceGroup")
        config = pulumi.Config()
        region = config.get("region")
        if region is None:
            region = "us-east-1"
        cloud_provider = config.get("cloudProvider")
        if cloud_provider is None:
            cloud_provider = "aws"
        test_network = redpanda.Network("testNetwork",
            resource_group_id=test_resource_group.id,
            cloud_provider=cloud_provider,
            region=region,
            cluster_type="dedicated",
            cidr_block="10.0.0.0/20")
        resource_group_name = config.get("resourceGroupName")
        if resource_group_name is None:
            resource_group_name = "testname"
        network_name = config.get("networkName")
        if network_name is None:
            network_name = "testname"
        ```

        ## Import

        ```sh
        $ pulumi import redpanda:index/network:Network example networkId
        ```

        :param str resource_name: The name of the resource.
        :param NetworkArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(NetworkArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
                 cloud_provider: Optional[pulumi.Input[_builtins.str]] = None,
                 cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
                 customer_managed_resources: Optional[pulumi.Input[Union['NetworkCustomerManagedResourcesArgs', 'NetworkCustomerManagedResourcesArgsDict']]] = None,
                 name: Optional[pulumi.Input[_builtins.str]] = None,
                 region: Optional[pulumi.Input[_builtins.str]] = None,
                 resource_group_id: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = NetworkArgs.__new__(NetworkArgs)

            __props__.__dict__["cidr_block"] = cidr_block
            if cloud_provider is None and not opts.urn:
                raise TypeError("Missing required property 'cloud_provider'")
            __props__.__dict__["cloud_provider"] = cloud_provider
            if cluster_type is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_type'")
            __props__.__dict__["cluster_type"] = cluster_type
            __props__.__dict__["customer_managed_resources"] = customer_managed_resources
            __props__.__dict__["name"] = name
            if region is None and not opts.urn:
                raise TypeError("Missing required property 'region'")
            __props__.__dict__["region"] = region
            if resource_group_id is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_id'")
            __props__.__dict__["resource_group_id"] = resource_group_id
        super(Network, __self__).__init__(
            'redpanda:index/network:Network',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cidr_block: Optional[pulumi.Input[_builtins.str]] = None,
            cloud_provider: Optional[pulumi.Input[_builtins.str]] = None,
            cluster_type: Optional[pulumi.Input[_builtins.str]] = None,
            customer_managed_resources: Optional[pulumi.Input[Union['NetworkCustomerManagedResourcesArgs', 'NetworkCustomerManagedResourcesArgsDict']]] = None,
            name: Optional[pulumi.Input[_builtins.str]] = None,
            region: Optional[pulumi.Input[_builtins.str]] = None,
            resource_group_id: Optional[pulumi.Input[_builtins.str]] = None) -> 'Network':
        """
        Get an existing Network resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] cidr_block: The cidr_block to create the network in
        :param pulumi.Input[_builtins.str] cloud_provider: The cloud provider to create the network in.
        :param pulumi.Input[_builtins.str] cluster_type: The type of cluster this network is associated with, can be one of dedicated or cloud
        :param pulumi.Input[_builtins.str] name: Name of the network
        :param pulumi.Input[_builtins.str] region: The region to create the network in.
        :param pulumi.Input[_builtins.str] resource_group_id: The ID of the resource group in which to create the network
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _NetworkState.__new__(_NetworkState)

        __props__.__dict__["cidr_block"] = cidr_block
        __props__.__dict__["cloud_provider"] = cloud_provider
        __props__.__dict__["cluster_type"] = cluster_type
        __props__.__dict__["customer_managed_resources"] = customer_managed_resources
        __props__.__dict__["name"] = name
        __props__.__dict__["region"] = region
        __props__.__dict__["resource_group_id"] = resource_group_id
        return Network(resource_name, opts=opts, __props__=__props__)

    @_builtins.property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The cidr_block to create the network in
        """
        return pulumi.get(self, "cidr_block")

    @_builtins.property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> pulumi.Output[_builtins.str]:
        """
        The cloud provider to create the network in.
        """
        return pulumi.get(self, "cloud_provider")

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> pulumi.Output[_builtins.str]:
        """
        The type of cluster this network is associated with, can be one of dedicated or cloud
        """
        return pulumi.get(self, "cluster_type")

    @_builtins.property
    @pulumi.getter(name="customerManagedResources")
    def customer_managed_resources(self) -> pulumi.Output[Optional['outputs.NetworkCustomerManagedResources']]:
        return pulumi.get(self, "customer_managed_resources")

    @_builtins.property
    @pulumi.getter
    def name(self) -> pulumi.Output[_builtins.str]:
        """
        Name of the network
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> pulumi.Output[_builtins.str]:
        """
        The region to create the network in.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> pulumi.Output[_builtins.str]:
        """
        The ID of the resource group in which to create the network
        """
        return pulumi.get(self, "resource_group_id")

