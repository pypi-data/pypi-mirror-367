# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from .. import _utilities

import types

__config__ = pulumi.Config('redpanda')


class _ExportableConfig(types.ModuleType):
    @_builtins.property
    def access_token(self) -> Optional[str]:
        """
        Redpanda client token. You need either `access_token`, or both `client_id` and `client_secret` to use this provider. Can
        also be set with the `REDPANDA_ACCESS_TOKEN` environment variable.
        """
        return __config__.get('accessToken')

    @_builtins.property
    def azure_client_id(self) -> Optional[str]:
        """
        Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_ID or
        ARM_CLIENT_ID
        """
        return __config__.get('azureClientId')

    @_builtins.property
    def azure_client_secret(self) -> Optional[str]:
        """
        Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_SECRET
        or ARM_CLIENT_SECRET
        """
        return __config__.get('azureClientSecret')

    @_builtins.property
    def azure_subscription_id(self) -> Optional[str]:
        """
        The default Azure Subscription ID which should be used for Redpanda BYOC clusters. If another subscription is specified
        on a resource, it will take precedence. This can also be sourced from the `ARM_SUBSCRIPTION_ID` environment variable.
        """
        return __config__.get('azureSubscriptionId')

    @_builtins.property
    def azure_tenant_id(self) -> Optional[str]:
        """
        Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_TENANT_ID or
        ARM_TENANT_ID
        """
        return __config__.get('azureTenantId')

    @_builtins.property
    def client_id(self) -> Optional[str]:
        """
        The ID for the client. You need either `client_id` AND `client_secret`, or `access_token`, to use this provider. Can
        also be set with the `REDPANDA_CLIENT_ID` environment variable.
        """
        return __config__.get('clientId')

    @_builtins.property
    def client_secret(self) -> Optional[str]:
        """
        Redpanda client secret. You need either `client_id` AND `client_secret`, or `access_token`, to use this provider. Can
        also be set with the `REDPANDA_CLIENT_SECRET` environment variable.
        """
        return __config__.get('clientSecret')

    @_builtins.property
    def gcp_project_id(self) -> Optional[str]:
        """
        The default Google Cloud Project ID to use for Redpanda BYOC clusters. If another project is specified on a resource, it
        will take precedence. This can also be sourced from the `GOOGLE_PROJECT` environment variable, or any of the following
        ordered by precedence: `GOOGLE_PROJECT`, `GOOGLE_CLOUD_PROJECT`, `GCLOUD_PROJECT`, or `CLOUDSDK_CORE_PROJECT`.
        """
        return __config__.get('gcpProjectId')

    @_builtins.property
    def google_credentials(self) -> Optional[str]:
        """
        Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as GOOGLE_CREDENTIALS
        """
        return __config__.get('googleCredentials')

    @_builtins.property
    def google_credentials_base64(self) -> Optional[str]:
        """
        Used for creating and managing BYOC and BYOVPC clusters. Is a convenience passthrough for base64 encoded credentials
        intended for use in CI/CD. Can also be specified in the environment as GOOGLE_CREDENTIALS_BASE64
        """
        return __config__.get('googleCredentialsBase64')

