# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetNetworkResult',
    'AwaitableGetNetworkResult',
    'get_network',
    'get_network_output',
]

@pulumi.output_type
class GetNetworkResult:
    """
    A collection of values returned by getNetwork.
    """
    def __init__(__self__, cidr_block=None, cloud_provider=None, cluster_type=None, customer_managed_resources=None, id=None, name=None, region=None, resource_group_id=None):
        if cidr_block and not isinstance(cidr_block, str):
            raise TypeError("Expected argument 'cidr_block' to be a str")
        pulumi.set(__self__, "cidr_block", cidr_block)
        if cloud_provider and not isinstance(cloud_provider, str):
            raise TypeError("Expected argument 'cloud_provider' to be a str")
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_type and not isinstance(cluster_type, str):
            raise TypeError("Expected argument 'cluster_type' to be a str")
        pulumi.set(__self__, "cluster_type", cluster_type)
        if customer_managed_resources and not isinstance(customer_managed_resources, dict):
            raise TypeError("Expected argument 'customer_managed_resources' to be a dict")
        pulumi.set(__self__, "customer_managed_resources", customer_managed_resources)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)

    @_builtins.property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> _builtins.str:
        """
        The cidr_block to create the network in
        """
        return pulumi.get(self, "cidr_block")

    @_builtins.property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> _builtins.str:
        """
        The cloud provider to create the network in. Can also be set at the provider level
        """
        return pulumi.get(self, "cloud_provider")

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> _builtins.str:
        """
        The type of cluster this network is associated with, can be one of dedicated or cloud
        """
        return pulumi.get(self, "cluster_type")

    @_builtins.property
    @pulumi.getter(name="customerManagedResources")
    def customer_managed_resources(self) -> 'outputs.GetNetworkCustomerManagedResourcesResult':
        return pulumi.get(self, "customer_managed_resources")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        UUID of the network
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the network
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        The region to create the network in. Can also be set at the provider level
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        """
        The ID of the resource group in which to create the network
        """
        return pulumi.get(self, "resource_group_id")


class AwaitableGetNetworkResult(GetNetworkResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkResult(
            cidr_block=self.cidr_block,
            cloud_provider=self.cloud_provider,
            cluster_type=self.cluster_type,
            customer_managed_resources=self.customer_managed_resources,
            id=self.id,
            name=self.name,
            region=self.region,
            resource_group_id=self.resource_group_id)


def get_network(id: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetNetworkResult:
    """
    Data source for a Redpanda Cloud network

    ## Usage

    ```python
    import pulumi
    import pulumi_redpanda as redpanda

    example = redpanda.get_network(id="network_id")
    ```


    :param _builtins.str id: UUID of the network
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('redpanda:index/getNetwork:getNetwork', __args__, opts=opts, typ=GetNetworkResult).value

    return AwaitableGetNetworkResult(
        cidr_block=pulumi.get(__ret__, 'cidr_block'),
        cloud_provider=pulumi.get(__ret__, 'cloud_provider'),
        cluster_type=pulumi.get(__ret__, 'cluster_type'),
        customer_managed_resources=pulumi.get(__ret__, 'customer_managed_resources'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        region=pulumi.get(__ret__, 'region'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'))
def get_network_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetNetworkResult]:
    """
    Data source for a Redpanda Cloud network

    ## Usage

    ```python
    import pulumi
    import pulumi_redpanda as redpanda

    example = redpanda.get_network(id="network_id")
    ```


    :param _builtins.str id: UUID of the network
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('redpanda:index/getNetwork:getNetwork', __args__, opts=opts, typ=GetNetworkResult)
    return __ret__.apply(lambda __response__: GetNetworkResult(
        cidr_block=pulumi.get(__response__, 'cidr_block'),
        cloud_provider=pulumi.get(__response__, 'cloud_provider'),
        cluster_type=pulumi.get(__response__, 'cluster_type'),
        customer_managed_resources=pulumi.get(__response__, 'customer_managed_resources'),
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        region=pulumi.get(__response__, 'region'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id')))
