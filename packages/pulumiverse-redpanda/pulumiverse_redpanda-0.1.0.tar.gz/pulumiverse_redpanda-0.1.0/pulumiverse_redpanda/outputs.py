# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'ClusterAwsPrivateLink',
    'ClusterAwsPrivateLinkStatus',
    'ClusterAwsPrivateLinkStatusVpcEndpointConnection',
    'ClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntry',
    'ClusterAzurePrivateLink',
    'ClusterAzurePrivateLinkStatus',
    'ClusterAzurePrivateLinkStatusPrivateEndpointConnection',
    'ClusterCustomerManagedResources',
    'ClusterCustomerManagedResourcesAws',
    'ClusterCustomerManagedResourcesAwsAgentInstanceProfile',
    'ClusterCustomerManagedResourcesAwsCloudStorageBucket',
    'ClusterCustomerManagedResourcesAwsClusterSecurityGroup',
    'ClusterCustomerManagedResourcesAwsConnectorsNodeGroupInstanceProfile',
    'ClusterCustomerManagedResourcesAwsConnectorsSecurityGroup',
    'ClusterCustomerManagedResourcesAwsK8sClusterRole',
    'ClusterCustomerManagedResourcesAwsNodeSecurityGroup',
    'ClusterCustomerManagedResourcesAwsPermissionsBoundaryPolicy',
    'ClusterCustomerManagedResourcesAwsRedpandaAgentSecurityGroup',
    'ClusterCustomerManagedResourcesAwsRedpandaNodeGroupInstanceProfile',
    'ClusterCustomerManagedResourcesAwsRedpandaNodeGroupSecurityGroup',
    'ClusterCustomerManagedResourcesAwsUtilityNodeGroupInstanceProfile',
    'ClusterCustomerManagedResourcesAwsUtilitySecurityGroup',
    'ClusterCustomerManagedResourcesGcp',
    'ClusterCustomerManagedResourcesGcpAgentServiceAccount',
    'ClusterCustomerManagedResourcesGcpConnectorServiceAccount',
    'ClusterCustomerManagedResourcesGcpConsoleServiceAccount',
    'ClusterCustomerManagedResourcesGcpGkeServiceAccount',
    'ClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccount',
    'ClusterCustomerManagedResourcesGcpSubnet',
    'ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePods',
    'ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServices',
    'ClusterCustomerManagedResourcesGcpTieredStorageBucket',
    'ClusterGcpPrivateServiceConnect',
    'ClusterGcpPrivateServiceConnectConsumerAcceptList',
    'ClusterGcpPrivateServiceConnectStatus',
    'ClusterGcpPrivateServiceConnectStatusConnectedEndpoint',
    'ClusterHttpProxy',
    'ClusterHttpProxyMtls',
    'ClusterKafkaApi',
    'ClusterKafkaApiMtls',
    'ClusterKafkaConnect',
    'ClusterMaintenanceWindowConfig',
    'ClusterMaintenanceWindowConfigDayHour',
    'ClusterPrometheus',
    'ClusterRedpandaConsole',
    'ClusterSchemaRegistry',
    'ClusterSchemaRegistryMtls',
    'ClusterStateDescription',
    'NetworkCustomerManagedResources',
    'NetworkCustomerManagedResourcesAws',
    'NetworkCustomerManagedResourcesAwsDynamodbTable',
    'NetworkCustomerManagedResourcesAwsManagementBucket',
    'NetworkCustomerManagedResourcesAwsPrivateSubnets',
    'NetworkCustomerManagedResourcesAwsVpc',
    'NetworkCustomerManagedResourcesGcp',
    'NetworkCustomerManagedResourcesGcpManagementBucket',
    'GetClusterAwsPrivateLinkResult',
    'GetClusterAwsPrivateLinkStatusResult',
    'GetClusterAwsPrivateLinkStatusVpcEndpointConnectionResult',
    'GetClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntryResult',
    'GetClusterAzurePrivateLinkResult',
    'GetClusterAzurePrivateLinkStatusResult',
    'GetClusterAzurePrivateLinkStatusPrivateEndpointConnectionResult',
    'GetClusterCustomerManagedResourcesResult',
    'GetClusterCustomerManagedResourcesAwsResult',
    'GetClusterCustomerManagedResourcesAwsAgentInstanceProfileResult',
    'GetClusterCustomerManagedResourcesAwsCloudStorageBucketResult',
    'GetClusterCustomerManagedResourcesAwsClusterSecurityGroupResult',
    'GetClusterCustomerManagedResourcesAwsConnectorsNodeGroupInstanceProfileResult',
    'GetClusterCustomerManagedResourcesAwsConnectorsSecurityGroupResult',
    'GetClusterCustomerManagedResourcesAwsK8sClusterRoleResult',
    'GetClusterCustomerManagedResourcesAwsNodeSecurityGroupResult',
    'GetClusterCustomerManagedResourcesAwsPermissionsBoundaryPolicyResult',
    'GetClusterCustomerManagedResourcesAwsRedpandaAgentSecurityGroupResult',
    'GetClusterCustomerManagedResourcesAwsRedpandaNodeGroupInstanceProfileResult',
    'GetClusterCustomerManagedResourcesAwsRedpandaNodeGroupSecurityGroupResult',
    'GetClusterCustomerManagedResourcesAwsUtilityNodeGroupInstanceProfileResult',
    'GetClusterCustomerManagedResourcesAwsUtilitySecurityGroupResult',
    'GetClusterCustomerManagedResourcesGcpResult',
    'GetClusterCustomerManagedResourcesGcpAgentServiceAccountResult',
    'GetClusterCustomerManagedResourcesGcpConnectorServiceAccountResult',
    'GetClusterCustomerManagedResourcesGcpConsoleServiceAccountResult',
    'GetClusterCustomerManagedResourcesGcpGkeServiceAccountResult',
    'GetClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccountResult',
    'GetClusterCustomerManagedResourcesGcpSubnetResult',
    'GetClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePodsResult',
    'GetClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServicesResult',
    'GetClusterCustomerManagedResourcesGcpTieredStorageBucketResult',
    'GetClusterGcpPrivateServiceConnectResult',
    'GetClusterGcpPrivateServiceConnectConsumerAcceptListResult',
    'GetClusterGcpPrivateServiceConnectStatusResult',
    'GetClusterGcpPrivateServiceConnectStatusConnectedEndpointResult',
    'GetClusterHttpProxyResult',
    'GetClusterHttpProxyMtlsResult',
    'GetClusterKafkaApiResult',
    'GetClusterKafkaApiMtlsResult',
    'GetClusterKafkaConnectResult',
    'GetClusterMaintenanceWindowConfigResult',
    'GetClusterMaintenanceWindowConfigDayHourResult',
    'GetClusterPrometheusResult',
    'GetClusterRedpandaConsoleResult',
    'GetClusterSchemaRegistryResult',
    'GetClusterSchemaRegistryMtlsResult',
    'GetClusterStateDescriptionResult',
    'GetNetworkCustomerManagedResourcesResult',
    'GetNetworkCustomerManagedResourcesAwsResult',
    'GetNetworkCustomerManagedResourcesAwsDynamodbTableResult',
    'GetNetworkCustomerManagedResourcesAwsManagementBucketResult',
    'GetNetworkCustomerManagedResourcesAwsPrivateSubnetsResult',
    'GetNetworkCustomerManagedResourcesAwsVpcResult',
    'GetNetworkCustomerManagedResourcesGcpResult',
    'GetNetworkCustomerManagedResourcesGcpManagementBucketResult',
    'GetRegionsRegionResult',
    'GetServerlessRegionsServerlessRegionResult',
    'GetServerlessRegionsServerlessRegionPlacementResult',
    'GetThroughputTiersThroughputTierResult',
]

@pulumi.output_type
class ClusterAwsPrivateLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedPrincipals":
            suggest = "allowed_principals"
        elif key == "connectConsole":
            suggest = "connect_console"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAwsPrivateLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAwsPrivateLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAwsPrivateLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_principals: Sequence[_builtins.str],
                 connect_console: _builtins.bool,
                 enabled: _builtins.bool,
                 status: Optional['outputs.ClusterAwsPrivateLinkStatus'] = None):
        """
        :param Sequence[_builtins.str] allowed_principals: The ARN of the principals that can access the Redpanda AWS PrivateLink Endpoint Service. To grant permissions to all principals, use an asterisk (*).
        :param _builtins.bool connect_console: Whether Console is connected via PrivateLink.
        :param _builtins.bool enabled: Whether AWS PrivateLink is enabled.
        :param 'ClusterAwsPrivateLinkStatusArgs' status: Current status of the PrivateLink configuration.
        """
        pulumi.set(__self__, "allowed_principals", allowed_principals)
        pulumi.set(__self__, "connect_console", connect_console)
        pulumi.set(__self__, "enabled", enabled)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="allowedPrincipals")
    def allowed_principals(self) -> Sequence[_builtins.str]:
        """
        The ARN of the principals that can access the Redpanda AWS PrivateLink Endpoint Service. To grant permissions to all principals, use an asterisk (*).
        """
        return pulumi.get(self, "allowed_principals")

    @_builtins.property
    @pulumi.getter(name="connectConsole")
    def connect_console(self) -> _builtins.bool:
        """
        Whether Console is connected via PrivateLink.
        """
        return pulumi.get(self, "connect_console")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether AWS PrivateLink is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional['outputs.ClusterAwsPrivateLinkStatus']:
        """
        Current status of the PrivateLink configuration.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ClusterAwsPrivateLinkStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "consolePort":
            suggest = "console_port"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "deletedAt":
            suggest = "deleted_at"
        elif key == "kafkaApiNodeBasePort":
            suggest = "kafka_api_node_base_port"
        elif key == "kafkaApiSeedPort":
            suggest = "kafka_api_seed_port"
        elif key == "redpandaProxyNodeBasePort":
            suggest = "redpanda_proxy_node_base_port"
        elif key == "redpandaProxySeedPort":
            suggest = "redpanda_proxy_seed_port"
        elif key == "schemaRegistrySeedPort":
            suggest = "schema_registry_seed_port"
        elif key == "serviceId":
            suggest = "service_id"
        elif key == "serviceName":
            suggest = "service_name"
        elif key == "serviceState":
            suggest = "service_state"
        elif key == "vpcEndpointConnections":
            suggest = "vpc_endpoint_connections"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAwsPrivateLinkStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAwsPrivateLinkStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAwsPrivateLinkStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 console_port: Optional[_builtins.int] = None,
                 created_at: Optional[_builtins.str] = None,
                 deleted_at: Optional[_builtins.str] = None,
                 kafka_api_node_base_port: Optional[_builtins.int] = None,
                 kafka_api_seed_port: Optional[_builtins.int] = None,
                 redpanda_proxy_node_base_port: Optional[_builtins.int] = None,
                 redpanda_proxy_seed_port: Optional[_builtins.int] = None,
                 schema_registry_seed_port: Optional[_builtins.int] = None,
                 service_id: Optional[_builtins.str] = None,
                 service_name: Optional[_builtins.str] = None,
                 service_state: Optional[_builtins.str] = None,
                 vpc_endpoint_connections: Optional[Sequence['outputs.ClusterAwsPrivateLinkStatusVpcEndpointConnection']] = None):
        """
        :param _builtins.int console_port: Port for Redpanda Console.
        :param _builtins.str created_at: When the PrivateLink service was created.
        :param _builtins.str deleted_at: When the PrivateLink service was deleted.
        :param _builtins.int kafka_api_node_base_port: Base port for Kafka API nodes.
        :param _builtins.int kafka_api_seed_port: Port for Kafka API seed brokers.
        :param _builtins.int redpanda_proxy_node_base_port: Base port for HTTP proxy nodes.
        :param _builtins.int redpanda_proxy_seed_port: Port for HTTP proxy.
        :param _builtins.int schema_registry_seed_port: Port for Schema Registry.
        :param _builtins.str service_id: The PrivateLink service ID.
        :param _builtins.str service_name: The PrivateLink service name.
        :param _builtins.str service_state: Current state of the PrivateLink service.
        :param Sequence['ClusterAwsPrivateLinkStatusVpcEndpointConnectionArgs'] vpc_endpoint_connections: List of VPC endpoint connections.
        """
        if console_port is not None:
            pulumi.set(__self__, "console_port", console_port)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if deleted_at is not None:
            pulumi.set(__self__, "deleted_at", deleted_at)
        if kafka_api_node_base_port is not None:
            pulumi.set(__self__, "kafka_api_node_base_port", kafka_api_node_base_port)
        if kafka_api_seed_port is not None:
            pulumi.set(__self__, "kafka_api_seed_port", kafka_api_seed_port)
        if redpanda_proxy_node_base_port is not None:
            pulumi.set(__self__, "redpanda_proxy_node_base_port", redpanda_proxy_node_base_port)
        if redpanda_proxy_seed_port is not None:
            pulumi.set(__self__, "redpanda_proxy_seed_port", redpanda_proxy_seed_port)
        if schema_registry_seed_port is not None:
            pulumi.set(__self__, "schema_registry_seed_port", schema_registry_seed_port)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)
        if service_state is not None:
            pulumi.set(__self__, "service_state", service_state)
        if vpc_endpoint_connections is not None:
            pulumi.set(__self__, "vpc_endpoint_connections", vpc_endpoint_connections)

    @_builtins.property
    @pulumi.getter(name="consolePort")
    def console_port(self) -> Optional[_builtins.int]:
        """
        Port for Redpanda Console.
        """
        return pulumi.get(self, "console_port")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        When the PrivateLink service was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> Optional[_builtins.str]:
        """
        When the PrivateLink service was deleted.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="kafkaApiNodeBasePort")
    def kafka_api_node_base_port(self) -> Optional[_builtins.int]:
        """
        Base port for Kafka API nodes.
        """
        return pulumi.get(self, "kafka_api_node_base_port")

    @_builtins.property
    @pulumi.getter(name="kafkaApiSeedPort")
    def kafka_api_seed_port(self) -> Optional[_builtins.int]:
        """
        Port for Kafka API seed brokers.
        """
        return pulumi.get(self, "kafka_api_seed_port")

    @_builtins.property
    @pulumi.getter(name="redpandaProxyNodeBasePort")
    def redpanda_proxy_node_base_port(self) -> Optional[_builtins.int]:
        """
        Base port for HTTP proxy nodes.
        """
        return pulumi.get(self, "redpanda_proxy_node_base_port")

    @_builtins.property
    @pulumi.getter(name="redpandaProxySeedPort")
    def redpanda_proxy_seed_port(self) -> Optional[_builtins.int]:
        """
        Port for HTTP proxy.
        """
        return pulumi.get(self, "redpanda_proxy_seed_port")

    @_builtins.property
    @pulumi.getter(name="schemaRegistrySeedPort")
    def schema_registry_seed_port(self) -> Optional[_builtins.int]:
        """
        Port for Schema Registry.
        """
        return pulumi.get(self, "schema_registry_seed_port")

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[_builtins.str]:
        """
        The PrivateLink service ID.
        """
        return pulumi.get(self, "service_id")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[_builtins.str]:
        """
        The PrivateLink service name.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="serviceState")
    def service_state(self) -> Optional[_builtins.str]:
        """
        Current state of the PrivateLink service.
        """
        return pulumi.get(self, "service_state")

    @_builtins.property
    @pulumi.getter(name="vpcEndpointConnections")
    def vpc_endpoint_connections(self) -> Optional[Sequence['outputs.ClusterAwsPrivateLinkStatusVpcEndpointConnection']]:
        """
        List of VPC endpoint connections.
        """
        return pulumi.get(self, "vpc_endpoint_connections")


@pulumi.output_type
class ClusterAwsPrivateLinkStatusVpcEndpointConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionId":
            suggest = "connection_id"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "dnsEntries":
            suggest = "dns_entries"
        elif key == "loadBalancerArns":
            suggest = "load_balancer_arns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAwsPrivateLinkStatusVpcEndpointConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAwsPrivateLinkStatusVpcEndpointConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAwsPrivateLinkStatusVpcEndpointConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_id: Optional[_builtins.str] = None,
                 created_at: Optional[_builtins.str] = None,
                 dns_entries: Optional[Sequence['outputs.ClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntry']] = None,
                 id: Optional[_builtins.str] = None,
                 load_balancer_arns: Optional[Sequence[_builtins.str]] = None,
                 owner: Optional[_builtins.str] = None,
                 state: Optional[_builtins.str] = None):
        """
        :param _builtins.str connection_id: The connection ID.
        :param _builtins.str created_at: When the endpoint connection was created.
        :param Sequence['ClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntryArgs'] dns_entries: DNS entries for the endpoint.
        :param _builtins.str id: The endpoint connection ID.
        :param Sequence[_builtins.str] load_balancer_arns: ARNs of associated load balancers.
        :param _builtins.str owner: Owner of the endpoint connection.
        :param _builtins.str state: State of the endpoint connection.
        """
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dns_entries is not None:
            pulumi.set(__self__, "dns_entries", dns_entries)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if load_balancer_arns is not None:
            pulumi.set(__self__, "load_balancer_arns", load_balancer_arns)
        if owner is not None:
            pulumi.set(__self__, "owner", owner)
        if state is not None:
            pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[_builtins.str]:
        """
        The connection ID.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        When the endpoint connection was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dnsEntries")
    def dns_entries(self) -> Optional[Sequence['outputs.ClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntry']]:
        """
        DNS entries for the endpoint.
        """
        return pulumi.get(self, "dns_entries")

    @_builtins.property
    @pulumi.getter
    def id(self) -> Optional[_builtins.str]:
        """
        The endpoint connection ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="loadBalancerArns")
    def load_balancer_arns(self) -> Optional[Sequence[_builtins.str]]:
        """
        ARNs of associated load balancers.
        """
        return pulumi.get(self, "load_balancer_arns")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> Optional[_builtins.str]:
        """
        Owner of the endpoint connection.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def state(self) -> Optional[_builtins.str]:
        """
        State of the endpoint connection.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class ClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsName":
            suggest = "dns_name"
        elif key == "hostedZoneId":
            suggest = "hosted_zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_name: Optional[_builtins.str] = None,
                 hosted_zone_id: Optional[_builtins.str] = None):
        """
        :param _builtins.str dns_name: The DNS name.
        :param _builtins.str hosted_zone_id: The hosted zone ID.
        """
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if hosted_zone_id is not None:
            pulumi.set(__self__, "hosted_zone_id", hosted_zone_id)

    @_builtins.property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[_builtins.str]:
        """
        The DNS name.
        """
        return pulumi.get(self, "dns_name")

    @_builtins.property
    @pulumi.getter(name="hostedZoneId")
    def hosted_zone_id(self) -> Optional[_builtins.str]:
        """
        The hosted zone ID.
        """
        return pulumi.get(self, "hosted_zone_id")


@pulumi.output_type
class ClusterAzurePrivateLink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedSubscriptions":
            suggest = "allowed_subscriptions"
        elif key == "connectConsole":
            suggest = "connect_console"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAzurePrivateLink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAzurePrivateLink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAzurePrivateLink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_subscriptions: Sequence[_builtins.str],
                 connect_console: _builtins.bool,
                 enabled: _builtins.bool,
                 status: Optional['outputs.ClusterAzurePrivateLinkStatus'] = None):
        """
        :param Sequence[_builtins.str] allowed_subscriptions: The subscriptions that can access the Redpanda Azure PrivateLink Endpoint Service. To grant permissions to all principals, use an asterisk (*).
        :param _builtins.bool connect_console: Whether Console is connected in Redpanda Azure Private Link Service.
        :param _builtins.bool enabled: Whether Redpanda Azure Private Link Endpoint Service is enabled.
        :param 'ClusterAzurePrivateLinkStatusArgs' status: Current status of the Private Link configuration.
        """
        pulumi.set(__self__, "allowed_subscriptions", allowed_subscriptions)
        pulumi.set(__self__, "connect_console", connect_console)
        pulumi.set(__self__, "enabled", enabled)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="allowedSubscriptions")
    def allowed_subscriptions(self) -> Sequence[_builtins.str]:
        """
        The subscriptions that can access the Redpanda Azure PrivateLink Endpoint Service. To grant permissions to all principals, use an asterisk (*).
        """
        return pulumi.get(self, "allowed_subscriptions")

    @_builtins.property
    @pulumi.getter(name="connectConsole")
    def connect_console(self) -> _builtins.bool:
        """
        Whether Console is connected in Redpanda Azure Private Link Service.
        """
        return pulumi.get(self, "connect_console")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether Redpanda Azure Private Link Endpoint Service is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional['outputs.ClusterAzurePrivateLinkStatus']:
        """
        Current status of the Private Link configuration.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ClusterAzurePrivateLinkStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "approvedSubscriptions":
            suggest = "approved_subscriptions"
        elif key == "consolePort":
            suggest = "console_port"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "deletedAt":
            suggest = "deleted_at"
        elif key == "dnsARecord":
            suggest = "dns_a_record"
        elif key == "kafkaApiNodeBasePort":
            suggest = "kafka_api_node_base_port"
        elif key == "kafkaApiSeedPort":
            suggest = "kafka_api_seed_port"
        elif key == "privateEndpointConnections":
            suggest = "private_endpoint_connections"
        elif key == "redpandaProxyNodeBasePort":
            suggest = "redpanda_proxy_node_base_port"
        elif key == "redpandaProxySeedPort":
            suggest = "redpanda_proxy_seed_port"
        elif key == "schemaRegistrySeedPort":
            suggest = "schema_registry_seed_port"
        elif key == "serviceId":
            suggest = "service_id"
        elif key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAzurePrivateLinkStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAzurePrivateLinkStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAzurePrivateLinkStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 approved_subscriptions: Optional[Sequence[_builtins.str]] = None,
                 console_port: Optional[_builtins.int] = None,
                 created_at: Optional[_builtins.str] = None,
                 deleted_at: Optional[_builtins.str] = None,
                 dns_a_record: Optional[_builtins.str] = None,
                 kafka_api_node_base_port: Optional[_builtins.int] = None,
                 kafka_api_seed_port: Optional[_builtins.int] = None,
                 private_endpoint_connections: Optional[Sequence['outputs.ClusterAzurePrivateLinkStatusPrivateEndpointConnection']] = None,
                 redpanda_proxy_node_base_port: Optional[_builtins.int] = None,
                 redpanda_proxy_seed_port: Optional[_builtins.int] = None,
                 schema_registry_seed_port: Optional[_builtins.int] = None,
                 service_id: Optional[_builtins.str] = None,
                 service_name: Optional[_builtins.str] = None):
        """
        :param Sequence[_builtins.str] approved_subscriptions: List of approved Azure subscription IDs.
        :param _builtins.int console_port: Port for Redpanda Console.
        :param _builtins.str created_at: When the Private Link service was created.
        :param _builtins.str deleted_at: When the Private Link service was deleted.
        :param _builtins.str dns_a_record: DNS A record for the service.
        :param _builtins.int kafka_api_node_base_port: Base port for Kafka API nodes.
        :param _builtins.int kafka_api_seed_port: Port for Kafka API seed brokers.
        :param Sequence['ClusterAzurePrivateLinkStatusPrivateEndpointConnectionArgs'] private_endpoint_connections: List of private endpoint connections.
        :param _builtins.int redpanda_proxy_node_base_port: Base port for HTTP proxy nodes.
        :param _builtins.int redpanda_proxy_seed_port: Port for HTTP proxy.
        :param _builtins.int schema_registry_seed_port: Port for Schema Registry.
        :param _builtins.str service_id: The Private Link service ID.
        :param _builtins.str service_name: The Private Link service name.
        """
        if approved_subscriptions is not None:
            pulumi.set(__self__, "approved_subscriptions", approved_subscriptions)
        if console_port is not None:
            pulumi.set(__self__, "console_port", console_port)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if deleted_at is not None:
            pulumi.set(__self__, "deleted_at", deleted_at)
        if dns_a_record is not None:
            pulumi.set(__self__, "dns_a_record", dns_a_record)
        if kafka_api_node_base_port is not None:
            pulumi.set(__self__, "kafka_api_node_base_port", kafka_api_node_base_port)
        if kafka_api_seed_port is not None:
            pulumi.set(__self__, "kafka_api_seed_port", kafka_api_seed_port)
        if private_endpoint_connections is not None:
            pulumi.set(__self__, "private_endpoint_connections", private_endpoint_connections)
        if redpanda_proxy_node_base_port is not None:
            pulumi.set(__self__, "redpanda_proxy_node_base_port", redpanda_proxy_node_base_port)
        if redpanda_proxy_seed_port is not None:
            pulumi.set(__self__, "redpanda_proxy_seed_port", redpanda_proxy_seed_port)
        if schema_registry_seed_port is not None:
            pulumi.set(__self__, "schema_registry_seed_port", schema_registry_seed_port)
        if service_id is not None:
            pulumi.set(__self__, "service_id", service_id)
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @_builtins.property
    @pulumi.getter(name="approvedSubscriptions")
    def approved_subscriptions(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of approved Azure subscription IDs.
        """
        return pulumi.get(self, "approved_subscriptions")

    @_builtins.property
    @pulumi.getter(name="consolePort")
    def console_port(self) -> Optional[_builtins.int]:
        """
        Port for Redpanda Console.
        """
        return pulumi.get(self, "console_port")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        When the Private Link service was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> Optional[_builtins.str]:
        """
        When the Private Link service was deleted.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="dnsARecord")
    def dns_a_record(self) -> Optional[_builtins.str]:
        """
        DNS A record for the service.
        """
        return pulumi.get(self, "dns_a_record")

    @_builtins.property
    @pulumi.getter(name="kafkaApiNodeBasePort")
    def kafka_api_node_base_port(self) -> Optional[_builtins.int]:
        """
        Base port for Kafka API nodes.
        """
        return pulumi.get(self, "kafka_api_node_base_port")

    @_builtins.property
    @pulumi.getter(name="kafkaApiSeedPort")
    def kafka_api_seed_port(self) -> Optional[_builtins.int]:
        """
        Port for Kafka API seed brokers.
        """
        return pulumi.get(self, "kafka_api_seed_port")

    @_builtins.property
    @pulumi.getter(name="privateEndpointConnections")
    def private_endpoint_connections(self) -> Optional[Sequence['outputs.ClusterAzurePrivateLinkStatusPrivateEndpointConnection']]:
        """
        List of private endpoint connections.
        """
        return pulumi.get(self, "private_endpoint_connections")

    @_builtins.property
    @pulumi.getter(name="redpandaProxyNodeBasePort")
    def redpanda_proxy_node_base_port(self) -> Optional[_builtins.int]:
        """
        Base port for HTTP proxy nodes.
        """
        return pulumi.get(self, "redpanda_proxy_node_base_port")

    @_builtins.property
    @pulumi.getter(name="redpandaProxySeedPort")
    def redpanda_proxy_seed_port(self) -> Optional[_builtins.int]:
        """
        Port for HTTP proxy.
        """
        return pulumi.get(self, "redpanda_proxy_seed_port")

    @_builtins.property
    @pulumi.getter(name="schemaRegistrySeedPort")
    def schema_registry_seed_port(self) -> Optional[_builtins.int]:
        """
        Port for Schema Registry.
        """
        return pulumi.get(self, "schema_registry_seed_port")

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> Optional[_builtins.str]:
        """
        The Private Link service ID.
        """
        return pulumi.get(self, "service_id")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[_builtins.str]:
        """
        The Private Link service name.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class ClusterAzurePrivateLinkStatusPrivateEndpointConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionId":
            suggest = "connection_id"
        elif key == "connectionName":
            suggest = "connection_name"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "privateEndpointId":
            suggest = "private_endpoint_id"
        elif key == "privateEndpointName":
            suggest = "private_endpoint_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterAzurePrivateLinkStatusPrivateEndpointConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterAzurePrivateLinkStatusPrivateEndpointConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterAzurePrivateLinkStatusPrivateEndpointConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_id: Optional[_builtins.str] = None,
                 connection_name: Optional[_builtins.str] = None,
                 created_at: Optional[_builtins.str] = None,
                 private_endpoint_id: Optional[_builtins.str] = None,
                 private_endpoint_name: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str connection_id: ID of the connection.
        :param _builtins.str connection_name: Name of the connection.
        :param _builtins.str created_at: When the endpoint connection was created.
        :param _builtins.str private_endpoint_id: ID of the private endpoint.
        :param _builtins.str private_endpoint_name: Name of the private endpoint.
        :param _builtins.str status: Status of the endpoint connection.
        """
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if connection_name is not None:
            pulumi.set(__self__, "connection_name", connection_name)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if private_endpoint_id is not None:
            pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        if private_endpoint_name is not None:
            pulumi.set(__self__, "private_endpoint_name", private_endpoint_name)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[_builtins.str]:
        """
        ID of the connection.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="connectionName")
    def connection_name(self) -> Optional[_builtins.str]:
        """
        Name of the connection.
        """
        return pulumi.get(self, "connection_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        When the endpoint connection was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> Optional[_builtins.str]:
        """
        ID of the private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @_builtins.property
    @pulumi.getter(name="privateEndpointName")
    def private_endpoint_name(self) -> Optional[_builtins.str]:
        """
        Name of the private endpoint.
        """
        return pulumi.get(self, "private_endpoint_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Status of the endpoint connection.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ClusterCustomerManagedResources(dict):
    def __init__(__self__, *,
                 aws: Optional['outputs.ClusterCustomerManagedResourcesAws'] = None,
                 gcp: Optional['outputs.ClusterCustomerManagedResourcesGcp'] = None):
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)

    @_builtins.property
    @pulumi.getter
    def aws(self) -> Optional['outputs.ClusterCustomerManagedResourcesAws']:
        return pulumi.get(self, "aws")

    @_builtins.property
    @pulumi.getter
    def gcp(self) -> Optional['outputs.ClusterCustomerManagedResourcesGcp']:
        return pulumi.get(self, "gcp")


@pulumi.output_type
class ClusterCustomerManagedResourcesAws(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentInstanceProfile":
            suggest = "agent_instance_profile"
        elif key == "cloudStorageBucket":
            suggest = "cloud_storage_bucket"
        elif key == "clusterSecurityGroup":
            suggest = "cluster_security_group"
        elif key == "connectorsNodeGroupInstanceProfile":
            suggest = "connectors_node_group_instance_profile"
        elif key == "connectorsSecurityGroup":
            suggest = "connectors_security_group"
        elif key == "k8sClusterRole":
            suggest = "k8s_cluster_role"
        elif key == "nodeSecurityGroup":
            suggest = "node_security_group"
        elif key == "permissionsBoundaryPolicy":
            suggest = "permissions_boundary_policy"
        elif key == "redpandaAgentSecurityGroup":
            suggest = "redpanda_agent_security_group"
        elif key == "redpandaNodeGroupInstanceProfile":
            suggest = "redpanda_node_group_instance_profile"
        elif key == "redpandaNodeGroupSecurityGroup":
            suggest = "redpanda_node_group_security_group"
        elif key == "utilityNodeGroupInstanceProfile":
            suggest = "utility_node_group_instance_profile"
        elif key == "utilitySecurityGroup":
            suggest = "utility_security_group"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterCustomerManagedResourcesAws. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterCustomerManagedResourcesAws.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterCustomerManagedResourcesAws.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_instance_profile: 'outputs.ClusterCustomerManagedResourcesAwsAgentInstanceProfile',
                 cloud_storage_bucket: 'outputs.ClusterCustomerManagedResourcesAwsCloudStorageBucket',
                 cluster_security_group: 'outputs.ClusterCustomerManagedResourcesAwsClusterSecurityGroup',
                 connectors_node_group_instance_profile: 'outputs.ClusterCustomerManagedResourcesAwsConnectorsNodeGroupInstanceProfile',
                 connectors_security_group: 'outputs.ClusterCustomerManagedResourcesAwsConnectorsSecurityGroup',
                 k8s_cluster_role: 'outputs.ClusterCustomerManagedResourcesAwsK8sClusterRole',
                 node_security_group: 'outputs.ClusterCustomerManagedResourcesAwsNodeSecurityGroup',
                 permissions_boundary_policy: 'outputs.ClusterCustomerManagedResourcesAwsPermissionsBoundaryPolicy',
                 redpanda_agent_security_group: 'outputs.ClusterCustomerManagedResourcesAwsRedpandaAgentSecurityGroup',
                 redpanda_node_group_instance_profile: 'outputs.ClusterCustomerManagedResourcesAwsRedpandaNodeGroupInstanceProfile',
                 redpanda_node_group_security_group: 'outputs.ClusterCustomerManagedResourcesAwsRedpandaNodeGroupSecurityGroup',
                 utility_node_group_instance_profile: 'outputs.ClusterCustomerManagedResourcesAwsUtilityNodeGroupInstanceProfile',
                 utility_security_group: 'outputs.ClusterCustomerManagedResourcesAwsUtilitySecurityGroup'):
        pulumi.set(__self__, "agent_instance_profile", agent_instance_profile)
        pulumi.set(__self__, "cloud_storage_bucket", cloud_storage_bucket)
        pulumi.set(__self__, "cluster_security_group", cluster_security_group)
        pulumi.set(__self__, "connectors_node_group_instance_profile", connectors_node_group_instance_profile)
        pulumi.set(__self__, "connectors_security_group", connectors_security_group)
        pulumi.set(__self__, "k8s_cluster_role", k8s_cluster_role)
        pulumi.set(__self__, "node_security_group", node_security_group)
        pulumi.set(__self__, "permissions_boundary_policy", permissions_boundary_policy)
        pulumi.set(__self__, "redpanda_agent_security_group", redpanda_agent_security_group)
        pulumi.set(__self__, "redpanda_node_group_instance_profile", redpanda_node_group_instance_profile)
        pulumi.set(__self__, "redpanda_node_group_security_group", redpanda_node_group_security_group)
        pulumi.set(__self__, "utility_node_group_instance_profile", utility_node_group_instance_profile)
        pulumi.set(__self__, "utility_security_group", utility_security_group)

    @_builtins.property
    @pulumi.getter(name="agentInstanceProfile")
    def agent_instance_profile(self) -> 'outputs.ClusterCustomerManagedResourcesAwsAgentInstanceProfile':
        return pulumi.get(self, "agent_instance_profile")

    @_builtins.property
    @pulumi.getter(name="cloudStorageBucket")
    def cloud_storage_bucket(self) -> 'outputs.ClusterCustomerManagedResourcesAwsCloudStorageBucket':
        return pulumi.get(self, "cloud_storage_bucket")

    @_builtins.property
    @pulumi.getter(name="clusterSecurityGroup")
    def cluster_security_group(self) -> 'outputs.ClusterCustomerManagedResourcesAwsClusterSecurityGroup':
        return pulumi.get(self, "cluster_security_group")

    @_builtins.property
    @pulumi.getter(name="connectorsNodeGroupInstanceProfile")
    def connectors_node_group_instance_profile(self) -> 'outputs.ClusterCustomerManagedResourcesAwsConnectorsNodeGroupInstanceProfile':
        return pulumi.get(self, "connectors_node_group_instance_profile")

    @_builtins.property
    @pulumi.getter(name="connectorsSecurityGroup")
    def connectors_security_group(self) -> 'outputs.ClusterCustomerManagedResourcesAwsConnectorsSecurityGroup':
        return pulumi.get(self, "connectors_security_group")

    @_builtins.property
    @pulumi.getter(name="k8sClusterRole")
    def k8s_cluster_role(self) -> 'outputs.ClusterCustomerManagedResourcesAwsK8sClusterRole':
        return pulumi.get(self, "k8s_cluster_role")

    @_builtins.property
    @pulumi.getter(name="nodeSecurityGroup")
    def node_security_group(self) -> 'outputs.ClusterCustomerManagedResourcesAwsNodeSecurityGroup':
        return pulumi.get(self, "node_security_group")

    @_builtins.property
    @pulumi.getter(name="permissionsBoundaryPolicy")
    def permissions_boundary_policy(self) -> 'outputs.ClusterCustomerManagedResourcesAwsPermissionsBoundaryPolicy':
        return pulumi.get(self, "permissions_boundary_policy")

    @_builtins.property
    @pulumi.getter(name="redpandaAgentSecurityGroup")
    def redpanda_agent_security_group(self) -> 'outputs.ClusterCustomerManagedResourcesAwsRedpandaAgentSecurityGroup':
        return pulumi.get(self, "redpanda_agent_security_group")

    @_builtins.property
    @pulumi.getter(name="redpandaNodeGroupInstanceProfile")
    def redpanda_node_group_instance_profile(self) -> 'outputs.ClusterCustomerManagedResourcesAwsRedpandaNodeGroupInstanceProfile':
        return pulumi.get(self, "redpanda_node_group_instance_profile")

    @_builtins.property
    @pulumi.getter(name="redpandaNodeGroupSecurityGroup")
    def redpanda_node_group_security_group(self) -> 'outputs.ClusterCustomerManagedResourcesAwsRedpandaNodeGroupSecurityGroup':
        return pulumi.get(self, "redpanda_node_group_security_group")

    @_builtins.property
    @pulumi.getter(name="utilityNodeGroupInstanceProfile")
    def utility_node_group_instance_profile(self) -> 'outputs.ClusterCustomerManagedResourcesAwsUtilityNodeGroupInstanceProfile':
        return pulumi.get(self, "utility_node_group_instance_profile")

    @_builtins.property
    @pulumi.getter(name="utilitySecurityGroup")
    def utility_security_group(self) -> 'outputs.ClusterCustomerManagedResourcesAwsUtilitySecurityGroup':
        return pulumi.get(self, "utility_security_group")


@pulumi.output_type
class ClusterCustomerManagedResourcesAwsAgentInstanceProfile(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the agent instance profile
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the agent instance profile
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class ClusterCustomerManagedResourcesAwsCloudStorageBucket(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the cloud storage bucket
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the cloud storage bucket
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class ClusterCustomerManagedResourcesAwsClusterSecurityGroup(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the cluster security group
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the cluster security group
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class ClusterCustomerManagedResourcesAwsConnectorsNodeGroupInstanceProfile(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the connectors node group instance profile
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the connectors node group instance profile
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class ClusterCustomerManagedResourcesAwsConnectorsSecurityGroup(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the connectors security group
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the connectors security group
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class ClusterCustomerManagedResourcesAwsK8sClusterRole(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the Kubernetes cluster role
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the Kubernetes cluster role
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class ClusterCustomerManagedResourcesAwsNodeSecurityGroup(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the node security group
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the node security group
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class ClusterCustomerManagedResourcesAwsPermissionsBoundaryPolicy(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the permissions boundary policy
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the permissions boundary policy
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class ClusterCustomerManagedResourcesAwsRedpandaAgentSecurityGroup(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the redpanda agent security group
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the redpanda agent security group
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class ClusterCustomerManagedResourcesAwsRedpandaNodeGroupInstanceProfile(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the redpanda node group instance profile
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the redpanda node group instance profile
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class ClusterCustomerManagedResourcesAwsRedpandaNodeGroupSecurityGroup(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the redpanda node group security group
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the redpanda node group security group
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class ClusterCustomerManagedResourcesAwsUtilityNodeGroupInstanceProfile(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the utility node group instance profile
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the utility node group instance profile
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class ClusterCustomerManagedResourcesAwsUtilitySecurityGroup(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the utility security group
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the utility security group
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class ClusterCustomerManagedResourcesGcp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "agentServiceAccount":
            suggest = "agent_service_account"
        elif key == "connectorServiceAccount":
            suggest = "connector_service_account"
        elif key == "consoleServiceAccount":
            suggest = "console_service_account"
        elif key == "gkeServiceAccount":
            suggest = "gke_service_account"
        elif key == "redpandaClusterServiceAccount":
            suggest = "redpanda_cluster_service_account"
        elif key == "tieredStorageBucket":
            suggest = "tiered_storage_bucket"
        elif key == "pscNatSubnetName":
            suggest = "psc_nat_subnet_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterCustomerManagedResourcesGcp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterCustomerManagedResourcesGcp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterCustomerManagedResourcesGcp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 agent_service_account: 'outputs.ClusterCustomerManagedResourcesGcpAgentServiceAccount',
                 connector_service_account: 'outputs.ClusterCustomerManagedResourcesGcpConnectorServiceAccount',
                 console_service_account: 'outputs.ClusterCustomerManagedResourcesGcpConsoleServiceAccount',
                 gke_service_account: 'outputs.ClusterCustomerManagedResourcesGcpGkeServiceAccount',
                 redpanda_cluster_service_account: 'outputs.ClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccount',
                 subnet: 'outputs.ClusterCustomerManagedResourcesGcpSubnet',
                 tiered_storage_bucket: 'outputs.ClusterCustomerManagedResourcesGcpTieredStorageBucket',
                 psc_nat_subnet_name: Optional[_builtins.str] = None):
        """
        :param 'ClusterCustomerManagedResourcesGcpAgentServiceAccountArgs' agent_service_account: GCP service account for the agent.
        :param 'ClusterCustomerManagedResourcesGcpConnectorServiceAccountArgs' connector_service_account: GCP service account for managed connectors.
        :param 'ClusterCustomerManagedResourcesGcpConsoleServiceAccountArgs' console_service_account: GCP service account for Redpanda Console.
        :param 'ClusterCustomerManagedResourcesGcpGkeServiceAccountArgs' gke_service_account: GCP service account for GCP Kubernetes Engine (GKE).
        :param 'ClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccountArgs' redpanda_cluster_service_account: GCP service account for the Redpanda cluster.
        :param 'ClusterCustomerManagedResourcesGcpSubnetArgs' subnet: GCP subnet where Redpanda cluster is deployed.
        :param 'ClusterCustomerManagedResourcesGcpTieredStorageBucketArgs' tiered_storage_bucket: GCP storage bucket for Tiered storage.
        :param _builtins.str psc_nat_subnet_name: NAT subnet name if GCP Private Service Connect is enabled.
        """
        pulumi.set(__self__, "agent_service_account", agent_service_account)
        pulumi.set(__self__, "connector_service_account", connector_service_account)
        pulumi.set(__self__, "console_service_account", console_service_account)
        pulumi.set(__self__, "gke_service_account", gke_service_account)
        pulumi.set(__self__, "redpanda_cluster_service_account", redpanda_cluster_service_account)
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "tiered_storage_bucket", tiered_storage_bucket)
        if psc_nat_subnet_name is not None:
            pulumi.set(__self__, "psc_nat_subnet_name", psc_nat_subnet_name)

    @_builtins.property
    @pulumi.getter(name="agentServiceAccount")
    def agent_service_account(self) -> 'outputs.ClusterCustomerManagedResourcesGcpAgentServiceAccount':
        """
        GCP service account for the agent.
        """
        return pulumi.get(self, "agent_service_account")

    @_builtins.property
    @pulumi.getter(name="connectorServiceAccount")
    def connector_service_account(self) -> 'outputs.ClusterCustomerManagedResourcesGcpConnectorServiceAccount':
        """
        GCP service account for managed connectors.
        """
        return pulumi.get(self, "connector_service_account")

    @_builtins.property
    @pulumi.getter(name="consoleServiceAccount")
    def console_service_account(self) -> 'outputs.ClusterCustomerManagedResourcesGcpConsoleServiceAccount':
        """
        GCP service account for Redpanda Console.
        """
        return pulumi.get(self, "console_service_account")

    @_builtins.property
    @pulumi.getter(name="gkeServiceAccount")
    def gke_service_account(self) -> 'outputs.ClusterCustomerManagedResourcesGcpGkeServiceAccount':
        """
        GCP service account for GCP Kubernetes Engine (GKE).
        """
        return pulumi.get(self, "gke_service_account")

    @_builtins.property
    @pulumi.getter(name="redpandaClusterServiceAccount")
    def redpanda_cluster_service_account(self) -> 'outputs.ClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccount':
        """
        GCP service account for the Redpanda cluster.
        """
        return pulumi.get(self, "redpanda_cluster_service_account")

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> 'outputs.ClusterCustomerManagedResourcesGcpSubnet':
        """
        GCP subnet where Redpanda cluster is deployed.
        """
        return pulumi.get(self, "subnet")

    @_builtins.property
    @pulumi.getter(name="tieredStorageBucket")
    def tiered_storage_bucket(self) -> 'outputs.ClusterCustomerManagedResourcesGcpTieredStorageBucket':
        """
        GCP storage bucket for Tiered storage.
        """
        return pulumi.get(self, "tiered_storage_bucket")

    @_builtins.property
    @pulumi.getter(name="pscNatSubnetName")
    def psc_nat_subnet_name(self) -> Optional[_builtins.str]:
        """
        NAT subnet name if GCP Private Service Connect is enabled.
        """
        return pulumi.get(self, "psc_nat_subnet_name")


@pulumi.output_type
class ClusterCustomerManagedResourcesGcpAgentServiceAccount(dict):
    def __init__(__self__, *,
                 email: _builtins.str):
        """
        :param _builtins.str email: GCP service account email.
        """
        pulumi.set(__self__, "email", email)

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        GCP service account email.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class ClusterCustomerManagedResourcesGcpConnectorServiceAccount(dict):
    def __init__(__self__, *,
                 email: _builtins.str):
        """
        :param _builtins.str email: GCP service account email.
        """
        pulumi.set(__self__, "email", email)

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        GCP service account email.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class ClusterCustomerManagedResourcesGcpConsoleServiceAccount(dict):
    def __init__(__self__, *,
                 email: _builtins.str):
        """
        :param _builtins.str email: GCP service account email.
        """
        pulumi.set(__self__, "email", email)

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        GCP service account email.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class ClusterCustomerManagedResourcesGcpGkeServiceAccount(dict):
    def __init__(__self__, *,
                 email: _builtins.str):
        """
        :param _builtins.str email: GCP service account email.
        """
        pulumi.set(__self__, "email", email)

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        GCP service account email.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class ClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccount(dict):
    def __init__(__self__, *,
                 email: _builtins.str):
        """
        :param _builtins.str email: GCP service account email.
        """
        pulumi.set(__self__, "email", email)

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        GCP service account email.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class ClusterCustomerManagedResourcesGcpSubnet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "k8sMasterIpv4Range":
            suggest = "k8s_master_ipv4_range"
        elif key == "secondaryIpv4RangePods":
            suggest = "secondary_ipv4_range_pods"
        elif key == "secondaryIpv4RangeServices":
            suggest = "secondary_ipv4_range_services"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterCustomerManagedResourcesGcpSubnet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterCustomerManagedResourcesGcpSubnet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterCustomerManagedResourcesGcpSubnet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 k8s_master_ipv4_range: _builtins.str,
                 name: _builtins.str,
                 secondary_ipv4_range_pods: 'outputs.ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePods',
                 secondary_ipv4_range_services: 'outputs.ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServices'):
        """
        :param _builtins.str k8s_master_ipv4_range: Kubernetes Master IPv4 range, e.g. 10.0.0.0/24.
        :param _builtins.str name: Subnet name.
        :param 'ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePodsArgs' secondary_ipv4_range_pods: Secondary IPv4 range for pods.
        :param 'ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServicesArgs' secondary_ipv4_range_services: Secondary IPv4 range for services.
        """
        pulumi.set(__self__, "k8s_master_ipv4_range", k8s_master_ipv4_range)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secondary_ipv4_range_pods", secondary_ipv4_range_pods)
        pulumi.set(__self__, "secondary_ipv4_range_services", secondary_ipv4_range_services)

    @_builtins.property
    @pulumi.getter(name="k8sMasterIpv4Range")
    def k8s_master_ipv4_range(self) -> _builtins.str:
        """
        Kubernetes Master IPv4 range, e.g. 10.0.0.0/24.
        """
        return pulumi.get(self, "k8s_master_ipv4_range")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Subnet name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="secondaryIpv4RangePods")
    def secondary_ipv4_range_pods(self) -> 'outputs.ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePods':
        """
        Secondary IPv4 range for pods.
        """
        return pulumi.get(self, "secondary_ipv4_range_pods")

    @_builtins.property
    @pulumi.getter(name="secondaryIpv4RangeServices")
    def secondary_ipv4_range_services(self) -> 'outputs.ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServices':
        """
        Secondary IPv4 range for services.
        """
        return pulumi.get(self, "secondary_ipv4_range_services")


@pulumi.output_type
class ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePods(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: Secondary IPv4 range name for pods.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Secondary IPv4 range name for pods.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServices(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: Secondary IPv4 range name for services.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Secondary IPv4 range name for services.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ClusterCustomerManagedResourcesGcpTieredStorageBucket(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: GCP storage bucket name.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        GCP storage bucket name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ClusterGcpPrivateServiceConnect(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "consumerAcceptLists":
            suggest = "consumer_accept_lists"
        elif key == "globalAccessEnabled":
            suggest = "global_access_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterGcpPrivateServiceConnect. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterGcpPrivateServiceConnect.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterGcpPrivateServiceConnect.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 consumer_accept_lists: Sequence['outputs.ClusterGcpPrivateServiceConnectConsumerAcceptList'],
                 enabled: _builtins.bool,
                 global_access_enabled: _builtins.bool,
                 status: Optional['outputs.ClusterGcpPrivateServiceConnectStatus'] = None):
        """
        :param Sequence['ClusterGcpPrivateServiceConnectConsumerAcceptListArgs'] consumer_accept_lists: List of consumers that are allowed to connect to Redpanda GCP PSC (Private Service Connect) service attachment.
        :param _builtins.bool enabled: Whether Redpanda GCP Private Service Connect is enabled.
        :param _builtins.bool global_access_enabled: Whether global access is enabled.
        :param 'ClusterGcpPrivateServiceConnectStatusArgs' status: Current status of the Private Service Connect configuration.
        """
        pulumi.set(__self__, "consumer_accept_lists", consumer_accept_lists)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "global_access_enabled", global_access_enabled)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="consumerAcceptLists")
    def consumer_accept_lists(self) -> Sequence['outputs.ClusterGcpPrivateServiceConnectConsumerAcceptList']:
        """
        List of consumers that are allowed to connect to Redpanda GCP PSC (Private Service Connect) service attachment.
        """
        return pulumi.get(self, "consumer_accept_lists")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether Redpanda GCP Private Service Connect is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="globalAccessEnabled")
    def global_access_enabled(self) -> _builtins.bool:
        """
        Whether global access is enabled.
        """
        return pulumi.get(self, "global_access_enabled")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional['outputs.ClusterGcpPrivateServiceConnectStatus']:
        """
        Current status of the Private Service Connect configuration.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ClusterGcpPrivateServiceConnectConsumerAcceptList(dict):
    def __init__(__self__, *,
                 source: _builtins.str):
        """
        :param _builtins.str source: Either the GCP project number or its alphanumeric ID.
        """
        pulumi.set(__self__, "source", source)

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        Either the GCP project number or its alphanumeric ID.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class ClusterGcpPrivateServiceConnectStatus(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectedEndpoints":
            suggest = "connected_endpoints"
        elif key == "createdAt":
            suggest = "created_at"
        elif key == "deletedAt":
            suggest = "deleted_at"
        elif key == "dnsARecords":
            suggest = "dns_a_records"
        elif key == "kafkaApiNodeBasePort":
            suggest = "kafka_api_node_base_port"
        elif key == "kafkaApiSeedPort":
            suggest = "kafka_api_seed_port"
        elif key == "redpandaProxyNodeBasePort":
            suggest = "redpanda_proxy_node_base_port"
        elif key == "redpandaProxySeedPort":
            suggest = "redpanda_proxy_seed_port"
        elif key == "schemaRegistrySeedPort":
            suggest = "schema_registry_seed_port"
        elif key == "seedHostname":
            suggest = "seed_hostname"
        elif key == "serviceAttachment":
            suggest = "service_attachment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterGcpPrivateServiceConnectStatus. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterGcpPrivateServiceConnectStatus.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterGcpPrivateServiceConnectStatus.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connected_endpoints: Optional[Sequence['outputs.ClusterGcpPrivateServiceConnectStatusConnectedEndpoint']] = None,
                 created_at: Optional[_builtins.str] = None,
                 deleted_at: Optional[_builtins.str] = None,
                 dns_a_records: Optional[Sequence[_builtins.str]] = None,
                 kafka_api_node_base_port: Optional[_builtins.int] = None,
                 kafka_api_seed_port: Optional[_builtins.int] = None,
                 redpanda_proxy_node_base_port: Optional[_builtins.int] = None,
                 redpanda_proxy_seed_port: Optional[_builtins.int] = None,
                 schema_registry_seed_port: Optional[_builtins.int] = None,
                 seed_hostname: Optional[_builtins.str] = None,
                 service_attachment: Optional[_builtins.str] = None):
        """
        :param Sequence['ClusterGcpPrivateServiceConnectStatusConnectedEndpointArgs'] connected_endpoints: List of connected endpoints.
        :param _builtins.str created_at: When the Private Service Connect service was created.
        :param _builtins.str deleted_at: When the Private Service Connect service was deleted.
        :param Sequence[_builtins.str] dns_a_records: DNS A records for the service.
        :param _builtins.int kafka_api_node_base_port: Base port for Kafka API nodes.
        :param _builtins.int kafka_api_seed_port: Port for Kafka API seed brokers.
        :param _builtins.int redpanda_proxy_node_base_port: Base port for HTTP proxy nodes.
        :param _builtins.int redpanda_proxy_seed_port: Port for HTTP proxy.
        :param _builtins.int schema_registry_seed_port: Port for Schema Registry.
        :param _builtins.str seed_hostname: Hostname for the seed brokers.
        :param _builtins.str service_attachment: The service attachment identifier.
        """
        if connected_endpoints is not None:
            pulumi.set(__self__, "connected_endpoints", connected_endpoints)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if deleted_at is not None:
            pulumi.set(__self__, "deleted_at", deleted_at)
        if dns_a_records is not None:
            pulumi.set(__self__, "dns_a_records", dns_a_records)
        if kafka_api_node_base_port is not None:
            pulumi.set(__self__, "kafka_api_node_base_port", kafka_api_node_base_port)
        if kafka_api_seed_port is not None:
            pulumi.set(__self__, "kafka_api_seed_port", kafka_api_seed_port)
        if redpanda_proxy_node_base_port is not None:
            pulumi.set(__self__, "redpanda_proxy_node_base_port", redpanda_proxy_node_base_port)
        if redpanda_proxy_seed_port is not None:
            pulumi.set(__self__, "redpanda_proxy_seed_port", redpanda_proxy_seed_port)
        if schema_registry_seed_port is not None:
            pulumi.set(__self__, "schema_registry_seed_port", schema_registry_seed_port)
        if seed_hostname is not None:
            pulumi.set(__self__, "seed_hostname", seed_hostname)
        if service_attachment is not None:
            pulumi.set(__self__, "service_attachment", service_attachment)

    @_builtins.property
    @pulumi.getter(name="connectedEndpoints")
    def connected_endpoints(self) -> Optional[Sequence['outputs.ClusterGcpPrivateServiceConnectStatusConnectedEndpoint']]:
        """
        List of connected endpoints.
        """
        return pulumi.get(self, "connected_endpoints")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[_builtins.str]:
        """
        When the Private Service Connect service was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> Optional[_builtins.str]:
        """
        When the Private Service Connect service was deleted.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="dnsARecords")
    def dns_a_records(self) -> Optional[Sequence[_builtins.str]]:
        """
        DNS A records for the service.
        """
        return pulumi.get(self, "dns_a_records")

    @_builtins.property
    @pulumi.getter(name="kafkaApiNodeBasePort")
    def kafka_api_node_base_port(self) -> Optional[_builtins.int]:
        """
        Base port for Kafka API nodes.
        """
        return pulumi.get(self, "kafka_api_node_base_port")

    @_builtins.property
    @pulumi.getter(name="kafkaApiSeedPort")
    def kafka_api_seed_port(self) -> Optional[_builtins.int]:
        """
        Port for Kafka API seed brokers.
        """
        return pulumi.get(self, "kafka_api_seed_port")

    @_builtins.property
    @pulumi.getter(name="redpandaProxyNodeBasePort")
    def redpanda_proxy_node_base_port(self) -> Optional[_builtins.int]:
        """
        Base port for HTTP proxy nodes.
        """
        return pulumi.get(self, "redpanda_proxy_node_base_port")

    @_builtins.property
    @pulumi.getter(name="redpandaProxySeedPort")
    def redpanda_proxy_seed_port(self) -> Optional[_builtins.int]:
        """
        Port for HTTP proxy.
        """
        return pulumi.get(self, "redpanda_proxy_seed_port")

    @_builtins.property
    @pulumi.getter(name="schemaRegistrySeedPort")
    def schema_registry_seed_port(self) -> Optional[_builtins.int]:
        """
        Port for Schema Registry.
        """
        return pulumi.get(self, "schema_registry_seed_port")

    @_builtins.property
    @pulumi.getter(name="seedHostname")
    def seed_hostname(self) -> Optional[_builtins.str]:
        """
        Hostname for the seed brokers.
        """
        return pulumi.get(self, "seed_hostname")

    @_builtins.property
    @pulumi.getter(name="serviceAttachment")
    def service_attachment(self) -> Optional[_builtins.str]:
        """
        The service attachment identifier.
        """
        return pulumi.get(self, "service_attachment")


@pulumi.output_type
class ClusterGcpPrivateServiceConnectStatusConnectedEndpoint(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionId":
            suggest = "connection_id"
        elif key == "consumerNetwork":
            suggest = "consumer_network"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterGcpPrivateServiceConnectStatusConnectedEndpoint. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterGcpPrivateServiceConnectStatusConnectedEndpoint.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterGcpPrivateServiceConnectStatusConnectedEndpoint.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_id: Optional[_builtins.str] = None,
                 consumer_network: Optional[_builtins.str] = None,
                 endpoint: Optional[_builtins.str] = None,
                 status: Optional[_builtins.str] = None):
        """
        :param _builtins.str connection_id: The connection ID.
        :param _builtins.str consumer_network: The consumer network.
        :param _builtins.str endpoint: The endpoint address.
        :param _builtins.str status: Status of the endpoint connection.
        """
        if connection_id is not None:
            pulumi.set(__self__, "connection_id", connection_id)
        if consumer_network is not None:
            pulumi.set(__self__, "consumer_network", consumer_network)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> Optional[_builtins.str]:
        """
        The connection ID.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="consumerNetwork")
    def consumer_network(self) -> Optional[_builtins.str]:
        """
        The consumer network.
        """
        return pulumi.get(self, "consumer_network")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> Optional[_builtins.str]:
        """
        The endpoint address.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def status(self) -> Optional[_builtins.str]:
        """
        Status of the endpoint connection.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class ClusterHttpProxy(dict):
    def __init__(__self__, *,
                 mtls: Optional['outputs.ClusterHttpProxyMtls'] = None,
                 url: Optional[_builtins.str] = None):
        """
        :param 'ClusterHttpProxyMtlsArgs' mtls: mTLS configuration.
        :param _builtins.str url: The HTTP Proxy URL.
        """
        if mtls is not None:
            pulumi.set(__self__, "mtls", mtls)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def mtls(self) -> Optional['outputs.ClusterHttpProxyMtls']:
        """
        mTLS configuration.
        """
        return pulumi.get(self, "mtls")

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[_builtins.str]:
        """
        The HTTP Proxy URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ClusterHttpProxyMtls(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificatesPems":
            suggest = "ca_certificates_pems"
        elif key == "principalMappingRules":
            suggest = "principal_mapping_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterHttpProxyMtls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterHttpProxyMtls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterHttpProxyMtls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificates_pems: Optional[Sequence[_builtins.str]] = None,
                 enabled: Optional[_builtins.bool] = None,
                 principal_mapping_rules: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] ca_certificates_pems: CA certificate in PEM format.
        :param _builtins.bool enabled: Whether mTLS is enabled.
        :param Sequence[_builtins.str] principal_mapping_rules: Principal mapping rules for mTLS authentication. See the Redpanda documentation on configuring authentication.
        """
        if ca_certificates_pems is not None:
            pulumi.set(__self__, "ca_certificates_pems", ca_certificates_pems)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if principal_mapping_rules is not None:
            pulumi.set(__self__, "principal_mapping_rules", principal_mapping_rules)

    @_builtins.property
    @pulumi.getter(name="caCertificatesPems")
    def ca_certificates_pems(self) -> Optional[Sequence[_builtins.str]]:
        """
        CA certificate in PEM format.
        """
        return pulumi.get(self, "ca_certificates_pems")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        Whether mTLS is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="principalMappingRules")
    def principal_mapping_rules(self) -> Optional[Sequence[_builtins.str]]:
        """
        Principal mapping rules for mTLS authentication. See the Redpanda documentation on configuring authentication.
        """
        return pulumi.get(self, "principal_mapping_rules")


@pulumi.output_type
class ClusterKafkaApi(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "seedBrokers":
            suggest = "seed_brokers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterKafkaApi. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterKafkaApi.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterKafkaApi.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mtls: Optional['outputs.ClusterKafkaApiMtls'] = None,
                 seed_brokers: Optional[Sequence[_builtins.str]] = None):
        """
        :param 'ClusterKafkaApiMtlsArgs' mtls: mTLS configuration.
        :param Sequence[_builtins.str] seed_brokers: List of Kafka broker addresses.
        """
        if mtls is not None:
            pulumi.set(__self__, "mtls", mtls)
        if seed_brokers is not None:
            pulumi.set(__self__, "seed_brokers", seed_brokers)

    @_builtins.property
    @pulumi.getter
    def mtls(self) -> Optional['outputs.ClusterKafkaApiMtls']:
        """
        mTLS configuration.
        """
        return pulumi.get(self, "mtls")

    @_builtins.property
    @pulumi.getter(name="seedBrokers")
    def seed_brokers(self) -> Optional[Sequence[_builtins.str]]:
        """
        List of Kafka broker addresses.
        """
        return pulumi.get(self, "seed_brokers")


@pulumi.output_type
class ClusterKafkaApiMtls(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificatesPems":
            suggest = "ca_certificates_pems"
        elif key == "principalMappingRules":
            suggest = "principal_mapping_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterKafkaApiMtls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterKafkaApiMtls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterKafkaApiMtls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificates_pems: Optional[Sequence[_builtins.str]] = None,
                 enabled: Optional[_builtins.bool] = None,
                 principal_mapping_rules: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] ca_certificates_pems: CA certificate in PEM format.
        :param _builtins.bool enabled: Whether mTLS is enabled.
        :param Sequence[_builtins.str] principal_mapping_rules: Principal mapping rules for mTLS authentication. See the Redpanda documentation on configuring authentication.
        """
        if ca_certificates_pems is not None:
            pulumi.set(__self__, "ca_certificates_pems", ca_certificates_pems)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if principal_mapping_rules is not None:
            pulumi.set(__self__, "principal_mapping_rules", principal_mapping_rules)

    @_builtins.property
    @pulumi.getter(name="caCertificatesPems")
    def ca_certificates_pems(self) -> Optional[Sequence[_builtins.str]]:
        """
        CA certificate in PEM format.
        """
        return pulumi.get(self, "ca_certificates_pems")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        Whether mTLS is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="principalMappingRules")
    def principal_mapping_rules(self) -> Optional[Sequence[_builtins.str]]:
        """
        Principal mapping rules for mTLS authentication. See the Redpanda documentation on configuring authentication.
        """
        return pulumi.get(self, "principal_mapping_rules")


@pulumi.output_type
class ClusterKafkaConnect(dict):
    def __init__(__self__, *,
                 enabled: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool enabled: Whether Kafka Connect is enabled.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        Whether Kafka Connect is enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class ClusterMaintenanceWindowConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayHour":
            suggest = "day_hour"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterMaintenanceWindowConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterMaintenanceWindowConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterMaintenanceWindowConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 anytime: Optional[_builtins.bool] = None,
                 day_hour: Optional['outputs.ClusterMaintenanceWindowConfigDayHour'] = None,
                 unspecified: Optional[_builtins.bool] = None):
        """
        :param _builtins.bool anytime: If true, maintenance can occur at any time.
        :param _builtins.bool unspecified: If true, maintenance window is unspecified.
        """
        if anytime is not None:
            pulumi.set(__self__, "anytime", anytime)
        if day_hour is not None:
            pulumi.set(__self__, "day_hour", day_hour)
        if unspecified is not None:
            pulumi.set(__self__, "unspecified", unspecified)

    @_builtins.property
    @pulumi.getter
    def anytime(self) -> Optional[_builtins.bool]:
        """
        If true, maintenance can occur at any time.
        """
        return pulumi.get(self, "anytime")

    @_builtins.property
    @pulumi.getter(name="dayHour")
    def day_hour(self) -> Optional['outputs.ClusterMaintenanceWindowConfigDayHour']:
        return pulumi.get(self, "day_hour")

    @_builtins.property
    @pulumi.getter
    def unspecified(self) -> Optional[_builtins.bool]:
        """
        If true, maintenance window is unspecified.
        """
        return pulumi.get(self, "unspecified")


@pulumi.output_type
class ClusterMaintenanceWindowConfigDayHour(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dayOfWeek":
            suggest = "day_of_week"
        elif key == "hourOfDay":
            suggest = "hour_of_day"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterMaintenanceWindowConfigDayHour. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterMaintenanceWindowConfigDayHour.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterMaintenanceWindowConfigDayHour.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 day_of_week: Optional[_builtins.str] = None,
                 hour_of_day: Optional[_builtins.int] = None):
        """
        :param _builtins.str day_of_week: Day of week.
        :param _builtins.int hour_of_day: Hour of day.
        """
        if day_of_week is not None:
            pulumi.set(__self__, "day_of_week", day_of_week)
        if hour_of_day is not None:
            pulumi.set(__self__, "hour_of_day", hour_of_day)

    @_builtins.property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> Optional[_builtins.str]:
        """
        Day of week.
        """
        return pulumi.get(self, "day_of_week")

    @_builtins.property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> Optional[_builtins.int]:
        """
        Hour of day.
        """
        return pulumi.get(self, "hour_of_day")


@pulumi.output_type
class ClusterPrometheus(dict):
    def __init__(__self__, *,
                 url: Optional[_builtins.str] = None):
        """
        :param _builtins.str url: The Prometheus metrics endpoint URL.
        """
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[_builtins.str]:
        """
        The Prometheus metrics endpoint URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ClusterRedpandaConsole(dict):
    def __init__(__self__, *,
                 url: Optional[_builtins.str] = None):
        """
        :param _builtins.str url: The Redpanda Console URL.
        """
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[_builtins.str]:
        """
        The Redpanda Console URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ClusterSchemaRegistry(dict):
    def __init__(__self__, *,
                 mtls: Optional['outputs.ClusterSchemaRegistryMtls'] = None,
                 url: Optional[_builtins.str] = None):
        """
        :param 'ClusterSchemaRegistryMtlsArgs' mtls: mTLS configuration.
        :param _builtins.str url: The Schema Registry URL.
        """
        if mtls is not None:
            pulumi.set(__self__, "mtls", mtls)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def mtls(self) -> Optional['outputs.ClusterSchemaRegistryMtls']:
        """
        mTLS configuration.
        """
        return pulumi.get(self, "mtls")

    @_builtins.property
    @pulumi.getter
    def url(self) -> Optional[_builtins.str]:
        """
        The Schema Registry URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class ClusterSchemaRegistryMtls(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificatesPems":
            suggest = "ca_certificates_pems"
        elif key == "principalMappingRules":
            suggest = "principal_mapping_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ClusterSchemaRegistryMtls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ClusterSchemaRegistryMtls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ClusterSchemaRegistryMtls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificates_pems: Optional[Sequence[_builtins.str]] = None,
                 enabled: Optional[_builtins.bool] = None,
                 principal_mapping_rules: Optional[Sequence[_builtins.str]] = None):
        """
        :param Sequence[_builtins.str] ca_certificates_pems: CA certificate in PEM format.
        :param _builtins.bool enabled: Whether mTLS is enabled.
        :param Sequence[_builtins.str] principal_mapping_rules: Principal mapping rules for mTLS authentication. See the Redpanda documentation on configuring authentication.
        """
        if ca_certificates_pems is not None:
            pulumi.set(__self__, "ca_certificates_pems", ca_certificates_pems)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if principal_mapping_rules is not None:
            pulumi.set(__self__, "principal_mapping_rules", principal_mapping_rules)

    @_builtins.property
    @pulumi.getter(name="caCertificatesPems")
    def ca_certificates_pems(self) -> Optional[Sequence[_builtins.str]]:
        """
        CA certificate in PEM format.
        """
        return pulumi.get(self, "ca_certificates_pems")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> Optional[_builtins.bool]:
        """
        Whether mTLS is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="principalMappingRules")
    def principal_mapping_rules(self) -> Optional[Sequence[_builtins.str]]:
        """
        Principal mapping rules for mTLS authentication. See the Redpanda documentation on configuring authentication.
        """
        return pulumi.get(self, "principal_mapping_rules")


@pulumi.output_type
class ClusterStateDescription(dict):
    def __init__(__self__, *,
                 code: Optional[_builtins.int] = None,
                 message: Optional[_builtins.str] = None):
        """
        :param _builtins.int code: Error code if cluster is in error state.
        :param _builtins.str message: Detailed error message if cluster is in error state.
        """
        if code is not None:
            pulumi.set(__self__, "code", code)
        if message is not None:
            pulumi.set(__self__, "message", message)

    @_builtins.property
    @pulumi.getter
    def code(self) -> Optional[_builtins.int]:
        """
        Error code if cluster is in error state.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def message(self) -> Optional[_builtins.str]:
        """
        Detailed error message if cluster is in error state.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class NetworkCustomerManagedResources(dict):
    def __init__(__self__, *,
                 aws: Optional['outputs.NetworkCustomerManagedResourcesAws'] = None,
                 gcp: Optional['outputs.NetworkCustomerManagedResourcesGcp'] = None):
        if aws is not None:
            pulumi.set(__self__, "aws", aws)
        if gcp is not None:
            pulumi.set(__self__, "gcp", gcp)

    @_builtins.property
    @pulumi.getter
    def aws(self) -> Optional['outputs.NetworkCustomerManagedResourcesAws']:
        return pulumi.get(self, "aws")

    @_builtins.property
    @pulumi.getter
    def gcp(self) -> Optional['outputs.NetworkCustomerManagedResourcesGcp']:
        return pulumi.get(self, "gcp")


@pulumi.output_type
class NetworkCustomerManagedResourcesAws(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dynamodbTable":
            suggest = "dynamodb_table"
        elif key == "managementBucket":
            suggest = "management_bucket"
        elif key == "privateSubnets":
            suggest = "private_subnets"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkCustomerManagedResourcesAws. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkCustomerManagedResourcesAws.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkCustomerManagedResourcesAws.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dynamodb_table: 'outputs.NetworkCustomerManagedResourcesAwsDynamodbTable',
                 management_bucket: 'outputs.NetworkCustomerManagedResourcesAwsManagementBucket',
                 private_subnets: 'outputs.NetworkCustomerManagedResourcesAwsPrivateSubnets',
                 vpc: 'outputs.NetworkCustomerManagedResourcesAwsVpc'):
        pulumi.set(__self__, "dynamodb_table", dynamodb_table)
        pulumi.set(__self__, "management_bucket", management_bucket)
        pulumi.set(__self__, "private_subnets", private_subnets)
        pulumi.set(__self__, "vpc", vpc)

    @_builtins.property
    @pulumi.getter(name="dynamodbTable")
    def dynamodb_table(self) -> 'outputs.NetworkCustomerManagedResourcesAwsDynamodbTable':
        return pulumi.get(self, "dynamodb_table")

    @_builtins.property
    @pulumi.getter(name="managementBucket")
    def management_bucket(self) -> 'outputs.NetworkCustomerManagedResourcesAwsManagementBucket':
        return pulumi.get(self, "management_bucket")

    @_builtins.property
    @pulumi.getter(name="privateSubnets")
    def private_subnets(self) -> 'outputs.NetworkCustomerManagedResourcesAwsPrivateSubnets':
        return pulumi.get(self, "private_subnets")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> 'outputs.NetworkCustomerManagedResourcesAwsVpc':
        return pulumi.get(self, "vpc")


@pulumi.output_type
class NetworkCustomerManagedResourcesAwsDynamodbTable(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: AWS DynamoDB table identifier
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        AWS DynamoDB table identifier
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class NetworkCustomerManagedResourcesAwsManagementBucket(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: AWS storage bucket identifier
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        AWS storage bucket identifier
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class NetworkCustomerManagedResourcesAwsPrivateSubnets(dict):
    def __init__(__self__, *,
                 arns: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] arns: AWS private subnet identifiers
        """
        pulumi.set(__self__, "arns", arns)

    @_builtins.property
    @pulumi.getter
    def arns(self) -> Sequence[_builtins.str]:
        """
        AWS private subnet identifiers
        """
        return pulumi.get(self, "arns")


@pulumi.output_type
class NetworkCustomerManagedResourcesAwsVpc(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: AWS VPC identifier
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        AWS VPC identifier
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class NetworkCustomerManagedResourcesGcp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "managementBucket":
            suggest = "management_bucket"
        elif key == "networkName":
            suggest = "network_name"
        elif key == "networkProjectId":
            suggest = "network_project_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in NetworkCustomerManagedResourcesGcp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        NetworkCustomerManagedResourcesGcp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        NetworkCustomerManagedResourcesGcp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 management_bucket: 'outputs.NetworkCustomerManagedResourcesGcpManagementBucket',
                 network_name: _builtins.str,
                 network_project_id: _builtins.str):
        """
        :param _builtins.str network_name: Name of user-created network where the Redpanda cluster is deployed
        :param _builtins.str network_project_id: GCP project ID where the network is created
        """
        pulumi.set(__self__, "management_bucket", management_bucket)
        pulumi.set(__self__, "network_name", network_name)
        pulumi.set(__self__, "network_project_id", network_project_id)

    @_builtins.property
    @pulumi.getter(name="managementBucket")
    def management_bucket(self) -> 'outputs.NetworkCustomerManagedResourcesGcpManagementBucket':
        return pulumi.get(self, "management_bucket")

    @_builtins.property
    @pulumi.getter(name="networkName")
    def network_name(self) -> _builtins.str:
        """
        Name of user-created network where the Redpanda cluster is deployed
        """
        return pulumi.get(self, "network_name")

    @_builtins.property
    @pulumi.getter(name="networkProjectId")
    def network_project_id(self) -> _builtins.str:
        """
        GCP project ID where the network is created
        """
        return pulumi.get(self, "network_project_id")


@pulumi.output_type
class NetworkCustomerManagedResourcesGcpManagementBucket(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: GCP storage bucket name for storing the state of Redpanda cluster deployment
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        GCP storage bucket name for storing the state of Redpanda cluster deployment
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterAwsPrivateLinkResult(dict):
    def __init__(__self__, *,
                 allowed_principals: Sequence[_builtins.str],
                 connect_console: _builtins.bool,
                 enabled: _builtins.bool,
                 status: 'outputs.GetClusterAwsPrivateLinkStatusResult'):
        """
        :param Sequence[_builtins.str] allowed_principals: The ARN of the principals that can access the Redpanda AWS PrivateLink Endpoint Service.
        :param _builtins.bool connect_console: Whether Console is connected via PrivateLink.
        :param _builtins.bool enabled: Whether AWS PrivateLink is enabled.
        :param 'GetClusterAwsPrivateLinkStatusArgs' status: Current status of the PrivateLink configuration.
        """
        pulumi.set(__self__, "allowed_principals", allowed_principals)
        pulumi.set(__self__, "connect_console", connect_console)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="allowedPrincipals")
    def allowed_principals(self) -> Sequence[_builtins.str]:
        """
        The ARN of the principals that can access the Redpanda AWS PrivateLink Endpoint Service.
        """
        return pulumi.get(self, "allowed_principals")

    @_builtins.property
    @pulumi.getter(name="connectConsole")
    def connect_console(self) -> _builtins.bool:
        """
        Whether Console is connected via PrivateLink.
        """
        return pulumi.get(self, "connect_console")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether AWS PrivateLink is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def status(self) -> 'outputs.GetClusterAwsPrivateLinkStatusResult':
        """
        Current status of the PrivateLink configuration.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetClusterAwsPrivateLinkStatusResult(dict):
    def __init__(__self__, *,
                 console_port: _builtins.int,
                 created_at: _builtins.str,
                 deleted_at: _builtins.str,
                 kafka_api_node_base_port: _builtins.int,
                 kafka_api_seed_port: _builtins.int,
                 redpanda_proxy_node_base_port: _builtins.int,
                 redpanda_proxy_seed_port: _builtins.int,
                 schema_registry_seed_port: _builtins.int,
                 service_id: _builtins.str,
                 service_name: _builtins.str,
                 service_state: _builtins.str,
                 vpc_endpoint_connections: Sequence['outputs.GetClusterAwsPrivateLinkStatusVpcEndpointConnectionResult']):
        """
        :param _builtins.int console_port: Port for Redpanda Console.
        :param _builtins.str created_at: When the PrivateLink service was created.
        :param _builtins.str deleted_at: When the PrivateLink service was deleted.
        :param _builtins.int kafka_api_node_base_port: Base port for Kafka API nodes.
        :param _builtins.int kafka_api_seed_port: Port for Kafka API seed brokers.
        :param _builtins.int redpanda_proxy_node_base_port: Base port for HTTP proxy nodes.
        :param _builtins.int redpanda_proxy_seed_port: Port for HTTP proxy.
        :param _builtins.int schema_registry_seed_port: Port for Schema Registry.
        :param _builtins.str service_id: The PrivateLink service ID.
        :param _builtins.str service_name: The PrivateLink service name.
        :param _builtins.str service_state: Current state of the PrivateLink service.
        :param Sequence['GetClusterAwsPrivateLinkStatusVpcEndpointConnectionArgs'] vpc_endpoint_connections: List of VPC endpoint connections.
        """
        pulumi.set(__self__, "console_port", console_port)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "deleted_at", deleted_at)
        pulumi.set(__self__, "kafka_api_node_base_port", kafka_api_node_base_port)
        pulumi.set(__self__, "kafka_api_seed_port", kafka_api_seed_port)
        pulumi.set(__self__, "redpanda_proxy_node_base_port", redpanda_proxy_node_base_port)
        pulumi.set(__self__, "redpanda_proxy_seed_port", redpanda_proxy_seed_port)
        pulumi.set(__self__, "schema_registry_seed_port", schema_registry_seed_port)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)
        pulumi.set(__self__, "service_state", service_state)
        pulumi.set(__self__, "vpc_endpoint_connections", vpc_endpoint_connections)

    @_builtins.property
    @pulumi.getter(name="consolePort")
    def console_port(self) -> _builtins.int:
        """
        Port for Redpanda Console.
        """
        return pulumi.get(self, "console_port")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        When the PrivateLink service was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> _builtins.str:
        """
        When the PrivateLink service was deleted.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="kafkaApiNodeBasePort")
    def kafka_api_node_base_port(self) -> _builtins.int:
        """
        Base port for Kafka API nodes.
        """
        return pulumi.get(self, "kafka_api_node_base_port")

    @_builtins.property
    @pulumi.getter(name="kafkaApiSeedPort")
    def kafka_api_seed_port(self) -> _builtins.int:
        """
        Port for Kafka API seed brokers.
        """
        return pulumi.get(self, "kafka_api_seed_port")

    @_builtins.property
    @pulumi.getter(name="redpandaProxyNodeBasePort")
    def redpanda_proxy_node_base_port(self) -> _builtins.int:
        """
        Base port for HTTP proxy nodes.
        """
        return pulumi.get(self, "redpanda_proxy_node_base_port")

    @_builtins.property
    @pulumi.getter(name="redpandaProxySeedPort")
    def redpanda_proxy_seed_port(self) -> _builtins.int:
        """
        Port for HTTP proxy.
        """
        return pulumi.get(self, "redpanda_proxy_seed_port")

    @_builtins.property
    @pulumi.getter(name="schemaRegistrySeedPort")
    def schema_registry_seed_port(self) -> _builtins.int:
        """
        Port for Schema Registry.
        """
        return pulumi.get(self, "schema_registry_seed_port")

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> _builtins.str:
        """
        The PrivateLink service ID.
        """
        return pulumi.get(self, "service_id")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        The PrivateLink service name.
        """
        return pulumi.get(self, "service_name")

    @_builtins.property
    @pulumi.getter(name="serviceState")
    def service_state(self) -> _builtins.str:
        """
        Current state of the PrivateLink service.
        """
        return pulumi.get(self, "service_state")

    @_builtins.property
    @pulumi.getter(name="vpcEndpointConnections")
    def vpc_endpoint_connections(self) -> Sequence['outputs.GetClusterAwsPrivateLinkStatusVpcEndpointConnectionResult']:
        """
        List of VPC endpoint connections.
        """
        return pulumi.get(self, "vpc_endpoint_connections")


@pulumi.output_type
class GetClusterAwsPrivateLinkStatusVpcEndpointConnectionResult(dict):
    def __init__(__self__, *,
                 connection_id: _builtins.str,
                 created_at: _builtins.str,
                 dns_entries: Sequence['outputs.GetClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntryResult'],
                 id: _builtins.str,
                 load_balancer_arns: Sequence[_builtins.str],
                 owner: _builtins.str,
                 state: _builtins.str):
        """
        :param _builtins.str connection_id: The connection ID.
        :param _builtins.str created_at: When the endpoint connection was created.
        :param Sequence['GetClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntryArgs'] dns_entries: DNS entries for the endpoint.
        :param _builtins.str id: The endpoint connection ID.
        :param Sequence[_builtins.str] load_balancer_arns: ARNs of associated load balancers.
        :param _builtins.str owner: Owner of the endpoint connection.
        :param _builtins.str state: State of the endpoint connection.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "dns_entries", dns_entries)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "load_balancer_arns", load_balancer_arns)
        pulumi.set(__self__, "owner", owner)
        pulumi.set(__self__, "state", state)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.str:
        """
        The connection ID.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        When the endpoint connection was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="dnsEntries")
    def dns_entries(self) -> Sequence['outputs.GetClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntryResult']:
        """
        DNS entries for the endpoint.
        """
        return pulumi.get(self, "dns_entries")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        The endpoint connection ID.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="loadBalancerArns")
    def load_balancer_arns(self) -> Sequence[_builtins.str]:
        """
        ARNs of associated load balancers.
        """
        return pulumi.get(self, "load_balancer_arns")

    @_builtins.property
    @pulumi.getter
    def owner(self) -> _builtins.str:
        """
        Owner of the endpoint connection.
        """
        return pulumi.get(self, "owner")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        State of the endpoint connection.
        """
        return pulumi.get(self, "state")


@pulumi.output_type
class GetClusterAwsPrivateLinkStatusVpcEndpointConnectionDnsEntryResult(dict):
    def __init__(__self__, *,
                 dns_name: _builtins.str,
                 hosted_zone_id: _builtins.str):
        """
        :param _builtins.str dns_name: The DNS name.
        :param _builtins.str hosted_zone_id: The hosted zone ID.
        """
        pulumi.set(__self__, "dns_name", dns_name)
        pulumi.set(__self__, "hosted_zone_id", hosted_zone_id)

    @_builtins.property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> _builtins.str:
        """
        The DNS name.
        """
        return pulumi.get(self, "dns_name")

    @_builtins.property
    @pulumi.getter(name="hostedZoneId")
    def hosted_zone_id(self) -> _builtins.str:
        """
        The hosted zone ID.
        """
        return pulumi.get(self, "hosted_zone_id")


@pulumi.output_type
class GetClusterAzurePrivateLinkResult(dict):
    def __init__(__self__, *,
                 allowed_subscriptions: Sequence[_builtins.str],
                 connect_console: _builtins.bool,
                 enabled: _builtins.bool,
                 status: 'outputs.GetClusterAzurePrivateLinkStatusResult'):
        """
        :param Sequence[_builtins.str] allowed_subscriptions: The subscriptions that can access the Redpanda Azure PrivateLink Endpoint Service.
        :param _builtins.bool connect_console: Whether Console is connected in Redpanda Azure Private Link Service.
        :param _builtins.bool enabled: Whether Redpanda Azure Private Link Endpoint Service is enabled.
        :param 'GetClusterAzurePrivateLinkStatusArgs' status: Current status of the Private Link configuration.
        """
        pulumi.set(__self__, "allowed_subscriptions", allowed_subscriptions)
        pulumi.set(__self__, "connect_console", connect_console)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="allowedSubscriptions")
    def allowed_subscriptions(self) -> Sequence[_builtins.str]:
        """
        The subscriptions that can access the Redpanda Azure PrivateLink Endpoint Service.
        """
        return pulumi.get(self, "allowed_subscriptions")

    @_builtins.property
    @pulumi.getter(name="connectConsole")
    def connect_console(self) -> _builtins.bool:
        """
        Whether Console is connected in Redpanda Azure Private Link Service.
        """
        return pulumi.get(self, "connect_console")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether Redpanda Azure Private Link Endpoint Service is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter
    def status(self) -> 'outputs.GetClusterAzurePrivateLinkStatusResult':
        """
        Current status of the Private Link configuration.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetClusterAzurePrivateLinkStatusResult(dict):
    def __init__(__self__, *,
                 approved_subscriptions: Sequence[_builtins.str],
                 console_port: _builtins.int,
                 created_at: _builtins.str,
                 deleted_at: _builtins.str,
                 dns_a_record: _builtins.str,
                 kafka_api_node_base_port: _builtins.int,
                 kafka_api_seed_port: _builtins.int,
                 private_endpoint_connections: Sequence['outputs.GetClusterAzurePrivateLinkStatusPrivateEndpointConnectionResult'],
                 redpanda_proxy_node_base_port: _builtins.int,
                 redpanda_proxy_seed_port: _builtins.int,
                 schema_registry_seed_port: _builtins.int,
                 service_id: _builtins.str,
                 service_name: _builtins.str):
        """
        :param Sequence[_builtins.str] approved_subscriptions: List of approved Azure subscription IDs.
        :param _builtins.int console_port: Port for Redpanda Console.
        :param _builtins.str created_at: When the Private Link service was created.
        :param _builtins.str deleted_at: When the Private Link service was deleted.
        :param _builtins.str dns_a_record: DNS A record for the service.
        :param _builtins.int kafka_api_node_base_port: Base port for Kafka API nodes.
        :param _builtins.int kafka_api_seed_port: Port for Kafka API seed brokers.
        :param Sequence['GetClusterAzurePrivateLinkStatusPrivateEndpointConnectionArgs'] private_endpoint_connections: List of private endpoint connections.
        :param _builtins.int redpanda_proxy_node_base_port: Base port for HTTP proxy nodes.
        :param _builtins.int redpanda_proxy_seed_port: Port for HTTP proxy.
        :param _builtins.int schema_registry_seed_port: Port for Schema Registry.
        :param _builtins.str service_id: The Private Link service ID.
        :param _builtins.str service_name: The Private Link service name.
        """
        pulumi.set(__self__, "approved_subscriptions", approved_subscriptions)
        pulumi.set(__self__, "console_port", console_port)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "deleted_at", deleted_at)
        pulumi.set(__self__, "dns_a_record", dns_a_record)
        pulumi.set(__self__, "kafka_api_node_base_port", kafka_api_node_base_port)
        pulumi.set(__self__, "kafka_api_seed_port", kafka_api_seed_port)
        pulumi.set(__self__, "private_endpoint_connections", private_endpoint_connections)
        pulumi.set(__self__, "redpanda_proxy_node_base_port", redpanda_proxy_node_base_port)
        pulumi.set(__self__, "redpanda_proxy_seed_port", redpanda_proxy_seed_port)
        pulumi.set(__self__, "schema_registry_seed_port", schema_registry_seed_port)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)

    @_builtins.property
    @pulumi.getter(name="approvedSubscriptions")
    def approved_subscriptions(self) -> Sequence[_builtins.str]:
        """
        List of approved Azure subscription IDs.
        """
        return pulumi.get(self, "approved_subscriptions")

    @_builtins.property
    @pulumi.getter(name="consolePort")
    def console_port(self) -> _builtins.int:
        """
        Port for Redpanda Console.
        """
        return pulumi.get(self, "console_port")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        When the Private Link service was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> _builtins.str:
        """
        When the Private Link service was deleted.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="dnsARecord")
    def dns_a_record(self) -> _builtins.str:
        """
        DNS A record for the service.
        """
        return pulumi.get(self, "dns_a_record")

    @_builtins.property
    @pulumi.getter(name="kafkaApiNodeBasePort")
    def kafka_api_node_base_port(self) -> _builtins.int:
        """
        Base port for Kafka API nodes.
        """
        return pulumi.get(self, "kafka_api_node_base_port")

    @_builtins.property
    @pulumi.getter(name="kafkaApiSeedPort")
    def kafka_api_seed_port(self) -> _builtins.int:
        """
        Port for Kafka API seed brokers.
        """
        return pulumi.get(self, "kafka_api_seed_port")

    @_builtins.property
    @pulumi.getter(name="privateEndpointConnections")
    def private_endpoint_connections(self) -> Sequence['outputs.GetClusterAzurePrivateLinkStatusPrivateEndpointConnectionResult']:
        """
        List of private endpoint connections.
        """
        return pulumi.get(self, "private_endpoint_connections")

    @_builtins.property
    @pulumi.getter(name="redpandaProxyNodeBasePort")
    def redpanda_proxy_node_base_port(self) -> _builtins.int:
        """
        Base port for HTTP proxy nodes.
        """
        return pulumi.get(self, "redpanda_proxy_node_base_port")

    @_builtins.property
    @pulumi.getter(name="redpandaProxySeedPort")
    def redpanda_proxy_seed_port(self) -> _builtins.int:
        """
        Port for HTTP proxy.
        """
        return pulumi.get(self, "redpanda_proxy_seed_port")

    @_builtins.property
    @pulumi.getter(name="schemaRegistrySeedPort")
    def schema_registry_seed_port(self) -> _builtins.int:
        """
        Port for Schema Registry.
        """
        return pulumi.get(self, "schema_registry_seed_port")

    @_builtins.property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> _builtins.str:
        """
        The Private Link service ID.
        """
        return pulumi.get(self, "service_id")

    @_builtins.property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> _builtins.str:
        """
        The Private Link service name.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetClusterAzurePrivateLinkStatusPrivateEndpointConnectionResult(dict):
    def __init__(__self__, *,
                 connection_id: _builtins.str,
                 connection_name: _builtins.str,
                 created_at: _builtins.str,
                 private_endpoint_id: _builtins.str,
                 private_endpoint_name: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str connection_id: ID of the connection.
        :param _builtins.str connection_name: Name of the connection.
        :param _builtins.str created_at: When the endpoint connection was created.
        :param _builtins.str private_endpoint_id: ID of the private endpoint.
        :param _builtins.str private_endpoint_name: Name of the private endpoint.
        :param _builtins.str status: Status of the endpoint connection.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "connection_name", connection_name)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "private_endpoint_id", private_endpoint_id)
        pulumi.set(__self__, "private_endpoint_name", private_endpoint_name)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.str:
        """
        ID of the connection.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="connectionName")
    def connection_name(self) -> _builtins.str:
        """
        Name of the connection.
        """
        return pulumi.get(self, "connection_name")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        When the endpoint connection was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="privateEndpointId")
    def private_endpoint_id(self) -> _builtins.str:
        """
        ID of the private endpoint.
        """
        return pulumi.get(self, "private_endpoint_id")

    @_builtins.property
    @pulumi.getter(name="privateEndpointName")
    def private_endpoint_name(self) -> _builtins.str:
        """
        Name of the private endpoint.
        """
        return pulumi.get(self, "private_endpoint_name")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status of the endpoint connection.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetClusterCustomerManagedResourcesResult(dict):
    def __init__(__self__, *,
                 aws: 'outputs.GetClusterCustomerManagedResourcesAwsResult',
                 gcp: 'outputs.GetClusterCustomerManagedResourcesGcpResult'):
        pulumi.set(__self__, "aws", aws)
        pulumi.set(__self__, "gcp", gcp)

    @_builtins.property
    @pulumi.getter
    def aws(self) -> 'outputs.GetClusterCustomerManagedResourcesAwsResult':
        return pulumi.get(self, "aws")

    @_builtins.property
    @pulumi.getter
    def gcp(self) -> 'outputs.GetClusterCustomerManagedResourcesGcpResult':
        return pulumi.get(self, "gcp")


@pulumi.output_type
class GetClusterCustomerManagedResourcesAwsResult(dict):
    def __init__(__self__, *,
                 agent_instance_profile: 'outputs.GetClusterCustomerManagedResourcesAwsAgentInstanceProfileResult',
                 cloud_storage_bucket: 'outputs.GetClusterCustomerManagedResourcesAwsCloudStorageBucketResult',
                 cluster_security_group: 'outputs.GetClusterCustomerManagedResourcesAwsClusterSecurityGroupResult',
                 connectors_node_group_instance_profile: 'outputs.GetClusterCustomerManagedResourcesAwsConnectorsNodeGroupInstanceProfileResult',
                 connectors_security_group: 'outputs.GetClusterCustomerManagedResourcesAwsConnectorsSecurityGroupResult',
                 k8s_cluster_role: 'outputs.GetClusterCustomerManagedResourcesAwsK8sClusterRoleResult',
                 node_security_group: 'outputs.GetClusterCustomerManagedResourcesAwsNodeSecurityGroupResult',
                 permissions_boundary_policy: 'outputs.GetClusterCustomerManagedResourcesAwsPermissionsBoundaryPolicyResult',
                 redpanda_agent_security_group: 'outputs.GetClusterCustomerManagedResourcesAwsRedpandaAgentSecurityGroupResult',
                 redpanda_node_group_instance_profile: 'outputs.GetClusterCustomerManagedResourcesAwsRedpandaNodeGroupInstanceProfileResult',
                 redpanda_node_group_security_group: 'outputs.GetClusterCustomerManagedResourcesAwsRedpandaNodeGroupSecurityGroupResult',
                 utility_node_group_instance_profile: 'outputs.GetClusterCustomerManagedResourcesAwsUtilityNodeGroupInstanceProfileResult',
                 utility_security_group: 'outputs.GetClusterCustomerManagedResourcesAwsUtilitySecurityGroupResult'):
        pulumi.set(__self__, "agent_instance_profile", agent_instance_profile)
        pulumi.set(__self__, "cloud_storage_bucket", cloud_storage_bucket)
        pulumi.set(__self__, "cluster_security_group", cluster_security_group)
        pulumi.set(__self__, "connectors_node_group_instance_profile", connectors_node_group_instance_profile)
        pulumi.set(__self__, "connectors_security_group", connectors_security_group)
        pulumi.set(__self__, "k8s_cluster_role", k8s_cluster_role)
        pulumi.set(__self__, "node_security_group", node_security_group)
        pulumi.set(__self__, "permissions_boundary_policy", permissions_boundary_policy)
        pulumi.set(__self__, "redpanda_agent_security_group", redpanda_agent_security_group)
        pulumi.set(__self__, "redpanda_node_group_instance_profile", redpanda_node_group_instance_profile)
        pulumi.set(__self__, "redpanda_node_group_security_group", redpanda_node_group_security_group)
        pulumi.set(__self__, "utility_node_group_instance_profile", utility_node_group_instance_profile)
        pulumi.set(__self__, "utility_security_group", utility_security_group)

    @_builtins.property
    @pulumi.getter(name="agentInstanceProfile")
    def agent_instance_profile(self) -> 'outputs.GetClusterCustomerManagedResourcesAwsAgentInstanceProfileResult':
        return pulumi.get(self, "agent_instance_profile")

    @_builtins.property
    @pulumi.getter(name="cloudStorageBucket")
    def cloud_storage_bucket(self) -> 'outputs.GetClusterCustomerManagedResourcesAwsCloudStorageBucketResult':
        return pulumi.get(self, "cloud_storage_bucket")

    @_builtins.property
    @pulumi.getter(name="clusterSecurityGroup")
    def cluster_security_group(self) -> 'outputs.GetClusterCustomerManagedResourcesAwsClusterSecurityGroupResult':
        return pulumi.get(self, "cluster_security_group")

    @_builtins.property
    @pulumi.getter(name="connectorsNodeGroupInstanceProfile")
    def connectors_node_group_instance_profile(self) -> 'outputs.GetClusterCustomerManagedResourcesAwsConnectorsNodeGroupInstanceProfileResult':
        return pulumi.get(self, "connectors_node_group_instance_profile")

    @_builtins.property
    @pulumi.getter(name="connectorsSecurityGroup")
    def connectors_security_group(self) -> 'outputs.GetClusterCustomerManagedResourcesAwsConnectorsSecurityGroupResult':
        return pulumi.get(self, "connectors_security_group")

    @_builtins.property
    @pulumi.getter(name="k8sClusterRole")
    def k8s_cluster_role(self) -> 'outputs.GetClusterCustomerManagedResourcesAwsK8sClusterRoleResult':
        return pulumi.get(self, "k8s_cluster_role")

    @_builtins.property
    @pulumi.getter(name="nodeSecurityGroup")
    def node_security_group(self) -> 'outputs.GetClusterCustomerManagedResourcesAwsNodeSecurityGroupResult':
        return pulumi.get(self, "node_security_group")

    @_builtins.property
    @pulumi.getter(name="permissionsBoundaryPolicy")
    def permissions_boundary_policy(self) -> 'outputs.GetClusterCustomerManagedResourcesAwsPermissionsBoundaryPolicyResult':
        return pulumi.get(self, "permissions_boundary_policy")

    @_builtins.property
    @pulumi.getter(name="redpandaAgentSecurityGroup")
    def redpanda_agent_security_group(self) -> 'outputs.GetClusterCustomerManagedResourcesAwsRedpandaAgentSecurityGroupResult':
        return pulumi.get(self, "redpanda_agent_security_group")

    @_builtins.property
    @pulumi.getter(name="redpandaNodeGroupInstanceProfile")
    def redpanda_node_group_instance_profile(self) -> 'outputs.GetClusterCustomerManagedResourcesAwsRedpandaNodeGroupInstanceProfileResult':
        return pulumi.get(self, "redpanda_node_group_instance_profile")

    @_builtins.property
    @pulumi.getter(name="redpandaNodeGroupSecurityGroup")
    def redpanda_node_group_security_group(self) -> 'outputs.GetClusterCustomerManagedResourcesAwsRedpandaNodeGroupSecurityGroupResult':
        return pulumi.get(self, "redpanda_node_group_security_group")

    @_builtins.property
    @pulumi.getter(name="utilityNodeGroupInstanceProfile")
    def utility_node_group_instance_profile(self) -> 'outputs.GetClusterCustomerManagedResourcesAwsUtilityNodeGroupInstanceProfileResult':
        return pulumi.get(self, "utility_node_group_instance_profile")

    @_builtins.property
    @pulumi.getter(name="utilitySecurityGroup")
    def utility_security_group(self) -> 'outputs.GetClusterCustomerManagedResourcesAwsUtilitySecurityGroupResult':
        return pulumi.get(self, "utility_security_group")


@pulumi.output_type
class GetClusterCustomerManagedResourcesAwsAgentInstanceProfileResult(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the agent instance profile
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the agent instance profile
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class GetClusterCustomerManagedResourcesAwsCloudStorageBucketResult(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the cloud storage bucket
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the cloud storage bucket
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class GetClusterCustomerManagedResourcesAwsClusterSecurityGroupResult(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the cluster security group
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the cluster security group
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class GetClusterCustomerManagedResourcesAwsConnectorsNodeGroupInstanceProfileResult(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the connectors node group instance profile
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the connectors node group instance profile
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class GetClusterCustomerManagedResourcesAwsConnectorsSecurityGroupResult(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the connectors security group
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the connectors security group
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class GetClusterCustomerManagedResourcesAwsK8sClusterRoleResult(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the Kubernetes cluster role
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the Kubernetes cluster role
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class GetClusterCustomerManagedResourcesAwsNodeSecurityGroupResult(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the node security group
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the node security group
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class GetClusterCustomerManagedResourcesAwsPermissionsBoundaryPolicyResult(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the permissions boundary policy
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the permissions boundary policy
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class GetClusterCustomerManagedResourcesAwsRedpandaAgentSecurityGroupResult(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the redpanda agent security group
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the redpanda agent security group
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class GetClusterCustomerManagedResourcesAwsRedpandaNodeGroupInstanceProfileResult(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the redpanda node group instance profile
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the redpanda node group instance profile
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class GetClusterCustomerManagedResourcesAwsRedpandaNodeGroupSecurityGroupResult(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the redpanda node group security group
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the redpanda node group security group
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class GetClusterCustomerManagedResourcesAwsUtilityNodeGroupInstanceProfileResult(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the utility node group instance profile
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the utility node group instance profile
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class GetClusterCustomerManagedResourcesAwsUtilitySecurityGroupResult(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: ARN for the utility security group
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        ARN for the utility security group
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class GetClusterCustomerManagedResourcesGcpResult(dict):
    def __init__(__self__, *,
                 agent_service_account: 'outputs.GetClusterCustomerManagedResourcesGcpAgentServiceAccountResult',
                 connector_service_account: 'outputs.GetClusterCustomerManagedResourcesGcpConnectorServiceAccountResult',
                 console_service_account: 'outputs.GetClusterCustomerManagedResourcesGcpConsoleServiceAccountResult',
                 gke_service_account: 'outputs.GetClusterCustomerManagedResourcesGcpGkeServiceAccountResult',
                 psc_nat_subnet_name: _builtins.str,
                 redpanda_cluster_service_account: 'outputs.GetClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccountResult',
                 subnet: 'outputs.GetClusterCustomerManagedResourcesGcpSubnetResult',
                 tiered_storage_bucket: 'outputs.GetClusterCustomerManagedResourcesGcpTieredStorageBucketResult'):
        """
        :param 'GetClusterCustomerManagedResourcesGcpAgentServiceAccountArgs' agent_service_account: GCP service account for the agent.
        :param 'GetClusterCustomerManagedResourcesGcpConnectorServiceAccountArgs' connector_service_account: GCP service account for managed connectors.
        :param 'GetClusterCustomerManagedResourcesGcpConsoleServiceAccountArgs' console_service_account: GCP service account for Redpanda Console.
        :param 'GetClusterCustomerManagedResourcesGcpGkeServiceAccountArgs' gke_service_account: GCP service account for GCP Kubernetes Engine (GKE).
        :param _builtins.str psc_nat_subnet_name: NAT subnet name if GCP Private Service Connect is enabled.
        :param 'GetClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccountArgs' redpanda_cluster_service_account: GCP service account for the Redpanda cluster.
        :param 'GetClusterCustomerManagedResourcesGcpSubnetArgs' subnet: GCP subnet where Redpanda cluster is deployed.
        :param 'GetClusterCustomerManagedResourcesGcpTieredStorageBucketArgs' tiered_storage_bucket: GCP storage bucket for Tiered storage.
        """
        pulumi.set(__self__, "agent_service_account", agent_service_account)
        pulumi.set(__self__, "connector_service_account", connector_service_account)
        pulumi.set(__self__, "console_service_account", console_service_account)
        pulumi.set(__self__, "gke_service_account", gke_service_account)
        pulumi.set(__self__, "psc_nat_subnet_name", psc_nat_subnet_name)
        pulumi.set(__self__, "redpanda_cluster_service_account", redpanda_cluster_service_account)
        pulumi.set(__self__, "subnet", subnet)
        pulumi.set(__self__, "tiered_storage_bucket", tiered_storage_bucket)

    @_builtins.property
    @pulumi.getter(name="agentServiceAccount")
    def agent_service_account(self) -> 'outputs.GetClusterCustomerManagedResourcesGcpAgentServiceAccountResult':
        """
        GCP service account for the agent.
        """
        return pulumi.get(self, "agent_service_account")

    @_builtins.property
    @pulumi.getter(name="connectorServiceAccount")
    def connector_service_account(self) -> 'outputs.GetClusterCustomerManagedResourcesGcpConnectorServiceAccountResult':
        """
        GCP service account for managed connectors.
        """
        return pulumi.get(self, "connector_service_account")

    @_builtins.property
    @pulumi.getter(name="consoleServiceAccount")
    def console_service_account(self) -> 'outputs.GetClusterCustomerManagedResourcesGcpConsoleServiceAccountResult':
        """
        GCP service account for Redpanda Console.
        """
        return pulumi.get(self, "console_service_account")

    @_builtins.property
    @pulumi.getter(name="gkeServiceAccount")
    def gke_service_account(self) -> 'outputs.GetClusterCustomerManagedResourcesGcpGkeServiceAccountResult':
        """
        GCP service account for GCP Kubernetes Engine (GKE).
        """
        return pulumi.get(self, "gke_service_account")

    @_builtins.property
    @pulumi.getter(name="pscNatSubnetName")
    def psc_nat_subnet_name(self) -> _builtins.str:
        """
        NAT subnet name if GCP Private Service Connect is enabled.
        """
        return pulumi.get(self, "psc_nat_subnet_name")

    @_builtins.property
    @pulumi.getter(name="redpandaClusterServiceAccount")
    def redpanda_cluster_service_account(self) -> 'outputs.GetClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccountResult':
        """
        GCP service account for the Redpanda cluster.
        """
        return pulumi.get(self, "redpanda_cluster_service_account")

    @_builtins.property
    @pulumi.getter
    def subnet(self) -> 'outputs.GetClusterCustomerManagedResourcesGcpSubnetResult':
        """
        GCP subnet where Redpanda cluster is deployed.
        """
        return pulumi.get(self, "subnet")

    @_builtins.property
    @pulumi.getter(name="tieredStorageBucket")
    def tiered_storage_bucket(self) -> 'outputs.GetClusterCustomerManagedResourcesGcpTieredStorageBucketResult':
        """
        GCP storage bucket for Tiered storage.
        """
        return pulumi.get(self, "tiered_storage_bucket")


@pulumi.output_type
class GetClusterCustomerManagedResourcesGcpAgentServiceAccountResult(dict):
    def __init__(__self__, *,
                 email: _builtins.str):
        """
        :param _builtins.str email: GCP service account email.
        """
        pulumi.set(__self__, "email", email)

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        GCP service account email.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class GetClusterCustomerManagedResourcesGcpConnectorServiceAccountResult(dict):
    def __init__(__self__, *,
                 email: _builtins.str):
        """
        :param _builtins.str email: GCP service account email.
        """
        pulumi.set(__self__, "email", email)

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        GCP service account email.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class GetClusterCustomerManagedResourcesGcpConsoleServiceAccountResult(dict):
    def __init__(__self__, *,
                 email: _builtins.str):
        """
        :param _builtins.str email: GCP service account email.
        """
        pulumi.set(__self__, "email", email)

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        GCP service account email.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class GetClusterCustomerManagedResourcesGcpGkeServiceAccountResult(dict):
    def __init__(__self__, *,
                 email: _builtins.str):
        """
        :param _builtins.str email: GCP service account email.
        """
        pulumi.set(__self__, "email", email)

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        GCP service account email.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class GetClusterCustomerManagedResourcesGcpRedpandaClusterServiceAccountResult(dict):
    def __init__(__self__, *,
                 email: _builtins.str):
        """
        :param _builtins.str email: GCP service account email.
        """
        pulumi.set(__self__, "email", email)

    @_builtins.property
    @pulumi.getter
    def email(self) -> _builtins.str:
        """
        GCP service account email.
        """
        return pulumi.get(self, "email")


@pulumi.output_type
class GetClusterCustomerManagedResourcesGcpSubnetResult(dict):
    def __init__(__self__, *,
                 k8s_master_ipv4_range: _builtins.str,
                 name: _builtins.str,
                 secondary_ipv4_range_pods: 'outputs.GetClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePodsResult',
                 secondary_ipv4_range_services: 'outputs.GetClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServicesResult'):
        """
        :param _builtins.str k8s_master_ipv4_range: Kubernetes Master IPv4 range, e.g. 10.0.0.0/24.
        :param _builtins.str name: Subnet name.
        :param 'GetClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePodsArgs' secondary_ipv4_range_pods: Secondary IPv4 range for pods.
        :param 'GetClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServicesArgs' secondary_ipv4_range_services: Secondary IPv4 range for services.
        """
        pulumi.set(__self__, "k8s_master_ipv4_range", k8s_master_ipv4_range)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "secondary_ipv4_range_pods", secondary_ipv4_range_pods)
        pulumi.set(__self__, "secondary_ipv4_range_services", secondary_ipv4_range_services)

    @_builtins.property
    @pulumi.getter(name="k8sMasterIpv4Range")
    def k8s_master_ipv4_range(self) -> _builtins.str:
        """
        Kubernetes Master IPv4 range, e.g. 10.0.0.0/24.
        """
        return pulumi.get(self, "k8s_master_ipv4_range")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Subnet name.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="secondaryIpv4RangePods")
    def secondary_ipv4_range_pods(self) -> 'outputs.GetClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePodsResult':
        """
        Secondary IPv4 range for pods.
        """
        return pulumi.get(self, "secondary_ipv4_range_pods")

    @_builtins.property
    @pulumi.getter(name="secondaryIpv4RangeServices")
    def secondary_ipv4_range_services(self) -> 'outputs.GetClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServicesResult':
        """
        Secondary IPv4 range for services.
        """
        return pulumi.get(self, "secondary_ipv4_range_services")


@pulumi.output_type
class GetClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangePodsResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: Secondary IPv4 range name for pods.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Secondary IPv4 range name for pods.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterCustomerManagedResourcesGcpSubnetSecondaryIpv4RangeServicesResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: Secondary IPv4 range name for services.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Secondary IPv4 range name for services.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterCustomerManagedResourcesGcpTieredStorageBucketResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: GCP storage bucket name.
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        GCP storage bucket name.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetClusterGcpPrivateServiceConnectResult(dict):
    def __init__(__self__, *,
                 consumer_accept_lists: Sequence['outputs.GetClusterGcpPrivateServiceConnectConsumerAcceptListResult'],
                 enabled: _builtins.bool,
                 global_access_enabled: _builtins.bool,
                 status: 'outputs.GetClusterGcpPrivateServiceConnectStatusResult'):
        """
        :param Sequence['GetClusterGcpPrivateServiceConnectConsumerAcceptListArgs'] consumer_accept_lists: List of consumers that are allowed to connect to Redpanda GCP PSC service attachment.
        :param _builtins.bool enabled: Whether Redpanda GCP Private Service Connect is enabled.
        :param _builtins.bool global_access_enabled: Whether global access is enabled.
        :param 'GetClusterGcpPrivateServiceConnectStatusArgs' status: Current status of the Private Service Connect configuration.
        """
        pulumi.set(__self__, "consumer_accept_lists", consumer_accept_lists)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "global_access_enabled", global_access_enabled)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="consumerAcceptLists")
    def consumer_accept_lists(self) -> Sequence['outputs.GetClusterGcpPrivateServiceConnectConsumerAcceptListResult']:
        """
        List of consumers that are allowed to connect to Redpanda GCP PSC service attachment.
        """
        return pulumi.get(self, "consumer_accept_lists")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether Redpanda GCP Private Service Connect is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="globalAccessEnabled")
    def global_access_enabled(self) -> _builtins.bool:
        """
        Whether global access is enabled.
        """
        return pulumi.get(self, "global_access_enabled")

    @_builtins.property
    @pulumi.getter
    def status(self) -> 'outputs.GetClusterGcpPrivateServiceConnectStatusResult':
        """
        Current status of the Private Service Connect configuration.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetClusterGcpPrivateServiceConnectConsumerAcceptListResult(dict):
    def __init__(__self__, *,
                 source: _builtins.str):
        """
        :param _builtins.str source: Either the GCP project number or its alphanumeric ID.
        """
        pulumi.set(__self__, "source", source)

    @_builtins.property
    @pulumi.getter
    def source(self) -> _builtins.str:
        """
        Either the GCP project number or its alphanumeric ID.
        """
        return pulumi.get(self, "source")


@pulumi.output_type
class GetClusterGcpPrivateServiceConnectStatusResult(dict):
    def __init__(__self__, *,
                 connected_endpoints: Sequence['outputs.GetClusterGcpPrivateServiceConnectStatusConnectedEndpointResult'],
                 created_at: _builtins.str,
                 deleted_at: _builtins.str,
                 dns_a_records: Sequence[_builtins.str],
                 kafka_api_node_base_port: _builtins.int,
                 kafka_api_seed_port: _builtins.int,
                 redpanda_proxy_node_base_port: _builtins.int,
                 redpanda_proxy_seed_port: _builtins.int,
                 schema_registry_seed_port: _builtins.int,
                 seed_hostname: _builtins.str,
                 service_attachment: _builtins.str):
        """
        :param Sequence['GetClusterGcpPrivateServiceConnectStatusConnectedEndpointArgs'] connected_endpoints: List of connected endpoints.
        :param _builtins.str created_at: When the Private Service Connect service was created.
        :param _builtins.str deleted_at: When the Private Service Connect service was deleted.
        :param Sequence[_builtins.str] dns_a_records: DNS A records for the service.
        :param _builtins.int kafka_api_node_base_port: Base port for Kafka API nodes.
        :param _builtins.int kafka_api_seed_port: Port for Kafka API seed brokers.
        :param _builtins.int redpanda_proxy_node_base_port: Base port for HTTP proxy nodes.
        :param _builtins.int redpanda_proxy_seed_port: Port for HTTP proxy.
        :param _builtins.int schema_registry_seed_port: Port for Schema Registry.
        :param _builtins.str seed_hostname: Hostname for the seed brokers.
        :param _builtins.str service_attachment: The service attachment identifier.
        """
        pulumi.set(__self__, "connected_endpoints", connected_endpoints)
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "deleted_at", deleted_at)
        pulumi.set(__self__, "dns_a_records", dns_a_records)
        pulumi.set(__self__, "kafka_api_node_base_port", kafka_api_node_base_port)
        pulumi.set(__self__, "kafka_api_seed_port", kafka_api_seed_port)
        pulumi.set(__self__, "redpanda_proxy_node_base_port", redpanda_proxy_node_base_port)
        pulumi.set(__self__, "redpanda_proxy_seed_port", redpanda_proxy_seed_port)
        pulumi.set(__self__, "schema_registry_seed_port", schema_registry_seed_port)
        pulumi.set(__self__, "seed_hostname", seed_hostname)
        pulumi.set(__self__, "service_attachment", service_attachment)

    @_builtins.property
    @pulumi.getter(name="connectedEndpoints")
    def connected_endpoints(self) -> Sequence['outputs.GetClusterGcpPrivateServiceConnectStatusConnectedEndpointResult']:
        """
        List of connected endpoints.
        """
        return pulumi.get(self, "connected_endpoints")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        When the Private Service Connect service was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="deletedAt")
    def deleted_at(self) -> _builtins.str:
        """
        When the Private Service Connect service was deleted.
        """
        return pulumi.get(self, "deleted_at")

    @_builtins.property
    @pulumi.getter(name="dnsARecords")
    def dns_a_records(self) -> Sequence[_builtins.str]:
        """
        DNS A records for the service.
        """
        return pulumi.get(self, "dns_a_records")

    @_builtins.property
    @pulumi.getter(name="kafkaApiNodeBasePort")
    def kafka_api_node_base_port(self) -> _builtins.int:
        """
        Base port for Kafka API nodes.
        """
        return pulumi.get(self, "kafka_api_node_base_port")

    @_builtins.property
    @pulumi.getter(name="kafkaApiSeedPort")
    def kafka_api_seed_port(self) -> _builtins.int:
        """
        Port for Kafka API seed brokers.
        """
        return pulumi.get(self, "kafka_api_seed_port")

    @_builtins.property
    @pulumi.getter(name="redpandaProxyNodeBasePort")
    def redpanda_proxy_node_base_port(self) -> _builtins.int:
        """
        Base port for HTTP proxy nodes.
        """
        return pulumi.get(self, "redpanda_proxy_node_base_port")

    @_builtins.property
    @pulumi.getter(name="redpandaProxySeedPort")
    def redpanda_proxy_seed_port(self) -> _builtins.int:
        """
        Port for HTTP proxy.
        """
        return pulumi.get(self, "redpanda_proxy_seed_port")

    @_builtins.property
    @pulumi.getter(name="schemaRegistrySeedPort")
    def schema_registry_seed_port(self) -> _builtins.int:
        """
        Port for Schema Registry.
        """
        return pulumi.get(self, "schema_registry_seed_port")

    @_builtins.property
    @pulumi.getter(name="seedHostname")
    def seed_hostname(self) -> _builtins.str:
        """
        Hostname for the seed brokers.
        """
        return pulumi.get(self, "seed_hostname")

    @_builtins.property
    @pulumi.getter(name="serviceAttachment")
    def service_attachment(self) -> _builtins.str:
        """
        The service attachment identifier.
        """
        return pulumi.get(self, "service_attachment")


@pulumi.output_type
class GetClusterGcpPrivateServiceConnectStatusConnectedEndpointResult(dict):
    def __init__(__self__, *,
                 connection_id: _builtins.str,
                 consumer_network: _builtins.str,
                 endpoint: _builtins.str,
                 status: _builtins.str):
        """
        :param _builtins.str connection_id: The connection ID.
        :param _builtins.str consumer_network: The consumer network.
        :param _builtins.str endpoint: The endpoint address.
        :param _builtins.str status: Status of the endpoint connection.
        """
        pulumi.set(__self__, "connection_id", connection_id)
        pulumi.set(__self__, "consumer_network", consumer_network)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "status", status)

    @_builtins.property
    @pulumi.getter(name="connectionId")
    def connection_id(self) -> _builtins.str:
        """
        The connection ID.
        """
        return pulumi.get(self, "connection_id")

    @_builtins.property
    @pulumi.getter(name="consumerNetwork")
    def consumer_network(self) -> _builtins.str:
        """
        The consumer network.
        """
        return pulumi.get(self, "consumer_network")

    @_builtins.property
    @pulumi.getter
    def endpoint(self) -> _builtins.str:
        """
        The endpoint address.
        """
        return pulumi.get(self, "endpoint")

    @_builtins.property
    @pulumi.getter
    def status(self) -> _builtins.str:
        """
        Status of the endpoint connection.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class GetClusterHttpProxyResult(dict):
    def __init__(__self__, *,
                 mtls: 'outputs.GetClusterHttpProxyMtlsResult',
                 url: _builtins.str):
        """
        :param 'GetClusterHttpProxyMtlsArgs' mtls: mTLS configuration.
        :param _builtins.str url: The HTTP Proxy URL.
        """
        pulumi.set(__self__, "mtls", mtls)
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def mtls(self) -> 'outputs.GetClusterHttpProxyMtlsResult':
        """
        mTLS configuration.
        """
        return pulumi.get(self, "mtls")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        The HTTP Proxy URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetClusterHttpProxyMtlsResult(dict):
    def __init__(__self__, *,
                 ca_certificates_pems: Sequence[_builtins.str],
                 enabled: _builtins.bool,
                 principal_mapping_rules: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] ca_certificates_pems: CA certificate in PEM format.
        :param _builtins.bool enabled: Whether mTLS is enabled.
        :param Sequence[_builtins.str] principal_mapping_rules: Principal mapping rules for mTLS authentication.
        """
        pulumi.set(__self__, "ca_certificates_pems", ca_certificates_pems)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "principal_mapping_rules", principal_mapping_rules)

    @_builtins.property
    @pulumi.getter(name="caCertificatesPems")
    def ca_certificates_pems(self) -> Sequence[_builtins.str]:
        """
        CA certificate in PEM format.
        """
        return pulumi.get(self, "ca_certificates_pems")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether mTLS is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="principalMappingRules")
    def principal_mapping_rules(self) -> Sequence[_builtins.str]:
        """
        Principal mapping rules for mTLS authentication.
        """
        return pulumi.get(self, "principal_mapping_rules")


@pulumi.output_type
class GetClusterKafkaApiResult(dict):
    def __init__(__self__, *,
                 mtls: 'outputs.GetClusterKafkaApiMtlsResult',
                 seed_brokers: Sequence[_builtins.str]):
        """
        :param 'GetClusterKafkaApiMtlsArgs' mtls: mTLS configuration.
        :param Sequence[_builtins.str] seed_brokers: List of Kafka broker addresses.
        """
        pulumi.set(__self__, "mtls", mtls)
        pulumi.set(__self__, "seed_brokers", seed_brokers)

    @_builtins.property
    @pulumi.getter
    def mtls(self) -> 'outputs.GetClusterKafkaApiMtlsResult':
        """
        mTLS configuration.
        """
        return pulumi.get(self, "mtls")

    @_builtins.property
    @pulumi.getter(name="seedBrokers")
    def seed_brokers(self) -> Sequence[_builtins.str]:
        """
        List of Kafka broker addresses.
        """
        return pulumi.get(self, "seed_brokers")


@pulumi.output_type
class GetClusterKafkaApiMtlsResult(dict):
    def __init__(__self__, *,
                 ca_certificates_pems: Sequence[_builtins.str],
                 enabled: _builtins.bool,
                 principal_mapping_rules: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] ca_certificates_pems: CA certificate in PEM format.
        :param _builtins.bool enabled: Whether mTLS is enabled.
        :param Sequence[_builtins.str] principal_mapping_rules: Principal mapping rules for mTLS authentication.
        """
        pulumi.set(__self__, "ca_certificates_pems", ca_certificates_pems)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "principal_mapping_rules", principal_mapping_rules)

    @_builtins.property
    @pulumi.getter(name="caCertificatesPems")
    def ca_certificates_pems(self) -> Sequence[_builtins.str]:
        """
        CA certificate in PEM format.
        """
        return pulumi.get(self, "ca_certificates_pems")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether mTLS is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="principalMappingRules")
    def principal_mapping_rules(self) -> Sequence[_builtins.str]:
        """
        Principal mapping rules for mTLS authentication.
        """
        return pulumi.get(self, "principal_mapping_rules")


@pulumi.output_type
class GetClusterKafkaConnectResult(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool):
        """
        :param _builtins.bool enabled: Whether Kafka Connect is enabled.
        """
        pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether Kafka Connect is enabled.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetClusterMaintenanceWindowConfigResult(dict):
    def __init__(__self__, *,
                 anytime: _builtins.bool,
                 day_hour: 'outputs.GetClusterMaintenanceWindowConfigDayHourResult',
                 unspecified: _builtins.bool):
        """
        :param _builtins.bool anytime: If true, maintenance can occur at any time.
        :param _builtins.bool unspecified: If true, maintenance window is unspecified.
        """
        pulumi.set(__self__, "anytime", anytime)
        pulumi.set(__self__, "day_hour", day_hour)
        pulumi.set(__self__, "unspecified", unspecified)

    @_builtins.property
    @pulumi.getter
    def anytime(self) -> _builtins.bool:
        """
        If true, maintenance can occur at any time.
        """
        return pulumi.get(self, "anytime")

    @_builtins.property
    @pulumi.getter(name="dayHour")
    def day_hour(self) -> 'outputs.GetClusterMaintenanceWindowConfigDayHourResult':
        return pulumi.get(self, "day_hour")

    @_builtins.property
    @pulumi.getter
    def unspecified(self) -> _builtins.bool:
        """
        If true, maintenance window is unspecified.
        """
        return pulumi.get(self, "unspecified")


@pulumi.output_type
class GetClusterMaintenanceWindowConfigDayHourResult(dict):
    def __init__(__self__, *,
                 day_of_week: _builtins.str,
                 hour_of_day: _builtins.int):
        """
        :param _builtins.str day_of_week: Day of week.
        :param _builtins.int hour_of_day: Hour of day.
        """
        pulumi.set(__self__, "day_of_week", day_of_week)
        pulumi.set(__self__, "hour_of_day", hour_of_day)

    @_builtins.property
    @pulumi.getter(name="dayOfWeek")
    def day_of_week(self) -> _builtins.str:
        """
        Day of week.
        """
        return pulumi.get(self, "day_of_week")

    @_builtins.property
    @pulumi.getter(name="hourOfDay")
    def hour_of_day(self) -> _builtins.int:
        """
        Hour of day.
        """
        return pulumi.get(self, "hour_of_day")


@pulumi.output_type
class GetClusterPrometheusResult(dict):
    def __init__(__self__, *,
                 url: _builtins.str):
        """
        :param _builtins.str url: The Prometheus metrics endpoint URL.
        """
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        The Prometheus metrics endpoint URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetClusterRedpandaConsoleResult(dict):
    def __init__(__self__, *,
                 url: _builtins.str):
        """
        :param _builtins.str url: The Redpanda Console URL.
        """
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        The Redpanda Console URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetClusterSchemaRegistryResult(dict):
    def __init__(__self__, *,
                 mtls: 'outputs.GetClusterSchemaRegistryMtlsResult',
                 url: _builtins.str):
        """
        :param 'GetClusterSchemaRegistryMtlsArgs' mtls: mTLS configuration.
        :param _builtins.str url: The Schema Registry URL.
        """
        pulumi.set(__self__, "mtls", mtls)
        pulumi.set(__self__, "url", url)

    @_builtins.property
    @pulumi.getter
    def mtls(self) -> 'outputs.GetClusterSchemaRegistryMtlsResult':
        """
        mTLS configuration.
        """
        return pulumi.get(self, "mtls")

    @_builtins.property
    @pulumi.getter
    def url(self) -> _builtins.str:
        """
        The Schema Registry URL.
        """
        return pulumi.get(self, "url")


@pulumi.output_type
class GetClusterSchemaRegistryMtlsResult(dict):
    def __init__(__self__, *,
                 ca_certificates_pems: Sequence[_builtins.str],
                 enabled: _builtins.bool,
                 principal_mapping_rules: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] ca_certificates_pems: CA certificate in PEM format.
        :param _builtins.bool enabled: Whether mTLS is enabled.
        :param Sequence[_builtins.str] principal_mapping_rules: Principal mapping rules for mTLS authentication.
        """
        pulumi.set(__self__, "ca_certificates_pems", ca_certificates_pems)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "principal_mapping_rules", principal_mapping_rules)

    @_builtins.property
    @pulumi.getter(name="caCertificatesPems")
    def ca_certificates_pems(self) -> Sequence[_builtins.str]:
        """
        CA certificate in PEM format.
        """
        return pulumi.get(self, "ca_certificates_pems")

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Whether mTLS is enabled.
        """
        return pulumi.get(self, "enabled")

    @_builtins.property
    @pulumi.getter(name="principalMappingRules")
    def principal_mapping_rules(self) -> Sequence[_builtins.str]:
        """
        Principal mapping rules for mTLS authentication.
        """
        return pulumi.get(self, "principal_mapping_rules")


@pulumi.output_type
class GetClusterStateDescriptionResult(dict):
    def __init__(__self__, *,
                 code: _builtins.int,
                 message: _builtins.str):
        """
        :param _builtins.int code: Error code if cluster is in error state.
        :param _builtins.str message: Detailed error message if cluster is in error state.
        """
        pulumi.set(__self__, "code", code)
        pulumi.set(__self__, "message", message)

    @_builtins.property
    @pulumi.getter
    def code(self) -> _builtins.int:
        """
        Error code if cluster is in error state.
        """
        return pulumi.get(self, "code")

    @_builtins.property
    @pulumi.getter
    def message(self) -> _builtins.str:
        """
        Detailed error message if cluster is in error state.
        """
        return pulumi.get(self, "message")


@pulumi.output_type
class GetNetworkCustomerManagedResourcesResult(dict):
    def __init__(__self__, *,
                 aws: 'outputs.GetNetworkCustomerManagedResourcesAwsResult',
                 gcp: 'outputs.GetNetworkCustomerManagedResourcesGcpResult'):
        pulumi.set(__self__, "aws", aws)
        pulumi.set(__self__, "gcp", gcp)

    @_builtins.property
    @pulumi.getter
    def aws(self) -> 'outputs.GetNetworkCustomerManagedResourcesAwsResult':
        return pulumi.get(self, "aws")

    @_builtins.property
    @pulumi.getter
    def gcp(self) -> 'outputs.GetNetworkCustomerManagedResourcesGcpResult':
        return pulumi.get(self, "gcp")


@pulumi.output_type
class GetNetworkCustomerManagedResourcesAwsResult(dict):
    def __init__(__self__, *,
                 dynamodb_table: 'outputs.GetNetworkCustomerManagedResourcesAwsDynamodbTableResult',
                 management_bucket: 'outputs.GetNetworkCustomerManagedResourcesAwsManagementBucketResult',
                 private_subnets: 'outputs.GetNetworkCustomerManagedResourcesAwsPrivateSubnetsResult',
                 vpc: 'outputs.GetNetworkCustomerManagedResourcesAwsVpcResult'):
        pulumi.set(__self__, "dynamodb_table", dynamodb_table)
        pulumi.set(__self__, "management_bucket", management_bucket)
        pulumi.set(__self__, "private_subnets", private_subnets)
        pulumi.set(__self__, "vpc", vpc)

    @_builtins.property
    @pulumi.getter(name="dynamodbTable")
    def dynamodb_table(self) -> 'outputs.GetNetworkCustomerManagedResourcesAwsDynamodbTableResult':
        return pulumi.get(self, "dynamodb_table")

    @_builtins.property
    @pulumi.getter(name="managementBucket")
    def management_bucket(self) -> 'outputs.GetNetworkCustomerManagedResourcesAwsManagementBucketResult':
        return pulumi.get(self, "management_bucket")

    @_builtins.property
    @pulumi.getter(name="privateSubnets")
    def private_subnets(self) -> 'outputs.GetNetworkCustomerManagedResourcesAwsPrivateSubnetsResult':
        return pulumi.get(self, "private_subnets")

    @_builtins.property
    @pulumi.getter
    def vpc(self) -> 'outputs.GetNetworkCustomerManagedResourcesAwsVpcResult':
        return pulumi.get(self, "vpc")


@pulumi.output_type
class GetNetworkCustomerManagedResourcesAwsDynamodbTableResult(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: AWS DynamoDB table identifier
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        AWS DynamoDB table identifier
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class GetNetworkCustomerManagedResourcesAwsManagementBucketResult(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: AWS storage bucket identifier
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        AWS storage bucket identifier
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class GetNetworkCustomerManagedResourcesAwsPrivateSubnetsResult(dict):
    def __init__(__self__, *,
                 arns: Sequence[_builtins.str]):
        """
        :param Sequence[_builtins.str] arns: AWS private subnet identifiers
        """
        pulumi.set(__self__, "arns", arns)

    @_builtins.property
    @pulumi.getter
    def arns(self) -> Sequence[_builtins.str]:
        """
        AWS private subnet identifiers
        """
        return pulumi.get(self, "arns")


@pulumi.output_type
class GetNetworkCustomerManagedResourcesAwsVpcResult(dict):
    def __init__(__self__, *,
                 arn: _builtins.str):
        """
        :param _builtins.str arn: AWS VPC identifier
        """
        pulumi.set(__self__, "arn", arn)

    @_builtins.property
    @pulumi.getter
    def arn(self) -> _builtins.str:
        """
        AWS VPC identifier
        """
        return pulumi.get(self, "arn")


@pulumi.output_type
class GetNetworkCustomerManagedResourcesGcpResult(dict):
    def __init__(__self__, *,
                 management_bucket: 'outputs.GetNetworkCustomerManagedResourcesGcpManagementBucketResult',
                 network_name: _builtins.str,
                 network_project_id: _builtins.str):
        """
        :param _builtins.str network_name: Name of user-created network where the Redpanda cluster is deployed
        :param _builtins.str network_project_id: GCP project ID where the network is created
        """
        pulumi.set(__self__, "management_bucket", management_bucket)
        pulumi.set(__self__, "network_name", network_name)
        pulumi.set(__self__, "network_project_id", network_project_id)

    @_builtins.property
    @pulumi.getter(name="managementBucket")
    def management_bucket(self) -> 'outputs.GetNetworkCustomerManagedResourcesGcpManagementBucketResult':
        return pulumi.get(self, "management_bucket")

    @_builtins.property
    @pulumi.getter(name="networkName")
    def network_name(self) -> _builtins.str:
        """
        Name of user-created network where the Redpanda cluster is deployed
        """
        return pulumi.get(self, "network_name")

    @_builtins.property
    @pulumi.getter(name="networkProjectId")
    def network_project_id(self) -> _builtins.str:
        """
        GCP project ID where the network is created
        """
        return pulumi.get(self, "network_project_id")


@pulumi.output_type
class GetNetworkCustomerManagedResourcesGcpManagementBucketResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str):
        """
        :param _builtins.str name: GCP storage bucket name for storing the state of Redpanda cluster deployment
        """
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        GCP storage bucket name for storing the state of Redpanda cluster deployment
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetRegionsRegionResult(dict):
    def __init__(__self__, *,
                 name: _builtins.str,
                 zones: Sequence[_builtins.str]):
        """
        :param _builtins.str name: Name of the region
        :param Sequence[_builtins.str] zones: Zones available in the region
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the region
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence[_builtins.str]:
        """
        Zones available in the region
        """
        return pulumi.get(self, "zones")


@pulumi.output_type
class GetServerlessRegionsServerlessRegionResult(dict):
    def __init__(__self__, *,
                 cloud_provider: _builtins.str,
                 name: _builtins.str,
                 placement: 'outputs.GetServerlessRegionsServerlessRegionPlacementResult',
                 time_zone: _builtins.str):
        """
        :param _builtins.str cloud_provider: Cloud provider where the serverless regions exist
        :param _builtins.str name: Name of the serverless region
        :param _builtins.str time_zone: Time zone of the serverless region
        """
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "placement", placement)
        pulumi.set(__self__, "time_zone", time_zone)

    @_builtins.property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> _builtins.str:
        """
        Cloud provider where the serverless regions exist
        """
        return pulumi.get(self, "cloud_provider")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Name of the serverless region
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter
    def placement(self) -> 'outputs.GetServerlessRegionsServerlessRegionPlacementResult':
        return pulumi.get(self, "placement")

    @_builtins.property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> _builtins.str:
        """
        Time zone of the serverless region
        """
        return pulumi.get(self, "time_zone")


@pulumi.output_type
class GetServerlessRegionsServerlessRegionPlacementResult(dict):
    def __init__(__self__, *,
                 enabled: _builtins.bool):
        """
        :param _builtins.bool enabled: Region available
        """
        pulumi.set(__self__, "enabled", enabled)

    @_builtins.property
    @pulumi.getter
    def enabled(self) -> _builtins.bool:
        """
        Region available
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetThroughputTiersThroughputTierResult(dict):
    def __init__(__self__, *,
                 cloud_provider: _builtins.str,
                 display_name: _builtins.str,
                 name: _builtins.str):
        """
        :param _builtins.str cloud_provider: Cloud provider where the Throughput Tier is available
        :param _builtins.str display_name: Display name of the Throughput Tier
        :param _builtins.str name: Unique name of the Throughput Tier
        """
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "name", name)

    @_builtins.property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> _builtins.str:
        """
        Cloud provider where the Throughput Tier is available
        """
        return pulumi.get(self, "cloud_provider")

    @_builtins.property
    @pulumi.getter(name="displayName")
    def display_name(self) -> _builtins.str:
        """
        Display name of the Throughput Tier
        """
        return pulumi.get(self, "display_name")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Unique name of the Throughput Tier
        """
        return pulumi.get(self, "name")


