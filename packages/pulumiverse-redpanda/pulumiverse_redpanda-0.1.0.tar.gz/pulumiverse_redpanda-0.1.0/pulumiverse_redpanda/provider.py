# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_client_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_subscription_id: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 gcp_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 google_credentials: Optional[pulumi.Input[_builtins.str]] = None,
                 google_credentials_base64: Optional[pulumi.Input[_builtins.str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[_builtins.str] access_token: Redpanda client token. You need either `access_token`, or both `client_id` and `client_secret` to use this provider. Can
               also be set with the `REDPANDA_ACCESS_TOKEN` environment variable.
        :param pulumi.Input[_builtins.str] azure_client_id: Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_ID or
               ARM_CLIENT_ID
        :param pulumi.Input[_builtins.str] azure_client_secret: Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_SECRET
               or ARM_CLIENT_SECRET
        :param pulumi.Input[_builtins.str] azure_subscription_id: The default Azure Subscription ID which should be used for Redpanda BYOC clusters. If another subscription is specified
               on a resource, it will take precedence. This can also be sourced from the `ARM_SUBSCRIPTION_ID` environment variable.
        :param pulumi.Input[_builtins.str] azure_tenant_id: Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_TENANT_ID or
               ARM_TENANT_ID
        :param pulumi.Input[_builtins.str] client_id: The ID for the client. You need either `client_id` AND `client_secret`, or `access_token`, to use this provider. Can
               also be set with the `REDPANDA_CLIENT_ID` environment variable.
        :param pulumi.Input[_builtins.str] client_secret: Redpanda client secret. You need either `client_id` AND `client_secret`, or `access_token`, to use this provider. Can
               also be set with the `REDPANDA_CLIENT_SECRET` environment variable.
        :param pulumi.Input[_builtins.str] gcp_project_id: The default Google Cloud Project ID to use for Redpanda BYOC clusters. If another project is specified on a resource, it
               will take precedence. This can also be sourced from the `GOOGLE_PROJECT` environment variable, or any of the following
               ordered by precedence: `GOOGLE_PROJECT`, `GOOGLE_CLOUD_PROJECT`, `GCLOUD_PROJECT`, or `CLOUDSDK_CORE_PROJECT`.
        :param pulumi.Input[_builtins.str] google_credentials: Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as GOOGLE_CREDENTIALS
        :param pulumi.Input[_builtins.str] google_credentials_base64: Used for creating and managing BYOC and BYOVPC clusters. Is a convenience passthrough for base64 encoded credentials
               intended for use in CI/CD. Can also be specified in the environment as GOOGLE_CREDENTIALS_BASE64
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if azure_client_id is not None:
            pulumi.set(__self__, "azure_client_id", azure_client_id)
        if azure_client_secret is not None:
            pulumi.set(__self__, "azure_client_secret", azure_client_secret)
        if azure_subscription_id is not None:
            pulumi.set(__self__, "azure_subscription_id", azure_subscription_id)
        if azure_tenant_id is not None:
            pulumi.set(__self__, "azure_tenant_id", azure_tenant_id)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if gcp_project_id is not None:
            pulumi.set(__self__, "gcp_project_id", gcp_project_id)
        if google_credentials is not None:
            pulumi.set(__self__, "google_credentials", google_credentials)
        if google_credentials_base64 is not None:
            pulumi.set(__self__, "google_credentials_base64", google_credentials_base64)

    @_builtins.property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Redpanda client token. You need either `access_token`, or both `client_id` and `client_secret` to use this provider. Can
        also be set with the `REDPANDA_ACCESS_TOKEN` environment variable.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "access_token", value)

    @_builtins.property
    @pulumi.getter(name="azureClientId")
    def azure_client_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_ID or
        ARM_CLIENT_ID
        """
        return pulumi.get(self, "azure_client_id")

    @azure_client_id.setter
    def azure_client_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_client_id", value)

    @_builtins.property
    @pulumi.getter(name="azureClientSecret")
    def azure_client_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_SECRET
        or ARM_CLIENT_SECRET
        """
        return pulumi.get(self, "azure_client_secret")

    @azure_client_secret.setter
    def azure_client_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_client_secret", value)

    @_builtins.property
    @pulumi.getter(name="azureSubscriptionId")
    def azure_subscription_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The default Azure Subscription ID which should be used for Redpanda BYOC clusters. If another subscription is specified
        on a resource, it will take precedence. This can also be sourced from the `ARM_SUBSCRIPTION_ID` environment variable.
        """
        return pulumi.get(self, "azure_subscription_id")

    @azure_subscription_id.setter
    def azure_subscription_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_subscription_id", value)

    @_builtins.property
    @pulumi.getter(name="azureTenantId")
    def azure_tenant_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_TENANT_ID or
        ARM_TENANT_ID
        """
        return pulumi.get(self, "azure_tenant_id")

    @azure_tenant_id.setter
    def azure_tenant_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "azure_tenant_id", value)

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The ID for the client. You need either `client_id` AND `client_secret`, or `access_token`, to use this provider. Can
        also be set with the `REDPANDA_CLIENT_ID` environment variable.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_id", value)

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Redpanda client secret. You need either `client_id` AND `client_secret`, or `access_token`, to use this provider. Can
        also be set with the `REDPANDA_CLIENT_SECRET` environment variable.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "client_secret", value)

    @_builtins.property
    @pulumi.getter(name="gcpProjectId")
    def gcp_project_id(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        The default Google Cloud Project ID to use for Redpanda BYOC clusters. If another project is specified on a resource, it
        will take precedence. This can also be sourced from the `GOOGLE_PROJECT` environment variable, or any of the following
        ordered by precedence: `GOOGLE_PROJECT`, `GOOGLE_CLOUD_PROJECT`, `GCLOUD_PROJECT`, or `CLOUDSDK_CORE_PROJECT`.
        """
        return pulumi.get(self, "gcp_project_id")

    @gcp_project_id.setter
    def gcp_project_id(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "gcp_project_id", value)

    @_builtins.property
    @pulumi.getter(name="googleCredentials")
    def google_credentials(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as GOOGLE_CREDENTIALS
        """
        return pulumi.get(self, "google_credentials")

    @google_credentials.setter
    def google_credentials(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "google_credentials", value)

    @_builtins.property
    @pulumi.getter(name="googleCredentialsBase64")
    def google_credentials_base64(self) -> Optional[pulumi.Input[_builtins.str]]:
        """
        Used for creating and managing BYOC and BYOVPC clusters. Is a convenience passthrough for base64 encoded credentials
        intended for use in CI/CD. Can also be specified in the environment as GOOGLE_CREDENTIALS_BASE64
        """
        return pulumi.get(self, "google_credentials_base64")

    @google_credentials_base64.setter
    def google_credentials_base64(self, value: Optional[pulumi.Input[_builtins.str]]):
        pulumi.set(self, "google_credentials_base64", value)


@pulumi.type_token("pulumi:providers:redpanda")
class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_client_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_subscription_id: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 gcp_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 google_credentials: Optional[pulumi.Input[_builtins.str]] = None,
                 google_credentials_base64: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        """
        The provider type for the redpanda package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[_builtins.str] access_token: Redpanda client token. You need either `access_token`, or both `client_id` and `client_secret` to use this provider. Can
               also be set with the `REDPANDA_ACCESS_TOKEN` environment variable.
        :param pulumi.Input[_builtins.str] azure_client_id: Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_ID or
               ARM_CLIENT_ID
        :param pulumi.Input[_builtins.str] azure_client_secret: Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_SECRET
               or ARM_CLIENT_SECRET
        :param pulumi.Input[_builtins.str] azure_subscription_id: The default Azure Subscription ID which should be used for Redpanda BYOC clusters. If another subscription is specified
               on a resource, it will take precedence. This can also be sourced from the `ARM_SUBSCRIPTION_ID` environment variable.
        :param pulumi.Input[_builtins.str] azure_tenant_id: Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_TENANT_ID or
               ARM_TENANT_ID
        :param pulumi.Input[_builtins.str] client_id: The ID for the client. You need either `client_id` AND `client_secret`, or `access_token`, to use this provider. Can
               also be set with the `REDPANDA_CLIENT_ID` environment variable.
        :param pulumi.Input[_builtins.str] client_secret: Redpanda client secret. You need either `client_id` AND `client_secret`, or `access_token`, to use this provider. Can
               also be set with the `REDPANDA_CLIENT_SECRET` environment variable.
        :param pulumi.Input[_builtins.str] gcp_project_id: The default Google Cloud Project ID to use for Redpanda BYOC clusters. If another project is specified on a resource, it
               will take precedence. This can also be sourced from the `GOOGLE_PROJECT` environment variable, or any of the following
               ordered by precedence: `GOOGLE_PROJECT`, `GOOGLE_CLOUD_PROJECT`, `GCLOUD_PROJECT`, or `CLOUDSDK_CORE_PROJECT`.
        :param pulumi.Input[_builtins.str] google_credentials: Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as GOOGLE_CREDENTIALS
        :param pulumi.Input[_builtins.str] google_credentials_base64: Used for creating and managing BYOC and BYOVPC clusters. Is a convenience passthrough for base64 encoded credentials
               intended for use in CI/CD. Can also be specified in the environment as GOOGLE_CREDENTIALS_BASE64
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the redpanda package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_client_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_subscription_id: Optional[pulumi.Input[_builtins.str]] = None,
                 azure_tenant_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_id: Optional[pulumi.Input[_builtins.str]] = None,
                 client_secret: Optional[pulumi.Input[_builtins.str]] = None,
                 gcp_project_id: Optional[pulumi.Input[_builtins.str]] = None,
                 google_credentials: Optional[pulumi.Input[_builtins.str]] = None,
                 google_credentials_base64: Optional[pulumi.Input[_builtins.str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["access_token"] = None if access_token is None else pulumi.Output.secret(access_token)
            __props__.__dict__["azure_client_id"] = azure_client_id
            __props__.__dict__["azure_client_secret"] = azure_client_secret
            __props__.__dict__["azure_subscription_id"] = azure_subscription_id
            __props__.__dict__["azure_tenant_id"] = azure_tenant_id
            __props__.__dict__["client_id"] = None if client_id is None else pulumi.Output.secret(client_id)
            __props__.__dict__["client_secret"] = None if client_secret is None else pulumi.Output.secret(client_secret)
            __props__.__dict__["gcp_project_id"] = gcp_project_id
            __props__.__dict__["google_credentials"] = google_credentials
            __props__.__dict__["google_credentials_base64"] = google_credentials_base64
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["accessToken", "clientId", "clientSecret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Provider, __self__).__init__(
            'redpanda',
            resource_name,
            __props__,
            opts)

    @_builtins.property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Redpanda client token. You need either `access_token`, or both `client_id` and `client_secret` to use this provider. Can
        also be set with the `REDPANDA_ACCESS_TOKEN` environment variable.
        """
        return pulumi.get(self, "access_token")

    @_builtins.property
    @pulumi.getter(name="azureClientId")
    def azure_client_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_ID or
        ARM_CLIENT_ID
        """
        return pulumi.get(self, "azure_client_id")

    @_builtins.property
    @pulumi.getter(name="azureClientSecret")
    def azure_client_secret(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_CLIENT_SECRET
        or ARM_CLIENT_SECRET
        """
        return pulumi.get(self, "azure_client_secret")

    @_builtins.property
    @pulumi.getter(name="azureSubscriptionId")
    def azure_subscription_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The default Azure Subscription ID which should be used for Redpanda BYOC clusters. If another subscription is specified
        on a resource, it will take precedence. This can also be sourced from the `ARM_SUBSCRIPTION_ID` environment variable.
        """
        return pulumi.get(self, "azure_subscription_id")

    @_builtins.property
    @pulumi.getter(name="azureTenantId")
    def azure_tenant_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as AZURE_TENANT_ID or
        ARM_TENANT_ID
        """
        return pulumi.get(self, "azure_tenant_id")

    @_builtins.property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The ID for the client. You need either `client_id` AND `client_secret`, or `access_token`, to use this provider. Can
        also be set with the `REDPANDA_CLIENT_ID` environment variable.
        """
        return pulumi.get(self, "client_id")

    @_builtins.property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Redpanda client secret. You need either `client_id` AND `client_secret`, or `access_token`, to use this provider. Can
        also be set with the `REDPANDA_CLIENT_SECRET` environment variable.
        """
        return pulumi.get(self, "client_secret")

    @_builtins.property
    @pulumi.getter(name="gcpProjectId")
    def gcp_project_id(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        The default Google Cloud Project ID to use for Redpanda BYOC clusters. If another project is specified on a resource, it
        will take precedence. This can also be sourced from the `GOOGLE_PROJECT` environment variable, or any of the following
        ordered by precedence: `GOOGLE_PROJECT`, `GOOGLE_CLOUD_PROJECT`, `GCLOUD_PROJECT`, or `CLOUDSDK_CORE_PROJECT`.
        """
        return pulumi.get(self, "gcp_project_id")

    @_builtins.property
    @pulumi.getter(name="googleCredentials")
    def google_credentials(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Used for creating and managing BYOC and BYOVPC clusters. Can also be specified in the environment as GOOGLE_CREDENTIALS
        """
        return pulumi.get(self, "google_credentials")

    @_builtins.property
    @pulumi.getter(name="googleCredentialsBase64")
    def google_credentials_base64(self) -> pulumi.Output[Optional[_builtins.str]]:
        """
        Used for creating and managing BYOC and BYOVPC clusters. Is a convenience passthrough for base64 encoded credentials
        intended for use in CI/CD. Can also be specified in the environment as GOOGLE_CREDENTIALS_BASE64
        """
        return pulumi.get(self, "google_credentials_base64")

    @pulumi.output_type
    class TerraformConfigResult:
        def __init__(__self__, result=None):
            if result and not isinstance(result, dict):
                raise TypeError("Expected argument 'result' to be a dict")
            pulumi.set(__self__, "result", result)

        @_builtins.property
        @pulumi.getter
        def result(self) -> Mapping[str, Any]:
            return pulumi.get(self, "result")

    def terraform_config(__self__) -> pulumi.Output['Provider.TerraformConfigResult']:
        """
        This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
        """
        __args__ = dict()
        __args__['__self__'] = __self__
        return pulumi.runtime.call('pulumi:providers:redpanda/terraformConfig', __args__, res=__self__, typ=Provider.TerraformConfigResult)

