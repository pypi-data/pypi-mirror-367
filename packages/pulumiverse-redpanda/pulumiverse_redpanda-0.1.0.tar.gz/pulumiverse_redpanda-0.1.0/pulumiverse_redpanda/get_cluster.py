# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import builtins as _builtins
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetClusterResult',
    'AwaitableGetClusterResult',
    'get_cluster',
    'get_cluster_output',
]

@pulumi.output_type
class GetClusterResult:
    """
    A collection of values returned by getCluster.
    """
    def __init__(__self__, allow_deletion=None, aws_private_link=None, azure_private_link=None, cloud_provider=None, cluster_api_url=None, cluster_type=None, connection_type=None, created_at=None, customer_managed_resources=None, gcp_global_access_enabled=None, gcp_private_service_connect=None, http_proxy=None, id=None, kafka_api=None, kafka_connect=None, maintenance_window_config=None, name=None, network_id=None, prometheus=None, read_replica_cluster_ids=None, redpanda_console=None, redpanda_version=None, region=None, resource_group_id=None, schema_registry=None, state=None, state_description=None, tags=None, throughput_tier=None, zones=None):
        if allow_deletion and not isinstance(allow_deletion, bool):
            raise TypeError("Expected argument 'allow_deletion' to be a bool")
        pulumi.set(__self__, "allow_deletion", allow_deletion)
        if aws_private_link and not isinstance(aws_private_link, dict):
            raise TypeError("Expected argument 'aws_private_link' to be a dict")
        pulumi.set(__self__, "aws_private_link", aws_private_link)
        if azure_private_link and not isinstance(azure_private_link, dict):
            raise TypeError("Expected argument 'azure_private_link' to be a dict")
        pulumi.set(__self__, "azure_private_link", azure_private_link)
        if cloud_provider and not isinstance(cloud_provider, str):
            raise TypeError("Expected argument 'cloud_provider' to be a str")
        pulumi.set(__self__, "cloud_provider", cloud_provider)
        if cluster_api_url and not isinstance(cluster_api_url, str):
            raise TypeError("Expected argument 'cluster_api_url' to be a str")
        pulumi.set(__self__, "cluster_api_url", cluster_api_url)
        if cluster_type and not isinstance(cluster_type, str):
            raise TypeError("Expected argument 'cluster_type' to be a str")
        pulumi.set(__self__, "cluster_type", cluster_type)
        if connection_type and not isinstance(connection_type, str):
            raise TypeError("Expected argument 'connection_type' to be a str")
        pulumi.set(__self__, "connection_type", connection_type)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if customer_managed_resources and not isinstance(customer_managed_resources, dict):
            raise TypeError("Expected argument 'customer_managed_resources' to be a dict")
        pulumi.set(__self__, "customer_managed_resources", customer_managed_resources)
        if gcp_global_access_enabled and not isinstance(gcp_global_access_enabled, bool):
            raise TypeError("Expected argument 'gcp_global_access_enabled' to be a bool")
        pulumi.set(__self__, "gcp_global_access_enabled", gcp_global_access_enabled)
        if gcp_private_service_connect and not isinstance(gcp_private_service_connect, dict):
            raise TypeError("Expected argument 'gcp_private_service_connect' to be a dict")
        pulumi.set(__self__, "gcp_private_service_connect", gcp_private_service_connect)
        if http_proxy and not isinstance(http_proxy, dict):
            raise TypeError("Expected argument 'http_proxy' to be a dict")
        pulumi.set(__self__, "http_proxy", http_proxy)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kafka_api and not isinstance(kafka_api, dict):
            raise TypeError("Expected argument 'kafka_api' to be a dict")
        pulumi.set(__self__, "kafka_api", kafka_api)
        if kafka_connect and not isinstance(kafka_connect, dict):
            raise TypeError("Expected argument 'kafka_connect' to be a dict")
        pulumi.set(__self__, "kafka_connect", kafka_connect)
        if maintenance_window_config and not isinstance(maintenance_window_config, dict):
            raise TypeError("Expected argument 'maintenance_window_config' to be a dict")
        pulumi.set(__self__, "maintenance_window_config", maintenance_window_config)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_id and not isinstance(network_id, str):
            raise TypeError("Expected argument 'network_id' to be a str")
        pulumi.set(__self__, "network_id", network_id)
        if prometheus and not isinstance(prometheus, dict):
            raise TypeError("Expected argument 'prometheus' to be a dict")
        pulumi.set(__self__, "prometheus", prometheus)
        if read_replica_cluster_ids and not isinstance(read_replica_cluster_ids, list):
            raise TypeError("Expected argument 'read_replica_cluster_ids' to be a list")
        pulumi.set(__self__, "read_replica_cluster_ids", read_replica_cluster_ids)
        if redpanda_console and not isinstance(redpanda_console, dict):
            raise TypeError("Expected argument 'redpanda_console' to be a dict")
        pulumi.set(__self__, "redpanda_console", redpanda_console)
        if redpanda_version and not isinstance(redpanda_version, str):
            raise TypeError("Expected argument 'redpanda_version' to be a str")
        pulumi.set(__self__, "redpanda_version", redpanda_version)
        if region and not isinstance(region, str):
            raise TypeError("Expected argument 'region' to be a str")
        pulumi.set(__self__, "region", region)
        if resource_group_id and not isinstance(resource_group_id, str):
            raise TypeError("Expected argument 'resource_group_id' to be a str")
        pulumi.set(__self__, "resource_group_id", resource_group_id)
        if schema_registry and not isinstance(schema_registry, dict):
            raise TypeError("Expected argument 'schema_registry' to be a dict")
        pulumi.set(__self__, "schema_registry", schema_registry)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)
        if state_description and not isinstance(state_description, dict):
            raise TypeError("Expected argument 'state_description' to be a dict")
        pulumi.set(__self__, "state_description", state_description)
        if tags and not isinstance(tags, dict):
            raise TypeError("Expected argument 'tags' to be a dict")
        pulumi.set(__self__, "tags", tags)
        if throughput_tier and not isinstance(throughput_tier, str):
            raise TypeError("Expected argument 'throughput_tier' to be a str")
        pulumi.set(__self__, "throughput_tier", throughput_tier)
        if zones and not isinstance(zones, list):
            raise TypeError("Expected argument 'zones' to be a list")
        pulumi.set(__self__, "zones", zones)

    @_builtins.property
    @pulumi.getter(name="allowDeletion")
    def allow_deletion(self) -> _builtins.bool:
        """
        Whether cluster deletion is allowed.
        """
        return pulumi.get(self, "allow_deletion")

    @_builtins.property
    @pulumi.getter(name="awsPrivateLink")
    def aws_private_link(self) -> 'outputs.GetClusterAwsPrivateLinkResult':
        """
        AWS PrivateLink configuration.
        """
        return pulumi.get(self, "aws_private_link")

    @_builtins.property
    @pulumi.getter(name="azurePrivateLink")
    def azure_private_link(self) -> 'outputs.GetClusterAzurePrivateLinkResult':
        """
        Azure Private Link configuration.
        """
        return pulumi.get(self, "azure_private_link")

    @_builtins.property
    @pulumi.getter(name="cloudProvider")
    def cloud_provider(self) -> _builtins.str:
        """
        Cloud provider where resources are created.
        """
        return pulumi.get(self, "cloud_provider")

    @_builtins.property
    @pulumi.getter(name="clusterApiUrl")
    def cluster_api_url(self) -> _builtins.str:
        """
        The URL of the cluster API.
        """
        return pulumi.get(self, "cluster_api_url")

    @_builtins.property
    @pulumi.getter(name="clusterType")
    def cluster_type(self) -> _builtins.str:
        """
        Cluster type. Type is immutable and can only be set on cluster creation.
        """
        return pulumi.get(self, "cluster_type")

    @_builtins.property
    @pulumi.getter(name="connectionType")
    def connection_type(self) -> _builtins.str:
        """
        Cluster connection type. Private clusters are not exposed to the internet. For BYOC clusters, Private is best-practice.
        """
        return pulumi.get(self, "connection_type")

    @_builtins.property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> _builtins.str:
        """
        Timestamp when the cluster was created.
        """
        return pulumi.get(self, "created_at")

    @_builtins.property
    @pulumi.getter(name="customerManagedResources")
    def customer_managed_resources(self) -> 'outputs.GetClusterCustomerManagedResourcesResult':
        """
        Customer managed resources configuration for the cluster.
        """
        return pulumi.get(self, "customer_managed_resources")

    @_builtins.property
    @pulumi.getter(name="gcpGlobalAccessEnabled")
    def gcp_global_access_enabled(self) -> _builtins.bool:
        """
        If true, GCP global access is enabled.
        """
        return pulumi.get(self, "gcp_global_access_enabled")

    @_builtins.property
    @pulumi.getter(name="gcpPrivateServiceConnect")
    def gcp_private_service_connect(self) -> 'outputs.GetClusterGcpPrivateServiceConnectResult':
        """
        GCP Private Service Connect configuration.
        """
        return pulumi.get(self, "gcp_private_service_connect")

    @_builtins.property
    @pulumi.getter(name="httpProxy")
    def http_proxy(self) -> 'outputs.GetClusterHttpProxyResult':
        """
        HTTP Proxy properties.
        """
        return pulumi.get(self, "http_proxy")

    @_builtins.property
    @pulumi.getter
    def id(self) -> _builtins.str:
        """
        ID of the cluster. ID is an output from the Create Cluster endpoint and cannot be set by the caller.
        """
        return pulumi.get(self, "id")

    @_builtins.property
    @pulumi.getter(name="kafkaApi")
    def kafka_api(self) -> 'outputs.GetClusterKafkaApiResult':
        """
        Cluster's Kafka API properties.
        """
        return pulumi.get(self, "kafka_api")

    @_builtins.property
    @pulumi.getter(name="kafkaConnect")
    def kafka_connect(self) -> 'outputs.GetClusterKafkaConnectResult':
        """
        Kafka Connect configuration.
        """
        return pulumi.get(self, "kafka_connect")

    @_builtins.property
    @pulumi.getter(name="maintenanceWindowConfig")
    def maintenance_window_config(self) -> 'outputs.GetClusterMaintenanceWindowConfigResult':
        """
        Maintenance window configuration for the cluster.
        """
        return pulumi.get(self, "maintenance_window_config")

    @_builtins.property
    @pulumi.getter
    def name(self) -> _builtins.str:
        """
        Unique name of the cluster.
        """
        return pulumi.get(self, "name")

    @_builtins.property
    @pulumi.getter(name="networkId")
    def network_id(self) -> _builtins.str:
        """
        Network ID where cluster is placed.
        """
        return pulumi.get(self, "network_id")

    @_builtins.property
    @pulumi.getter
    def prometheus(self) -> 'outputs.GetClusterPrometheusResult':
        """
        Prometheus metrics endpoint properties.
        """
        return pulumi.get(self, "prometheus")

    @_builtins.property
    @pulumi.getter(name="readReplicaClusterIds")
    def read_replica_cluster_ids(self) -> Sequence[_builtins.str]:
        """
        IDs of clusters that can create read-only topics from this cluster.
        """
        return pulumi.get(self, "read_replica_cluster_ids")

    @_builtins.property
    @pulumi.getter(name="redpandaConsole")
    def redpanda_console(self) -> 'outputs.GetClusterRedpandaConsoleResult':
        """
        Redpanda Console properties.
        """
        return pulumi.get(self, "redpanda_console")

    @_builtins.property
    @pulumi.getter(name="redpandaVersion")
    def redpanda_version(self) -> _builtins.str:
        """
        Current Redpanda version of the cluster.
        """
        return pulumi.get(self, "redpanda_version")

    @_builtins.property
    @pulumi.getter
    def region(self) -> _builtins.str:
        """
        Cloud provider region.
        """
        return pulumi.get(self, "region")

    @_builtins.property
    @pulumi.getter(name="resourceGroupId")
    def resource_group_id(self) -> _builtins.str:
        """
        Resource group ID of the cluster.
        """
        return pulumi.get(self, "resource_group_id")

    @_builtins.property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> 'outputs.GetClusterSchemaRegistryResult':
        """
        Schema Registry properties.
        """
        return pulumi.get(self, "schema_registry")

    @_builtins.property
    @pulumi.getter
    def state(self) -> _builtins.str:
        """
        Current state of the cluster.
        """
        return pulumi.get(self, "state")

    @_builtins.property
    @pulumi.getter(name="stateDescription")
    def state_description(self) -> 'outputs.GetClusterStateDescriptionResult':
        """
        Detailed state description when cluster is in a non-ready state.
        """
        return pulumi.get(self, "state_description")

    @_builtins.property
    @pulumi.getter
    def tags(self) -> Mapping[str, _builtins.str]:
        """
        Tags placed on cloud resources.
        """
        return pulumi.get(self, "tags")

    @_builtins.property
    @pulumi.getter(name="throughputTier")
    def throughput_tier(self) -> _builtins.str:
        """
        Throughput tier of the cluster.
        """
        return pulumi.get(self, "throughput_tier")

    @_builtins.property
    @pulumi.getter
    def zones(self) -> Sequence[_builtins.str]:
        """
        Zones of the cluster. Must be valid zones within the selected region. If multiple zones are used, the cluster is a multi-AZ cluster.
        """
        return pulumi.get(self, "zones")


class AwaitableGetClusterResult(GetClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetClusterResult(
            allow_deletion=self.allow_deletion,
            aws_private_link=self.aws_private_link,
            azure_private_link=self.azure_private_link,
            cloud_provider=self.cloud_provider,
            cluster_api_url=self.cluster_api_url,
            cluster_type=self.cluster_type,
            connection_type=self.connection_type,
            created_at=self.created_at,
            customer_managed_resources=self.customer_managed_resources,
            gcp_global_access_enabled=self.gcp_global_access_enabled,
            gcp_private_service_connect=self.gcp_private_service_connect,
            http_proxy=self.http_proxy,
            id=self.id,
            kafka_api=self.kafka_api,
            kafka_connect=self.kafka_connect,
            maintenance_window_config=self.maintenance_window_config,
            name=self.name,
            network_id=self.network_id,
            prometheus=self.prometheus,
            read_replica_cluster_ids=self.read_replica_cluster_ids,
            redpanda_console=self.redpanda_console,
            redpanda_version=self.redpanda_version,
            region=self.region,
            resource_group_id=self.resource_group_id,
            schema_registry=self.schema_registry,
            state=self.state,
            state_description=self.state_description,
            tags=self.tags,
            throughput_tier=self.throughput_tier,
            zones=self.zones)


def get_cluster(id: Optional[_builtins.str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetClusterResult:
    """
    Data source for a Redpanda Cloud cluster

    ## Usage

    ```python
    import pulumi
    import pulumi_redpanda as redpanda

    example = redpanda.get_cluster(id="cluster_id")
    ```

    ### Example Usage of a data source BYOC to manage users and ACLs

    ```python
    import pulumi
    import pulumi_redpanda as redpanda
    import pulumiverse_redpanda as redpanda

    config = pulumi.Config()
    cluster_id = config.get("clusterId")
    if cluster_id is None:
        cluster_id = ""
    test_cluster = redpanda.get_cluster(id=cluster_id)
    topic_config = config.get_object("topicConfig")
    if topic_config is None:
        topic_config = {
            "cleanup.policy": "compact",
            "flush.ms": 100,
            "compression.type": "snappy",
        }
    partition_count = config.get_float("partitionCount")
    if partition_count is None:
        partition_count = 3
    replication_factor = config.get_float("replicationFactor")
    if replication_factor is None:
        replication_factor = 3
    test_topic = redpanda.Topic("testTopic",
        partition_count=partition_count,
        replication_factor=replication_factor,
        cluster_api_url=test_cluster.cluster_api_url,
        allow_deletion=True,
        configuration=topic_config)
    user_pw = config.get("userPw")
    if user_pw is None:
        user_pw = "password"
    mechanism = config.get("mechanism")
    if mechanism is None:
        mechanism = "scram-sha-256"
    test_user = redpanda.User("testUser",
        password=user_pw,
        mechanism=mechanism,
        cluster_api_url=test_cluster.cluster_api_url)
    test_acl = redpanda.Acl("testAcl",
        resource_type="CLUSTER",
        resource_name_="kafka-cluster",
        resource_pattern_type="LITERAL",
        principal=test_user.name.apply(lambda name: f"User:{name}"),
        host="*",
        operation="ALTER",
        permission_type="ALLOW",
        cluster_api_url=test_cluster.cluster_api_url)
    user_name = config.get("userName")
    if user_name is None:
        user_name = "data-test-username"
    topic_name = config.get("topicName")
    if topic_name is None:
        topic_name = "data-test-topic"
    ```

    ## Limitations

    Can only be used with Redpanda Cloud Dedicated and BYOC clusters.


    :param _builtins.str id: ID of the cluster. ID is an output from the Create Cluster endpoint and cannot be set by the caller.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('redpanda:index/getCluster:getCluster', __args__, opts=opts, typ=GetClusterResult).value

    return AwaitableGetClusterResult(
        allow_deletion=pulumi.get(__ret__, 'allow_deletion'),
        aws_private_link=pulumi.get(__ret__, 'aws_private_link'),
        azure_private_link=pulumi.get(__ret__, 'azure_private_link'),
        cloud_provider=pulumi.get(__ret__, 'cloud_provider'),
        cluster_api_url=pulumi.get(__ret__, 'cluster_api_url'),
        cluster_type=pulumi.get(__ret__, 'cluster_type'),
        connection_type=pulumi.get(__ret__, 'connection_type'),
        created_at=pulumi.get(__ret__, 'created_at'),
        customer_managed_resources=pulumi.get(__ret__, 'customer_managed_resources'),
        gcp_global_access_enabled=pulumi.get(__ret__, 'gcp_global_access_enabled'),
        gcp_private_service_connect=pulumi.get(__ret__, 'gcp_private_service_connect'),
        http_proxy=pulumi.get(__ret__, 'http_proxy'),
        id=pulumi.get(__ret__, 'id'),
        kafka_api=pulumi.get(__ret__, 'kafka_api'),
        kafka_connect=pulumi.get(__ret__, 'kafka_connect'),
        maintenance_window_config=pulumi.get(__ret__, 'maintenance_window_config'),
        name=pulumi.get(__ret__, 'name'),
        network_id=pulumi.get(__ret__, 'network_id'),
        prometheus=pulumi.get(__ret__, 'prometheus'),
        read_replica_cluster_ids=pulumi.get(__ret__, 'read_replica_cluster_ids'),
        redpanda_console=pulumi.get(__ret__, 'redpanda_console'),
        redpanda_version=pulumi.get(__ret__, 'redpanda_version'),
        region=pulumi.get(__ret__, 'region'),
        resource_group_id=pulumi.get(__ret__, 'resource_group_id'),
        schema_registry=pulumi.get(__ret__, 'schema_registry'),
        state=pulumi.get(__ret__, 'state'),
        state_description=pulumi.get(__ret__, 'state_description'),
        tags=pulumi.get(__ret__, 'tags'),
        throughput_tier=pulumi.get(__ret__, 'throughput_tier'),
        zones=pulumi.get(__ret__, 'zones'))
def get_cluster_output(id: Optional[pulumi.Input[_builtins.str]] = None,
                       opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetClusterResult]:
    """
    Data source for a Redpanda Cloud cluster

    ## Usage

    ```python
    import pulumi
    import pulumi_redpanda as redpanda

    example = redpanda.get_cluster(id="cluster_id")
    ```

    ### Example Usage of a data source BYOC to manage users and ACLs

    ```python
    import pulumi
    import pulumi_redpanda as redpanda
    import pulumiverse_redpanda as redpanda

    config = pulumi.Config()
    cluster_id = config.get("clusterId")
    if cluster_id is None:
        cluster_id = ""
    test_cluster = redpanda.get_cluster(id=cluster_id)
    topic_config = config.get_object("topicConfig")
    if topic_config is None:
        topic_config = {
            "cleanup.policy": "compact",
            "flush.ms": 100,
            "compression.type": "snappy",
        }
    partition_count = config.get_float("partitionCount")
    if partition_count is None:
        partition_count = 3
    replication_factor = config.get_float("replicationFactor")
    if replication_factor is None:
        replication_factor = 3
    test_topic = redpanda.Topic("testTopic",
        partition_count=partition_count,
        replication_factor=replication_factor,
        cluster_api_url=test_cluster.cluster_api_url,
        allow_deletion=True,
        configuration=topic_config)
    user_pw = config.get("userPw")
    if user_pw is None:
        user_pw = "password"
    mechanism = config.get("mechanism")
    if mechanism is None:
        mechanism = "scram-sha-256"
    test_user = redpanda.User("testUser",
        password=user_pw,
        mechanism=mechanism,
        cluster_api_url=test_cluster.cluster_api_url)
    test_acl = redpanda.Acl("testAcl",
        resource_type="CLUSTER",
        resource_name_="kafka-cluster",
        resource_pattern_type="LITERAL",
        principal=test_user.name.apply(lambda name: f"User:{name}"),
        host="*",
        operation="ALTER",
        permission_type="ALLOW",
        cluster_api_url=test_cluster.cluster_api_url)
    user_name = config.get("userName")
    if user_name is None:
        user_name = "data-test-username"
    topic_name = config.get("topicName")
    if topic_name is None:
        topic_name = "data-test-topic"
    ```

    ## Limitations

    Can only be used with Redpanda Cloud Dedicated and BYOC clusters.


    :param _builtins.str id: ID of the cluster. ID is an output from the Create Cluster endpoint and cannot be set by the caller.
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('redpanda:index/getCluster:getCluster', __args__, opts=opts, typ=GetClusterResult)
    return __ret__.apply(lambda __response__: GetClusterResult(
        allow_deletion=pulumi.get(__response__, 'allow_deletion'),
        aws_private_link=pulumi.get(__response__, 'aws_private_link'),
        azure_private_link=pulumi.get(__response__, 'azure_private_link'),
        cloud_provider=pulumi.get(__response__, 'cloud_provider'),
        cluster_api_url=pulumi.get(__response__, 'cluster_api_url'),
        cluster_type=pulumi.get(__response__, 'cluster_type'),
        connection_type=pulumi.get(__response__, 'connection_type'),
        created_at=pulumi.get(__response__, 'created_at'),
        customer_managed_resources=pulumi.get(__response__, 'customer_managed_resources'),
        gcp_global_access_enabled=pulumi.get(__response__, 'gcp_global_access_enabled'),
        gcp_private_service_connect=pulumi.get(__response__, 'gcp_private_service_connect'),
        http_proxy=pulumi.get(__response__, 'http_proxy'),
        id=pulumi.get(__response__, 'id'),
        kafka_api=pulumi.get(__response__, 'kafka_api'),
        kafka_connect=pulumi.get(__response__, 'kafka_connect'),
        maintenance_window_config=pulumi.get(__response__, 'maintenance_window_config'),
        name=pulumi.get(__response__, 'name'),
        network_id=pulumi.get(__response__, 'network_id'),
        prometheus=pulumi.get(__response__, 'prometheus'),
        read_replica_cluster_ids=pulumi.get(__response__, 'read_replica_cluster_ids'),
        redpanda_console=pulumi.get(__response__, 'redpanda_console'),
        redpanda_version=pulumi.get(__response__, 'redpanda_version'),
        region=pulumi.get(__response__, 'region'),
        resource_group_id=pulumi.get(__response__, 'resource_group_id'),
        schema_registry=pulumi.get(__response__, 'schema_registry'),
        state=pulumi.get(__response__, 'state'),
        state_description=pulumi.get(__response__, 'state_description'),
        tags=pulumi.get(__response__, 'tags'),
        throughput_tier=pulumi.get(__response__, 'throughput_tier'),
        zones=pulumi.get(__response__, 'zones')))
