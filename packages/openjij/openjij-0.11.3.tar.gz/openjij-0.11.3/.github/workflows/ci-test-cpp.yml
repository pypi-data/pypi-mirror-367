name: CPP Test

on: 
  workflow_dispatch:
  push:
    branches: 
      - main
  pull_request: 
    types: 
     - opened
     - reopened
     - synchronize

concurrency:
      group: WORKFLOW-CPP-TEST-${{ github.head_ref || github.run_id }}
      cancel-in-progress: false

jobs:
  CPP:
    if: ${{ github.actor != 'dependabot[bot]' || !contains(github.head_ref, 'dependabot')}}
    runs-on: ${{ matrix.os }}
    name: CPP Test on ${{ matrix.os }}
    concurrency:
      group: CPP-TEST-${{ github.head_ref || github.run_id }}-${{ matrix.os }}
      cancel-in-progress: false
    strategy:
      max-parallel: 3
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
    - uses: actions/checkout@v4
    - name: Install uv and set Python version
      uses: astral-sh/setup-uv@v6
      with:
        python-version: '3.12'
    - name: Install Dep on linux
      if: ${{ matrix.os == 'ubuntu-latest'}}
      shell: bash
      run: |
        uv tool install ninja
        sudo apt-get install -y libeigen3-dev 
        sudo apt-get install -y libopenblas-dev lcov
    - name: Install Dep on macos
      if: ${{ matrix.os == 'macos-latest'}}
      shell: bash
      run: |
        uv tool install ninja
        brew install eigen nlohmann-json lcov libomp
    - name: Add msbuild to PATH
      if: ${{ matrix.os == 'windows-latest'}}
      uses: microsoft/setup-msbuild@v2.0.0
    - name: Prepare Cache 
      if: ${{ matrix.os == 'windows-latest'}}
      shell: bash 
      run: |
        set -eux
        ls  C:/vcpkg
        MSBuild.exe -version > msbuild_version.txt
        cat msbuild_version.txt
    - name: Install Dep on windows
      if: ${{ matrix.os == 'windows-latest'}}
      shell: powershell
      run: |
         vcpkg help triplet
         vcpkg search eigen3
         vcpkg search openblas
         vcpkg search blas
         vcpkg search clpack
         vcpkg search lapack-reference
         vcpkg --triplet x64-windows-static install eigen3
         vcpkg --triplet x64-windows install eigen3
         vcpkg --triplet x64-windows-static install nlohmann-json
         vcpkg --triplet x64-windows install nlohmann-json
         vcpkg integrate install
    - name: Install CMake 
      run: |
        uv tool install cmake
        cmake --version
    - name: Prepare 
      shell: bash
      run: mkdir build
    - name: CMake Configure
      if: ${{ matrix.os == 'ubuntu-latest'}}
      shell: bash
      run: >
        cmake 
        -DCMAKE_BUILD_TYPE=Debug 
        -DENABLE_COVERAGE=On
        -S .
        -B build
    - name: CMake Configure
      if: ${{ matrix.os == 'macos-latest'}}
      shell: bash
      run: >
        cmake 
        -DCMAKE_BUILD_TYPE=Debug 
        -S .
        -B build
    - name: CMake Configure
      if: ${{ matrix.os == 'windows-latest'}}
      shell: powershell
      run: >
        cmake 
        -DCMAKE_BUILD_TYPE=Debug 
        -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake
        -S .
        -B build
    - name: CMake Build
      shell: bash
      run: >
        cmake  
        --build build
        --parallel
    - name: CMake Test
      shell: bash
      working-directory: build
      run: >
        ctest
        --extra-verbose
        --parallel
        --schedule-random
    - uses: codecov/codecov-action@v5
      if: ${{ matrix.os == 'ubuntu-latest'}}
      continue-on-error: true
      with:
        token: ${{ secrets.CODECOV_TOKEN }} 
        working-directory: build/tests/CMakeFiles/cxxjij_test.dir/
        name: cxxopenjij
        flags: cxxopenjij
        fail_ci_if_error: false
        verbose: true
