#
# MIT License
#
# (C) Copyright 2025 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
# This file contains the base configuration (defaults) for the vTDS
# core driver. It is what will be returned from the get_base_config()
# and get_base_config_text() calls into the vtds-core configuration
# API.
core:
  # The 'layers' section configures the layer plugins for
  # loading. There are four layers plus the vTDS core driver and the
  # vTDS base library.:
  #
  # - provider
  # - platform
  # - cluster
  # - application
  # - core
  # - base
  #
  # The 'core' driver and 'base' library are a bit special because
  # they specify the the versions of those things used to run vtds
  # requests. This may differ from the versions used to invoke those
  # requests because vTDS requests run within a run-time created
  # Python virtual environment. The core driver wrapper that initiates
  # requests, however, runs in the user's Python environment using the
  # installed vtds-core package found there. The wrapper, in turn,
  # creates a virtual environment, installs the core driver, base
  # library and all of the layers specified here in that virtual
  # environment, then invokes the requests themselves inside the
  # virtual environment using the versions specified here..
  #
  # Each layer or library consists of a pip installable package
  # containing an importable python module. The installation and
  # loading is configured using the following data:
  #
  # - package:
  #
  #   the package name containing the python module that implements
  #   the layer -- REQUIRED
  #
  # - module:
  #
  #   the module name to be imported from the package -- REQUIRED
  #
  # - source_type:
  #
  #   The type of source from which the package will be pulled. Two
  #   source types are supported. The default is 'pypi' which is
  #   treated as a straightforward pip install from the specified PyPI
  #   index. An optional 'metadata' block for a PyPI source contains
  #   the following:
  #
  # - url
  #
  #   the URL to the PyPI style index where the plugin module is
  #   hosted. If this is empty or null, the public PyPI is used.
  #
  # - version:
  #
  #   the version requested using the syntax of a pip requirements
  #   file. If this is empty or null, the latest stable version will
  #   be used.
  #
  # If you are pulling the layer from a private PyPIindex requiring
  # access tokens, you will need to provide a means for pip to
  # authenticate. The easiest way to do this is to set up a '.netrc'
  # file for the host in your home directory.
  #
  # Alternatively you can use a 'git' source. In this case, the source
  # is a git repository containing pip installable python source
  # code. The repository will be cloned and set to the requested
  # version (branch or tag) then `pip` will be used to install the
  # package from the cloned git repo. To use a git repo, supply a
  # 'metadata' block specifying at least the URL of the git repo. As
  # follows:
  #
  # - url:
  #
  #   The required URL from which to clone the git repo.
  #
  # - version:
  #
  #   The optional version (branch, tag or digest). By default the
  #   default branch is used.
  #
  # The base configuration uses mock implementations of each layer
  # to permit easy unit testing. Override these in your
  # configuration overlay(s) to specify the layer plugins you
  # actually want for your vTDS.
  layers:
    base:
      package: vtds-base
      module: vtds_base
      source_type: git
      metadata:
        url: "git@github.com:Cray-HPE/vtds-base.git"
        version: null
    core:
      package: vtds-core
      module: vtds_core
      source_type: git
      metadata:
        url: "git@github.com:Cray-HPE/vtds-core.git"
        version: null
    provider:
      package: vtds-provider-mock
      module: vtds_provider_mock
      source_type: git
      metadata:
        url: "git@github.com:Cray-HPE/vtds-provider-mock.git"
        version: null
    platform:
      package: vtds-platform-mock
      module: vtds_platform_mock
      source_type: git
      metadata:
        url: "git@github.com:Cray-HPE/vtds-platform-mock.git"
        version: null
    cluster:
      package: vtds-cluster-mock
      module: vtds_cluster_mock
      source_type: git
      metadata:
        url: "git@github.com:Cray-HPE/vtds-cluster-mock.git"
        version: null
    application:
      package: vtds-application-mock
      module: vtds_application_mock
      source_type: git
      metadata:
        url: "git@github.com:Cray-HPE/vtds-application-mock.git"
        version: null

  # The 'configurations' section lists the configuration overlays to
  # be applied when preparing your vTDS for deployment along with
  # metadata indicating how to retrieve them.
  #
  # Configuration overlays are applied by merging them on top of each
  # other in the order in which they appear in this list, with each
  # overlay potentially overwriting elements of the previous overlay
  # in the list. Usually it is a good idea to specify the overlays on
  # the command line as the last ones to apply.
  #
  # Each configuration overlay source in the list consists of a 'type'
  # and a 'metadata' block that is specific to the type. The available
  # types are:
  #
  # - core-config
  #
  #   Apply the global core configuration as an overlay. This
  #   configuration is primarily used to set up and run requests, but
  #   if an item of this type is included here, the complete core
  #   configuration will be overlaid at that point in the composition
  #   process. The 'core' section of the core configuration is always
  #   overlaid on the final configuration as the last overlay.
  #
  #   The metadata for core-config is an empty map.
  #
  # - command-line
  #
  #   Look for pathnames to configuration overlays on the command
  #   line and apply them in the order specified there.
  #
  #   The metadata block for command-line configs is an empty map.
  #
  # - local-file
  #
  #   Retrieve the configuration from a local file whose pathname is
  #   specified in the metadata block. The metadata block for
  #   local-file configs is a map containing a single 'pathname'
  #   element which indicates the local pathname to the file. If the
  #   pathname is relative, it is relative to the directory where the
  #   'vtds' commands are run.
  #
  # - git
  #
  #   Retrieve a configuration overlay from a remote git repository
  #   based on information in the metadata block. The information in
  #   the metadata for git overlays is a map containing the following
  #   elements:
  #
  #   - 'repo'
  #
  #     This specifies the URL used to retrieve the git repository.
  #
  #   - 'version'
  #
  #     This specifies the branch or tag to be used to obtain the
  #     overlay.
  #
  #   - 'path'
  #
  #     This specifies the relative forward slash ('/') separated path
  #     to the desired overlay file within the repo.
  #
  # - url
  #
  #   Retrieve the configuration from the specified URL. If the
  #   URL host requires authorization credentials, those can be set up
  #   in a '.netrc' file in your home directory. The metadata for a
  #   'url' type configuration overlay is a maap containing a single
  #   'url' element specifyiing the URL to be be used to find the
  #   overlay.
  configurations:
  # Examples:
  #
  # - type: local-file
  #   metadata:
  #     pathname: /the/path/to/my/config/overlay.yaml
  # - type: git
  #   metadata:
  #     repo: git@github.com:my-config-repo-name.git
  #     version: main
  #     path: my/config/overlay.yaml
  # - type: url
  #   metadata:
  #     url: https://www.example.com/vtds_overlays/my/config/overlay.yaml
  - type: command-line
    metadata: {}
  - type: core-config
    metadata: {}
