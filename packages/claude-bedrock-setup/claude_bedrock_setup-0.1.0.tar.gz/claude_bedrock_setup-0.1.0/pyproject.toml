[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "claude-bedrock-setup"
version = "0.1.0"
# dynamic = ["version"]  # Commented out for bump2version compatibility
description = "CLI tool to configure Claude Code for AWS Bedrock"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Chris Christensen", email = "chris@nexusweblabs.com"}
]
maintainers = [
    {name = "Chris Christensen", email = "chris@nexusweblabs.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Installation/Setup",
    "Topic :: Utilities",
    "Environment :: Console",
    "Typing :: Typed",
]
keywords = [
    "claude",
    "anthropic",
    "aws",
    "bedrock",
    "cli",
    "configuration",
    "setup",
    "ai",
    "llm",
    "chatbot",
]
requires-python = ">=3.10"
dependencies = [
    "click>=8.1.0",
    "boto3>=1.34.0",
    "rich>=13.7.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "mypy>=1.0.0",
    "flake8>=6.0.0",
    "pre-commit>=3.0.0",
    "bump2version>=1.0.0",
    "bandit>=1.7.0",
    "safety>=2.0.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "moto[bedrock]>=4.2.0",
]

[project.urls]
"Homepage" = "https://github.com/christensen143/claude-bedrock-setup"
"Bug Tracker" = "https://github.com/christensen143/claude-bedrock-setup/issues"
"Documentation" = "https://github.com/christensen143/claude-bedrock-setup#readme"
"Source Code" = "https://github.com/christensen143/claude-bedrock-setup"
"Changelog" = "https://github.com/christensen143/claude-bedrock-setup/blob/main/CHANGELOG.md"

[project.scripts]
claude-bedrock-setup = "claude_setup.cli:cli"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

# [tool.setuptools.dynamic]
# version = {attr = "claude_setup.__version__"}  # Commented out for bump2version compatibility

[tool.setuptools.package-data]
claude_setup = ["py.typed"]

[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_any_generics = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "rich.*",
    "click.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=claude_setup",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=90",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*", "*Tests"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/claude_setup"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/virtualenv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]