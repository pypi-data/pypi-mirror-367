from __future__ import annotations
from typing import Any, Optional, List, Type, TypeVar, Tuple, Union
import numpy as np
from numpy.typing import NDArray

T = TypeVar('T')
from smpl_rs.models import SmplX
from smpl_rs.types import SmplType, Gender

class SceneTimer:
    def advance_sec(self, secs: float) -> None: ...
    def duration(self) -> float: ...
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def from_scene(self) -> SceneTimer: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def get_cur_time_sec(self) -> float: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def is_finished(self) -> bool: ...
    def num_scene_animation_frames(self) -> int: ...
    def pause(self) -> None: ...
    def play(self) -> None: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class SmplCache:
    def add_model(self, model: SmplX, cache_models: bool) -> None: ...
    def default(self) -> SmplCache: ...
    def get(self, entity_bits: int, scene_ptr_idx: int) -> SmplCache: ...
    def get_model(self, smpl_type: SmplType, gender: Gender) -> Union[SmplX, SmplPP]: ...
    def insert_to_entity(self, entity_bits: int, scene_ptr_idx: int) -> None: ...
    def set_lazy_loading(self, smpl_type: SmplType, gender: Gender, path: str) -> None: ...

