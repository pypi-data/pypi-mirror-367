from __future__ import annotations
from typing import Any, Optional, List, Type, TypeVar, Tuple, Union
import numpy as np
from numpy.typing import NDArray

T = TypeVar('T')
from smpl_rs.types import GltfCompatibilityMode
from smpl_rs.builders import EntityBuilderSmplRs

class GltfCodec:
    def default(self) -> GltfCodec: ...
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def from_scene(self, scene_ptr_idx: int, export_camera: bool) -> GltfCodec: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...
    def save(self, path: str, compatibility_mode: Optional[GltfCompatibilityMode], out_face_type: Optional[FaceType]) -> None: ...

class McsCodec:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def from_file(self, path: str) -> McsCodec: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...
    def to_entity_builders(self) -> List[EntityBuilderSmplRs]: ...

class SmplCodec:
    def default(self) -> SmplCodec: ...
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def from_buf(self, buf: NDArray[np.uint8]) -> SmplCodec: ...
    def from_file(self, path: str) -> SmplCodec: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...
    def to_entity_builder(self) -> EntityBuilderSmplRs: ...

