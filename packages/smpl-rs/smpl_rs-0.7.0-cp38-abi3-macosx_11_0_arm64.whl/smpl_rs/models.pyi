from __future__ import annotations
from typing import Any, Optional, List, Type, TypeVar, Tuple, Union
import numpy as np
from numpy.typing import NDArray

T = TypeVar('T')
from smpl_rs.types import SmplType, Gender
from smpl_rs.components import SmplOptions, Betas, Expression, Pose

class SmplOutput:
    def compute_normals(self) -> None: ...
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class SmplOutputPoseT:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...
    def verts_without_expression(self) -> NDArray[np.float32]: ...

class SmplOutputPosed:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class SmplX:
    def create_body_with_uv(self, smpl_merged: SmplOutput) -> SmplOutput: ...
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def forward(self, options: SmplOptions, betas: Betas, pose: Pose, expression: Optional[Expression]) -> SmplOutput: ...
    def from_npz(self, path: str, gender: Gender, max_num_betas: Optional[int], max_expression_blendshapes: Optional[int]) -> SmplX: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def get_for_candle(self) -> SmplXGPU: ...
    def get_for_candle_mut(self) -> SmplXGPU: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class SmplXGPU:
    pass

