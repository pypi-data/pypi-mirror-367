from __future__ import annotations
from typing import Any, Optional, List, Type, TypeVar, Tuple, Union
import numpy as np
from numpy.typing import NDArray

T = TypeVar('T')
from smpl_rs.types import SmplType, UpAxis, AngleType, AnimWrap

class Animation:
    def advance_sec(self, secs: float) -> None: ...
    def align_y_axis_quadrant(self, current_axis: NDArray[np.float32], desired_axis: NDArray[np.float32]) -> None: ...
    def duration(self) -> float: ...
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def from_matrices(self, per_frame_joint_poses: NDArray[np.float32], per_frame_global_trans: NDArray[np.float32], per_expression_coeffs: Optional[NDArray[np.float32]], fps: Optional[float], wrap_behaviour: Optional[AnimWrap], angle_type: Optional[AngleType], up_axis: Optional[UpAxis], smpl_type: Optional[SmplType], face_type: Optional[FaceType]) -> Animation: ...
    def from_npz(self, path_anim: str, fps: Optional[float], wrap_behaviour: Optional[AnimWrap], angle_type: Optional[AngleType], up_axis: Optional[UpAxis], smpl_type: Optional[SmplType], face_type: Optional[FaceType]) -> Animation: ...
    def from_smpl_file(self, path_anim: str, wrap_behaviour: Optional[AnimWrap]) -> Animation: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def get_cur_time_sec(self) -> float: ...
    def get_pose_at_idx(self, idx: int) -> Pose: ...
    def get_smooth_time_indices(self) -> Tuple[int, int, float]: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def is_finished(self) -> bool: ...
    def num_animation_frames(self) -> int: ...
    def pause(self) -> None: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...
    def set_wrap(self, wrap: AnimWrap) -> None: ...
    def translate(self, translation: NDArray[np.float32]) -> None: ...

class Betas:
    def default(self) -> Betas: ...
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def numpy(self) -> NDArray[np.float32]: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class Expression:
    def default(self) -> Expression: ...
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def new_empty(self, num_coeffs: int, face_type: Optional[FaceType]) -> Expression: ...
    def numpy(self) -> NDArray[np.float32]: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class Follow:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class Follower:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class GlossInterop:
    def default(self) -> GlossInterop: ...
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class Pose:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def from_matrices(self, joint_poses: NDArray[np.float32], global_trans: NDArray[np.float32], up_axis: UpAxis, smpl_type: SmplType) -> Pose: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def joint_poses(self) -> NDArray[np.float32]: ...
    def new_empty(self, up_axis: UpAxis, smpl_type: SmplType) -> Pose: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class PoseOverride:
    def allow_all(self) -> PoseOverride: ...
    def deny_all(self) -> PoseOverride: ...
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def overwrite_hands(self, hand_type: HandType) -> PoseOverride: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class SmplOptions:
    def default(self) -> SmplOptions: ...
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class SmplParams:
    def default(self) -> SmplParams: ...
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

