# orbitlab/core/dynamic_store.pyi

from pathlib import Path
from threading import RLock
from typing import Any, Callable, Dict, List, Optional, TypeVar, Union, TypedDict

# ------------------- TrackedDictState -------------------
class TrackedDictState(TypedDict, total=False):
    _data: Dict[Any, Any]
    _key: Any

# ------------------- TrackedDict -------------------
StoreValue = Union[int, float, str, bool, Dict[str, Any], "TrackedDict"]
K = TypeVar("K")
V = TypeVar("V")
T = TypeVar("T")

class TrackedDict(dict[Any, Any]):
    _parent: Optional["DynamicDillStore"]
    _key: Any

    def __init__(self, parent: Optional["DynamicDillStore"] = None, key: Any = None, *args: Any, **kwargs: Any) -> None: ...
    def __setitem__(self, k: Any, v: Any) -> None: ...
    def __delitem__(self, k: Any) -> None: ...
    def update(self, *args: Any, **kwargs: Any) -> None: ...
    def _trigger(self) -> None: ...
    def __getstate__(self) -> TrackedDictState: ...
    def __setstate__(self, state: TrackedDictState) -> None: ...
    def __repr__(self) -> str: ...

def to_plain_dict(d: Union[TrackedDict, Dict[Any, Any], T]) -> Union[Dict[Any, Any], T]: ...

# ------------------- DynamicDillStore -------------------
class DynamicDillStore:
    path: str
    lock: Any
    auto_reload: bool
    auto_save: bool
    auto_commit_interval: Optional[float]
    secure: bool

    def __init__(
        self,
        path: str,
        auto_reload: bool = ...,
        auto_save: bool = ...,
        auto_commit_interval: Optional[float] = ...,
        secure: bool = ...
    ) -> None: ...

    def _wrap_nested_dicts(self, data: Any, key: str) -> Any: ...
    def _reattach_tracked_dicts(self) -> None: ...
    def _reload(self) -> None: ...
    def _save(self) -> None: ...
    def _auto_commit_if_needed(self, key: str) -> None: ...

    def set(self, key: str, value: Any) -> None: ...
    def get(self, key: str, default: Any = ...) -> Any: ...
    def delete(self, key: str) -> None: ...
    def keys(self) -> List[str]: ...
    def values(self) -> List[Any]: ...
    def items(self) -> List[tuple[str, Any]]: ...
    def clear(self) -> None: ...
    def commit(self, key: str) -> None: ...
    def history(self, key: str) -> List[str]: ...
    def rollback(self, key: str, timestamp: str) -> None: ...

    def __repr__(self) -> str: ...
