import os
from pathlib import Path
from typing import Any, Dict, Optional

import pandas as pd
import yaml
from clickhouse_connect import get_client


class ClickHouseEasy:
    """
    –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å ClickHouse

    –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∑–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è—Ç—å SQL-–∑–∞–ø—Ä–æ—Å—ã,
    –ø–æ–ª—É—á–∞—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤–∏–¥–µ pandas DataFrame.
    """

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å-–∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    _default_config_initialized = False
    _default_config_file = "clickhouse_config.yaml"

    def __init__(
        self,
        host: Optional[str] = None,
        port: Optional[int] = None,
        username: Optional[str] = None,
        password: Optional[str] = None,
        database: Optional[str] = None,
        config_file: Optional[str] = None,
        auto_init_config: bool = True,
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ ClickHouse

        Args:
            host: –•–æ—Å—Ç ClickHouse —Å–µ—Ä–≤–µ—Ä–∞
            port: –ü–æ—Ä—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            password: –ü–∞—Ä–æ–ª—å
            database: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            auto_init_config: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
        """
        self._client = None

        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥ –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω
        if auto_init_config and not self._default_config_initialized:
            self._auto_initialize_config()

        # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω config_file, –Ω–æ –µ—Å—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if config_file is None and Path(self._default_config_file).exists():
            config_file = self._default_config_file

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.host = host or os.getenv("CLICKHOUSE_HOST")
        self.port = port or int(os.getenv("CLICKHOUSE_PORT", "8123"))
        self.username = username or os.getenv("CLICKHOUSE_USERNAME")
        self.password = password or os.getenv("CLICKHOUSE_PASSWORD")
        self.database = database or os.getenv("CLICKHOUSE_DATABASE")

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –Ω–µ–≥–æ (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –Ω–∞–¥ env –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
        if config_file:
            self._load_config_from_file(config_file)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if not all([self.host, self.port, self.username, self.password]):
            raise ValueError(
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å host, port, username –∏ password –ª–∏–±–æ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, "
                "–ª–∏–±–æ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (CLICKHOUSE_HOST, CLICKHOUSE_PORT, "
                "CLICKHOUSE_USERNAME, CLICKHOUSE_PASSWORD), –ª–∏–±–æ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
            )

    @classmethod
    def _auto_initialize_config(cls):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"""
        if not cls._default_config_initialized and not Path(cls._default_config_file).exists():
            print(f"üîß –°–æ–∑–¥–∞—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª: {cls._default_config_file}")
            print("üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            
            cls.initialize_config(
                config_file=cls._default_config_file,
                create_template=True
            )
            cls._default_config_initialized = True

    def _load_config_from_file(self, config_file: str):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        config_path = Path(config_file)

        if config_path.suffix.lower() in [".yaml", ".yml"]:
            # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ YAML —Ñ–∞–π–ª–∞
            with open(config_file, "r", encoding="utf-8") as f:
                config = yaml.safe_load(f)
            self._update_config_from_dict(config)

        else:
            raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .yaml –∏ .yml")

    def _update_config_from_dict(self, config: Dict[str, Any]):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
        if "host" in config and config["host"]:
            self.host = config["host"]
        if "port" in config and config["port"]:
            self.port = int(config["port"])
        if "username" in config and config["username"]:
            self.username = config["username"]
        if "password" in config and config["password"]:
            self.password = config["password"]
        if "database" in config and config["database"]:
            self.database = config["database"]

    def connect(self) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ClickHouse

        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –∏–Ω–∞—á–µ
        """
        try:
            self._client = get_client(
                host=self.host,
                port=self.port,
                username=self.username,
                password=self.password,
                database=self.database,
            )
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            self._client.command("SELECT 1")
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse: {e}")
            return False

    def query(self, sql_query: str, **kwargs) -> pd.DataFrame:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –≤–∏–¥–µ DataFrame

        Args:
            sql_query: SQL-–∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è query_df

        Returns:
            pandas.DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∑–∞–ø—Ä–æ—Å–∞
        """
        if self._client is None:
            if not self.connect():
                raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ClickHouse")

        try:
            return self._client.query_df(sql_query, **kwargs)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise

    def execute(self, sql_command: str) -> Any:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∫–æ–º–∞–Ω–¥—ã (INSERT, UPDATE, DELETE –∏ —Ç.–¥.)

        Args:
            sql_command: SQL-–∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
        """
        if self._client is None:
            if not self.connect():
                raise ConnectionError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ ClickHouse")

        try:
            return self._client.command(sql_command)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            raise

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if self._client:
            self._client.close()
            self._client = None

    def __enter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.connect()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        self.close()

    def save_config(self, config_file: str, format: str = "yaml"):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª

        Args:
            config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            format: –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (—Ç–æ–ª—å–∫–æ 'yaml')
        """
        config_path = Path(config_file)
        config_path.parent.mkdir(parents=True, exist_ok=True)

        config = {
            "host": self.host,
            "port": self.port,
            "username": self.username,
            "password": self.password,
            "database": self.database,
        }

        if format.lower() in ["yaml", "yml"]:
            with open(config_path, "w", encoding="utf-8") as f:
                yaml.dump(config, f, default_flow_style=False, allow_unicode=True)
        else:
            raise ValueError("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç 'yaml'")

    @staticmethod
    def initialize_config(
        config_file: str = "clickhouse_config.yaml",
        host: Optional[str] = None,
        port: int = 8123,
        username: Optional[str] = None,
        password: Optional[str] = None,
        database: Optional[str] = None,
        create_template: bool = False,
        overwrite: bool = False
    ) -> str:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

        Args:
            config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            host: –•–æ—Å—Ç ClickHouse —Å–µ—Ä–≤–µ—Ä–∞
            port: –ü–æ—Ä—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            password: –ü–∞—Ä–æ–ª—å
            database: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            create_template: –°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω —Å placeholder'–∞–º–∏
            overwrite: –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª

        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        config_path = Path(config_file)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        if config_path.exists() and not overwrite:
            response = input(f"–§–∞–π–ª {config_file} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å? (y/N): ")
            if response.lower() not in ['y', 'yes', '–¥–∞']:
                print("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                return str(config_path.absolute())

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        config_path.parent.mkdir(parents=True, exist_ok=True)

        if create_template:
            # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Å placeholder'–∞–º–∏
            config = {
                "host": "your_clickhouse_host_here",
                "port": 8123,
                "username": "your_username_here", 
                "password": "your_password_here",
                "database": "your_database_here"
            }
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            config = {
                "host": host or "localhost",
                "port": port,
                "username": username or "default",
                "password": password or "",
                "database": database or "default"
            }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ YAML —Ñ–æ—Ä–º–∞—Ç–µ
        with open(config_path, "w", encoding="utf-8") as f:
            yaml.dump(config, f, default_flow_style=False, allow_unicode=True)

        if create_template:
            print(f"üìÅ –®–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω: {config_path.absolute()}")
            print("‚ö†Ô∏è  –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª, —É–∫–∞–∑–∞–≤ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
        else:
            print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {config_path.absolute()}")

        return str(config_path.absolute())

    @classmethod
    def setup_config_interactive(cls, config_file: str = "clickhouse_config.yaml") -> str:
        """
        –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å

        Args:
            config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

        Returns:
            –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ ClickHouse")
        print("=" * 40)
        
        host = input("–•–æ—Å—Ç (localhost): ").strip() or "localhost"
        port = input("–ü–æ—Ä—Ç (8123): ").strip() or "8123"
        username = input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (default): ").strip() or "default"
        password = input("–ü–∞—Ä–æ–ª—å: ").strip()
        database = input("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö (default): ").strip() or "default"
        
        try:
            port = int(port)
        except ValueError:
            print("‚ö†Ô∏è  –ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç, –∏—Å–ø–æ–ª—å–∑—É—é 8123")
            port = 8123

        return cls.initialize_config(
            config_file=config_file,
            host=host,
            port=port,
            username=username,
            password=password,
            database=database,
            overwrite=True
        )

    @classmethod
    def reset_auto_init(cls):
        """–°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –∞–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
        cls._default_config_initialized = False


# –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
def create_client(
    username: str, password: str, database: str, host: str, port: int = 8123
) -> ClickHouseEasy:
    """
    –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ ClickHouse

    Args:
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        password: –ü–∞—Ä–æ–ª—å
        database: –ò–º—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        host: –•–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞
        port: –ü–æ—Ä—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è

    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ClickHouseEasy
    """
    client = ClickHouseEasy(
        host=host, port=port, username=username, password=password, database=database
    )
    return client


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
def init_config(config_file: str = "clickhouse_config.yaml", interactive: bool = False, **kwargs) -> str:
    """
    –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–∞
    
    Args:
        config_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        interactive: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è initialize_config
    
    Returns:
        –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    """
    if interactive:
        return ClickHouseEasy.setup_config_interactive(config_file)
    else:
        return ClickHouseEasy.initialize_config(config_file, **kwargs)

def quick_setup(**kwargs) -> ClickHouseEasy:
    """
    –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–Ω—Ñ–∏–≥–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞
    
    Args:
        **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç
    """
    config_file = "clickhouse_config.yaml"
    ClickHouseEasy.initialize_config(config_file, overwrite=True, **kwargs)
    return ClickHouseEasy(config_file=config_file)
