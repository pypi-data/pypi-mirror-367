{
  "openapi": "3.0.1",
  "info": {
    "title": "API Overview",
    "description": "<p>This is where you can get started with automating your workflows and integrating your apps with our API.</p>\n<p>For rentals (<b>long term use</b> of numbers), you'll need to check out the following links in order: </p><ol>\n<li>Authenticate: <a href='docs/api/v2#auth' target='_top'>Authentication</a></li>\n<li>Obtain a list of rental services: <a href='docs/api/v2#get-/api/pub/v2/services' target='_top'>Service List</a></li>\n<li>Create a rental: <a href='docs/api/v2#post-/api/pub/v2/reservations/rental' target='_top'>Create New Rental</a></li>\n<li>Follow the location header returned to get the rental sale.</li>\n<li>From the sale, you'll be able to see the reservations and backorders.</li>\n</ol>\n<p>For verifications (<b>single use</b> of numbers), you'll need to check out the following links in order: </p><ol>\n<li>Authenticate: <a href='docs/api/v2#auth' target='_top'>Authentication</a></li>\n<li>Obtain a list of verification services: <a href='docs/api/v2#get-/api/pub/v2/services' target='_top'>Service List</a></li>\n<li>Create a verification: <a href='docs/api/v2#post-/api/pub/v2/verifications' target='_top'>Create Verification</a></li>\n<li>Follow the location header returned to get the newly created verification.</li>\n</ol>\n<p>Our API documentation has an embedded javascript client so that you can try out the API. You will need to <a href='docs/api/v2#auth' target='_top'>setup your bearer token</a> to be able to access secured endpoints.\n</p><br/>\n<h2>Paginated List Responses</h2>\n<p>When you successfully get a list of data (generally, ordered by when the resource was created), for example <a href='docs/api/v2#get-/api/pub/v2/billing-cycles' target='_top'>List Billing Cycles</a>, you will need to follow it's <code>links</code> results.\n<br/>Inside the <code>links</code> result, you will get <code>current</code>, <code>previous</code>, and <code>next</code> values. Inside these values, there will be <code>href</code> and <code>method</code> values.\n<br/>With these values, you can get more of your list by navigating through them. </p>\n<h3><b>Example</b></h3>\n<p>We get the result from <a href='docs/api/v2#get-/api/pub/v2/billing-cycles' target='_top'>List Billing Cycles</a>, but we don't see what we need and need more billing cycles.<br/>\n<span style='color:#dc2626;'><b>The following code is whiteboarding code, use the language you are using for your integration with the API</b></span><br/>\nWe will need to do the following:</p>\n<ul><li>Get our api result <code>data = getListBillingCyclesResult()</code></li>\n<li>Get the <code>href = data['links']['next']['href']</code></li>\n<li>Get the <code>method = data['links']['next']['method']</code></li>\n<li>Now you can get the next page: <code>nextPage = fetch(href, {method=method})</code></li>\n<li>If we need the next page's result, we can repeat this process.</li></ul>\n<p>Note that only renewable rentals will be associated with a billing cycle.</p>\n<object width=\"630\" style=\"margin-top:60px\" data=\"/api/pub/v2/docs/rental-api-v2-purchase-flow.svg\" type=\"image/svg+xml\"></object>\n<object width=\"630\" style=\"margin-top:60px\" data=\"/api/pub/v2/docs/verification-api-v2-purchase-flow.svg\" type=\"image/svg+xml\"></object>\n",
    "version": "v2",
    "x-logo": {
      "url": "../../tvlogo.svg",
      "altText": "Textverified",
      "href": "/app"
    }
  },
  "servers": [
    {
      "url": "https://www.textverified.com"
    }
  ],
  "paths": {
    "/api/pub/v2/auth": {
      "post": {
        "tags": [
          "Bearer Tokens"
        ],
        "summary": "Generate Bearer Token",
        "description": "Generate a bearer token to start making requests to <b>secured endpoints</b>. \r\nYou will need to supply the following <b>headers</b>:\r\n1) ```X-API-KEY``` (your primary API key)\r\n2) ```X-API-USERNAME``` (your username, which is the email you used to register)  \r\nAll <b>secured endpoints</b> will need your <b>bearer token</b> supplied to them.<br />\r\nBecause bearer tokens can <b>expire</b> due to having a limited lifespan, you will need to obtain a new bearer token by generating a new one periodically.<br />\r\nYou can view and manage your API keys on under <a href=\"https://www.textverified.com/app/account/settings/api\">API Settings</a>.<br />\r\nAfter successfully generating a bearer token ```eyJh...```, you can use set the bearer token <a href=\"docs/api/v2#auth\" target=\"_top\">here</a> and explore our secured API endpoints.",
        "parameters": [
          {
            "name": "X-API-USERNAME",
            "in": "header",
            "description": "Your username.",
            "schema": {
              "type": "string"
            },
            "example": "example@example.com"
          },
          {
            "name": "X-API-KEY",
            "in": "header",
            "description": "Your API key.",
            "schema": {
              "type": "string"
            },
            "example": "APIKey12345"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BearerToken"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "429": {
            "description": "Too many requests"
          }
        }
      }
    },
    "/api/pub/v2/account/me": {
      "get": {
        "tags": [
          "Account"
        ],
        "summary": "Get Account Details",
        "description": "Get the details of your user account.",
        "operationId": "GetAccountExpandedPublic",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/area-codes": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Area Codes List",
        "description": "Returns a list of our supported area codes.\r\n\r\nThese supported area codes you get in the ```areaCode``` property from the response can be used for API calls where an ```areaCodeSelectOption``` is in the body or parameter.",
        "operationId": "ListAdvertisedAreaCodesPublic",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AreaCode"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/services": {
      "get": {
        "tags": [
          "Services"
        ],
        "summary": "Service List",
        "description": "Returns a list of our supported services.\r\n\r\nThese supported services you get in the ```serviceName``` property from the response will be used for API calls where a ```serviceName``` is required in the body or parameter.",
        "operationId": "ListAdvertisedTargetsPublic",
        "parameters": [
          {
            "name": "numberType",
            "in": "query",
            "description": "",
            "schema": {
              "$ref": "#/components/schemas/NumberType"
            },
            "example": "mobile"
          },
          {
            "name": "reservationType",
            "in": "query",
            "description": "Required field",
            "schema": {
              "$ref": "#/components/schemas/ReservationType"
            },
            "example": "renewable"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Service"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/pricing/rentals": {
      "post": {
        "tags": [
          "Services"
        ],
        "summary": "Rental Pricing",
        "description": "Get rental prices for a specific service and option(s). The ```serviceName``` is required, and the list of supported service names can be found at <a href=\"docs/api/v2#get-/api/pub/v2/services\" target=\"_top\">Service List</a>.\r\n\r\nNot all service and options are compatible with each other. This endpoint point will return a ```400 Bad Request``` for unsupported service and option combinations.",
        "operationId": "PriceCheckRentalPublic",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RentalPriceCheckRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RentalPriceCheckRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RentalPriceCheckRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingSnapshot"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/pricing/verifications": {
      "post": {
        "tags": [
          "Services"
        ],
        "summary": "Verification Pricing",
        "description": "Clients can call this endpoint to check the verification price of a specific service and option(s). The list of supported services (```serviceName```) can be found <a href=\"docs/api/v2#get-/api/pub/v2/services\" target=\"_top\">here</a>.<br />\r\nNot all service and options are compatible with each other. This endpoint point will return a ```400 Bad Request``` for unsupported service and option combinations.",
        "operationId": "PriceCheckVerificationPublic",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationPriceCheckRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationPriceCheckRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/VerificationPriceCheckRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PricingSnapshot"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/sales/{id}": {
      "get": {
        "tags": [
          "Sales"
        ],
        "summary": "Get Reservation Sale Details",
        "description": "Get the details on a reservation sale by ID.",
        "operationId": "GetReservationSaleExpandedPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the sale. If the sale ID does not exist, a 404 response will be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReservationSaleExpanded"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/sales": {
      "get": {
        "tags": [
          "Sales"
        ],
        "summary": "List Reservation Sales",
        "description": "Get a <a href=\"docs/api/v2#overview\" target=\"_top\"><b>paginated</b></a> list of your reservation sales.\r\n\r\nNote: This endpoint returns a paginated result of the list, check\r\nthe <a href=\"docs/api/v2#overview\" target=\"_top\">Paginated List Responses</a> section of the overview page for more details\r\nif you are having problems.",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData.ReservationSaleCompact"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/billing-cycles/{id}": {
      "get": {
        "tags": [
          "Billing Cycles"
        ],
        "summary": "Get Billing Cycle Details",
        "description": "Get the details of a billing cycle by ID. A billing cycle can have one or many renewable rentals. Only renewable rentals are associated with a billing cycle.",
        "operationId": "GetBillingCyclePublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the billing cycle. If the billing cycle ID does not exist, a 404 response will be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingCycleExpanded"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Billing Cycles"
        ],
        "summary": "Updating a Billing Cycle",
        "description": "Update a billing cycle by ID.\r\n\r\nWhat you can currently update are:\r\n- ```nickname``` (Your custom string to identify the billing cycle)\r\n- ```remindersEnabled``` (Email reminders)\r\n\r\nNot providing an update option will leave it unchanged. For example, not providing ```remindersEnabled``` but having \r\n```\"nickname\": \"aNickname\"``` will only update the nickname.",
        "operationId": "UpdateBillingCyclePublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the billing cycle.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingCycleUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BillingCycleUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BillingCycleUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/billing-cycles/{id}/invoices": {
      "get": {
        "tags": [
          "Billing Cycles"
        ],
        "summary": "Get Billing Cycle Invoices",
        "description": "Get a <a href=\"docs/api/v2#overview\" target=\"_top\"><b>paginated</b></a> invoice history of a billing cycle by it's ID.\r\n\r\nNote: This endpoint returns a paginated result of the list, check\r\nthe <a href=\"docs/api/v2#overview\" target=\"_top\">Paginated List Responses</a> section of the overview page for more details\r\nif you are having problems.",
        "operationId": "ListBillingCycleInvoicesPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the billing cycle.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData.BillingCycleRenewalInvoice"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/billing-cycles": {
      "get": {
        "tags": [
          "Billing Cycles"
        ],
        "summary": "List Billing Cycles",
        "description": "Returns a <a href=\"docs/api/v2#overview\" target=\"_top\"><b>paginated</b></a> list of your billing cycles. A billing cycle can have one or many renewable rentals. Only renewable rentals are associated with a billing cycle.\r\n\r\nNote: This endpoint returns a paginated result of the list, check\r\nthe <a href=\"docs/api/v2#overview\" target=\"_top\">Paginated List Responses</a> section of the overview page for more details\r\nif you are having problems.",
        "operationId": "ListBillingCyclesPublic",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData.BillingCycleCompact"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/billing-cycles/{id}/next-invoice": {
      "post": {
        "tags": [
          "Billing Cycles"
        ],
        "summary": "Preview Billing Cycle Invoice",
        "description": "Get an invoice <b>preview</b> for your next billing cycle by it's ID.",
        "operationId": "GenerateNextBillingCycleRenewableInvoicePublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the billing cycle.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingCycleRenewalInvoicePreview"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/billing-cycles/{id}/renew": {
      "post": {
        "tags": [
          "Billing Cycles"
        ],
        "summary": "Renew Billing Cycle",
        "description": "Renew the active rentals on your billing cycle by it's ID.\r\n            \r\nThis will not renew overdue rentals.",
        "operationId": "RenewBillingCyclePublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the billing cycle.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BillingCycleRenewalInvoice"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/backorders/{id}": {
      "get": {
        "tags": [
          "Back Order Rental Reservations"
        ],
        "summary": "Get Back Order Reservation Detail",
        "description": "Get the details on a back order reservation by ID.\r\n\r\nBack order reservations are created if you have a parameter set when creating a new rental and there is no available stock. See <a href=\"docs/api/v2#post-/api/pub/v2/reservations/rental\" target=\"_top\">Create New Rental</a> for more info.",
        "operationId": "GetBackOrderReservationExpandedPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the back order reservation. If the reservation ID does not exist, a 404 response will be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackOrderReservationExpanded"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/reservations/{id}": {
      "get": {
        "tags": [
          "Line Reservations"
        ],
        "summary": "Line Reservation Details",
        "description": "Get the details on a line reservation by ID.\r\n\r\nSuccessfully getting the details of the line reservation will require following the ```href``` link provided in the response.",
        "operationId": "GetLineReservationExpandedPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the line reservation. If the reservation ID does not exist, a 404 response will be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Type of line reservation. If the type supplied does not match the reservation, a 404 response will be returned.",
            "schema": {
              "$ref": "#/components/schemas/ReservationType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/reservations/{id}/health": {
      "get": {
        "tags": [
          "Line Reservations"
        ],
        "summary": "Reservation Health Check",
        "operationId": "GetReservationLineHealthPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the line reservation. If the reservation ID does not exist or if the reservation is not 'active', a 404 response will be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LineHealth"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/verifications": {
      "post": {
        "tags": [
          "New Verification"
        ],
        "summary": "Create Verification",
        "description": "Create/purchase a new verification. If successful, a 201 response will be returned with the location of the newly created verification in the <b>http response 'location' header</b>. <br /><br />\r\nThe ```serviceName``` is required, and the list of supported service names can be found at <a href=\"docs/api/v2#get-/api/pub/v2/services\" target=\"_top\">Service List</a>. <br />",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewVerificationRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewVerificationRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewVerificationRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "get": {
        "tags": [
          "Verifications"
        ],
        "summary": "List Verifications",
        "description": "Clients can call this endpoint to retrieve the paginated list of verifications.",
        "operationId": "ListVerificationsPublic",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData.VerificationCompact"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/verifications/{id}": {
      "get": {
        "tags": [
          "Verifications"
        ],
        "summary": "Verification Details",
        "description": "Clients can call this endpoint to retrieve the details of a verification.",
        "operationId": "GetVerificationExpandedPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the verification.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerificationExpanded"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/verifications/{id}/cancel": {
      "post": {
        "tags": [
          "Verifications"
        ],
        "summary": "Cancel Verification",
        "description": "Clients can call this endpoint to try to cancel a verification.",
        "operationId": "CancelVerificationPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/verifications/{id}/reactivate": {
      "post": {
        "tags": [
          "Verifications"
        ],
        "summary": "Reactivate Verification",
        "description": "Clients can call this endpoint to try to reactivate a verification. If successful, a 201 response will be returned with the location of the newly created verification in the <b>http response 'location' header</b>.",
        "operationId": "ReactivateVerificationPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/verifications/{id}/report": {
      "post": {
        "tags": [
          "Verifications"
        ],
        "summary": "Report Verification",
        "description": "Clients can call this endpoint to try to report an verification.",
        "operationId": "ReportVerificationPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/verifications/{id}/reuse": {
      "post": {
        "tags": [
          "Verifications"
        ],
        "summary": "Reuse Verification",
        "description": "Clients can call this endpoint to try to reuse a verification. If successful, a 201 response will be returned with the location of the newly created verification in the <b>http response 'location' header</b>.",
        "operationId": "ReuseVerificationPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/reservations/rental": {
      "post": {
        "tags": [
          "New Rental"
        ],
        "summary": "Create New Rental",
        "description": "Create/purchase a new rental. If successful, a 201 response will be returned with the location of the sale in the <b>http response 'location' header</b>. This sale will have details on the outcome of the rental purchase.<br /><br />\r\nThe ```serviceName``` is required, and the list of supported service names can be found at <a href=\"docs/api/v2#get-/api/pub/v2/services\" target=\"_top\">Service List</a>. <br />\r\nIf ```allowBackOrderReservations``` is ```true``` in the request body, a rental back order will be created if the requested rental is out of stock.",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRentalRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewRentalRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewRentalRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/reservations/rental/renewable/{id}": {
      "get": {
        "tags": [
          "Renewable Rentals"
        ],
        "summary": "Renewable Rental Details",
        "description": "Get the details of a renewable rental by ID.",
        "operationId": "GetRenewableRentalPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the line reservation. If the reservation ID does not exist, a 404 response will be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenewableRentalExpanded"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Renewable Rentals"
        ],
        "summary": "Update a Renewable Rental",
        "description": "Update a renewable rental by ID.\r\n\r\nWhat you can currently update are:\r\n- ```userNotes``` (Notes)\r\n- ```includeForRenewal``` (Include/Exclude rental for renew)\r\n- ```markAllSmsRead``` (Mark SMS as read)\r\n\r\nNot providing an update option will leave it unchanged. For example, not providing\r\n```userNotes``` but having ```\"includeForRenewal\": true``` will only include the rental for renew.",
        "operationId": "UpdateRenewableRentalPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the rental.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenewableRentalUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RenewableRentalUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RenewableRentalUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/reservations/rental/renewable": {
      "get": {
        "tags": [
          "Renewable Rentals"
        ],
        "summary": "List Renewable Rentals",
        "description": "Returns a <a href=\"docs/api/v2#overview\" target=\"_top\"><b>paginated</b></a> list of your renewable rentals.\r\n\r\nOptional Parameters:\r\n- ```billingCycleId``` (Get renewable rentals under this billing cycle ID)\r\n\r\nTo create a new rental, see <a href=\"docs/api/v2#post-/api/pub/v2/reservations/rental\" target=\"_top\">Create New Rental</a>.\r\n\r\nNote: This endpoint returns a paginated result of the list, check\r\nthe <a href=\"docs/api/v2#overview\" target=\"_top\">Paginated List Responses</a> section of the overview page for more details\r\nif you are having problems.",
        "operationId": "ListRenewableLineRentalsPublic",
        "parameters": [
          {
            "name": "billingCycleId",
            "in": "query",
            "description": "ID of the billing cycle.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData.RenewableRentalCompact"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/reservations/rental/renewable/{id}/refund": {
      "post": {
        "tags": [
          "Renewable Rentals"
        ],
        "summary": "Refund Renewable Rental",
        "description": "<b>Attempt</b> to refund a renewable rental by ID.",
        "operationId": "RenewableSelfServiceRefundRentalPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the line reservation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/reservations/rental/renewable/{id}/renew": {
      "post": {
        "tags": [
          "Renewable Rentals"
        ],
        "summary": "Renew Overdue Rental",
        "description": "Renew an overdue rental by it's ID. \r\n\r\nCalling this method will automatically include the rental for renewal and perform the renewal. Only overdue rentals may be renewed this way.",
        "operationId": "RenewOverdueRenewableRental",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the renewable rental.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/reservations/rental/nonrenewable/{id}": {
      "get": {
        "tags": [
          "Non-Renewable Rentals"
        ],
        "summary": "Non-Renewable Rental Details",
        "description": "Get the details of a non-renewable rental by ID.",
        "operationId": "GetNonrenewableRentalPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the line reservation. If the reservation ID does not exist, a 404 response will be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonrenewableRentalExpanded"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      },
      "post": {
        "tags": [
          "Non-Renewable Rentals"
        ],
        "summary": "Update a Non-Renewable Rental",
        "description": "Update a non-renewable rental by ID.\r\n\r\nWhat you can currently update are:\r\n- ```userNotes``` (Notes)\r\n- ```markAllSmsRead``` (Mark SMS as read)",
        "operationId": "UpdateNonrenewableRentalPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the line reservation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NonrenewableRentalUpdateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NonrenewableRentalUpdateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NonrenewableRentalUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/reservations/rental/nonrenewable": {
      "get": {
        "tags": [
          "Non-Renewable Rentals"
        ],
        "summary": "List Non-Renewable Rentals",
        "description": "Returns a <a href=\"docs/api/v2#overview\" target=\"_top\"><b>paginated</b></a> list of your non-renewable rentals.\r\n\r\nTo create a new rental, see <a href=\"docs/api/v2#post-/api/pub/v2/reservations/rental\" target=\"_top\">Create New Rental</a>.\r\n\r\nNote: This endpoint returns a paginated result of the list, check\r\nthe <a href=\"docs/api/v2#overview\" target=\"_top\">Paginated List Responses</a> section of the overview page for more details\r\nif you are having problems.",
        "operationId": "ListNonrenewableRentalsPublic",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData.NonrenewableRentalCompact"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/reservations/rentals/extensions": {
      "post": {
        "tags": [
          "Non-Renewable Rentals"
        ],
        "summary": "Extend a Non-Renewable rental",
        "description": "<span style=\"color:var(--red)\">\r\n  <p>Extensions are <b>NOT</b> refundable and cannot be undone.</p>\r\n</span>\r\n<p>\r\n  <b>Attempt</b> to extend the duration of a non-renewable rental by ID.</p>",
        "operationId": "ExtendNonrenewableRentalPublic",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RentalExtensionRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/RentalExtensionRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/RentalExtensionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/reservations/rental/nonrenewable/{id}/refund": {
      "post": {
        "tags": [
          "Non-Renewable Rentals"
        ],
        "summary": "Refund Non-Renewable Rental",
        "description": "<b>Attempt</b> to refund a non-renewable rental by ID.",
        "operationId": "NonrenewableSelfServiceRefundRentalPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the line reservation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/sms": {
      "get": {
        "tags": [
          "Sms"
        ],
        "summary": "List Sms",
        "description": "Returns a <a href=\"docs/api/v2#overview\" target=\"_top\"><b>paginated</b></a> list of your latest sms.\r\n\r\nOptional Parameters:\r\n- ```to``` (A phone number)\r\n- ```reservationId``` (The reservation's ID)\r\n- ```reservationType``` (The reservation's type)\r\n\r\nNote: This endpoint returns a paginated result of the list, check\r\nthe <a href=\"docs/api/v2#overview\" target=\"_top\">Paginated List Responses</a> section of the overview page for more details\r\nif you are having problems.",
        "operationId": "ListSmsPublic",
        "parameters": [
          {
            "name": "to",
            "in": "query",
            "description": "If provided, will filter results to only include sms sent to the specified number.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reservationId",
            "in": "query",
            "description": "If provided, will filter results to only include sms associated with the specified reservation.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reservationType",
            "in": "query",
            "description": "If provided, will filter results to only include sms associated with the specified reservation types.",
            "schema": {
              "$ref": "#/components/schemas/ReservationType"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedData.Sms"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/wake-requests/{id}": {
      "get": {
        "tags": [
          "Wake Requests"
        ],
        "summary": "Get Wake Request",
        "description": "Get a wake request by ID.\r\n\r\nThe details of a wake request include:\r\n- ```isScheduled``` (Indicates if the wake request has been successfully created and enqueued.)\r\n- ```usageWindowStart``` (The datetime when you can start using the reservation.)\r\n- ```usageWindowEnd``` (The datetime when you will no longer be able to use the reservation.)\r\nRefer to the ```SCHEMA``` below for more details.\r\n\r\nTo create a wake request, see <a href=\"docs/api/v2#post-/api/pub/v2/wake-requests\" target=\"_top\">Create Wake Request</a>.",
        "operationId": "GetWakeRequestPublic",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the wake request. If the wake request ID does not exist, a 404 response will be returned.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WakeResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/wake-requests": {
      "post": {
        "tags": [
          "Wake Requests"
        ],
        "summary": "Create Wake Request",
        "description": "Create a wake request for a reservation. If successful, a 201 response will be returned with the location of the newly created wake request in the <b>http response 'location' header</b>. <br /><br />\r\nSome reservation types will require a wake request before the line reservation can be used. <br />\r\nCreating a successful wake request will <b>enqueue</b> your request on that line reservation.\r\n\r\nTo see the details of your wake request, see <a href=\"docs/api/v2#get-/api/pub/v2/wake-requests/-id-\" target=\"_top\">Get Wake Request</a>.",
        "operationId": "CreateWakeRequestPublic",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WakeRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WakeRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WakeRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Link"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/wake-requests/estimate": {
      "post": {
        "tags": [
          "Wake Requests"
        ],
        "summary": "Estimate Usage Window",
        "description": "Estimate the usage window for a reservation if you were to create a wake request now.\r\n\r\nDoes <b>NOT</b> create a wake request. \r\nTo create a wake request, see <a href=\"docs/api/v2#post-/api/pub/v2/wake-requests\" target=\"_top\">Create Wake Request</a>.\r\n    \r\nThe details of an usage window estimate include:\r\n- ```estimatedWindowStart``` (The estimated datetime when you can start using the reservation.)\r\n- ```estimatedWindowEnd``` (The estimated datetime when you will no longer be able to use the reservation.)\r\nRefer to the ```SCHEMA``` below for more details.",
        "operationId": "EstimateUsageWindow",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UsageWindowEstimateRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/UsageWindowEstimateRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/UsageWindowEstimateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsageWindowEstimateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/webhook-events": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "List Webhook Events",
        "description": "Returns a list of webhook events that can be subscribed to. You will need to configure your <a href=\"https://www.textverified.com/app/account/settings/webhooks\">API Webhook Settings</a> and subscribe to events first.\r\n<br /><br />\r\nThe schema of the webhook events are documented below. We serialize webhook event data using Json to the `Data` property. All of our webhooks are sent as a HTTP POST to the webhook uri configured on your account.\r\nWe sign all of our webhooks with HMAC and SHA512 which should be validated by your server.\r\n<br /><br /><b>Webhook validation:</b><br />\r\nWe sign all webhook requests using HMAC-SHA512 and your webhook secret (`whsec_...`).\r\nThe signature HTTP Header is `X-Webhook-Signature` and the HTTP Value will be\r\nprefixed by the signing algorithm `HMAC-SHA512='.\r\nThe signature after the prefix is BASE-64 encoded.\r\nThe process for validating a signature is as follows:\r\n1) Extract the HTTP Header with the name `X-Webhook-Signature`.\r\n2) Remove the prefix `HMAC-SHA512=` from the HTTP Header value, which is obtained from step 1.\r\n  - This BASE-64 encoded value will be compared to the HTTP Request body hash later.\r\n3) Apply the HMAC-SHA512 hashing algorithm to the HTTP Request body to obtain a byte array.\r\n4) Apply BASE-64 encoding to the byte array (obtained from step 3).\r\n5) Compare the value from step 2 to the value from step 4 and verify that they are the same.\r\n            \r\nWebhooks are automatically retried for a period of time with exponential back off. \r\nAfter multiple failed webhook send attempts, webhooks will be automatically disabled.\r\nIf this happens, you will have to manually re-enable your webhooks again.",
        "operationId": "GetWebhookEventDefinitionsPublic",
        "responses": {
          "200": {
            "description": "Success"
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "callbacks": {
          "v2.rental.billingcycle.renewed": {
            "https://www.example.com/": {
              "post": {
                "requestBody": {
                  "description": "Triggers when a billing cycle on your account has renewed. Renewal of individual reservations on a billing cycle can occur independently.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/WebhookEvent.BillingCycleWebhookEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server implementation should return this HTTP status code if the data was received successfully."
                  },
                  "4XX": {
                    "description": "If your server returns an HTTP status code indicating it does not understand the format of the payload, then the delivery attempt will be treated as a failure."
                  },
                  "5XX": {
                    "description": "If your server returns an HTTP status code indicating a server-side error, then the delivery attempt will be treated as a failure."
                  }
                }
              }
            }
          },
          "v2.rental.billingcycle.expired": {
            "https://www.example.com/": {
              "post": {
                "requestBody": {
                  "description": "Triggers when a billing cycle on your account has expired.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/WebhookEvent.BillingCycleWebhookEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server implementation should return this HTTP status code if the data was received successfully."
                  },
                  "4XX": {
                    "description": "If your server returns an HTTP status code indicating it does not understand the format of the payload, then the delivery attempt will be treated as a failure."
                  },
                  "5XX": {
                    "description": "If your server returns an HTTP status code indicating a server-side error, then the delivery attempt will be treated as a failure."
                  }
                }
              }
            }
          },
          "v2.sms.received": {
            "https://www.example.com/": {
              "post": {
                "requestBody": {
                  "description": "Triggers when an sms is received and assigned to your account.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/WebhookEvent.SmsWebhookEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server implementation should return this HTTP status code if the data was received successfully."
                  },
                  "4XX": {
                    "description": "If your server returns an HTTP status code indicating it does not understand the format of the payload, then the delivery attempt will be treated as a failure."
                  },
                  "5XX": {
                    "description": "If your server returns an HTTP status code indicating a server-side error, then the delivery attempt will be treated as a failure."
                  }
                }
              }
            }
          },
          "v2.rental.backorder.fulfilled": {
            "https://www.example.com/": {
              "post": {
                "requestBody": {
                  "description": "Triggers when a back order reservation is fulfilled.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/WebhookEvent.BackOrderReservationWebhookEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server implementation should return this HTTP status code if the data was received successfully."
                  },
                  "4XX": {
                    "description": "If your server returns an HTTP status code indicating it does not understand the format of the payload, then the delivery attempt will be treated as a failure."
                  },
                  "5XX": {
                    "description": "If your server returns an HTTP status code indicating a server-side error, then the delivery attempt will be treated as a failure."
                  }
                }
              }
            }
          },
          "v2.reservation.created": {
            "https://www.example.com/": {
              "post": {
                "requestBody": {
                  "description": "Triggers when a reservation is created.",
                  "content": {
                    "application/json": {
                      "schema": {
                        "$ref": "#/components/schemas/WebhookEvent.ReservationCreatedWebhookEvent"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Your server implementation should return this HTTP status code if the data was received successfully."
                  },
                  "4XX": {
                    "description": "If your server returns an HTTP status code indicating it does not understand the format of the payload, then the delivery attempt will be treated as a failure."
                  },
                  "5XX": {
                    "description": "If your server returns an HTTP status code indicating a server-side error, then the delivery attempt will be treated as a failure."
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    },
    "/api/pub/v2/legacy/reservation-id-lookup": {
      "get": {
        "tags": [
          "Legacy"
        ],
        "summary": "Legacy Reservation Id Look Up",
        "description": "You can use this legacy endpoint for looking up the 'new' ID of a rental reservation (begins with the prefix 'lr_') by supplying a legacy ID (GUID/UUID format). This may be helpful when migration from our deprecated endpoints to our current endpoints.\r\nThis endpoint will be removed in the future without notice.",
        "operationId": "GetNewReservationId",
        "parameters": [
          {
            "name": "oldReservationId",
            "in": "query",
            "description": "The legacy reservation Id to look up which is formatted as a GUID/UUID. If the legacy ID supplied is invalid or not found, a 404 Not Found response will be returned.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not Found"
          },
          "200": {
            "description": "New ID of a reservation (begins with the prefix 'lr_')",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "deprecated": true,
        "security": [
          {
            "Bearer": [ ]
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string"
          },
          "currentBalance": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "AddOnSnapshot": {
        "type": "object",
        "properties": {
          "addOnId": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "renewalCost": {
            "type": "number",
            "format": "double"
          },
          "alreadyRenewed": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AreaCode": {
        "type": "object",
        "properties": {
          "areaCode": {
            "type": "string",
            "description": "Area code. Optionally supply this value when an ```areaCodeSelectOption``` is in the request body or parameter.",
            "example": "205"
          },
          "state": {
            "type": "string",
            "description": "The US state associated with the area code.",
            "example": "Alabama"
          }
        },
        "additionalProperties": false
      },
      "BackOrderReservationCompact": {
        "type": "object",
        "properties": {
          "link": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string"
          },
          "serviceName": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/BackOrderState"
          }
        },
        "additionalProperties": false
      },
      "BackOrderReservationExpanded": {
        "type": "object",
        "properties": {
          "link": {
            "$ref": "#/components/schemas/Link"
          },
          "id": {
            "type": "string"
          },
          "serviceName": {
            "type": "string"
          },
          "saleId": {
            "type": "string"
          },
          "sale": {
            "$ref": "#/components/schemas/Link"
          },
          "reservation": {
            "$ref": "#/components/schemas/Link"
          },
          "reservationId": {
            "type": "string",
            "description": "Will be null if a reservation has not been assigned yet.",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/BackOrderState"
          }
        },
        "additionalProperties": false
      },
      "BackOrderReservationWebhookEvent": {
        "type": "object",
        "properties": {
          "backOrderId": {
            "type": "string",
            "description": "Id of the back order reservation."
          }
        },
        "additionalProperties": false
      },
      "BackOrderState": {
        "enum": [
          "created",
          "fulfilled",
          "canceled"
        ],
        "type": "string"
      },
      "BearerToken": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "Bearer token",
            "example": "eyJh..."
          },
          "expiresIn": {
            "type": "number",
            "description": "Seconds remaining until bearer token expires",
            "format": "double",
            "example": 899
          },
          "expiresAt": {
            "type": "string",
            "description": "Timestamp of when the token will expire",
            "format": "date-time",
            "example": "2020-06-15T00:41:35+00:00"
          }
        },
        "additionalProperties": false
      },
      "BillingCycleCompact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the billing cycle"
          },
          "billingCycleEndsAt": {
            "type": "string",
            "format": "date-time"
          },
          "emailNotificationsEnabled": {
            "type": "boolean"
          },
          "state": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "BillingCycleExpanded": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the billing cycle"
          },
          "renewedThrough": {
            "type": "string",
            "format": "date-time"
          },
          "billingCycleEndsAt": {
            "type": "string",
            "format": "date-time"
          },
          "nextAutoRenewAttempt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "emailNotificationsEnabled": {
            "type": "boolean"
          },
          "state": {
            "type": "string"
          },
          "rentals": {
            "$ref": "#/components/schemas/Link"
          },
          "invoices": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "BillingCycleQueryFilter": {
        "type": "object",
        "additionalProperties": false
      },
      "BillingCycleRenewalInvoice": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "excludedRentals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RentalSnapshot"
            }
          },
          "includedRentals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RentalSnapshot"
            }
          },
          "isPaidFor": {
            "type": "boolean"
          },
          "totalCost": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "BillingCycleRenewalInvoicePreview": {
        "type": "object",
        "properties": {
          "billingCycleId": {
            "type": "string"
          },
          "renewalEstimate": {
            "$ref": "#/components/schemas/BillingCycleRenewalInvoice"
          }
        },
        "additionalProperties": false
      },
      "BillingCycleUpdateRequest": {
        "type": "object",
        "properties": {
          "remindersEnabled": {
            "type": "boolean",
            "nullable": true
          },
          "nickname": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Supplying a value of 'null' or not supplying a value for any nullable properties will cause the property to be ignored."
      },
      "BillingCycleWebhookEvent": {
        "type": "object",
        "properties": {
          "billingCycleId": {
            "type": "string",
            "description": "Id of the billing cycle.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CancelAction": {
        "type": "object",
        "properties": {
          "canCancel": {
            "type": "boolean"
          },
          "link": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "Error": {
        "type": "object",
        "properties": {
          "errorCode": {
            "type": "string",
            "nullable": true
          },
          "errorDescription": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "KeysetPaginationDirectionality": {
        "enum": [
          "forward",
          "reverse"
        ],
        "type": "string"
      },
      "LineHealth": {
        "type": "object",
        "properties": {
          "lineNumber": {
            "type": "string",
            "description": "Line number associated with the reservation."
          },
          "checkedAt": {
            "type": "string",
            "description": "Timestamp of when this line was last checked at.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LineReservationType": {
        "enum": [
          "verification",
          "rental"
        ],
        "type": "string"
      },
      "Link": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string",
            "description": "The HTTP method for this link.",
            "nullable": true
          },
          "href": {
            "type": "string",
            "description": "The HTTP location of the resource.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NewRentalRequest": {
        "required": [
          "allowBackOrderReservations",
          "alwaysOn",
          "capability",
          "duration",
          "isRenewable",
          "numberType",
          "serviceName"
        ],
        "type": "object",
        "properties": {
          "allowBackOrderReservations": {
            "type": "boolean",
            "description": "If set to true, a rental back order will be created if the requested rental is out of stock"
          },
          "alwaysOn": {
            "type": "boolean",
            "description": "If set to true, a line that does not require wake up will be assigned if in stock"
          },
          "areaCodeSelectOption": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Optional array of area codes",
            "nullable": true,
            "example": [
              "222",
              "333"
            ]
          },
          "duration": {
            "$ref": "#/components/schemas/RentalDuration"
          },
          "isRenewable": {
            "type": "boolean"
          },
          "numberType": {
            "$ref": "#/components/schemas/NumberType"
          },
          "billingCycleIdToAssignTo": {
            "type": "string",
            "description": "Optional billing cycle to which the rental is assigned. If left empty, a new billing cycle will be created for the rental. Only renewable rentals can be assigned to a billing cycle.",
            "nullable": true
          },
          "serviceName": {
            "type": "string",
            "description": "Name of the service",
            "example": "myservice"
          },
          "capability": {
            "$ref": "#/components/schemas/ReservationCapability"
          }
        },
        "additionalProperties": false
      },
      "NewVerificationRequest": {
        "required": [
          "capability",
          "serviceName"
        ],
        "type": "object",
        "properties": {
          "areaCodeSelectOption": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Clients can specify a area code when creating a reservation. If provided, our service will try to reserve a number with the specified area code.",
            "nullable": true,
            "example": [
              "775",
              "301"
            ]
          },
          "carrierSelectOption": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Clients can specify a carrier when creating a reservation. If provided, our service will try to reserve a number with the specified Carrier.",
            "nullable": true,
            "example": [
              "vz",
              "tmo",
              "att"
            ]
          },
          "serviceName": {
            "type": "string",
            "description": "",
            "example": "abra"
          },
          "capability": {
            "$ref": "#/components/schemas/ReservationCapability"
          },
          "serviceNotListedName": {
            "type": "string",
            "description": "Optional string to specify the service you are using with the \"servicenotlisted\" ```ServiceName```",
            "nullable": true
          },
          "maxPrice": {
            "type": "number",
            "description": "Optional decimal to specify the maximum total price you are willing to pay for the requested reservation. If the price exceeds this amount, the request will be rejected and no reservation will be created.",
            "format": "double",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NonrenewableRentalCompact": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "link": {
            "$ref": "#/components/schemas/Link"
          },
          "sale": {
            "$ref": "#/components/schemas/Link"
          },
          "saleId": {
            "type": "string",
            "description": "Sale Id may not be available for older sales.",
            "nullable": true
          },
          "serviceName": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/ReservationState"
          },
          "number": {
            "type": "string"
          },
          "alwaysOn": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "NonrenewableRentalExpanded": {
        "type": "object",
        "properties": {
          "calls": {
            "$ref": "#/components/schemas/Link"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "endsAt": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "refund": {
            "$ref": "#/components/schemas/RefundAction"
          },
          "sale": {
            "$ref": "#/components/schemas/Link"
          },
          "saleId": {
            "type": "string",
            "description": "Sale Id may not be available for older sales.",
            "nullable": true
          },
          "serviceName": {
            "type": "string"
          },
          "sms": {
            "$ref": "#/components/schemas/Link"
          },
          "state": {
            "$ref": "#/components/schemas/ReservationState"
          },
          "number": {
            "type": "string"
          },
          "alwaysOn": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "NonrenewableRentalQueryFilter": {
        "type": "object",
        "additionalProperties": false
      },
      "NonrenewableRentalUpdateRequest": {
        "type": "object",
        "properties": {
          "userNotes": {
            "type": "string",
            "description": "Update a non-renewable rental's notes. Supply an empty string value to clear the notes.",
            "nullable": true,
            "example": "Customer note."
          },
          "markAllSmsRead": {
            "type": "boolean",
            "description": "Mark a non-renewable rental's SMS as read.",
            "nullable": true,
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Supplying a value of 'null' or not supplying a value for any nullable properties will cause the property to be ignored."
      },
      "NumberType": {
        "enum": [
          "mobile",
          "voip",
          "landline"
        ],
        "type": "string"
      },
      "PaginatedData.BillingCycleCompact": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillingCycleCompact"
            }
          },
          "hasNext": {
            "type": "boolean"
          },
          "hasPrevious": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "additionalProperties": false
      },
      "PaginatedData.BillingCycleRenewalInvoice": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BillingCycleRenewalInvoice"
            }
          },
          "hasNext": {
            "type": "boolean"
          },
          "hasPrevious": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "additionalProperties": false
      },
      "PaginatedData.NonrenewableRentalCompact": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NonrenewableRentalCompact"
            }
          },
          "hasNext": {
            "type": "boolean"
          },
          "hasPrevious": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "additionalProperties": false
      },
      "PaginatedData.RenewableRentalCompact": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RenewableRentalCompact"
            }
          },
          "hasNext": {
            "type": "boolean"
          },
          "hasPrevious": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "additionalProperties": false
      },
      "PaginatedData.ReservationSaleCompact": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReservationSaleCompact"
            }
          },
          "hasNext": {
            "type": "boolean"
          },
          "hasPrevious": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "additionalProperties": false
      },
      "PaginatedData.Sms": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Sms"
            }
          },
          "hasNext": {
            "type": "boolean"
          },
          "hasPrevious": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "additionalProperties": false
      },
      "PaginatedData.VerificationCompact": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VerificationCompact"
            }
          },
          "hasNext": {
            "type": "boolean"
          },
          "hasPrevious": {
            "type": "boolean"
          },
          "count": {
            "type": "integer",
            "format": "int64"
          },
          "links": {
            "$ref": "#/components/schemas/PaginationLinks"
          }
        },
        "additionalProperties": false
      },
      "PaginationLinks": {
        "type": "object",
        "properties": {
          "current": {
            "$ref": "#/components/schemas/Link"
          },
          "previous": {
            "$ref": "#/components/schemas/Link"
          },
          "next": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "PricingSnapshot": {
        "type": "object",
        "properties": {
          "serviceName": {
            "type": "string",
            "description": "Name of the service.",
            "example": "myservice"
          },
          "price": {
            "type": "number",
            "description": "Total cost.",
            "format": "double",
            "example": 5
          }
        },
        "additionalProperties": false
      },
      "ReactivationAction": {
        "type": "object",
        "properties": {
          "canReactivate": {
            "type": "boolean"
          },
          "link": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "RefundAction": {
        "type": "object",
        "properties": {
          "canRefund": {
            "type": "boolean"
          },
          "link": {
            "$ref": "#/components/schemas/Link"
          },
          "refundableUntil": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RenewableRentalCompact": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "sale": {
            "$ref": "#/components/schemas/Link"
          },
          "saleId": {
            "type": "string",
            "description": "Sale Id may not be available for older sales.",
            "nullable": true
          },
          "serviceName": {
            "type": "string"
          },
          "link": {
            "$ref": "#/components/schemas/Link"
          },
          "state": {
            "$ref": "#/components/schemas/ReservationState"
          },
          "billingCycle": {
            "$ref": "#/components/schemas/Link"
          },
          "billingCycleId": {
            "type": "string"
          },
          "isIncludedForNextRenewal": {
            "type": "boolean"
          },
          "number": {
            "type": "string"
          },
          "alwaysOn": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RenewableRentalExpanded": {
        "type": "object",
        "properties": {
          "sms": {
            "$ref": "#/components/schemas/Link"
          },
          "calls": {
            "$ref": "#/components/schemas/Link"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "refund": {
            "$ref": "#/components/schemas/RefundAction"
          },
          "sale": {
            "$ref": "#/components/schemas/Link"
          },
          "saleId": {
            "type": "string",
            "description": "Sale Id may not be available for older sales.",
            "nullable": true
          },
          "serviceName": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/ReservationState"
          },
          "billingCycle": {
            "$ref": "#/components/schemas/Link"
          },
          "billingCycleId": {
            "type": "string"
          },
          "isIncludedForNextRenewal": {
            "type": "boolean"
          },
          "number": {
            "type": "string"
          },
          "alwaysOn": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RenewableRentalUpdateRequest": {
        "type": "object",
        "properties": {
          "userNotes": {
            "type": "string",
            "description": "Update a renewable rental's notes. Supply an empty string value to clear the notes.",
            "nullable": true,
            "example": "Customer note."
          },
          "includeForRenewal": {
            "type": "boolean",
            "description": "Update a renewable rental's inclusion/exclusion for renewal.",
            "nullable": true,
            "example": true
          },
          "markAllSmsRead": {
            "type": "boolean",
            "description": "Mark a renewable rental's SMS as read.",
            "nullable": true,
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Supplying a value of 'null' or not supplying a value for any nullable properties will cause the property to be ignored."
      },
      "RentalDuration": {
        "enum": [
          "oneDay",
          "threeDay",
          "sevenDay",
          "fourteenDay",
          "thirtyDay",
          "ninetyDay",
          "oneYear"
        ],
        "type": "string"
      },
      "RentalExtensionRequest": {
        "type": "object",
        "properties": {
          "extensionDuration": {
            "$ref": "#/components/schemas/RentalDuration"
          },
          "rentalId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "RentalPriceCheckRequest": {
        "required": [
          "alwaysOn",
          "areaCode",
          "capability",
          "duration",
          "isRenewable",
          "numberType",
          "serviceName"
        ],
        "type": "object",
        "properties": {
          "serviceName": {
            "type": "string",
            "description": "Name of the service",
            "example": "myservice"
          },
          "areaCode": {
            "type": "boolean",
            "description": "",
            "example": true
          },
          "numberType": {
            "$ref": "#/components/schemas/NumberType"
          },
          "capability": {
            "$ref": "#/components/schemas/ReservationCapability"
          },
          "alwaysOn": {
            "type": "boolean",
            "description": "",
            "example": true
          },
          "callForwarding": {
            "type": "boolean",
            "description": "",
            "nullable": true,
            "example": true
          },
          "billingCycleIdToAssignTo": {
            "type": "string",
            "description": "",
            "nullable": true,
            "example": "abcedfg"
          },
          "isRenewable": {
            "type": "boolean",
            "description": "",
            "example": true
          },
          "duration": {
            "$ref": "#/components/schemas/RentalDuration"
          }
        },
        "additionalProperties": false
      },
      "RentalSnapshot": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string"
          },
          "rental": {
            "$ref": "#/components/schemas/Link"
          },
          "renewalCost": {
            "type": "number",
            "format": "double"
          },
          "serviceName": {
            "type": "string"
          },
          "alreadyRenewed": {
            "type": "boolean"
          },
          "includedAddOns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnSnapshot"
            },
            "deprecated": true
          },
          "excludedAddOns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddOnSnapshot"
            },
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "ReportAction": {
        "type": "object",
        "properties": {
          "canReport": {
            "type": "boolean"
          },
          "link": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "Reservation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the reservation"
          },
          "link": {
            "$ref": "#/components/schemas/Link"
          },
          "reservationType": {
            "$ref": "#/components/schemas/ReservationType"
          },
          "serviceName": {
            "type": "string",
            "description": "Name of service"
          }
        },
        "additionalProperties": false
      },
      "ReservationCapability": {
        "enum": [
          "sms",
          "voice",
          "smsAndVoiceCombo"
        ],
        "type": "string"
      },
      "ReservationCreatedWebhookEvent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Id of the created reservation."
          },
          "type": {
            "$ref": "#/components/schemas/LineReservationType"
          }
        },
        "additionalProperties": false
      },
      "ReservationSaleCompact": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "link": {
            "$ref": "#/components/schemas/Link"
          },
          "state": {
            "$ref": "#/components/schemas/ReservationSaleState"
          },
          "totalCost": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ReservationSaleExpanded": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "backOrderReservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackOrderReservationCompact"
            },
            "description": "List of back ordered reservations that were not in stock at the time of purchase."
          },
          "reservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reservation"
            },
            "description": "List of reservations that associated with this sale. Any back ordered reservations that are fulfilled at a later time will also appear here."
          },
          "state": {
            "$ref": "#/components/schemas/ReservationSaleState"
          },
          "total": {
            "type": "number",
            "format": "double"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ReservationSaleState": {
        "enum": [
          "created",
          "processing",
          "failed",
          "succeeded"
        ],
        "type": "string"
      },
      "ReservationState": {
        "enum": [
          "verificationPending",
          "verificationCompleted",
          "verificationCanceled",
          "verificationTimedOut",
          "verificationReported",
          "verificationRefunded",
          "verificationReused",
          "verificationReactivated",
          "renewableActive",
          "renewableOverdue",
          "renewableExpired",
          "renewableRefunded",
          "nonrenewableActive",
          "nonrenewableExpired",
          "nonrenewableRefunded"
        ],
        "type": "string"
      },
      "ReservationType": {
        "enum": [
          "renewable",
          "nonrenewable",
          "verification"
        ],
        "type": "string"
      },
      "ReuseAction": {
        "type": "object",
        "properties": {
          "link": {
            "$ref": "#/components/schemas/Link"
          },
          "reusableUntil": {
            "type": "string",
            "description": "If the verification is reusable, this value will be populated.",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Service": {
        "type": "object",
        "properties": {
          "serviceName": {
            "type": "string",
            "description": "Name of the service. Supply this value when a ```ServiceName``` is required.",
            "example": "myservice"
          },
          "capability": {
            "$ref": "#/components/schemas/ReservationCapability"
          }
        },
        "additionalProperties": false
      },
      "Sms": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "from": {
            "type": "string",
            "nullable": true
          },
          "to": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "smsContent": {
            "type": "string",
            "nullable": true
          },
          "parsedCode": {
            "type": "string",
            "nullable": true
          },
          "encrypted": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "description": "Sms"
      },
      "SmsWebhookEvent": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "nullable": true
          },
          "to": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "smsContent": {
            "type": "string",
            "nullable": true
          },
          "parsedCode": {
            "type": "string",
            "nullable": true
          },
          "encrypted": {
            "type": "boolean",
            "description": "True if the contents of the sms is encrypted at rest."
          },
          "reservationId": {
            "type": "string",
            "description": "The Id of the reservation that this sms was assigned to.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UsageWindowEstimateRequest": {
        "required": [
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "reservationId": {
            "type": "string",
            "description": "The reservation Id to get the estimated usage window for. If a valid reservation does not exist, a 400 response will be returned."
          }
        },
        "additionalProperties": false
      },
      "UsageWindowEstimateResponse": {
        "type": "object",
        "properties": {
          "estimatedWindowStart": {
            "type": "string",
            "description": "The estimated datetime after which the reservation will be woken up and ready for use. Your reservation is estimated to be active and receiving sms and calls after this datetime. This value will be 'null' if the estimate was not successfully calculated.",
            "format": "date-time",
            "nullable": true
          },
          "estimatedWindowEnd": {
            "type": "string",
            "description": "The estimated datetime after which a wake request will end. Your line is estimated to become offline and no longer be receiving sms or calls after this datetime. This value will be 'null' if the estimate was not successfully calculated.",
            "format": "date-time",
            "nullable": true
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation that this usage window estimate is associated with."
          }
        },
        "additionalProperties": false
      },
      "VerificationCompact": {
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "link": {
            "$ref": "#/components/schemas/Link"
          },
          "serviceName": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/ReservationState"
          },
          "totalCost": {
            "type": "number",
            "format": "double"
          },
          "number": {
            "type": "string"
          },
          "sms": {
            "$ref": "#/components/schemas/Link"
          },
          "calls": {
            "$ref": "#/components/schemas/Link"
          }
        },
        "additionalProperties": false
      },
      "VerificationExpanded": {
        "type": "object",
        "properties": {
          "number": {
            "type": "string"
          },
          "sms": {
            "$ref": "#/components/schemas/Link"
          },
          "calls": {
            "$ref": "#/components/schemas/Link"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "endsAt": {
            "type": "string",
            "format": "date-time"
          },
          "id": {
            "type": "string"
          },
          "cancel": {
            "$ref": "#/components/schemas/CancelAction"
          },
          "reactivate": {
            "$ref": "#/components/schemas/ReactivationAction"
          },
          "report": {
            "$ref": "#/components/schemas/ReportAction"
          },
          "reuse": {
            "$ref": "#/components/schemas/ReuseAction"
          },
          "sale": {
            "$ref": "#/components/schemas/Link"
          },
          "serviceName": {
            "type": "string"
          },
          "state": {
            "$ref": "#/components/schemas/ReservationState"
          },
          "totalCost": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "VerificationPriceCheckRequest": {
        "required": [
          "areaCode",
          "capability",
          "carrier",
          "numberType",
          "serviceName"
        ],
        "type": "object",
        "properties": {
          "serviceName": {
            "type": "string",
            "description": "",
            "example": "yahoo"
          },
          "areaCode": {
            "type": "boolean",
            "description": "",
            "example": true
          },
          "carrier": {
            "type": "boolean",
            "description": "",
            "example": true
          },
          "numberType": {
            "$ref": "#/components/schemas/NumberType"
          },
          "capability": {
            "$ref": "#/components/schemas/ReservationCapability"
          }
        },
        "additionalProperties": false
      },
      "WakeRequest": {
        "required": [
          "reservationId"
        ],
        "type": "object",
        "properties": {
          "reservationId": {
            "type": "string",
            "description": "The reservation Id to create a wake request for. If a valid reservation does not exist, a 400 response will be returned."
          }
        },
        "additionalProperties": false
      },
      "WakeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Id of this wake request."
          },
          "usageWindowStart": {
            "type": "string",
            "description": "The datetime after which the reservation will be woken up and ready for use. Your reservation will be active and receiving sms and calls after this datetime. This value will be 'null' if the wake request was not successfully scheduled.",
            "format": "date-time",
            "nullable": true
          },
          "usageWindowEnd": {
            "type": "string",
            "description": "The datetime after which the wake request will end. Your line will become offline and no longer be receiving sms or calls after this datetime. You can then create another wake request to bring your reservation back online and being receiving sms and calls again. This value will be 'null' if the wake request was not successfully scheduled.",
            "format": "date-time",
            "nullable": true
          },
          "isScheduled": {
            "type": "boolean",
            "description": "Indicates whether or not the wake request was successfully scheduled. If a wake request fails to be scheduled, then you will have to submit a new wake request. Too many wake requests may result in wake request throttling."
          },
          "reservationId": {
            "type": "string",
            "description": "Id of the reservation that this wake request is associated with.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebhookEvent.BackOrderReservationWebhookEvent": {
        "type": "object",
        "properties": {
          "attempt": {
            "type": "integer",
            "description": "Send attempt count",
            "format": "int32"
          },
          "occurredAt": {
            "type": "string",
            "description": "When the event occurred",
            "format": "date-time"
          },
          "data": {
            "$ref": "#/components/schemas/BackOrderReservationWebhookEvent"
          },
          "event": {
            "type": "string",
            "description": "Name of the event"
          },
          "id": {
            "type": "string",
            "description": "Id of event"
          }
        },
        "additionalProperties": false
      },
      "WebhookEvent.BillingCycleWebhookEvent": {
        "type": "object",
        "properties": {
          "attempt": {
            "type": "integer",
            "description": "Send attempt count",
            "format": "int32"
          },
          "occurredAt": {
            "type": "string",
            "description": "When the event occurred",
            "format": "date-time"
          },
          "data": {
            "$ref": "#/components/schemas/BillingCycleWebhookEvent"
          },
          "event": {
            "type": "string",
            "description": "Name of the event"
          },
          "id": {
            "type": "string",
            "description": "Id of event"
          }
        },
        "additionalProperties": false
      },
      "WebhookEvent.ReservationCreatedWebhookEvent": {
        "type": "object",
        "properties": {
          "attempt": {
            "type": "integer",
            "description": "Send attempt count",
            "format": "int32"
          },
          "occurredAt": {
            "type": "string",
            "description": "When the event occurred",
            "format": "date-time"
          },
          "data": {
            "$ref": "#/components/schemas/ReservationCreatedWebhookEvent"
          },
          "event": {
            "type": "string",
            "description": "Name of the event"
          },
          "id": {
            "type": "string",
            "description": "Id of event"
          }
        },
        "additionalProperties": false
      },
      "WebhookEvent.SmsWebhookEvent": {
        "type": "object",
        "properties": {
          "attempt": {
            "type": "integer",
            "description": "Send attempt count",
            "format": "int32"
          },
          "occurredAt": {
            "type": "string",
            "description": "When the event occurred",
            "format": "date-time"
          },
          "data": {
            "$ref": "#/components/schemas/SmsWebhookEvent"
          },
          "event": {
            "type": "string",
            "description": "Name of the event"
          },
          "id": {
            "type": "string",
            "description": "Id of event"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "<span style='color:#dc2626;'><b>This page functions only for the embedded JS client for testing purposes</b></span><br/><br/>A valid bearer token will start with <code>eyJh...</code>.<br/>To learn how to generate a bearer token, see <a href='docs/api/v2#post-/api/pub/v2/auth' target='_top'>Generate Bearer Token</a>.<br/><br/>",
        "scheme": "Bearer"
      }
    }
  }
}