# Auto-generated schemas for category: expenses

import pandas as pd
import pandera as pa
from pandera.typing import Series, String, Int, Float, Bool, DateTime
import pandera.extensions as extensions
from brynq_sdk_functions import BrynQPanderaDataFrameModel
from typing import Optional, Annotated
from pydantic import BaseModel, Field, StringConstraints

class ExpensablesGet(BrynQPanderaDataFrameModel):
    id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="Unique identifier for the expensable", alias="id")
    type: Series[String] = pa.Field(coerce=True, nullable=False, description="Type of the expensable. Can be either "expense" or "mileage" or "perdiem"", alias="type")
    company_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="The ID of the company that owns the expensable", alias="company_id")
    employee_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="The ID of the employee that owns the expensable", alias="employee_id")
    group_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The optional ID of the group that the expensable belongs to", alias="group_id")
    created_at: Series[String] = pa.Field(coerce=True, nullable=False, description="The date and time when the expensable was created", alias="created_at")
    amount: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The optional amount in cents", alias="amount")
    currency: Series[String] = pa.Field(coerce=True, nullable=False, description="The currency code in ISO 4217 format", alias="currency")
    status: Series[String] = pa.Field(coerce=True, nullable=False, description="The status of the expensable. Can be pending, approved, paid, archived, in_review, rejected, reversed, draft, or in_payroll", alias="status")
    description: Series[String] = pa.Field(coerce=True, nullable=True, description="The optional description of the expensable", alias="description")
    reporter_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The optional ID of the employee that reported the expensable", alias="reporter_id")
    status_updated_at: Series[String] = pa.Field(coerce=True, nullable=False, description="The optional date and time when the status was last updated", alias="status_updated_at")
    effective_on: Series[String] = pa.Field(coerce=True, nullable=True, description="The optional date and time when the expensable was effective", alias="effective_on")
    review_request_at: Series[String] = pa.Field(coerce=True, nullable=True, description="The optional date and time when the expensable was requested for review", alias="review_request_at")
    paid_at: Series[String] = pa.Field(coerce=True, nullable=True, description="The optional date and time when the expensable was set as paid", alias="paid_at")
    updated_at: Series[String] = pa.Field(coerce=True, nullable=False, description="The date and time when the expensable was last updated", alias="updated_at")
    reimbursable_amount: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The optional reimbursable amount in cents", alias="reimbursable_amount")
    reimbursable_currency: Series[String] = pa.Field(coerce=True, nullable=True, description="The optional reimbursable currency code in ISO 4217 format", alias="reimbursable_currency")
    reimbursement_method: Series[String] = pa.Field(coerce=True, nullable=True, description="The optional reimbursement method", alias="reimbursement_method")
    internal_reference: Series[String] = pa.Field(coerce=True, nullable=True, description="The optional internal reference of the expensable", alias="internal_reference")
    expense_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The optional ID of the expense that the expensable belongs to", alias="expense_id")
    mileage_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The optional ID of the mileage that the expensable belongs to", alias="mileage_id")
    per_diem_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The optional ID of the per_diem that the expensable belongs to", alias="per_diem_id")

class ExpensesGet(BrynQPanderaDataFrameModel):
    id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="", alias="id")
    employee_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The id of the expense's owner", alias="employee_id")
    company_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="The id of the expense's company", alias="company_id")
    card_payment_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="", alias="card_payment_id")
    dispute_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="", alias="dispute_id")
    expenses_expensable_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="", alias="expenses_expensable_id")
    merchant_name: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="merchant_name")
    user_merchant: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="user_merchant")
    merchant_tin: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="merchant_tin")
    category: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="category")
    subcategory: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="subcategory")
    creation_type: Series[String] = pa.Field(coerce=True, nullable=False, description="How the expense was created, one of 'manual', 'automatic' or 'travelperk'", alias="creation_type")
    reference: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="reference")
    amount: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The optional amount in cents", alias="amount")
    currency: Series[String] = pa.Field(coerce=True, nullable=False, description="The currency of the expense", alias="currency")
    status: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="status")
    description: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="description")
    effective_on: Series[String] = pa.Field(coerce=True, nullable=False, description="The date when the expense was made", alias="effective_on")
    review_request_at: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="review_request_at")
    status_updated_at: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="status_updated_at")
    files: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="files")
    external_authorization_id: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="external_authorization_id")
    expenses_card_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="", alias="expenses_card_id")
    card: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="card")
    document_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="", alias="document_id")
    signed_document: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="signed_document")
    access_token: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="access_token")
    paid_at: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="paid_at")
    document_number: Series[String] = pa.Field(coerce=True, nullable=True, description="Number of the financial document associated to the expense", alias="document_number")
    document_type: Series[String] = pa.Field(coerce=True, nullable=True, description="Type of the financial document associated to the expense", alias="document_type")
    payment: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="payment")
    payment_method: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="payment_method")
    exchange_rate: Series[Float] = pa.Field(coerce=True, nullable=True, description="", alias="exchange_rate")
    reimbursable_currency: Series[String] = pa.Field(coerce=True, nullable=True, description="The currency of the reimbursable amount", alias="reimbursable_currency")
    reimbursable_amount: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The optional reimbursable amount in cents", alias="reimbursable_amount")
    taxes: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="taxes")
    category_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="", alias="category_id")
    ledger_account_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="", alias="ledger_account_id")

class MileagesGet(BrynQPanderaDataFrameModel):
    id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="", alias="id")
    employee_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="", alias="employee_id")
    company_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="", alias="company_id")
    expenses_expensable_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="", alias="expenses_expensable_id")
    category: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="category")
    subcategory: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="subcategory")
    category_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="", alias="category_id")
    amount: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="", alias="amount")
    currency: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="currency")
    reimbursable_amount: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The amount to be reimbursed for the mileage in cents.", alias="reimbursable_amount")
    reimbursable_currency: Series[String] = pa.Field(coerce=True, nullable=True, description="The currency for the reimbursable amount.", alias="reimbursable_currency")
    status: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="status")
    mileage: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="", alias="mileage")
    units: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="units")
    rate: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="rate")
    from: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="from")
    to: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="to")
    description: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="description")
    effective_on: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="effective_on")
    review_request_at: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="review_request_at")
    files: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="files")
    paid_at: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="paid_at")
    payment: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="payment")
    ledger_account_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="", alias="ledger_account_id")
    round_trip: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Indicates if the mileage is a round trip", alias="round_trip")
    origin_longitude: Series[String] = pa.Field(coerce=True, nullable=True, description="The longitude of the origin of the mileage", alias="origin_longitude")
    origin_latitude: Series[String] = pa.Field(coerce=True, nullable=True, description="The latitude of the origin of the mileage", alias="origin_latitude")
    destination_longitude: Series[String] = pa.Field(coerce=True, nullable=True, description="The longitude of the destination of the mileage", alias="destination_longitude")
    destination_latitude: Series[String] = pa.Field(coerce=True, nullable=True, description="The latitude of the destination of the mileage", alias="destination_latitude")
    calculated_mileage: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The calculated mileage between origin and destination in decameters/10-milers", alias="calculated_mileage")

class Per_diemsGet(BrynQPanderaDataFrameModel):
    id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="The ID of the per diem.", alias="id")
    employee_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The ID of the employee the per diem is for.", alias="employee_id")
    company_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="The ID of the company the per diem is for.", alias="company_id")
    expenses_expensable_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The ID of the expensable the per diem is for.", alias="expenses_expensable_id")
    end_date: Series[String] = pa.Field(coerce=True, nullable=True, description="The end date of the per diem.", alias="end_date")
    start_date: Series[String] = pa.Field(coerce=True, nullable=True, description="The start date of the per diem.", alias="start_date")
    from: Series[String] = pa.Field(coerce=True, nullable=True, description="The location the per diem is from.", alias="from")
    to: Series[String] = pa.Field(coerce=True, nullable=True, description="The location the per diem is to.", alias="to")
    ledger_account_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The ID of the ledger account the per diem is for.", alias="ledger_account_id")
    amount: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The amount of the per diem.", alias="amount")
    currency: Series[String] = pa.Field(coerce=True, nullable=False, description="The currency for the reimbursable amount.", alias="currency")
    reimbursable_amount: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The amount to be reimbursed by the per diem in cents.", alias="reimbursable_amount")
    reimbursable_currency: Series[String] = pa.Field(coerce=True, nullable=True, description="The currency for the reimbursable amount.", alias="reimbursable_currency")
    payment: Series[String] = pa.Field(coerce=True, nullable=False, description="The payment method for the per diem.", alias="payment")
    paid_at: Series[String] = pa.Field(coerce=True, nullable=True, description="The date the per diem was paid.", alias="paid_at")
    files: Series[String] = pa.Field(coerce=True, nullable=False, description="The files attached to the per diem.", alias="files")
    review_request_at: Series[String] = pa.Field(coerce=True, nullable=True, description="The date the per diem was requested for review.", alias="review_request_at")
    effective_on: Series[String] = pa.Field(coerce=True, nullable=True, description="The date the per diem is effective on.", alias="effective_on")
    description: Series[String] = pa.Field(coerce=True, nullable=True, description="The description of the per diem.", alias="description")
    category: Series[String] = pa.Field(coerce=True, nullable=True, description="The category of the per diem.", alias="category")
    subcategory: Series[String] = pa.Field(coerce=True, nullable=True, description="The subcategory of the per diem.", alias="subcategory")
    status: Series[String] = pa.Field(coerce=True, nullable=False, description="The status of the per diem.", alias="status")
    rates: Series[String] = pa.Field(coerce=True, nullable=False, description="The rates for the per diem.", alias="rates")

class ExpensablesDelete(BaseModel):
    id: int = Field(..., description="ID", alias="id")

class ExpensesDelete(BaseModel):
    id: int = Field(..., description="ID", alias="id")

class MileagesDelete(BaseModel):
    id: int = Field(..., description="ID", alias="id")

class Per_diemsDelete(BaseModel):
    id: int = Field(..., description="ID", alias="id")

