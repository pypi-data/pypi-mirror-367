# Auto-generated schemas for category: timeoff

import pandas as pd
import pandera as pa
from pandera.typing import Series, String, Int, Float, Bool, DateTime
import pandera.extensions as extensions
from brynq_sdk_functions import BrynQPanderaDataFrameModel
from typing import Optional, Annotated
from pydantic import BaseModel, Field, StringConstraints

class Allowance_incidencesGet(BrynQPanderaDataFrameModel):
    id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="Unique identifier of the allowance incidence", alias="id")
    employee_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="Employee id of the affected employee", alias="employee_id")
    description: Series[String] = pa.Field(coerce=True, nullable=True, description="Optional comment regarding the incidence", alias="description")
    days_in_cents: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="How many units * 100 does the incidence add/substract. Can be positive or negative. Example is one unit", alias="days_in_cents")
    timeoff_allowance_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="To what allowance does the incidence affect. It will dictate if its days or hours", alias="timeoff_allowance_id")
    effective_on: Series[String] = pa.Field(coerce=True, nullable=False, description="When does the incidence take effect; this is for time off cycles calculations.", alias="effective_on")
    target_balance: Series[String] = pa.Field(coerce=True, nullable=True, description="Whether the incidence affects the Accrued or the Available counter.", alias="target_balance")
    created_at: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="Unix timestamp when the DB record was created", alias="created_at")
    updated_at: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="Unix timestamp when the DB record was last updated", alias="updated_at")

class Allowance_statsGet(BrynQPanderaDataFrameModel):
    id: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="id")
    allowance_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="", alias="allowance_id")
    employee_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="", alias="employee_id")
    year: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="", alias="year")
    cycles: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="cycles")
    carry_overs: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="carry_overs")
    accumulated_carry_over: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="accumulated_carry_over")
    available_days: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="available_days")
    total_accrued_units: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="total_accrued_units")
    incidences: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="incidences")
    max_balance_cap: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="max_balance_cap")
    policy_allowance: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="policy_allowance")
    prorated_allowance_days: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="prorated_allowance_days")
    total_in_decimal: Series[String] = pa.Field(coerce=True, nullable=True, description="", alias="total_in_decimal")
    used_carry_over: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="used_carry_over")
    used_days: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="used_days")
    used_units_until_reference_date: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="used_units_until_reference_date")
    outstanding_units: Series[String] = pa.Field(coerce=True, nullable=False, description="", alias="outstanding_units")

class AllowancesGet(BrynQPanderaDataFrameModel):
    id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="Unique identifier of the allowance", alias="id")
    accrued_denominator_in_cents: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="Only for Allowances based on worked time. It represents how many units you need to work to be granted allowance units", alias="accrued_denominator_in_cents")
    accrued_factor_in_cents: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="Only for Allowances based on worked time. It represents how many units you are given per unit of time worked", alias="accrued_factor_in_cents")
    accrued_units_availability: Series[String] = pa.Field(coerce=True, nullable=True, description="When can the acrrued units be spent.", alias="accrued_units_availability")
    allowance_type: Series[String] = pa.Field(coerce=True, nullable=False, description="Sets the allowance units. Can be "days" or "hours"", alias="allowance_type")
    available_days: Series[String] = pa.Field(coerce=True, nullable=False, description="Indicates how the allowance units are accrued. For example all_days means all allowance days are given on the first day of the cycle.", alias="available_days")
    carry_over_days: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="How many units can carry over between cycles", alias="carry_over_days")
    carry_over_units_in_cents: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="How many units can carry over between cycles multiplied by 100", alias="carry_over_units_in_cents")
    count_holiday_as_workable: Series[Bool] = pa.Field(coerce=True, nullable=False, description="This setting flags if units taken during a bank holiday should be deducted or not from allowance.", alias="count_holiday_as_workable")
    cycle_length: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="How many months does each allowance cycle last", alias="cycle_length")
    cycle_start: Series[String] = pa.Field(coerce=True, nullable=True, description="When does the cycle start.", alias="cycle_start")
    days_type: Series[String] = pa.Field(coerce=True, nullable=True, description="Indicates if the allowance is based on working on calendar days.", alias="days_type")
    employee_carry_over_starting_year: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="When does the carryover start", alias="employee_carry_over_starting_year")
    expire_in_months: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="When does the carryover expire in months.", alias="expire_in_months")
    frequency: Series[String] = pa.Field(coerce=True, nullable=True, description="Defines duration of the allowance cycles. Can be "yearly", "monthly_flexible" or "lifetime"", alias="frequency")
    holiday_allowance_in_cents: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="Base amount of holiday allowance units multiplied by 100", alias="holiday_allowance_in_cents")
    leave_type_ids: Series[String] = pa.Field(coerce=True, nullable=False, description="An array of leave type ids associated with that allowance", alias="leave_type_ids")
    maximum_amount_in_cents: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="Maximum the allowance can reach on accrued", alias="maximum_amount_in_cents")
    name: Series[String] = pa.Field(coerce=True, nullable=False, description="Allowance name set by the user", alias="name")
    negative_counter_type: Series[String] = pa.Field(coerce=True, nullable=True, description="Whether the allowance allows to request more days than available", alias="negative_counter_type")
    position: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="Indicates the position in the allowance when rendering them in UI", alias="position")
    proration_type: Series[String] = pa.Field(coerce=True, nullable=False, description="Whether the allowance has proration enabled or not.", alias="proration_type")
    pto_proratio_enabled: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Whether the allowance days are prorrated or not", alias="pto_proratio_enabled")
    range_type: Series[String] = pa.Field(coerce=True, nullable=True, description="Configures how leaves duration is handled.", alias="range_type")
    rounding: Series[String] = pa.Field(coerce=True, nullable=False, description="How the accrued units of the allowance are rounded. It depends if the allowance is set in hours or days.", alias="rounding")
    send_notification: Series[Bool] = pa.Field(coerce=True, nullable=True, description="", alias="send_notification")
    source_units: Series[String] = pa.Field(coerce=True, nullable=True, description="This field configures the type of allowance (fixed balance, based on worked time)", alias="source_units")
    tenure_period_transition: Series[String] = pa.Field(coerce=True, nullable=True, description="In case the allowance has tenure periods, when is this tenure applied.", alias="tenure_period_transition")
    tenure_periods: Series[String] = pa.Field(coerce=True, nullable=False, description="The tenure periods associated with the allowance.", alias="tenure_periods")
    tenure_periods_enabled: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Whether the allowance has tenure periods enabled or not.", alias="tenure_periods_enabled")
    timeoff_cycle: Series[String] = pa.Field(coerce=True, nullable=False, description="Value to indicate how the allowance cycle is configured. Its an abbreviation of the first and last month.", alias="timeoff_cycle")
    timeoff_policy_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="The Id of the policy to which the allowance belongs to", alias="timeoff_policy_id")
    unlimited_accrued_hours: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Flag to indicate if there is unlimited accrual.", alias="unlimited_accrued_hours")
    unlimited_carry_over: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Flag to indicate if there is unlimited carry over.", alias="unlimited_carry_over")
    unlimited_carry_over_expiration: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Boolean to flag if carryover does not expire", alias="unlimited_carry_over_expiration")
    unlimited_holidays: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Flag to indicate that the allowance has unlimited available days", alias="unlimited_holidays")

class Blocked_periodsGet(BrynQPanderaDataFrameModel):
    id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="Unique identifier of the blocked period", alias="id")
    company_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="Company id of the blocked period", alias="company_id")
    name: Series[String] = pa.Field(coerce=True, nullable=False, description="Name of the blocked period.", alias="name")
    leave_type_ids: Series[String] = pa.Field(coerce=True, nullable=False, description="Leave types for which absence request has been blocked", alias="leave_type_ids")
    time_periods: Series[String] = pa.Field(coerce=True, nullable=False, description="The tenure periods associated with the allowance.", alias="time_periods")
    strategy: Series[String] = pa.Field(coerce=True, nullable=False, description="Type of access group", alias="strategy")
    members: Series[String] = pa.Field(coerce=True, nullable=False, description="Employees whose timeoff will be affected", alias="members")
    location_ids: Series[String] = pa.Field(coerce=True, nullable=True, description="List of locations workplace identifiers where the employees are located", alias="location_ids")
    team_ids: Series[String] = pa.Field(coerce=True, nullable=True, description="List of team identifiers which the selected employees belong to", alias="team_ids")
    legal_entity_ids: Series[String] = pa.Field(coerce=True, nullable=True, description="List of legal entity identifiers which the selected employees belong to", alias="legal_entity_ids")

class Leave_typesGet(BrynQPanderaDataFrameModel):
    id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="Identifier of the leave type", alias="id")
    name: Series[String] = pa.Field(coerce=True, nullable=False, description="Name of the leave type", alias="name")
    translated_name: Series[String] = pa.Field(coerce=True, nullable=True, description="Translated name of the leave type, if available", alias="translated_name")
    identifier: Series[String] = pa.Field(coerce=True, nullable=False, description="Unique identifier of the leave type", alias="identifier")
    color: Series[String] = pa.Field(coerce=True, nullable=False, description="The color associated with this leave type", alias="color")
    active: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Whether the leave type is active", alias="active")
    editable: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Whether the leave type is editable", alias="editable")
    approval_required: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Whether approval is required for this leave type", alias="approval_required")
    accrues: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Whether the leave type accrues over time", alias="accrues")
    attachment: Series[Bool] = pa.Field(coerce=True, nullable=False, description="Whether an attachment is required for this leave type", alias="attachment")
    allow_endless: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Whether endless leave is allowed", alias="allow_endless")
    restricted: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Whether the leave type is restricted", alias="restricted")
    visibility: Series[Bool] = pa.Field(coerce=True, nullable=False, description="Whether the leave type is visible to employees", alias="visibility")
    workable: Series[Bool] = pa.Field(coerce=True, nullable=False, description="Whether the leave type is workable", alias="workable")
    payable: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Whether the leave type is payable", alias="payable")
    company_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="Identifier of the company associated with this leave type", alias="company_id")
    is_attachment_mandatory: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Whether the attachment is mandatory", alias="is_attachment_mandatory")
    allowance_ids: Series[String] = pa.Field(coerce=True, nullable=False, description="List of allowance identifiers associated with this leave type", alias="allowance_ids")
    half_days_units_enabled: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Whether half-day units are enabled for this leave type", alias="half_days_units_enabled")
    max_days_in_cents: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="Maximum days in cents that can be taken", alias="max_days_in_cents")
    min_days_in_cents: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="Minimum days in cents that must be taken", alias="min_days_in_cents")
    description: Series[String] = pa.Field(coerce=True, nullable=True, description="Description of the leave type", alias="description")
    details_required: Series[Bool] = pa.Field(coerce=True, nullable=False, description="Whether additional details are required for the leave type", alias="details_required")

class LeavesGet(BrynQPanderaDataFrameModel):
    id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="Identifier of the Leave", alias="id")
    company_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="Company identifier of the employee of the leave", alias="company_id")
    employee_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="Employee identifier of the leave", alias="employee_id")
    start_on: Series[String] = pa.Field(coerce=True, nullable=False, description="The start date of the leave", alias="start_on")
    finish_on: Series[String] = pa.Field(coerce=True, nullable=True, description="The end date of the leave", alias="finish_on")
    half_day: Series[String] = pa.Field(coerce=True, nullable=True, description="Indicates if the leave is taken as a half-day", alias="half_day")
    description: Series[String] = pa.Field(coerce=True, nullable=True, description="A description of the leave", alias="description")
    reason: Series[String] = pa.Field(coerce=True, nullable=True, description="The reason provided by the employee for taking the leave", alias="reason")
    leave_type_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The identifier for the type of leave", alias="leave_type_id")
    leave_type_name: Series[String] = pa.Field(coerce=True, nullable=True, description="The name of the leave type", alias="leave_type_name")
    approved: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Indicates whether the leave has been approved", alias="approved")
    employee_full_name: Series[String] = pa.Field(coerce=True, nullable=True, description="The full name of the employee taking the leave", alias="employee_full_name")
    start_time: Series[String] = pa.Field(coerce=True, nullable=True, description="The start time of the leave", alias="start_time")
    hours_amount_in_cents: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="The total number of hours taken for the leave, represented in cents", alias="hours_amount_in_cents")
    updated_at: Series[String] = pa.Field(coerce=True, nullable=False, description="The updated at date of the leave", alias="updated_at")
    created_at: Series[String] = pa.Field(coerce=True, nullable=True, description="The created at date of the leave", alias="created_at")

class PoliciesGet(BrynQPanderaDataFrameModel):
    id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="The policy id.", alias="id")
    name: Series[String] = pa.Field(coerce=True, nullable=False, description="Policy name.", alias="name")
    main: Series[Bool] = pa.Field(coerce=True, nullable=True, description="Is the main policy? It will return true if it's the main policy if not it will return false.", alias="main")
    company_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="The company id.", alias="company_id")
    description: Series[String] = pa.Field(coerce=True, nullable=True, description="The policy description.", alias="description")

class Policy_assignmentsGet(BrynQPanderaDataFrameModel):
    id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=True, description="Unique identifier of the policy assignment", alias="id")
    timeoff_policy_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="The time off policy id", alias="timeoff_policy_id")
    employee_id: Series[pd.Int64Dtype] = pa.Field(coerce=True, nullable=False, description="The employee id", alias="employee_id")
    effective_at: Series[String] = pa.Field(coerce=True, nullable=False, description="The effective date of the policy assignment", alias="effective_at")

class Allowance_incidencesCreate(BaseModel):
    employee_id: int = Field(..., description="Employee Id", alias="employee_id")
    timeoff_allowance_id: int = Field(..., description="Allowance Id", alias="timeoff_allowance_id")
    days_in_cents: int = Field(..., description="How many units multiplied by 100 do you want to add/substract. Can be positive or negative", alias="days_in_cents")
    description: Optional[str] = Field(None, description="A free text field to add a description to the incidence", alias="description")
    effective_on: str = Field(..., description="When does the incidence take effect. This is related to the allowance cycle.", alias="effective_on")
    target_balance: Annotated[str, StringConstraints(pattern=r'^available|accrued$', strip_whitespace=True)] = Field(..., description="Which counter does the incidence affect. Can be "accrued" or "available"", alias="target_balance")
    _skip_notifications: Optional[bool] = Field(None, description="When set to true, it prevents notifications being sent to employee when this incidence is created", alias="_skip_notifications")

class Allowance_incidencesUpdate(BaseModel):
    id: int = Field(..., description="ID", alias="id")
    employee_id: int = Field(..., description="Employee id of the affected employee", alias="employee_id")
    description: Optional[str] = Field(None, description="Optional comment regarding the incidence", alias="description")
    days_in_cents: int = Field(..., description="How many units * 100 does the incidence add/substract. Can be positive or negative. Example is one unit", alias="days_in_cents")
    timeoff_allowance_id: int = Field(..., description="To what allowance does the incidence affect. It will dictate if its days or hours", alias="timeoff_allowance_id")
    effective_on: str = Field(..., description="When does the incidence take effect; this is for time off cycles calculations.", alias="effective_on")
    target_balance: Optional[str] = Field(None, description="Whether the incidence affects the Accrued or the Available counter.", alias="target_balance")
    created_at: int = Field(..., description="Unix timestamp when the DB record was created", alias="created_at")
    updated_at: int = Field(..., description="Unix timestamp when the DB record was last updated", alias="updated_at")

class Allowance_incidencesDelete(BaseModel):
    id: int = Field(..., description="ID", alias="id")

class Allowance_statsDelete(BaseModel):
    id: int = Field(..., description="ID", alias="id")

class AllowancesCreate(BaseModel):
    accrued_denominator_in_cents: Optional[int] = Field(None, description="Only for Allowances based on worked time. It represents how many units you need to work to be granted allowance units", alias="accrued_denominator_in_cents")
    accrued_factor_in_cents: Optional[int] = Field(None, description="Only for Allowances based on worked time. It represents how many units you are given per unit of time worked", alias="accrued_factor_in_cents")
    accrued_units_availability: Annotated[str, StringConstraints(pattern=r'^current_cycle|next_cycle$', strip_whitespace=True)] = Field(..., description="When can the accrued units be spent.", alias="accrued_units_availability")
    allowance_type: Annotated[str, StringConstraints(pattern=r'^days|hours$', strip_whitespace=True)] = Field(..., description="Sets the allowance units. Can be "days" or "hours"", alias="allowance_type")
    available_days: Annotated[str, StringConstraints(pattern=r'^all_days|generated_days|generated_days_monthly|generated_days_monthly_first_day|monthly_fifteenth|mensiversary|bimonthly_first_and_fifteenth|bimonthly_fifteenth_and_last$', strip_whitespace=True)] = Field(..., description="Indicates how the allowance units are accrued. For example all_days means all allowance days are given on the first day of the cycle.", alias="available_days")
    carry_over_units_in_cents: Optional[int] = Field(None, description="How many units can carry over between cycles multiplied by 100", alias="carry_over_units_in_cents")
    count_holiday_as_workable: bool = Field(..., description="This setting flags if units taken during a bank holiday should be deducted or not from allowance.", alias="count_holiday_as_workable")
    cycle_length: Optional[int] = Field(None, description="How many months does each allowance cycle last", alias="cycle_length")
    cycle_start: Annotated[str, StringConstraints(pattern=r'^jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec|employee_hired_date$', strip_whitespace=True)] = Field(..., description="When does the cycle start.", alias="cycle_start")
    days_type: Annotated[str, StringConstraints(pattern=r'^working_days|natural_days|natural_days_only_range|french_calendar_days|french_ouvres$', strip_whitespace=True)] = Field(..., description="Indicates if the allowance is based on working on calendar days.", alias="days_type")
    expire_in_months: Optional[int] = Field(None, description="When does the carryover expire in months.", alias="expire_in_months")
    frequency: Optional[Annotated[str, StringConstraints(pattern=r'^monthly_flexible|yearly|lifetime$', strip_whitespace=True)]] = Field(None, description="Defines duration of the allowance cycles. Can be "yearly", "monthly_flexible" or "lifetime"", alias="frequency")
    holiday_allowance_in_cents: int = Field(..., description="Base amount of holiday allowance units multiplied by 100", alias="holiday_allowance_in_cents")
    leave_type_ids: str = Field(..., description="An array of leave type ids associated with that allowance", alias="leave_type_ids")
    maximum_amount_in_cents: Optional[int] = Field(None, description="Maximum the allowance can reach on accrued", alias="maximum_amount_in_cents")
    name: str = Field(..., description="Allowance name set by the user", alias="name")
    negative_counter_type: Annotated[str, StringConstraints(pattern=r'^negative_counter_disabled|negative_counter_enabled$', strip_whitespace=True)] = Field(..., description="Whether the allowance allows to request more days than available.", alias="negative_counter_type")
    position: Optional[int] = Field(None, description="Indicates the position in the allowance when rendering them in UI", alias="position")
    proration_type: Annotated[str, StringConstraints(pattern=r'^proration_enabled|proration_disabled$', strip_whitespace=True)] = Field(..., description="Whether the allowance has proration enabled or not.", alias="proration_type")
    pto_proratio_enabled: bool = Field(..., description="Whether the allowance days are prorated or not", alias="pto_proratio_enabled")
    range_type: Optional[Annotated[str, StringConstraints(pattern=r'^exact_range|extra_non_working_days_at_end$', strip_whitespace=True)]] = Field(None, description="Configures how leaves duration is handled.", alias="range_type")
    rounding: Annotated[str, StringConstraints(pattern=r'^half_day|decimals|quarters|round_up$', strip_whitespace=True)] = Field(..., description="How the accrued units of the allowance are rounded. It depends if the allowance is set in hours or days.", alias="rounding")
    source_units: Annotated[str, StringConstraints(pattern=r'^base_units|overtime_units|by_worked_time$', strip_whitespace=True)] = Field(..., description="This field configures the type of allowance (fixed balance, based on worked time)", alias="source_units")
    tenure_period_transition: Optional[Annotated[str, StringConstraints(pattern=r'^beginning_of_cycle|end_of_cycle|after_milestone$', strip_whitespace=True)]] = Field(None, description="In case the allowance has tenure periods, when is this tenure applied.", alias="tenure_period_transition")
    tenure_periods_enabled: Optional[bool] = Field(None, description="Whether the allowance has tenure periods enabled or not.", alias="tenure_periods_enabled")
    tenure_periods: str = Field(..., description="The tenure periods associated with the allowance.", alias="tenure_periods")
    timeoff_policy_id: int = Field(..., description="The Id of the policy to which the allowance belongs to", alias="timeoff_policy_id")
    unlimited_accrued_hours: bool = Field(..., description="Flag to indicate if there is unlimited accrual.", alias="unlimited_accrued_hours")
    unlimited_carry_over: bool = Field(..., description="Flag to indicate if there is unlimited carry over.", alias="unlimited_carry_over")
    unlimited_carry_over_expiration: bool = Field(..., description="Boolean to flag if carryover does not expire", alias="unlimited_carry_over_expiration")
    unlimited_holidays: bool = Field(..., description="Flag to indicate that the allowance has unlimited available days", alias="unlimited_holidays")

class AllowancesUpdate(BaseModel):
    id: int = Field(..., description="ID", alias="id")
    accrued_denominator_in_cents: Optional[int] = Field(None, description="Only for Allowances based on worked time. It represents how many units you need to work to be granted allowance units", alias="accrued_denominator_in_cents")
    accrued_factor_in_cents: Optional[int] = Field(None, description="Only for Allowances based on worked time. It represents how many units you are given per unit of time worked", alias="accrued_factor_in_cents")
    accrued_units_availability: Optional[Annotated[str, StringConstraints(pattern=r'^current_cycle|next_cycle$', strip_whitespace=True)]] = Field(None, description="When can the acrrued units be spent.", alias="accrued_units_availability")
    allowance_type: Annotated[str, StringConstraints(pattern=r'^days|hours$', strip_whitespace=True)] = Field(..., description="Sets the allowance units. Can be "days" or "hours"", alias="allowance_type")
    available_days: Annotated[str, StringConstraints(pattern=r'^all_days|generated_days|generated_days_monthly|generated_days_monthly_first_day|monthly_fifteenth|mensiversary|bimonthly_first_and_fifteenth|bimonthly_fifteenth_and_last$', strip_whitespace=True)] = Field(..., description="Indicates how the allowance units are accrued. For example all_days means all allowance days are given on the first day of the cycle.", alias="available_days")
    carry_over_days: Optional[int] = Field(None, description="How many units can carry over between cycles", alias="carry_over_days")
    carry_over_units_in_cents: Optional[int] = Field(None, description="How many units can carry over between cycles multiplied by 100", alias="carry_over_units_in_cents")
    count_holiday_as_workable: bool = Field(..., description="This setting flags if units taken during a bank holiday should be deducted or not from allowance.", alias="count_holiday_as_workable")
    cycle_length: Optional[int] = Field(None, description="How many months does each allowance cycle last", alias="cycle_length")
    cycle_start: Optional[str] = Field(None, description="When does the cycle start.", alias="cycle_start")
    days_type: Optional[Annotated[str, StringConstraints(pattern=r'^working_days|natural_days|natural_days_only_range|french_calendar_days|french_ouvres$', strip_whitespace=True)]] = Field(None, description="Indicates if the allowance is based on working on calendar days.", alias="days_type")
    employee_carry_over_starting_year: Optional[int] = Field(None, description="When does the carryover start", alias="employee_carry_over_starting_year")
    expire_in_months: Optional[int] = Field(None, description="When does the carryover expire in months.", alias="expire_in_months")
    frequency: Optional[Annotated[str, StringConstraints(pattern=r'^monthly_flexible|yearly|lifetime$', strip_whitespace=True)]] = Field(None, description="Defines duration of the allowance cycles. Can be "yearly", "monthly_flexible" or "lifetime"", alias="frequency")
    holiday_allowance_in_cents: Optional[int] = Field(None, description="Base amount of holiday allowance units multiplied by 100", alias="holiday_allowance_in_cents")
    leave_type_ids: str = Field(..., description="An array of leave type ids associated with that allowance", alias="leave_type_ids")
    maximum_amount_in_cents: Optional[int] = Field(None, description="Maximum the allowance can reach on accrued", alias="maximum_amount_in_cents")
    name: str = Field(..., description="Allowance name set by the user", alias="name")
    negative_counter_type: Optional[Annotated[str, StringConstraints(pattern=r'^negative_counter_disabled|negative_counter_enabled$', strip_whitespace=True)]] = Field(None, description="Whether the allowance allows to request more days than available", alias="negative_counter_type")
    position: Optional[int] = Field(None, description="Indicates the position in the allowance when rendering them in UI", alias="position")
    proration_type: Annotated[str, StringConstraints(pattern=r'^proration_enabled|proration_disabled$', strip_whitespace=True)] = Field(..., description="Whether the allowance has proration enabled or not.", alias="proration_type")
    pto_proratio_enabled: Optional[bool] = Field(None, description="Whether the allowance days are prorrated or not", alias="pto_proratio_enabled")
    range_type: Optional[Annotated[str, StringConstraints(pattern=r'^exact_range|extra_non_working_days_at_end$', strip_whitespace=True)]] = Field(None, description="Configures how leaves duration is handled.", alias="range_type")
    rounding: Annotated[str, StringConstraints(pattern=r'^half_day|decimals|quarters|round_up$', strip_whitespace=True)] = Field(..., description="How the accrued units of the allowance are rounded. It depends if the allowance is set in hours or days.", alias="rounding")
    send_notification: Optional[bool] = Field(None, description="", alias="send_notification")
    source_units: Optional[Annotated[str, StringConstraints(pattern=r'^base_units|overtime_units|by_worked_time$', strip_whitespace=True)]] = Field(None, description="This field configures the type of allowance (fixed balance, based on worked time)", alias="source_units")
    tenure_period_transition: Optional[Annotated[str, StringConstraints(pattern=r'^beginning_of_cycle|end_of_cycle|after_milestone$', strip_whitespace=True)]] = Field(None, description="In case the allowance has tenure periods, when is this tenure applied.", alias="tenure_period_transition")
    tenure_periods: str = Field(..., description="The tenure periods associated with the allowance.", alias="tenure_periods")
    tenure_periods_enabled: Optional[bool] = Field(None, description="Whether the allowance has tenure periods enabled or not.", alias="tenure_periods_enabled")
    timeoff_cycle: str = Field(..., description="Value to indicate how the allowance cycle is configured. Its an abbreviation of the first and last month.", alias="timeoff_cycle")
    timeoff_policy_id: int = Field(..., description="The Id of the policy to which the allowance belongs to", alias="timeoff_policy_id")
    unlimited_accrued_hours: Optional[bool] = Field(None, description="Flag to indicate if there is unlimited accrual.", alias="unlimited_accrued_hours")
    unlimited_carry_over: Optional[bool] = Field(None, description="Flag to indicate if there is unlimited carry over.", alias="unlimited_carry_over")
    unlimited_carry_over_expiration: Optional[bool] = Field(None, description="Boolean to flag if carryover does not expire", alias="unlimited_carry_over_expiration")
    unlimited_holidays: Optional[bool] = Field(None, description="Flag to indicate that the allowance has unlimited available days", alias="unlimited_holidays")

class AllowancesDelete(BaseModel):
    id: int = Field(..., description="ID", alias="id")

class Blocked_periodsCreate(BaseModel):
    company_id: int = Field(..., description="The company id", alias="company_id")
    name: str = Field(..., description="Name of the blocked period.", alias="name")
    leave_type_ids: str = Field(..., description="An array of leave type identifiers for which employees can not request timeoff", alias="leave_type_ids")

class Blocked_periodsUpdate(BaseModel):
    id: int = Field(..., description="ID", alias="id")
    company_id: int = Field(..., description="Company id of the blocked period", alias="company_id")
    name: str = Field(..., description="Name of the blocked period.", alias="name")
    leave_type_ids: str = Field(..., description="Leave types for which absence request has been blocked", alias="leave_type_ids")
    time_periods: str = Field(..., description="The tenure periods associated with the allowance.", alias="time_periods")
    strategy: str = Field(..., description="Type of access group", alias="strategy")
    members: str = Field(..., description="Employees whose timeoff will be affected", alias="members")
    location_ids: Optional[str] = Field(None, description="List of locations workplace identifiers where the employees are located", alias="location_ids")
    team_ids: Optional[str] = Field(None, description="List of team identifiers which the selected employees belong to", alias="team_ids")
    legal_entity_ids: Optional[str] = Field(None, description="List of legal entity identifiers which the selected employees belong to", alias="legal_entity_ids")

class Blocked_periodsDelete(BaseModel):
    id: int = Field(..., description="ID", alias="id")

class Leave_typesCreate(BaseModel):
    accrues: bool = Field(..., description="Whether the leave type accrues over time", alias="accrues")
    approval_required: bool = Field(..., description="Whether approval is required for this leave type", alias="approval_required")
    identifier: str = Field(..., description="A unique identifier for the leave type", alias="identifier")
    attachment: Optional[bool] = Field(None, description="Whether an attachment is required for this leave type", alias="attachment")
    color: str = Field(..., description="The color associated with this leave type", alias="color")
    name: str = Field(..., description="The name of the leave type", alias="name")
    visibility: Optional[bool] = Field(None, description="Whether the leave type is visible to employees", alias="visibility")
    workable: bool = Field(..., description="Whether the leave type is workable (can be worked on during leave)", alias="workable")
    payable: Optional[bool] = Field(None, description="Whether the leave type is payable", alias="payable")
    is_attachment_mandatory: Optional[bool] = Field(None, description="Whether the attachment is mandatory", alias="is_attachment_mandatory")
    half_days_units_enabled: Optional[bool] = Field(None, description="Whether half-day units are enabled for this leave type", alias="half_days_units_enabled")
    max_days_in_cents: Optional[int] = Field(None, description="Maximum days in cents that can be taken", alias="max_days_in_cents")
    min_days_in_cents: Optional[int] = Field(None, description="Minimum days in cents that must be taken", alias="min_days_in_cents")
    company_id: int = Field(..., description="Identifier of the company associated with this leave type", alias="company_id")
    editable: Optional[bool] = Field(None, description="Whether the leave type is editable", alias="editable")
    allow_endless: Optional[bool] = Field(None, description="Whether endless leave is allowed", alias="allow_endless")
    restricted: Optional[bool] = Field(None, description="Whether the leave type is restricted", alias="restricted")
    description: Optional[str] = Field(None, description="Description of the leave type", alias="description")
    details_required: bool = Field(..., description="Whether additional details are required for the leave type", alias="details_required")

class Leave_typesUpdate(BaseModel):
    id: int = Field(..., description="ID", alias="id")
    name: str = Field(..., description="Name of the leave type", alias="name")
    translated_name: Optional[str] = Field(None, description="Translated name of the leave type, if available", alias="translated_name")
    identifier: str = Field(..., description="Unique identifier of the leave type", alias="identifier")
    color: str = Field(..., description="The color associated with this leave type", alias="color")
    active: Optional[bool] = Field(None, description="Whether the leave type is active", alias="active")
    editable: Optional[bool] = Field(None, description="Whether the leave type is editable", alias="editable")
    approval_required: Optional[bool] = Field(None, description="Whether approval is required for this leave type", alias="approval_required")
    accrues: Optional[bool] = Field(None, description="Whether the leave type accrues over time", alias="accrues")
    attachment: bool = Field(..., description="Whether an attachment is required for this leave type", alias="attachment")
    allow_endless: Optional[bool] = Field(None, description="Whether endless leave is allowed", alias="allow_endless")
    restricted: Optional[bool] = Field(None, description="Whether the leave type is restricted", alias="restricted")
    visibility: bool = Field(..., description="Whether the leave type is visible to employees", alias="visibility")
    workable: bool = Field(..., description="Whether the leave type is workable", alias="workable")
    payable: Optional[bool] = Field(None, description="Whether the leave type is payable", alias="payable")
    company_id: int = Field(..., description="Identifier of the company associated with this leave type", alias="company_id")
    is_attachment_mandatory: Optional[bool] = Field(None, description="Whether the attachment is mandatory", alias="is_attachment_mandatory")
    allowance_ids: str = Field(..., description="List of allowance identifiers associated with this leave type", alias="allowance_ids")
    half_days_units_enabled: Optional[bool] = Field(None, description="Whether half-day units are enabled for this leave type", alias="half_days_units_enabled")
    max_days_in_cents: Optional[int] = Field(None, description="Maximum days in cents that can be taken", alias="max_days_in_cents")
    min_days_in_cents: Optional[int] = Field(None, description="Minimum days in cents that must be taken", alias="min_days_in_cents")
    description: Optional[str] = Field(None, description="Description of the leave type", alias="description")
    details_required: bool = Field(..., description="Whether additional details are required for the leave type", alias="details_required")

class Leave_typesDelete(BaseModel):
    id: int = Field(..., description="ID", alias="id")

class LeavesCreate(BaseModel):
    employee_id: int = Field(..., description="The employee id of the leave", alias="employee_id")
    leave_type_id: Optional[int] = Field(None, description="The leave type id", alias="leave_type_id")
    description: Optional[str] = Field(None, description="The description of the leave", alias="description")
    start_on: str = Field(..., description="The valid start date of the leave following the format YYYY-MM-DD", alias="start_on")
    finish_on: Optional[str] = Field(None, description="The valid end date of the leave following the format YYYY-MM-DD", alias="finish_on")
    half_day: Optional[str] = Field(None, description="If the leave is in: [beggining_of_day, end_of_day]", alias="half_day")
    start_time: Optional[str] = Field(None, description="The start time of a leave", alias="start_time")
    hours_amount_in_cents: Optional[int] = Field(None, description="The hours amount in cents of a leave", alias="hours_amount_in_cents")
    medical_leave_type: Optional[int] = Field(None, description="The medical leave type", alias="medical_leave_type")
    effective_on: Optional[str] = Field(None, description="The effective on date of a leave following the format YYYY-MM-DD", alias="effective_on")
    medical_discharge_reason: Optional[str] = Field(None, description="The medical discharge reason of a leave", alias="medical_discharge_reason")
    colegiate_number: Optional[int] = Field(None, description="The colegiate number of a leave", alias="colegiate_number")
    has_previous_relapse: Optional[bool] = Field(None, description="If the leave has previous relapse", alias="has_previous_relapse")
    relapse_leave_id: Optional[int] = Field(None, description="The leave relapse id", alias="relapse_leave_id")
    relapse_on: Optional[str] = Field(None, description="The leave relapse on date following the format YYYY-MM-DD", alias="relapse_on")
    accident_on: Optional[str] = Field(None, description="The leave accident on date following the format YYYY-MM-DD", alias="accident_on")
    paternity_birth_on: Optional[str] = Field(None, description="The leave paternity birth on date following the format YYYY-MM-DD", alias="paternity_birth_on")

class LeavesUpdate(BaseModel):
    id: int = Field(..., description="ID", alias="id")
    company_id: int = Field(..., description="Company identifier of the employee of the leave", alias="company_id")
    employee_id: int = Field(..., description="Employee identifier of the leave", alias="employee_id")
    start_on: str = Field(..., description="The start date of the leave", alias="start_on")
    finish_on: Optional[str] = Field(None, description="The end date of the leave", alias="finish_on")
    half_day: Optional[str] = Field(None, description="Indicates if the leave is taken as a half-day", alias="half_day")
    description: Optional[str] = Field(None, description="A description of the leave", alias="description")
    reason: Optional[str] = Field(None, description="The reason provided by the employee for taking the leave", alias="reason")
    leave_type_id: Optional[int] = Field(None, description="The identifier for the type of leave", alias="leave_type_id")
    leave_type_name: Optional[str] = Field(None, description="The name of the leave type", alias="leave_type_name")
    approved: Optional[bool] = Field(None, description="Indicates whether the leave has been approved", alias="approved")
    employee_full_name: Optional[str] = Field(None, description="The full name of the employee taking the leave", alias="employee_full_name")
    start_time: Optional[str] = Field(None, description="The start time of the leave", alias="start_time")
    hours_amount_in_cents: Optional[int] = Field(None, description="The total number of hours taken for the leave, represented in cents", alias="hours_amount_in_cents")
    updated_at: str = Field(..., description="The updated at date of the leave", alias="updated_at")
    created_at: Optional[str] = Field(None, description="The created at date of the leave", alias="created_at")

class LeavesDelete(BaseModel):
    id: int = Field(..., description="ID", alias="id")

class PoliciesCreate(BaseModel):
    name: str = Field(..., description="The name of the policy.", alias="name")
    main: Optional[bool] = Field(None, description="If the policy is the main policy.", alias="main")
    description: Optional[str] = Field(None, description="Policy description.", alias="description")
    company_id: Optional[int] = Field(None, description="Company ID.", alias="company_id")

class PoliciesUpdate(BaseModel):
    id: int = Field(..., description="ID", alias="id")
    name: str = Field(..., description="Policy name.", alias="name")
    main: Optional[bool] = Field(None, description="Is the main policy? It will return true if it's the main policy if not it will return false.", alias="main")
    company_id: int = Field(..., description="The company id.", alias="company_id")
    description: Optional[str] = Field(None, description="The policy description.", alias="description")

class PoliciesDelete(BaseModel):
    id: int = Field(..., description="ID", alias="id")

class Policy_assignmentsCreate(BaseModel):
    timeoff_policy_id: int = Field(..., description="The time off policy id", alias="timeoff_policy_id")
    employee_id: int = Field(..., description="The employee id", alias="employee_id")
    effective_at: str = Field(..., description="The effective date of the policy assignment", alias="effective_at")

class Policy_assignmentsUpdate(BaseModel):
    id: int = Field(..., description="ID", alias="id")
    timeoff_policy_id: int = Field(..., description="The time off policy id", alias="timeoff_policy_id")
    employee_id: int = Field(..., description="The employee id", alias="employee_id")
    effective_at: str = Field(..., description="The effective date of the policy assignment", alias="effective_at")

class Policy_assignmentsDelete(BaseModel):
    id: int = Field(..., description="ID", alias="id")

