import dbm
import json
import time
from pathlib import Path
from typing import Optional, Dict, Any

# Default cache directory
DEFAULT_CACHE_DIR = Path.home() / ".cache" / "pipq"
DEFAULT_DB_PATH = DEFAULT_CACHE_DIR / "vuln.db"

# 1 week in seconds
DEFAULT_CACHE_EXPIRATION = 7 * 24 * 60 * 60

class VulnerabilityDB:
    """
    Manages the local vulnerability database (using Python's dbm).
    """
    def __init__(self, db_path: Path = DEFAULT_DB_PATH):
        self.db_path = db_path
        self.db_path.parent.mkdir(parents=True, exist_ok=True)
        self.db: Optional[Any] = None

    def __enter__(self):
        try:
            self.db = dbm.open(str(self.db_path), 'c')
        except dbm.error as e:
            # Handle potential dbm errors (e.g., unsupported format)
            print(f"Warning: Could not open vulnerability cache: {e}")
            self.db = None
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.db:
            self.db.close()

    def get_vulnerability(self, package_name: str) -> Optional[Dict[str, Any]]:
        """
        Retrieves vulnerability data for a package from the cache.
        Returns the data if found and not expired, otherwise None.
        """
        if not self.db:
            return None

        key = f"vuln:{package_name}"
        if key.encode('utf-8') not in self.db:
            return None

        try:
            cached_data = self.db[key.encode('utf-8')]
            data = json.loads(cached_data.decode('utf-8'))
            if time.time() - data.get("timestamp", 0) > DEFAULT_CACHE_EXPIRATION:
                # Cache expired
                return None
            return data.get("vulnerabilities")
        except (json.JSONDecodeError, KeyError, TypeError):
            return None

    def update_vulnerability(self, package_name: str, vulnerabilities: Dict[str, Any]):
        """
        Updates the cache with new vulnerability data for a package.
        """
        if not self.db:
            return

        key = f"vuln:{package_name}"
        data = {
            "timestamp": time.time(),
            "vulnerabilities": vulnerabilities,
        }
        self.db[key.encode('utf-8')] = json.dumps(data).encode('utf-8')

    def close(self):
        if self.db:
            self.db.close()
            self.db = None