[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "synq-db"
dynamic = ["version"]
description = "A modern, snapshot-based database migration tool for SQLAlchemy"
readme = "README.md"
license = "MIT"
requires-python = ">=3.9"
authors = [
    { name = "Synq Contributors" },
]
keywords = [
    "database",
    "migration",
    "sqlalchemy",
    "schema",
    "snapshot",
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Systems Administration",
]
dependencies = [
    "sqlalchemy>=1.4.0,<3.0",
    "click>=8.0.0",
    "toml>=0.10.0",
    "typing-extensions>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "ruff>=0.2.0",
    "mypy>=1.0.0",
    "types-toml>=0.10.0",
    "types-click>=7.0.0",
    "pre-commit>=3.0.0",
    "coverage>=7.0.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]
postgres = [
    "psycopg2-binary>=2.9.0",
]
mysql = [
    "PyMySQL>=1.0.0",
]
# SQLite support is built into Python, no extra dependencies needed

[project.urls]
Documentation = "https://github.com/SudoAI-DEV/Synq#readme"
Repository = "https://github.com/SudoAI-DEV/Synq"
Changelog = "https://github.com/SudoAI-DEV/Synq/blob/main/CHANGELOG.md"

[project.scripts]
synq = "synq.cli.main:cli"

[tool.hatch.version]
path = "synq/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["synq"]

[tool.ruff]
target-version = "py39"
line-length = 88

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "S",   # bandit security
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PIE", # flake8-pie
]

ignore = [
    "E501",  # line too long, handled by ruff format
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # assert statements (allowed in tests)
    "T201",  # print statements (allowed for CLI output)
    "ARG002", # unused method argument (common in overrides)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101", "S311", "S603", "S607"]  # Allow assert, random, subprocess in tests
"examples/*" = ["T201"]  # Allow print statements in examples

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
]
markers = [
    "integration: marks tests as integration tests",
    "slow: marks tests as slow",
    "postgres: marks tests that require PostgreSQL",
    "mysql: marks tests that require MySQL",
    "sqlalchemy_v1: marks tests specific to SQLAlchemy 1.4",
    "sqlalchemy_v2: marks tests specific to SQLAlchemy 2.0+",
]

[tool.coverage.run]
source = ["synq"]
omit = ["tests/*", "*/tests/*", "test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test
