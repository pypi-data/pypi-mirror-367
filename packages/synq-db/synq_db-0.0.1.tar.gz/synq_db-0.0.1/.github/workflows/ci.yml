name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
        sqlalchemy-version: ["1.4.*", "2.0.*"]
        exclude:
          # SQLAlchemy 2.0 requires Python 3.7+, but we support 3.9+
          - python-version: "3.7"
            sqlalchemy-version: "2.0.*"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install sqlalchemy==${{ matrix.sqlalchemy-version }}
        pip install -e ".[dev]"

    - name: Run tests with pytest
      run: |
        pytest tests/ -v --tb=short --ignore=tests/integration/test_docker_databases.py --ignore=tests/test_cli_commands.py

    # - name: Test CLI commands
    #   run: |
    #     # Test basic CLI functionality
    #     python -m synq --help
        
    #     # Test init command
    #     mkdir test_project && cd test_project
    #     echo "from sqlalchemy import MetaData; metadata_obj = MetaData()" > models.py
    #     python -m synq init --metadata-path "models:metadata_obj" --db-uri "sqlite:///test.db"
        
    #     # Test generate command  
    #     python -m synq generate "test migration"
        
    #     # Verify files were created
    #     ls migrations/
    #     ls migrations/meta/

  # test-databases-docker:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       database: [sqlite, postgres, mysql]
  #       sqlalchemy-version: ["1.4.*", "2.0.*"]
  #       python-version: ["3.11"]
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Set up Python ${{ matrix.python-version }}
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - name: Install database dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install sqlalchemy==${{ matrix.sqlalchemy-version }}
  #       if [ "${{ matrix.database }}" = "postgres" ]; then
  #         pip install psycopg2-binary
  #       elif [ "${{ matrix.database }}" = "mysql" ]; then
  #         pip install PyMySQL
  #       fi
  #       pip install -e ".[dev]"
  #   - name: Run SQLite tests
  #     if: matrix.database == 'sqlite'
  #     run: |
  #       pytest tests/integration/test_database_integration.py -v --tb=short -k "not postgres and not mysql"
  #   - name: Run PostgreSQL Docker tests
  #     if: matrix.database == 'postgres'
  #     run: |
  #       docker --version
  #       docker ps
  #       pytest tests/integration/test_docker_databases.py::TestPostgreSQLDockerIntegration -v --tb=short
  #       pytest tests/integration/test_docker_databases.py::TestCrossDatabase::test_same_migration_different_databases -v --tb=short
  #   - name: Run MySQL Docker tests
  #     if: matrix.database == 'mysql'
  #     run: |
  #       docker --version
  #       docker ps
  #       pytest tests/integration/test_docker_databases.py::TestMySQLDockerIntegration -v --tb=short

  # test-performance:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Set up Python 3.11
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: "3.11"
  #   - name: Install dependencies
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install psycopg2-binary PyMySQL
  #       pip install -e ".[dev]"
  #   - name: Run performance tests
  #     run: |
  #       pytest tests/integration/test_docker_databases.py::TestDatabasePerformance -v --tb=short -m "slow"

  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run ruff linting
      run: ruff check synq/ examples/

    - name: Run ruff formatting check
      run: ruff format --check synq/ examples/

    - name: Run mypy
      run: mypy synq/

    - name: Run security checks with bandit
      run: bandit -r synq/ -f json -o bandit-report.json || bandit -r synq/

    - name: Check dependencies with safety
      run: safety check --json || safety check

  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-cov

    - name: Run tests with coverage
      run: |
        pytest tests/ --cov=synq --cov-report=xml --cov-report=html --cov-fail-under=75 --ignore=tests/integration/test_docker_databases.py --ignore=tests/test_cli_commands.py

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella