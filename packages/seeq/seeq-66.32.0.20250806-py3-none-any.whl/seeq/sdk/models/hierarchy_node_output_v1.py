# coding: utf-8

"""
    Seeq REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 66.32.0-v202508060905-CD
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from pprint import pformat
from six import iteritems
import re


class HierarchyNodeOutputV1(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_id': 'str',
        'display_name': 'str',
        'is_leaf': 'bool',
        'item_id': 'str',
        'leaf': 'bool'
    }

    attribute_map = {
        'column_id': 'columnId',
        'display_name': 'displayName',
        'is_leaf': 'isLeaf',
        'item_id': 'itemId',
        'leaf': 'leaf'
    }

    def __init__(self, column_id=None, display_name=None, is_leaf=None, item_id=None, leaf=None):
        """
        HierarchyNodeOutputV1 - a model defined in Swagger
        """

        self._column_id = None
        self._display_name = None
        self._is_leaf = None
        self._item_id = None
        self._leaf = None

        if column_id is not None:
          self.column_id = column_id
        if display_name is not None:
          self.display_name = display_name
        if is_leaf is not None:
          self.is_leaf = is_leaf
        if item_id is not None:
          self.item_id = item_id
        if leaf is not None:
          self.leaf = leaf

    @property
    def column_id(self):
        """
        Gets the column_id of this HierarchyNodeOutputV1.
        The ID of the Item Table ColumnDefinition whose value generated this node.

        :return: The column_id of this HierarchyNodeOutputV1.
        :rtype: str
        """
        return self._column_id

    @column_id.setter
    def column_id(self, column_id):
        """
        Sets the column_id of this HierarchyNodeOutputV1.
        The ID of the Item Table ColumnDefinition whose value generated this node.

        :param column_id: The column_id of this HierarchyNodeOutputV1.
        :type: str
        """

        self._column_id = column_id

    @property
    def display_name(self):
        """
        Gets the display_name of this HierarchyNodeOutputV1.
        The display name of the hierarchy node.

        :return: The display_name of this HierarchyNodeOutputV1.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this HierarchyNodeOutputV1.
        The display name of the hierarchy node.

        :param display_name: The display_name of this HierarchyNodeOutputV1.
        :type: str
        """

        self._display_name = display_name

    @property
    def is_leaf(self):
        """
        Gets the is_leaf of this HierarchyNodeOutputV1.
        Whether or not this node is a leaf in its hierarchy.

        :return: The is_leaf of this HierarchyNodeOutputV1.
        :rtype: bool
        """
        return self._is_leaf

    @is_leaf.setter
    def is_leaf(self, is_leaf):
        """
        Sets the is_leaf of this HierarchyNodeOutputV1.
        Whether or not this node is a leaf in its hierarchy.

        :param is_leaf: The is_leaf of this HierarchyNodeOutputV1.
        :type: bool
        """

        self._is_leaf = is_leaf

    @property
    def item_id(self):
        """
        Gets the item_id of this HierarchyNodeOutputV1.
        ID of the Item represented by this node. If null, the node does not represent an Item.

        :return: The item_id of this HierarchyNodeOutputV1.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """
        Sets the item_id of this HierarchyNodeOutputV1.
        ID of the Item represented by this node. If null, the node does not represent an Item.

        :param item_id: The item_id of this HierarchyNodeOutputV1.
        :type: str
        """

        self._item_id = item_id

    @property
    def leaf(self):
        """
        Gets the leaf of this HierarchyNodeOutputV1.

        :return: The leaf of this HierarchyNodeOutputV1.
        :rtype: bool
        """
        return self._leaf

    @leaf.setter
    def leaf(self, leaf):
        """
        Sets the leaf of this HierarchyNodeOutputV1.

        :param leaf: The leaf of this HierarchyNodeOutputV1.
        :type: bool
        """

        self._leaf = leaf

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HierarchyNodeOutputV1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
