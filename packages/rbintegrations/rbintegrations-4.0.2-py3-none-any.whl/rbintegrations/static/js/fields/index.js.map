{"version":3,"file":"index.js","sources":["../../../../../../rbintegrations/static/js/fields/asanaFieldView.ts"],"sourcesContent":["/**\n * A review request field view for selecting Asana tasks.\n */\n\nimport { spina } from '@beanbag/spina';\nimport { ReviewRequestFields } from 'reviewboard/reviews';\nimport { InlineEditorView } from 'reviewboard/ui';\nimport {\n    type InlineEditorViewOptions,\n} from 'reviewboard/ui/views/inlineEditorView';\n\n\n/**\n * An inline editor view for selecting Asana tasks.\n */\n@spina\nclass AsanaInlineEditorView extends InlineEditorView {\n    /**\n     * Initialize the view.\n     *\n     * Args:\n     *     options (object):\n     *         Options for the view.\n     */\n    initialize(options: Partial<InlineEditorViewOptions>) {\n        options = _.defaults(options, {\n            hasRawValue: true,\n            formatResult: value => {\n                if (value && value.name) {\n                    return value.name.htmlEncode();\n                } else {\n                    return '';\n                }\n            },\n            getFieldValue: editor => {\n                const selectize = this.$field[0].selectize;\n                const selected = selectize.getValue();\n\n                return JSON.stringify(selected.map(\n                    key => _.pick(\n                        selectize.options[key],\n                        ['completed', 'gid', 'workspace_id', 'name'])));\n            },\n            isFieldDirty: (editor, initialValue) => {\n                const value = editor.getValue();\n                return initialValue !== value;\n            },\n            setFieldValue: (editor, value) => {\n                // This is a no-op, since we do this in the $.selectize call.\n            },\n        });\n\n        super.initialize(options);\n    }\n\n    /**\n     * Create and return the field to use for the input element.\n     *\n     * Returns:\n     *     jQuery:\n     *     The newly created input element.\n     */\n    createField() {\n        return $('<select multiple class=\"asana-field\">');\n    }\n\n    /**\n     * Connect events.\n     */\n    setupEvents() {\n        super.setupEvents();\n\n        this.$field.on('change', this._scheduleUpdateDirtyState.bind(this));\n    }\n\n    /**\n     * Show the editor.\n     *\n     * Args:\n     *     options (object, optional):\n     *         Options for showing the editor.\n     */\n    showEditor(options={}) {\n        super.showEditor(options);\n\n        if (this.options.focusOnOpen) {\n            this.$field[0].selectize.focus();\n        }\n    }\n}\n\n\n/**\n * A task entry in the selector.\n *\n * Version Added:\n *     4.0.1\n */\ninterface TaskEntry {\n    /** Whether the task is completed. */\n    completed: boolean;\n\n    /** The ID of the workspace that the task is in. */\n    workspace_id: string;\n\n    /** The ID of the task. */\n    gid: string;\n\n    /** Alternate ID field for the task. */\n    id?: string;\n\n    /** The option group ID. */\n    optgroup?: string;\n\n    /** The summary of the task. */\n    name: string;\n\n    /** The description of the task. */\n    notes: string;\n}\n\n\n/**\n * The response from the Asana task query URL.\n *\n * Version Added:\n *     4.0.1\n */\ninterface TaskQueryResponse {\n    workspace: string;\n    workspace_id: string;\n    tasks: TaskEntry[];\n}\n\n\n/**\n * A review request field view for selecting Asana tasks.\n */\n@spina({\n    prototypeAttrs: ['taskTemplate'],\n})\nexport class AsanaFieldView extends ReviewRequestFields.TextFieldView {\n    static autocomplete = {};\n    static multiline = true;\n    static useEditIconOnly = true;\n\n    static taskTemplate = _.template(dedent`\n        <<%- tagName %> class=\"asana-task<% if (completed) { %> completed<% } %>\">\n         <a href=\"https://app.asana.com/0/<%- workspaceId %>/<%- taskId %>/\">\n          <div class=\"asana-task-checkbox\">\n           <svg viewBox=\"0 0 32 32\">'\n            <polygon points=\"27.672,4.786 10.901,21.557 4.328,14.984 1.5,17.812 10.901,27.214 30.5,7.615\"></polygon>\n           </svg>\n          </div>\n          <span><%- taskSummary %></span>\n         </a>\n        </<%- tagName %>>\n    `);\n    taskTemplate: _.CompiledTemplate;\n\n    /**\n     * Format the contents of the field.\n     *\n     * This will apply the contents of the model attribute to the field\n     * element. If the field defines a ``formatValue`` method, this will use\n     * that to do the formatting. Otherwise, the element will just be set to\n     * contain the text of the value.\n     */\n    _formatField() {\n        const fieldName = this.jsonFieldName || this.fieldID;\n        const opts = { useExtraData: this.useExtraData };\n        const tasks = JSON.parse(this.model.getDraftField(fieldName, opts));\n        this._renderValue(tasks);\n    }\n\n    /**\n     * Render the current value of the field.\n     *\n     * Args:\n     *     tasks (Array of object):\n     *         The current value of the field.\n     */\n    _renderValue(tasks: TaskEntry[]) {\n        const lis = tasks.map(task => this.taskTemplate({\n            completed: task.completed,\n            workspaceId: task.workspace_id,\n            taskId: task.gid,\n            taskSummary: task.name,\n            tagName: 'li',\n        }));\n\n        this.$el.html(`<ul>${lis.join('')}</ul>`);\n    }\n\n    /**\n     * Return the type to use for the inline editor view.\n     *\n     * Returns:\n     *     function:\n     *     The constructor for the inline editor class to instantiate.\n     */\n    _getInlineEditorClass(): typeof InlineEditorView {\n        return AsanaInlineEditorView;\n    }\n\n    /**\n     * Add auto-complete functionality to the field.\n     */\n    _buildAutoComplete() {\n        const reviewRequest = this.model.get('reviewRequest');\n        const localSite = reviewRequest.get('localSitePrefix');\n        const reviewRequestId = reviewRequest.get('id');\n        const url = `${SITE_ROOT}rbintegrations/asana/${localSite}task-search/${reviewRequestId}/`;\n        const $field = this.inlineEditorView.$field;\n        const tasks = this.$el.data('raw-value') || [];\n\n        tasks.forEach((task: TaskEntry) => {\n            if (task.gid === undefined) {\n                task.gid = String(task.id);\n            }\n        });\n\n        this._renderValue(tasks);\n\n        $field.selectize({\n            copyClassesToDropdown: true,\n            dropdownParent: 'body',\n            labelField: 'name',\n            valueField: 'gid',\n            multiple: true,\n            options: tasks,\n            items: tasks.map((task: TaskEntry) => task.gid),\n            optgroupLabelField: 'workspace',\n            searchField: 'name',\n            sortField: [\n                { 'field': 'completed' },\n                { 'field': 'name' },\n            ],\n            render: {\n                option: (data: TaskEntry) => {\n                    return this.taskTemplate({\n                        completed: data.completed,\n                        workspaceId: data.workspace_id,\n                        taskId: data.gid,\n                        taskSummary: data.name,\n                        tagName: 'div',\n                    });\n                }\n            },\n            load(\n                query: string,\n                callback: (data?: TaskEntry[]) => void,\n            ) {\n                const params = new URLSearchParams();\n                params.append('q', query);\n\n                fetch(`${url}?${params.toString()}`)\n                    .then(rsp => rsp.json())\n                    .then((rsp: TaskQueryResponse[]) => {\n                        const items: TaskEntry[] = [];\n                        this.clearOptionGroups();\n\n                        for (const group of rsp) {\n                            this.addOptionGroup(group.workspace, group);\n\n                            for (let j = 0; j < group.tasks.length; j++) {\n                                const task = group.tasks[j];\n                                task.optgroup = group.workspace;\n                                task.workspace_id = group.workspace_id;\n\n                                const notesLines = task.notes.split('\\n');\n                                task.notes = notesLines.splice(8).join('\\n');\n\n                                items.push(task);\n                            }\n                        }\n\n                        this.refreshOptions();\n                        callback(items);\n                    })\n                    .catch(err => {\n                        console.error('Unable to fetch Asana tasks:', err);\n                        callback();\n                    });\n            },\n        });\n    }\n}\n"],"names":["spina","InlineEditorView","options","hasRawValue","isFieldDirty","setFieldValue","createField","setupEvents","showEditor","ReviewRequestFields","_formatField","tagName","_getInlineEditorClass","_buildAutoComplete","tasks","copyClassesToDropdown","dropdownParent","labelField","valueField","multiple","optgroupLabelField","searchField","sortField","render","load","params","task","items","console","callback"],"mappings":"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"}