!function(){var e,t;e=this,t=function(e,t){"use strict";var i;let a=t.spina(i=class extends RB.InlineEditorView{initialize(e){e=_.defaults(e,{hasRawValue:!0,formatResult:e=>e&&e.name?e.name.htmlEncode():"",getFieldValue:e=>{const t=this.$field[0].selectize;var i=t.getValue();return JSON.stringify(i.map(e=>_.pick(t.options[e],["completed","gid","workspace_id","name"])))},isFieldDirty:(e,t)=>{return t!==e.getValue()},setFieldValue:(e,t)=>{}}),super.initialize(e)}createField(){return $('<select multiple class="asana-field">')}setupEvents(){super.setupEvents(),this.$field.on("change",this._scheduleUpdateDirtyState.bind(this))}showEditor(e={}){super.showEditor(e),this.options.focusOnOpen&&this.$field[0].selectize.focus()}})||i,s=t.spina({prototypeAttrs:["taskTemplate"]})(i=class extends RB.ReviewRequestFields.TextFieldView{static autocomplete={};static multiline=!0;static useEditIconOnly=!0;static taskTemplate=_.template(`<<%- tagName %> class="asana-task<% if (completed) { %> completed<% } %>">
 <a href="https://app.asana.com/0/<%- workspaceId %>/<%- taskId %>/">
  <div class="asana-task-checkbox">
   <svg viewBox="0 0 32 32">'
    <polygon points="27.672,4.786 10.901,21.557 4.328,14.984 1.5,17.812 10.901,27.214 30.5,7.615"></polygon>
   </svg>
  </div>
  <span><%- taskSummary %></span>
 </a>
</<%- tagName %>>`);_formatField(){var e=this.jsonFieldName||this.fieldID,t={useExtraData:this.useExtraData},e=JSON.parse(this.model.getDraftField(e,t));this._renderValue(e)}_renderValue(e){e=e.map(e=>this.taskTemplate({completed:e.completed,workspaceId:e.workspace_id,taskId:e.gid,taskSummary:e.name,tagName:"li"}));this.$el.html(`<ul>${e.join("")}</ul>`)}_getInlineEditorClass(){return a}_buildAutoComplete(){var e=this.model.get("reviewRequest"),t=e.get("localSitePrefix"),e=e.get("id");const i=SITE_ROOT+`rbintegrations/asana/${t}task-search/${e}/`;t=this.inlineEditorView.$field,e=this.$el.data("raw-value")||[];e.forEach(e=>{void 0===e.gid&&(e.gid=String(e.id))}),this._renderValue(e),t.selectize({copyClassesToDropdown:!0,dropdownParent:"body",labelField:"name",valueField:"gid",multiple:!0,options:e,items:e.map(e=>e.gid),optgroupLabelField:"workspace",searchField:"name",sortField:[{field:"completed"},{field:"name"}],render:{option:e=>this.taskTemplate({completed:e.completed,workspaceId:e.workspace_id,taskId:e.gid,taskSummary:e.name,tagName:"div"})},load(e,l){var t=new URLSearchParams;t.append("q",e),fetch(i+"?"+t.toString()).then(e=>e.json()).then(e=>{var t=[];this.clearOptionGroups();for(const s of e){this.addOptionGroup(s.workspace,s);for(let e=0;e<s.tasks.length;e++){var i=s.tasks[e],a=(i.optgroup=s.workspace,i.workspace_id=s.workspace_id,i.notes.split("\n"));i.notes=a.splice(8).join("\n"),t.push(i)}}this.refreshOptions(),l(t)}).catch(e=>{console.error("Unable to fetch Asana tasks:",e),l()})}})}})||i;e.AsanaFieldView=s,Object.defineProperty(e,Symbol.toStringTag,{value:"Module"})},"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@beanbag/spina")):"function"==typeof define&&define.amd?define(["exports","@beanbag/spina"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).RBIntegrationsExtension=e.RBIntegrationsExtension||{},e.Spina);{const i=RB.InlineEditorView.extend({initialize(e){e=_.defaults(e,{hasRawValue:!0,formatResult:e=>e&&e.name?e.name.htmlEncode():"",getFieldValue:e=>{const t=this.$field[0].selectize;var i=t.getValue();return JSON.stringify(i.map(e=>t.options[e]))},isFieldDirty:(e,t)=>{return t!==e.getValue()},setFieldValue:(e,t)=>{}}),RB.InlineEditorView.prototype.initialize.call(this,e)},createField(){return $('<select multiple class="trello-field">')},setupEvents(){RB.InlineEditorView.prototype.setupEvents.call(this),this.$field.on("change",this._scheduleUpdateDirtyState.bind(this))},showEditor(e={}){RB.InlineEditorView.prototype.showEditor.call(this,e),this.options.focusOnOpen&&this.$field[0].selectize.focus()}});RB.ReviewRequestFields.TrelloFieldView=RB.ReviewRequestFields.TextFieldView.extend({autocomplete:{},multiline:!0,useEditIconOnly:!0,cardTemplate:_.template(`<<%- tagName %> class="trello-card">
 <div class="trello-card-card">
  <a href="<%- url %>"><%- name %></a>
 </div>
 <div class="trello-card-details">
  on <span class="trello-card-list"><%- list %></span>
  in <span class="trello-card-board"><%- board %></span>
 </div>
</<%- tagName %>>`),_formatField(){var e=JSON.parse(this.model.getDraftField(this.jsonFieldName||this.fieldID,{useExtraData:this.useExtraData}));this._renderValue(e)},_renderValue(e){e=e.map(e=>this.cardTemplate(_.defaults({tagName:"li"},e)));this.$el.html(`<ul>${e.join("")}</ul>`)},_getInlineEditorClass(){return i},_buildAutoComplete(){var e=this.model.get("reviewRequest"),t=e.get("localSitePrefix"),e=e.get("id");const i=SITE_ROOT+`rbintegrations/trello/${t}card-search/${e}/`;t=this.inlineEditorView.$field,e=this.$el.data("raw-value");this._renderValue(e||[]),t.selectize({copyClassesToDropdown:!0,dropdownParent:"body",multiple:!0,labelField:"name",valueField:"id",searchField:"name",options:e,items:_.pluck(e,"id"),render:{option:(e,t)=>this.cardTemplate(_.defaults({tagName:"div"},e))},load(e,t){e=$.param({q:e});$.ajax({url:i+"?"+e,type:"GET",error:t.bind(this),success:e=>t(e)})}})}})}}.call(this);
