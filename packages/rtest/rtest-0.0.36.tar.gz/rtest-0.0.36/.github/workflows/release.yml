name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.repository == 'hughhan1/rtest'
    outputs:
      new_release: ${{ steps.check_release.outputs.new_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install python-semantic-release
        run: pip install python-semantic-release

      - name: Run semantic-release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: semantic-release version && semantic-release publish


      - name: Check if release was created
        id: check_release
        run: |
          if git describe --exact-match --tags HEAD 2>/dev/null; then
            echo "new_release=true" >> $GITHUB_OUTPUT
          else
            echo "new_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Build wheels
        if: steps.check_release.outputs.new_release == 'true'
        uses: PyO3/maturin-action@v1
        with:
          target: x86_64
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto

      - name: Upload wheels
        if: steps.check_release.outputs.new_release == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: wheels-release-x86_64
          path: dist

  linux:
    runs-on: ${{ matrix.platform.runner }}
    needs: release
    if: needs.release.outputs.new_release == 'true'
    strategy:
      matrix:
        platform:
          - runner: ubuntu-latest
            target: x86_64
          - runner: ubuntu-latest
            target: aarch64
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          submodules: recursive

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'
          manylinux: auto
          before-script-linux: |
            if [ "${{ matrix.platform.target }}" = "aarch64" ]; then
              apt-get update
              apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
              export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc
              export CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc
              export CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++
            fi

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: dist


  macos:
    runs-on: ${{ matrix.platform.runner }}
    needs: release
    if: needs.release.outputs.new_release == 'true'
    strategy:
      matrix:
        platform:
          - runner: macos-latest
            target: x86_64
          - runner: macos-14
            target: aarch64
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          submodules: recursive

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: dist

  windows:
    runs-on: ${{ matrix.platform.runner }}
    needs: release
    if: needs.release.outputs.new_release == 'true'
    strategy:
      matrix:
        platform:
          - runner: windows-2022
            target: x64
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          submodules: recursive

      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.platform.target }}
          args: --release --out dist --find-interpreter
          sccache: 'true'

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.platform.target }}
          path: dist

  sdist:
    runs-on: ubuntu-latest
    needs: release
    if: needs.release.outputs.new_release == 'true'
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          submodules: recursive

      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist

      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: dist

  publish:
    runs-on: ubuntu-latest
    needs: [release, linux, macos, windows, sdist]
    if: needs.release.outputs.new_release == 'true'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}