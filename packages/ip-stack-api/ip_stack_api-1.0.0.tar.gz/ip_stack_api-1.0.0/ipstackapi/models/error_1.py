# -*- coding: utf-8 -*-

"""
ipstackapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from ipstackapi.api_helper import APIHelper


class Error1(object):

    """Implementation of the 'Error1' model.

    Attributes:
        code (int): The model property of type int.
        mtype (str): The model property of type str.
        info (str): The model property of type str.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "code": 'code',
        "mtype": 'type',
        "info": 'info'
    }

    _optionals = [
        'code',
        'mtype',
        'info',
    ]

    def __init__(self,
                 code=APIHelper.SKIP,
                 mtype=APIHelper.SKIP,
                 info=APIHelper.SKIP):
        """Constructor for the Error1 class"""

        # Initialize members of the class
        if code is not APIHelper.SKIP:
            self.code = code 
        if mtype is not APIHelper.SKIP:
            self.mtype = mtype 
        if info is not APIHelper.SKIP:
            self.info = info 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """

        if not isinstance(dictionary, dict) or dictionary is None:
            return None

        # Extract variables from the dictionary
        code = dictionary.get("code") if dictionary.get("code") else APIHelper.SKIP
        mtype = dictionary.get("type") if dictionary.get("type") else APIHelper.SKIP
        info = dictionary.get("info") if dictionary.get("info") else APIHelper.SKIP
        # Return an object of this model
        return cls(code,
                   mtype,
                   info)

    def __repr__(self):
        return (f'{self.__class__.__name__}('
                f'code={(self.code if hasattr(self, "code") else None)!r}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!r}, '
                f'info={(self.info if hasattr(self, "info") else None)!r})')

    def __str__(self):
        return (f'{self.__class__.__name__}('
                f'code={(self.code if hasattr(self, "code") else None)!s}, '
                f'mtype={(self.mtype if hasattr(self, "mtype") else None)!s}, '
                f'info={(self.info if hasattr(self, "info") else None)!s})')
