"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .routes import Routes, RoutesInput, RoutesInputTypedDict, RoutesTypedDict
from cribl_control_plane.types import BaseModel
from cribl_control_plane.utils import FieldMetadata, PathParamMetadata, RequestMetadata
import pydantic
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class UpdateRoutesByIDRequestTypedDict(TypedDict):
    id_param: str
    r"""Unique ID to PATCH"""
    routes: RoutesInputTypedDict
    r"""Routes object to be updated"""


class UpdateRoutesByIDRequest(BaseModel):
    id_param: Annotated[
        str,
        pydantic.Field(alias="id"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Unique ID to PATCH"""

    routes: Annotated[
        RoutesInput,
        FieldMetadata(request=RequestMetadata(media_type="application/json")),
    ]
    r"""Routes object to be updated"""


class UpdateRoutesByIDResponseTypedDict(TypedDict):
    r"""a list of Routes objects"""

    count: NotRequired[int]
    r"""number of items present in the items array"""
    items: NotRequired[List[RoutesTypedDict]]


class UpdateRoutesByIDResponse(BaseModel):
    r"""a list of Routes objects"""

    count: Optional[int] = None
    r"""number of items present in the items array"""

    items: Optional[List[Routes]] = None
