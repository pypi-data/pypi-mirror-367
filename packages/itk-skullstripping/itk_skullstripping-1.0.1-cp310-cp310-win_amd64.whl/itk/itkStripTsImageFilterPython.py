# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")

from . import _ITKCommonPython


from . import _SkullStripPython



from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkStripTsImageFilterPython
else:
    import _itkStripTsImageFilterPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


if _swig_python_version_info[0:2] >= (3, 3):
    import collections.abc
else:
    import collections

import itk.itkImageToImageFilterAPython
import itk.itkVectorImagePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkSizePython
import itk.pyBasePython
import itk.itkVariableLengthVectorPython
import itk.stdcomplexPython
import itk.ITKCommonBasePython
import itk.itkMatrixPython
import itk.itkPointPython
import itk.vnl_vector_refPython
import itk.vnl_vectorPython
import itk.vnl_matrixPython
import itk.itkFixedArrayPython
import itk.itkVectorPython
import itk.vnl_matrix_fixedPython
import itk.itkCovariantVectorPython
import itk.itkImagePython
import itk.itkImageRegionPython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkRGBPixelPython
import itk.itkRGBAPixelPython
import itk.itkImageSourcePython
import itk.itkImageSourceCommonPython
import itk.itkPhasedArray3DSpecialCoordinatesImagePython
import itk.itkImageToImageFilterCommonPython

def itkStripTsImageFilterID3ID3_New():
    return itkStripTsImageFilterID3ID3.New()

class itkStripTsImageFilterID3ID3(itk.itkImageToImageFilterAPython.itkImageToImageFilterID3IUC3):
    r"""Proxy of C++ itkStripTsImageFilterID3ID3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkStripTsImageFilterID3ID3_Pointer"""
        return _itkStripTsImageFilterPython.itkStripTsImageFilterID3ID3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkStripTsImageFilterID3ID3_Pointer"""
        return _itkStripTsImageFilterPython.itkStripTsImageFilterID3ID3_Clone(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterID3ID3_PrintSelf(self, os, indent)

    def SetAtlasImage(self, ptr):
        r"""
        SetAtlasImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageD3 const *

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterID3ID3_SetAtlasImage(self, ptr)

    def SetAtlasBrainMask(self, ptr):
        r"""
        SetAtlasBrainMask(self, ptr)

        Parameters
        ----------
        ptr: itkImageUC3 const *

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterID3ID3_SetAtlasBrainMask(self, ptr)

    def GetTimerReport(self):
        r"""GetTimerReport(self) -> std::string const &"""
        return _itkStripTsImageFilterPython.itkStripTsImageFilterID3ID3_GetTimerReport(self)
    __swig_destroy__ = _itkStripTsImageFilterPython.delete_itkStripTsImageFilterID3ID3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkStripTsImageFilterID3ID3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterID3ID3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkStripTsImageFilterID3ID3

        Create a new object of the class itkStripTsImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStripTsImageFilterID3ID3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStripTsImageFilterID3ID3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStripTsImageFilterID3ID3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStripTsImageFilterID3ID3 in _itkStripTsImageFilterPython:
_itkStripTsImageFilterPython.itkStripTsImageFilterID3ID3_swigregister(itkStripTsImageFilterID3ID3)

def itkStripTsImageFilterIF3IF3_New():
    return itkStripTsImageFilterIF3IF3.New()

class itkStripTsImageFilterIF3IF3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIF3IUC3):
    r"""Proxy of C++ itkStripTsImageFilterIF3IF3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkStripTsImageFilterIF3IF3_Pointer"""
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIF3IF3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkStripTsImageFilterIF3IF3_Pointer"""
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIF3IF3_Clone(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIF3IF3_PrintSelf(self, os, indent)

    def SetAtlasImage(self, ptr):
        r"""
        SetAtlasImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageF3 const *

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIF3IF3_SetAtlasImage(self, ptr)

    def SetAtlasBrainMask(self, ptr):
        r"""
        SetAtlasBrainMask(self, ptr)

        Parameters
        ----------
        ptr: itkImageUC3 const *

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIF3IF3_SetAtlasBrainMask(self, ptr)

    def GetTimerReport(self):
        r"""GetTimerReport(self) -> std::string const &"""
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIF3IF3_GetTimerReport(self)
    __swig_destroy__ = _itkStripTsImageFilterPython.delete_itkStripTsImageFilterIF3IF3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkStripTsImageFilterIF3IF3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIF3IF3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkStripTsImageFilterIF3IF3

        Create a new object of the class itkStripTsImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStripTsImageFilterIF3IF3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStripTsImageFilterIF3IF3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStripTsImageFilterIF3IF3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStripTsImageFilterIF3IF3 in _itkStripTsImageFilterPython:
_itkStripTsImageFilterPython.itkStripTsImageFilterIF3IF3_swigregister(itkStripTsImageFilterIF3IF3)

def itkStripTsImageFilterISS3ISS3_New():
    return itkStripTsImageFilterISS3ISS3.New()

class itkStripTsImageFilterISS3ISS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterISS3IUC3):
    r"""Proxy of C++ itkStripTsImageFilterISS3ISS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkStripTsImageFilterISS3ISS3_Pointer"""
        return _itkStripTsImageFilterPython.itkStripTsImageFilterISS3ISS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkStripTsImageFilterISS3ISS3_Pointer"""
        return _itkStripTsImageFilterPython.itkStripTsImageFilterISS3ISS3_Clone(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterISS3ISS3_PrintSelf(self, os, indent)

    def SetAtlasImage(self, ptr):
        r"""
        SetAtlasImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageSS3 const *

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterISS3ISS3_SetAtlasImage(self, ptr)

    def SetAtlasBrainMask(self, ptr):
        r"""
        SetAtlasBrainMask(self, ptr)

        Parameters
        ----------
        ptr: itkImageUC3 const *

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterISS3ISS3_SetAtlasBrainMask(self, ptr)

    def GetTimerReport(self):
        r"""GetTimerReport(self) -> std::string const &"""
        return _itkStripTsImageFilterPython.itkStripTsImageFilterISS3ISS3_GetTimerReport(self)
    __swig_destroy__ = _itkStripTsImageFilterPython.delete_itkStripTsImageFilterISS3ISS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkStripTsImageFilterISS3ISS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterISS3ISS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkStripTsImageFilterISS3ISS3

        Create a new object of the class itkStripTsImageFilterISS3ISS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStripTsImageFilterISS3ISS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStripTsImageFilterISS3ISS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStripTsImageFilterISS3ISS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStripTsImageFilterISS3ISS3 in _itkStripTsImageFilterPython:
_itkStripTsImageFilterPython.itkStripTsImageFilterISS3ISS3_swigregister(itkStripTsImageFilterISS3ISS3)

def itkStripTsImageFilterIUC3IUC3_New():
    return itkStripTsImageFilterIUC3IUC3.New()

class itkStripTsImageFilterIUC3IUC3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    r"""Proxy of C++ itkStripTsImageFilterIUC3IUC3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkStripTsImageFilterIUC3IUC3_Pointer"""
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIUC3IUC3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkStripTsImageFilterIUC3IUC3_Pointer"""
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIUC3IUC3_Clone(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIUC3IUC3_PrintSelf(self, os, indent)

    def SetAtlasImage(self, ptr):
        r"""
        SetAtlasImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUC3 const *

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIUC3IUC3_SetAtlasImage(self, ptr)

    def SetAtlasBrainMask(self, ptr):
        r"""
        SetAtlasBrainMask(self, ptr)

        Parameters
        ----------
        ptr: itkImageUC3 const *

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIUC3IUC3_SetAtlasBrainMask(self, ptr)

    def GetTimerReport(self):
        r"""GetTimerReport(self) -> std::string const &"""
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIUC3IUC3_GetTimerReport(self)
    __swig_destroy__ = _itkStripTsImageFilterPython.delete_itkStripTsImageFilterIUC3IUC3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkStripTsImageFilterIUC3IUC3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIUC3IUC3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkStripTsImageFilterIUC3IUC3

        Create a new object of the class itkStripTsImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStripTsImageFilterIUC3IUC3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStripTsImageFilterIUC3IUC3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStripTsImageFilterIUC3IUC3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStripTsImageFilterIUC3IUC3 in _itkStripTsImageFilterPython:
_itkStripTsImageFilterPython.itkStripTsImageFilterIUC3IUC3_swigregister(itkStripTsImageFilterIUC3IUC3)

def itkStripTsImageFilterIUS3IUS3_New():
    return itkStripTsImageFilterIUS3IUS3.New()

class itkStripTsImageFilterIUS3IUS3(itk.itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUC3):
    r"""Proxy of C++ itkStripTsImageFilterIUS3IUS3 class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    @staticmethod
    def __New_orig__():
        r"""__New_orig__() -> itkStripTsImageFilterIUS3IUS3_Pointer"""
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIUS3IUS3___New_orig__()

    def Clone(self):
        r"""Clone(self) -> itkStripTsImageFilterIUS3IUS3_Pointer"""
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIUS3IUS3_Clone(self)

    def PrintSelf(self, os, indent):
        r"""
        PrintSelf(self, os, indent)

        Parameters
        ----------
        os: std::basic_ostream< char,std::char_traits< char > > &
        indent: itkIndent

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIUS3IUS3_PrintSelf(self, os, indent)

    def SetAtlasImage(self, ptr):
        r"""
        SetAtlasImage(self, ptr)

        Parameters
        ----------
        ptr: itkImageUS3 const *

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIUS3IUS3_SetAtlasImage(self, ptr)

    def SetAtlasBrainMask(self, ptr):
        r"""
        SetAtlasBrainMask(self, ptr)

        Parameters
        ----------
        ptr: itkImageUC3 const *

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIUS3IUS3_SetAtlasBrainMask(self, ptr)

    def GetTimerReport(self):
        r"""GetTimerReport(self) -> std::string const &"""
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIUS3IUS3_GetTimerReport(self)
    __swig_destroy__ = _itkStripTsImageFilterPython.delete_itkStripTsImageFilterIUS3IUS3

    @staticmethod
    def cast(obj):
        r"""
        cast(obj) -> itkStripTsImageFilterIUS3IUS3

        Parameters
        ----------
        obj: itkLightObject *

        """
        return _itkStripTsImageFilterPython.itkStripTsImageFilterIUS3IUS3_cast(obj)

    def New(*args, **kargs):
        """New() -> itkStripTsImageFilterIUS3IUS3

        Create a new object of the class itkStripTsImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkStripTsImageFilterIUS3IUS3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkStripTsImageFilterIUS3IUS3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkStripTsImageFilterIUS3IUS3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkStripTsImageFilterIUS3IUS3 in _itkStripTsImageFilterPython:
_itkStripTsImageFilterPython.itkStripTsImageFilterIUS3IUS3_swigregister(itkStripTsImageFilterIUS3IUS3)

from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def strip_ts_image_filter(*args: itkt.ImageLike,  atlas_image: itkt.Image=..., atlas_brain_mask: itkt.Image=...,**kwargs)-> itkt.ImageSourceReturn:
    """Functional interface for StripTsImageFilter"""
    import itk

    kwarg_typehints = { 'atlas_image':atlas_image,'atlas_brain_mask':atlas_brain_mask }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)


    instance = itk.StripTsImageFilter.New(*args, **kwargs)

    return instance.__internal_call__()

def strip_ts_image_filter_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.SkullStrip.StripTsImageFilter
    strip_ts_image_filter.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    strip_ts_image_filter.__doc__ = filter_object.__doc__



