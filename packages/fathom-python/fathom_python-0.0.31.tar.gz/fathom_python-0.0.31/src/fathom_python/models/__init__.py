"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from typing import TYPE_CHECKING
from importlib import import_module

if TYPE_CHECKING:
    from .actionitem import ActionItem, ActionItemTypedDict
    from .assignee import Assignee, AssigneeTypedDict
    from .createwebhookop import CreateWebhookRequest, CreateWebhookRequestTypedDict
    from .crmcompanymatch import CRMCompanyMatch, CRMCompanyMatchTypedDict
    from .crmcontactmatch import CRMContactMatch, CRMContactMatchTypedDict
    from .crmdealmatch import CRMDealMatch, CRMDealMatchTypedDict
    from .crmmatches import CRMMatches, CRMMatchesTypedDict
    from .deletewebhookop import DeleteWebhookRequest, DeleteWebhookRequestTypedDict
    from .fathomuser import FathomUser, FathomUserTypedDict
    from .invitee import Invitee, InviteeTypedDict
    from .listmeetingsop import (
        ListMeetingsMeetingType,
        ListMeetingsRequest,
        ListMeetingsRequestTypedDict,
        ListMeetingsResponse,
        ListMeetingsResponseTypedDict,
    )
    from .listteammembersop import (
        ListTeamMembersRequest,
        ListTeamMembersRequestTypedDict,
    )
    from .listteamsop import ListTeamsRequest, ListTeamsRequestTypedDict
    from .meeting import Meeting, MeetingType, MeetingTypedDict
    from .meetinglistresponse import MeetingListResponse, MeetingListResponseTypedDict
    from .meetingsummary import MeetingSummary, MeetingSummaryTypedDict
    from .security import Security, SecurityTypedDict
    from .team import Team, TeamTypedDict
    from .teamlistresponse import TeamListResponse, TeamListResponseTypedDict
    from .teammember import TeamMember, TeamMemberTypedDict
    from .teammemberlistresponse import (
        TeamMemberListResponse,
        TeamMemberListResponseTypedDict,
    )
    from .transcriptitem import TranscriptItem, TranscriptItemTypedDict
    from .transcriptitemspeaker import (
        TranscriptItemSpeaker,
        TranscriptItemSpeakerTypedDict,
    )
    from .webhook import Webhook, WebhookTypedDict

__all__ = [
    "ActionItem",
    "ActionItemTypedDict",
    "Assignee",
    "AssigneeTypedDict",
    "CRMCompanyMatch",
    "CRMCompanyMatchTypedDict",
    "CRMContactMatch",
    "CRMContactMatchTypedDict",
    "CRMDealMatch",
    "CRMDealMatchTypedDict",
    "CRMMatches",
    "CRMMatchesTypedDict",
    "CreateWebhookRequest",
    "CreateWebhookRequestTypedDict",
    "DeleteWebhookRequest",
    "DeleteWebhookRequestTypedDict",
    "FathomUser",
    "FathomUserTypedDict",
    "Invitee",
    "InviteeTypedDict",
    "ListMeetingsMeetingType",
    "ListMeetingsRequest",
    "ListMeetingsRequestTypedDict",
    "ListMeetingsResponse",
    "ListMeetingsResponseTypedDict",
    "ListTeamMembersRequest",
    "ListTeamMembersRequestTypedDict",
    "ListTeamsRequest",
    "ListTeamsRequestTypedDict",
    "Meeting",
    "MeetingListResponse",
    "MeetingListResponseTypedDict",
    "MeetingSummary",
    "MeetingSummaryTypedDict",
    "MeetingType",
    "MeetingTypedDict",
    "Security",
    "SecurityTypedDict",
    "Team",
    "TeamListResponse",
    "TeamListResponseTypedDict",
    "TeamMember",
    "TeamMemberListResponse",
    "TeamMemberListResponseTypedDict",
    "TeamMemberTypedDict",
    "TeamTypedDict",
    "TranscriptItem",
    "TranscriptItemSpeaker",
    "TranscriptItemSpeakerTypedDict",
    "TranscriptItemTypedDict",
    "Webhook",
    "WebhookTypedDict",
]

_dynamic_imports: dict[str, str] = {
    "ActionItem": ".actionitem",
    "ActionItemTypedDict": ".actionitem",
    "Assignee": ".assignee",
    "AssigneeTypedDict": ".assignee",
    "CreateWebhookRequest": ".createwebhookop",
    "CreateWebhookRequestTypedDict": ".createwebhookop",
    "CRMCompanyMatch": ".crmcompanymatch",
    "CRMCompanyMatchTypedDict": ".crmcompanymatch",
    "CRMContactMatch": ".crmcontactmatch",
    "CRMContactMatchTypedDict": ".crmcontactmatch",
    "CRMDealMatch": ".crmdealmatch",
    "CRMDealMatchTypedDict": ".crmdealmatch",
    "CRMMatches": ".crmmatches",
    "CRMMatchesTypedDict": ".crmmatches",
    "DeleteWebhookRequest": ".deletewebhookop",
    "DeleteWebhookRequestTypedDict": ".deletewebhookop",
    "FathomUser": ".fathomuser",
    "FathomUserTypedDict": ".fathomuser",
    "Invitee": ".invitee",
    "InviteeTypedDict": ".invitee",
    "ListMeetingsMeetingType": ".listmeetingsop",
    "ListMeetingsRequest": ".listmeetingsop",
    "ListMeetingsRequestTypedDict": ".listmeetingsop",
    "ListMeetingsResponse": ".listmeetingsop",
    "ListMeetingsResponseTypedDict": ".listmeetingsop",
    "ListTeamMembersRequest": ".listteammembersop",
    "ListTeamMembersRequestTypedDict": ".listteammembersop",
    "ListTeamsRequest": ".listteamsop",
    "ListTeamsRequestTypedDict": ".listteamsop",
    "Meeting": ".meeting",
    "MeetingType": ".meeting",
    "MeetingTypedDict": ".meeting",
    "MeetingListResponse": ".meetinglistresponse",
    "MeetingListResponseTypedDict": ".meetinglistresponse",
    "MeetingSummary": ".meetingsummary",
    "MeetingSummaryTypedDict": ".meetingsummary",
    "Security": ".security",
    "SecurityTypedDict": ".security",
    "Team": ".team",
    "TeamTypedDict": ".team",
    "TeamListResponse": ".teamlistresponse",
    "TeamListResponseTypedDict": ".teamlistresponse",
    "TeamMember": ".teammember",
    "TeamMemberTypedDict": ".teammember",
    "TeamMemberListResponse": ".teammemberlistresponse",
    "TeamMemberListResponseTypedDict": ".teammemberlistresponse",
    "TranscriptItem": ".transcriptitem",
    "TranscriptItemTypedDict": ".transcriptitem",
    "TranscriptItemSpeaker": ".transcriptitemspeaker",
    "TranscriptItemSpeakerTypedDict": ".transcriptitemspeaker",
    "Webhook": ".webhook",
    "WebhookTypedDict": ".webhook",
}


def __getattr__(attr_name: str) -> object:
    module_name = _dynamic_imports.get(attr_name)
    if module_name is None:
        raise AttributeError(
            f"No {attr_name} found in _dynamic_imports for module name -> {__name__} "
        )

    try:
        module = import_module(module_name, __package__)
        result = getattr(module, attr_name)
        return result
    except ImportError as e:
        raise ImportError(
            f"Failed to import {attr_name} from {module_name}: {e}"
        ) from e
    except AttributeError as e:
        raise AttributeError(
            f"Failed to get {attr_name} from {module_name}: {e}"
        ) from e


def __dir__():
    lazy_attrs = list(_dynamic_imports.keys())
    return sorted(lazy_attrs)
