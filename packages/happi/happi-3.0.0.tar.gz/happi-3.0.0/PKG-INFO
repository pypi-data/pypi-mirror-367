Metadata-Version: 2.4
Name: happi
Version: 3.0.0
Summary: Happi Database Access for LCLS Beamline Devices
Author: SLAC National Accelerator Laboratory
License: Copyright (c) 2023, The Board of Trustees of the Leland Stanford Junior
        University, through SLAC National Accelerator Laboratory (subject to receipt
        of any required approvals from the U.S. Dept. of Energy). All rights reserved.
        Redistribution and use in source and binary forms, with or without
        modification, are permitted provided that the following conditions are met:
        
        (1) Redistributions of source code must retain the above copyright notice,
            this list of conditions and the following disclaimer.
        
        (2) Redistributions in binary form must reproduce the above copyright notice,
            this list of conditions and the following disclaimer in the documentation
            and/or other materials provided with the distribution.
        
        (3) Neither the name of the Leland Stanford Junior University, SLAC National
            Accelerator Laboratory, U.S. Dept. of Energy nor the names of its
            contributors may be used to endorse or promote products derived from this
            software without specific prior written permission.
        
        THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
        ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
        WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
        DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER, THE UNITED STATES GOVERNMENT,
        OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
        EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
        OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
        INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
        CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
        IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
        OF SUCH DAMAGE.
        
        You are under no obligation whatsoever to provide any bug fixes, patches, or
        upgrades to the features, functionality or performance of the source code
        ("Enhancements") to anyone; however, if you choose to make your Enhancements
        available either publicly, or directly to SLAC National Accelerator Laboratory,
        without imposing a separate written license agreement for such Enhancements,
        then you hereby grant the following license: a non-exclusive, royalty-free
        perpetual license to install, use, modify, prepare derivative works, incorporate
        into other computer software, distribute, and sublicense such Enhancements or
        derivative works thereof, in binary and source code form.
        
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.9
Description-Content-Type: text/markdown
License-File: LICENSE.md
License-File: AUTHORS.rst
Requires-Dist: click
Requires-Dist: jinja2
Requires-Dist: simplejson
Requires-Dist: platformdirs
Requires-Dist: prettytable
Requires-Dist: coloredlogs
Requires-Dist: entrypoints
Provides-Extra: gui
Requires-Dist: PyQt5; extra == "gui"
Requires-Dist: qtpy; extra == "gui"
Provides-Extra: mongo
Requires-Dist: pymongo; extra == "mongo"
Provides-Extra: test
Requires-Dist: pytest; extra == "test"
Requires-Dist: pytest-cov; extra == "test"
Requires-Dist: pytest-qt; extra == "test"
Requires-Dist: ipython; extra == "test"
Requires-Dist: matplotlib>=3.2.0; extra == "test"
Requires-Dist: ophyd>=1.5.0; extra == "test"
Requires-Dist: pcdsutils; extra == "test"
Requires-Dist: pcdsdevices; extra == "test"
Requires-Dist: mongomock>=3.22.0; extra == "test"
Requires-Dist: line_profiler; extra == "test"
Requires-Dist: PyQt5; extra == "test"
Requires-Dist: qtpy; extra == "test"
Requires-Dist: pymongo; extra == "test"
Provides-Extra: doc
Requires-Dist: docs-versions-menu; extra == "doc"
Requires-Dist: doctr; extra == "doc"
Requires-Dist: sphinx; extra == "doc"
Requires-Dist: sphinx_rtd_theme>=1.2.0; extra == "doc"
Requires-Dist: sphinx-click; extra == "doc"
Requires-Dist: sphinxcontrib-jquery; extra == "doc"
Provides-Extra: all
Requires-Dist: PyQt5; extra == "all"
Requires-Dist: qtpy; extra == "all"
Requires-Dist: pymongo; extra == "all"
Dynamic: license-file

<h1 align="center">HAPPI</h1>

<div align="center">
  <strong>Heuristic Access to Positioning of Photon Instrumentation</strong>
</div>

<p align="center">
  <a href="#motivation">Motivation</a> •
  <a href="#features">Features</a> •
  <a href="#installation">Installation</a> •
  <a href="#contributing">Contributing</a> •
  <a href="#basic-usage">Basic Usage</a> •
  <a href="https://pcdshub.github.io/happi/">Documentation</a>
</p>

## Motivation
LCLS endstations deal with dynamic sets of instrumentation. Information like
ports, triggers and aliases are all important for operation, but hard to manage
when spread across a multitude of applications. **Happi** solves this problem
by creating a single access point for all the metadata required to interface
with LCLS instrumentation. Using a flexible `container` based system Happi
allows the enforcement of specific conventions while still permitting flexible
data entry where required.


## Features
* Manage information for specific device types using containers
* Input arbitrary metadata associated with a specific device
* Flexible backend support for multiple types of databases; MongoDB, JSON e.t.c
* Easily search database entries for device/s that match a set of keys

## Installation

Install the most recent tagged build: `conda install happi -c pcds-tag -c conda-forge`

Install the most recent development build: `conda install happi -c pcds-dev -c conda-forge`

## Contributing

Developers should check out the [contributing docs](https://github.com/pcdshub/happi/blob/master/CONTRIBUTING.rst).

## Basic Usage

The `happi.Client` is your main interface to the underlying device database.
You have the choice of either creating your database backend by hand or using
the environment variable `$HAPPI_BACKEND` to create a persistent reference to
your database type. By default, the `Client` assumes a `JSON` file database:

```python

   import happi

   client = happi.Client(path='path/to/my_db.json')
```

If your database has entries, you should either be able to search by key
variables for individual or multiple devices.

```python

   client.find_device(name="My Device")

   client.search(stand='DG2')
```

Once you have the device you want, you can edit the information just as you
would any other Python object. View the device information in a
convenient table using `.show_info`:

```python

   dev = client.find_device(name="My Device")

   dev.z = 432.1

   dev.show_info()
```
#### Output

```text
+--------------+----------------------+
| EntryInfo    | Value                |
+--------------+----------------------+
| active       | True                 |
| beamline     | LCLS                 |
| name         | My Device            |
| parent       | None                 |
| prefix       | MY:DEV:01            |
| stand        | None                 |
| system       | None                 |
| z            | 432.10000            |
+--------------+----------------------+
```

After you are satisfied with your changes, push the information back to the
database using the `.save` method. If this is a new device, you will have to
call `Client.add_device`. Before the entry is modified in the database, the
`happi.Client` confirms that the new changes meet all the requirements
specified by the container.

```python

   dev.save()
```

#### Command Line Interface

You can also view and manipulate device databases using the happi cli:

```
happi [OPTIONS] COMMAND [ARGS]...
```

You can try out happi commands on a simple test database as follows _(this assumes you are running from the happi project root dir)_:

```
happi --path examples/example.cfg COMMAND [ARGS]
```

The simple test database is located at `happi/examples/db.json`, which is specified in `example.cfg`.
Please refer to the documentation for a list of possible commands and their arguments.
