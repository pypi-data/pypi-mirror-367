"use strict";(self.webpackChunk_jupytercad_jupytercad_urdf=self.webpackChunk_jupytercad_jupytercad_urdf||[]).push([[409],{4409:(e,t,a)=>{a.r(t),a.d(t,{default:()=>f});var r=a(2120),n=a(9104),s=a(2952),o=a(9246),i=a(4744);const c=JSON.parse('{"type":"object","properties":{"LinearDeflection":{"type":"number","description":"Linear deflection for all meshes (smaller = more triangles)","minimum":0.0001,"maximum":1,"default":0.01},"AngularDeflection":{"type":"number","description":"Angular deflection for all meshes (in radians)","minimum":0.01,"maximum":1,"default":0.05}},"required":[],"additionalProperties":false}'),l=new(a(9346).LabIcon)({name:"jupytercad:urdf-icon",svgstr:'<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n\x3c!-- Created with Inkscape (http://www.inkscape.org/) --\x3e\n\n<svg\n   width="297mm"\n   height="297mm"\n   viewBox="0 0 297 297"\n   version="1.1"\n   xmlns="http://www.w3.org/2000/svg"\n   xmlns:svg="http://www.w3.org/2000/svg">\n  <g\n       class="jp-icon3"\n       fill="#616161">\n      <path\n         d="m 178.1328,187.99525 c -28.93792,1e-5 -53.63752,16.84236 -58.4078,39.82754 h -10.25762 a 4.701161,4.701161 135 0 0 -4.70116,4.70116 v 52.55825 a 5.6272026,5.6272026 45 0 0 5.6272,5.6272 h 135.48031 a 5.6272026,5.6272026 135 0 0 5.6272,-5.6272 v -52.55825 a 4.701161,4.701161 45 0 0 -4.70116,-4.70116 l -10.25916,0 c -4.77028,-22.98518 -29.46989,-39.82753 -58.40781,-39.82754 z" />\n      <path\n         d="m 143.2817,15.095203 a 17.199638,17.199638 0 0 0 -2.34405,0.250631 17.199638,17.199638 0 0 0 -8.39483,4.046781 L 79.878847,65.943264 a 17.197918,17.197918 0 0 0 -2.733683,3.073197 L 55.828118,65.492128 a 10.584392,10.584392 0 0 0 -9.20874,2.958993 L 22.672002,92.398497 a 10.583334,10.583334 0 0 0 0,14.966533 10.583334,10.583334 0 0 0 14.966529,0 L 57.742214,87.263927 78.878908,90.75622 a 17.197918,17.197918 0 0 0 0,5.17e-4 17.197918,17.197918 0 0 0 0.518315,0.515731 h 5.17e-4 l 3.494877,21.141342 -20.101616,20.10369 a 10.583334,10.583334 0 0 0 0,14.96704 10.583334,10.583334 0 0 0 14.967046,0 l 23.946863,-23.94737 a 10.584392,10.584392 0 0 0 2.95744,-9.20926 l -3.53777,-21.405414 a 17.197918,17.197918 0 0 0 1.53376,-1.207678 l 38.76559,-34.26561 43.55858,57.496232 -23.6585,109.2383 a 17.197918,17.197918 0 0 0 13.16819,20.44733 17.197918,17.197918 0 0 0 20.44939,-13.16819 l 25.33179,-116.96289 a 17.199638,17.199638 0 0 0 -3.09955,-14.0255 L 157.64258,21.894788 A 17.199638,17.199638 0 0 0 143.2817,15.095203 Z m 0.61753,4.748548 a 13.758333,13.361459 0 0 1 13.79244,13.317533 v 0.04393 A 13.758333,13.361459 0 0 1 143.94471,46.566668 13.758333,13.361459 0 0 1 130.175,33.22743 13.758333,13.361459 0 0 1 143.89923,19.843751 Z m 59.00209,78.052085 a 13.758333,13.361459 0 0 1 13.79244,13.317534 v 0.0439 a 13.758333,13.361459 0 0 1 -13.74697,13.36146 13.758333,13.361459 0 0 1 -13.7697,-13.33923 13.758333,13.361459 0 0 1 13.72423,-13.383684 z" />\n      <path\n         d="m 203.3075,84.232416 a 26.584653,26.584656 0 0 0 -26.58466,26.584654 26.584653,26.584656 0 0 0 26.58466,26.58466 26.584653,26.584656 0 0 0 26.58465,-26.58466 26.584653,26.584656 0 0 0 -26.58465,-26.584654 z m 0,14.953864 a 11.630786,11.630786 0 0 1 11.63078,11.63079 11.630786,11.630786 0 0 1 -11.63078,11.63079 11.630786,11.630786 0 0 1 -11.63079,-11.63079 11.630786,11.630786 0 0 1 11.63079,-11.63079 z" />\n      <path\n         d="M 144.08958,6.2906711 A 26.584653,26.584656 0 0 0 117.50492,32.875323 26.584653,26.584656 0 0 0 144.08958,59.459981 26.584653,26.584656 0 0 0 170.67423,32.875323 26.584653,26.584656 0 0 0 144.08958,6.2906711 Z m 0,14.9538619 a 11.630786,11.630786 0 0 1 11.63078,11.63079 11.630786,11.630786 0 0 1 -11.63078,11.63079 11.630786,11.630786 0 0 1 -11.63079,-11.63079 11.630786,11.630786 0 0 1 11.63079,-11.63079 z" />\n  </g>\n</svg>\n'});var p,d;!function(e){e.exportUrdf="jupytercad:urdf:export"}(p||(p={})),function(e){e.executeExportURDF=function(e){return async t=>{const a=e.currentWidget;if(!a)return;const n=new s.FormDialog({model:a.model,title:"Export to URDF",sourceData:(a.model,{LinearDeflection:.01,AngularDeflection:.05}),schema:c,syncData:(l=a.model,e=>{const{...t}=e,a=l.sharedModel;if(!a)return;const n=l.getAllObject().filter(e=>e.shape&&!e.shape.startsWith("Post::"));if(0===n.length)return void(0,o.showErrorMessage)("No objects to export","The document has no geometric shapes to export.");const c=(0,i.v4)(),p=[],d=l.filePath,m=["Part::Box","Part::Cylinder","Part::Sphere"];for(const e of n){const a=void 0!==e.shape&&m.includes(e.shape),o={isPrimitive:a,...a&&{shape:e.shape,shapeParams:JSON.stringify(e.parameters)}},i=(0,s.newName)(`${e.name}_STL_Export`,l),h={shape:"Post::ExportSTL",parameters:{...t,Object:e.name,jobId:c,totalFiles:n.length,filePath:d,...o},visible:!1,name:i,shapeMetadata:{shapeFormat:r.JCadWorkerSupportedFormat.STL,workerId:"jupytercad-urdf:worker"}};p.push(h)}a.transact(()=>{for(const e of p)a.objectExists(e.name)||a.addObject(e)})}),cancelButton:!0});var l;await n.launch()}}}(d||(d={}));var m=a(7262);function h(e,t){const a=t*(Math.PI/180),[r,n,s]=e,o=Math.sin(a/2),i=r*o,c=n*o,l=s*o,p=Math.cos(a/2),d=2*(p*c-l*i);let m,h,u;if(Math.abs(d)>=1)h=Math.PI/2*Math.sign(d),m=2*Math.atan2(i,p),u=0;else{h=Math.asin(d);const e=2*(p*i+c*l),t=1-2*(i*i+c*c);m=Math.atan2(e,t);const a=2*(p*l+i*c),r=1-2*(c*c+l*l);u=Math.atan2(a,r)}return{r:m,p:h,y:u}}class u{constructor(e){this.shapeFormat=r.JCadWorkerSupportedFormat.STL,this._jobs=new Map,this._ready=new m.PromiseDelegate,this._tracker=e.tracker,this._contentsManager=e.contentsManager}get ready(){return this._ready.resolve(),this._ready.promise}register(e){return(0,i.v4)()}unregister(e){}postMessage(e){if(e.action!==r.WorkerAction.POSTPROCESS)return;const t=e.payload;if(!t||!t.jcObject||void 0===t.postShape)return;const{jcObject:a,postShape:n}=t,{jobId:s,totalFiles:o,Object:i,isPrimitive:c,shape:l,shapeParams:p,filePath:d}=a.parameters;if(!s||!d)return;this._jobs.has(s)||this._jobs.set(s,{primitives:[],meshes:[],total:o,received:0,jcObjects:[],filePath:d});const m=this._jobs.get(s);m.received++,m.jcObjects.push(a.name),c?m.primitives.push({name:i,shape:l,params:JSON.parse(p)}):m.meshes.push({name:`${i}.stl`,content:n,params:a.parameters}),m.received===m.total&&(this._packageAndSave(m),this._cleanup(m.jcObjects),this._jobs.delete(s))}async _packageAndSave(e){const{primitives:t,meshes:a,filePath:r}=e,n=this._contentsManager;if(!n)return console.error("FATAL: [worker.ts] ContentsManager was not provided to the worker."),void(0,o.showErrorMessage)("URDF Export Failed","ContentsManager not available in worker.");const s=r.split("/"),i=s.pop()||"untitled.jcad",c=i.substring(0,i.lastIndexOf(".")),l=s.join("/"),p=l?`${l}/${c}`:c,d=`${p}/${c}.urdf`,m=`${p}/meshes`;try{try{await n.get(p)}catch(e){await n.newUntitled({path:l,type:"directory"}).then(e=>n.rename(e.path,p))}if(a.length>0)try{await n.get(m)}catch(e){await n.newUntitled({path:p,type:"directory"}).then(e=>n.rename(e.path,m))}const e=function(e,t,a){var r,n,s;let o="",i="";const c=new Map;let l=0;const p=e=>{const t=e.Color;if(!t)return{main:"",ref:""};if(c.has(t))return{main:"",ref:`<material name="${c.get(t)}"/>`};const a="mat_"+l++;c.set(t,a);const r=parseInt(t.slice(1,3),16)/255,n=parseInt(t.slice(3,5),16)/255,s=parseInt(t.slice(5,7),16)/255;return{main:`\n  <material name="${a}">\n    <color rgba="${r.toFixed(2)} ${n.toFixed(2)} ${s.toFixed(2)} 1.0"/>\n  </material>`,ref:`<material name="${a}"/>`}};for(const t of e){const{name:e,shape:a,params:c}=t,l=(null===(r=c.Placement)||void 0===r?void 0:r.Position)||[0,0,0],d=h((null===(n=c.Placement)||void 0===n?void 0:n.Axis)||[0,0,1],(null===(s=c.Placement)||void 0===s?void 0:s.Angle)||0),m=`<origin xyz="${l[0]} ${l[1]} ${l[2]}" rpy="${d.r} ${d.p} ${d.y}" />`,u=p(c);i+=u.main;let f="";switch(a){case"Part::Box":f=`<box size="${c.Length} ${c.Width} ${c.Height}"/>`;break;case"Part::Cylinder":f=`<cylinder radius="${c.Radius}" length="${c.Height}"/>`;break;case"Part::Sphere":f=`<sphere radius="${c.Radius}"/>`}f&&(o+=`\n  <link name="${e}">\n    <visual>\n      <geometry>\n      ${f}\n      </geometry>\n      ${m}\n      ${u.ref}\n    </visual>\n  </link>\n  `)}for(const e of t){const t=e.name.replace(".stl",""),a=p(e.params);i+=a.main,o+=`\n  <link name="${t}">\n    <visual>\n      <geometry>\n        <mesh filename="package://meshes/${e.name}" />\n      </geometry>\n      ${a.ref}\n    </visual>\n  </link>\n  `}return`<robot name="${a}">${i}${o}\n</robot>`}(t,a,c);await n.save(d,{type:"file",format:"text",content:e});for(const e of a){const t=`${m}/${e.name}`;await n.save(t,{type:"file",format:"text",content:e.content})}}catch(e){console.error("ERROR: [worker.ts] Failed during file save operation:",e),(0,o.showErrorMessage)("URDF Export Failed",e)}}_cleanup(e){const t=this._tracker.currentWidget;if(!t)return;const a=t.model.sharedModel;a&&a.transact(()=>{for(const t of e)a.objectExists(t)&&a.removeObjectByName(t)})}}const f={id:"jupytercad-urdf:plugin",description:"A JupyterCAD URDF export extension.",autoStart:!0,requires:[r.IJCadWorkerRegistryToken,r.IJCadFormSchemaRegistryToken,r.IJupyterCadDocTracker,r.IJCadExternalCommandRegistryToken],optional:[n.ITranslator],activate:(e,t,a,r,s,o)=>{console.log("JupyterLab extension jupytercad-urdf is activated!"),o=null!=o?o:n.nullTranslator;const i=e.serviceManager.contents,m=new u({tracker:r,contentsManager:i});t.registerWorker("jupytercad-urdf:worker",m),a.registerSchema("Post::ExportURDF",c),function(e,t,a){const r=a.load("jupyterlab"),{commands:n}=e;n.addCommand(p.exportUrdf,{label:r.__("Export to URDF"),icon:l,isEnabled:()=>Boolean(t.currentWidget),execute:d.executeExportURDF(t)})}(e,r,o),s.registerCommand({name:"Export to URDF",id:p.exportUrdf})}}}}]);