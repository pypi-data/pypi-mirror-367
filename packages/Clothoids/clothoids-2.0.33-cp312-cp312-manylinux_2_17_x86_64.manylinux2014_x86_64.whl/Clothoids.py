# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Clothoids
else:
    import _Clothoids

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Clothoids.delete_SwigPyIterator

    def value(self):
        return _Clothoids.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Clothoids.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Clothoids.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Clothoids.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Clothoids.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Clothoids.SwigPyIterator_copy(self)

    def next(self):
        return _Clothoids.SwigPyIterator_next(self)

    def __next__(self):
        return _Clothoids.SwigPyIterator___next__(self)

    def previous(self):
        return _Clothoids.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Clothoids.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Clothoids.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Clothoids.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Clothoids.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Clothoids.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Clothoids.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Clothoids.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Clothoids:
_Clothoids.SwigPyIterator_swigregister(SwigPyIterator)
class ClothoidCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Clothoids.ClothoidCurve_swiginit(self, _Clothoids.new_ClothoidCurve(*args))

    def build(self, x0, y0, theta0, k, dk, L):
        return _Clothoids.ClothoidCurve_build(self, x0, y0, theta0, k, dk, L)

    def build_G1(self, x0, y0, theta0, x1, y1, theta1, tol=1e-12):
        return _Clothoids.ClothoidCurve_build_G1(self, x0, y0, theta0, x1, y1, theta1, tol)

    def length(self):
        return _Clothoids.ClothoidCurve_length(self)

    def eval(self, s):
        return _Clothoids.ClothoidCurve_eval(self, s)

    def curvature_min_max(self):
        return _Clothoids.ClothoidCurve_curvature_min_max(self)

    def kappa(self, s):
        return _Clothoids.ClothoidCurve_kappa(self, s)

    def theta(self, s):
        return _Clothoids.ClothoidCurve_theta(self, s)

    def theta_D(self, s):
        return _Clothoids.ClothoidCurve_theta_D(self, s)

    def theta_DD(self, s):
        return _Clothoids.ClothoidCurve_theta_DD(self, s)

    def theta_DDD(self, s):
        return _Clothoids.ClothoidCurve_theta_DDD(self, s)
    __swig_destroy__ = _Clothoids.delete_ClothoidCurve

# Register ClothoidCurve in _Clothoids:
_Clothoids.ClothoidCurve_swigregister(ClothoidCurve)
class ClothoidList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Clothoids.ClothoidList_swiginit(self, _Clothoids.new_ClothoidList(*args))

    def build_G1(self, *args):
        return _Clothoids.ClothoidList_build_G1(self, *args)

    def build(self, x0, y0, theta0, s, kappa):
        return _Clothoids.ClothoidList_build(self, x0, y0, theta0, s, kappa)

    def length(self):
        return _Clothoids.ClothoidList_length(self)

    def make_closed(self):
        return _Clothoids.ClothoidList_make_closed(self)

    def make_open(self):
        return _Clothoids.ClothoidList_make_open(self)

    def eval(self, *args):
        return _Clothoids.ClothoidList_eval(self, *args)

    def eval_ISO(self, *args):
        return _Clothoids.ClothoidList_eval_ISO(self, *args)

    def evaluate(self, s):
        return _Clothoids.ClothoidList_evaluate(self, s)

    def theta(self, s):
        return _Clothoids.ClothoidList_theta(self, s)

    def theta_D(self, s):
        return _Clothoids.ClothoidList_theta_D(self, s)

    def theta_DD(self, s):
        return _Clothoids.ClothoidList_theta_DD(self, s)

    def theta_DDD(self, s):
        return _Clothoids.ClothoidList_theta_DDD(self, s)

    def collision(self, cl_list):
        return _Clothoids.ClothoidList_collision(self, cl_list)

    def collision_ISO(self, offs_this_cl, cl_list, offs_in_cl):
        return _Clothoids.ClothoidList_collision_ISO(self, offs_this_cl, cl_list, offs_in_cl)

    def findST1(self, x, y):
        return _Clothoids.ClothoidList_findST1(self, x, y)

    def closest_point_ISO(self, *args):
        return _Clothoids.ClothoidList_closest_point_ISO(self, *args)

    def closest_point_in_s_range_ISO(self, x, y, s_begin, s_end):
        return _Clothoids.ClothoidList_closest_point_in_s_range_ISO(self, x, y, s_begin, s_end)
    __swig_destroy__ = _Clothoids.delete_ClothoidList

# Register ClothoidList in _Clothoids:
_Clothoids.ClothoidList_swigregister(ClothoidList)
class G2solve3arc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _Clothoids.G2solve3arc_swiginit(self, _Clothoids.new_G2solve3arc())

    def build(self, x0, y0, theta0, kappa0, x1, y1, theta1, kappa1, Dmax=0, dmax=0):
        return _Clothoids.G2solve3arc_build(self, x0, y0, theta0, kappa0, x1, y1, theta1, kappa1, Dmax, dmax)

    def build_fixed_length(self, s0, x0, y0, theta0, kappa0, s1, x1, y1, theta1, kappa1):
        return _Clothoids.G2solve3arc_build_fixed_length(self, s0, x0, y0, theta0, kappa0, s1, x1, y1, theta1, kappa1)

    def total_length(self):
        return _Clothoids.G2solve3arc_total_length(self)

    def theta(self, s):
        return _Clothoids.G2solve3arc_theta(self, s)

    def theta_D(self, s):
        return _Clothoids.G2solve3arc_theta_D(self, s)

    def theta_DD(self, s):
        return _Clothoids.G2solve3arc_theta_DD(self, s)

    def theta_DDD(self, s):
        return _Clothoids.G2solve3arc_theta_DDD(self, s)

    def X(self, s):
        return _Clothoids.G2solve3arc_X(self, s)

    def Y(self, s):
        return _Clothoids.G2solve3arc_Y(self, s)

    def evaluate(self, s):
        return _Clothoids.G2solve3arc_evaluate(self, s)

    def eval(self, *args):
        return _Clothoids.G2solve3arc_eval(self, *args)

    def eval_D(self, s):
        return _Clothoids.G2solve3arc_eval_D(self, s)

    def eval_DD(self, s):
        return _Clothoids.G2solve3arc_eval_DD(self, s)

    def eval_DDD(self, s):
        return _Clothoids.G2solve3arc_eval_DDD(self, s)
    __swig_destroy__ = _Clothoids.delete_G2solve3arc

# Register G2solve3arc in _Clothoids:
_Clothoids.G2solve3arc_swigregister(G2solve3arc)

