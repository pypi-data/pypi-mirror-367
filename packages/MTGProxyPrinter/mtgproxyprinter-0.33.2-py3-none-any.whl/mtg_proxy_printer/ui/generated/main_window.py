# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '/mnt/Daten/Projekte/MTGProxyPrinter/mtg_proxy_printer/resources/ui/main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1050, 700)
        MainWindow.setToolButtonStyle(QtCore.Qt.ToolButtonFollowStyle)
        self.central_widget = CentralWidget(MainWindow)
        self.central_widget.setObjectName("central_widget")
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1050, 28))
        self.menubar.setObjectName("menubar")
        self.menu_file = QtWidgets.QMenu(self.menubar)
        self.menu_file.setObjectName("menu_file")
        self.menu_export = QtWidgets.QMenu(self.menu_file)
        icon = QtGui.QIcon.fromTheme("document-export")
        self.menu_export.setIcon(icon)
        self.menu_export.setObjectName("menu_export")
        self.menu_application = QtWidgets.QMenu(self.menubar)
        self.menu_application.setObjectName("menu_application")
        self.menu_edit = QtWidgets.QMenu(self.menubar)
        self.menu_edit.setObjectName("menu_edit")
        self.menuWeb_links = QtWidgets.QMenu(self.menubar)
        self.menuWeb_links.setObjectName("menuWeb_links")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setToolButtonStyle(QtCore.Qt.ToolButtonTextBesideIcon)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.action_quit = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("application-exit")
        self.action_quit.setIcon(icon)
        self.action_quit.setMenuRole(QtWidgets.QAction.QuitRole)
        self.action_quit.setObjectName("action_quit")
        self.action_print = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("document-print-direct")
        self.action_print.setIcon(icon)
        self.action_print.setObjectName("action_print")
        self.action_print_preview = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("document-print-preview")
        self.action_print_preview.setIcon(icon)
        self.action_print_preview.setObjectName("action_print_preview")
        self.action_print_pdf = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("viewpdf")
        self.action_print_pdf.setIcon(icon)
        self.action_print_pdf.setObjectName("action_print_pdf")
        self.action_discard_page = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("document-close")
        self.action_discard_page.setIcon(icon)
        self.action_discard_page.setObjectName("action_discard_page")
        self.action_show_settings = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("configure")
        self.action_show_settings.setIcon(icon)
        self.action_show_settings.setMenuRole(QtWidgets.QAction.PreferencesRole)
        self.action_show_settings.setObjectName("action_show_settings")
        self.action_download_card_data = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("edit-download")
        self.action_download_card_data.setIcon(icon)
        self.action_download_card_data.setObjectName("action_download_card_data")
        self.action_new_page = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("document-new")
        self.action_new_page.setIcon(icon)
        self.action_new_page.setObjectName("action_new_page")
        self.action_save_document = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("document-save")
        self.action_save_document.setIcon(icon)
        self.action_save_document.setObjectName("action_save_document")
        self.action_new_document = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("document-replace")
        self.action_new_document.setIcon(icon)
        self.action_new_document.setObjectName("action_new_document")
        self.action_load_document = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("document-open")
        self.action_load_document.setIcon(icon)
        self.action_load_document.setObjectName("action_load_document")
        self.action_save_as = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("document-save-as")
        self.action_save_as.setIcon(icon)
        self.action_save_as.setObjectName("action_save_as")
        self.action_show_about_dialog = QtWidgets.QAction(MainWindow)
        self.action_show_about_dialog.setMenuRole(QtWidgets.QAction.AboutRole)
        self.action_show_about_dialog.setObjectName("action_show_about_dialog")
        self.action_show_changelog = QtWidgets.QAction(MainWindow)
        self.action_show_changelog.setObjectName("action_show_changelog")
        self.action_compact_document = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("format-align-vertical-top")
        self.action_compact_document.setIcon(icon)
        self.action_compact_document.setObjectName("action_compact_document")
        self.action_edit_document_settings = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("document-properties")
        self.action_edit_document_settings.setIcon(icon)
        self.action_edit_document_settings.setObjectName("action_edit_document_settings")
        self.action_import_deck_list = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("document-import")
        self.action_import_deck_list.setIcon(icon)
        self.action_import_deck_list.setObjectName("action_import_deck_list")
        self.action_cleanup_local_image_cache = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("edit-clear-history")
        self.action_cleanup_local_image_cache.setIcon(icon)
        self.action_cleanup_local_image_cache.setObjectName("action_cleanup_local_image_cache")
        self.action_show_toolbar = QtWidgets.QAction(MainWindow)
        self.action_show_toolbar.setCheckable(True)
        self.action_show_toolbar.setChecked(True)
        self.action_show_toolbar.setObjectName("action_show_toolbar")
        self.action_download_missing_card_images = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("edit-download")
        self.action_download_missing_card_images.setIcon(icon)
        self.action_download_missing_card_images.setObjectName("action_download_missing_card_images")
        self.action_shuffle_document = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("shuffle")
        self.action_shuffle_document.setIcon(icon)
        self.action_shuffle_document.setObjectName("action_shuffle_document")
        self.action_undo = QtWidgets.QAction(MainWindow)
        self.action_undo.setEnabled(False)
        icon = QtGui.QIcon.fromTheme("edit-undo")
        self.action_undo.setIcon(icon)
        self.action_undo.setObjectName("action_undo")
        self.action_redo = QtWidgets.QAction(MainWindow)
        self.action_redo.setEnabled(False)
        icon = QtGui.QIcon.fromTheme("edit-redo")
        self.action_redo.setIcon(icon)
        self.action_redo.setObjectName("action_redo")
        self.action_add_empty_card = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("list-add")
        self.action_add_empty_card.setIcon(icon)
        self.action_add_empty_card.setObjectName("action_add_empty_card")
        self.action_add_custom_cards = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("list-add")
        self.action_add_custom_cards.setIcon(icon)
        self.action_add_custom_cards.setObjectName("action_add_custom_cards")
        self.action_export_png = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("document-export")
        self.action_export_png.setIcon(icon)
        self.action_export_png.setObjectName("action_export_png")
        self.action_export_card_images = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("document-export")
        self.action_export_card_images.setIcon(icon)
        self.action_export_card_images.setObjectName("action_export_card_images")
        self.action_web_source_code = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("globe")
        self.action_web_source_code.setIcon(icon)
        self.action_web_source_code.setObjectName("action_web_source_code")
        self.action_web_source_code_github = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("globe")
        self.action_web_source_code_github.setIcon(icon)
        self.action_web_source_code_github.setObjectName("action_web_source_code_github")
        self.action_web_contribute_translations = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("translate")
        self.action_web_contribute_translations.setIcon(icon)
        self.action_web_contribute_translations.setObjectName("action_web_contribute_translations")
        self.action_web_kofi = QtWidgets.QAction(MainWindow)
        self.action_web_kofi.setObjectName("action_web_kofi")
        self.action_web_project_on_pypi = QtWidgets.QAction(MainWindow)
        icon = QtGui.QIcon.fromTheme("globe")
        self.action_web_project_on_pypi.setIcon(icon)
        self.action_web_project_on_pypi.setObjectName("action_web_project_on_pypi")
        self.menu_export.addAction(self.action_print_pdf)
        self.menu_export.addAction(self.action_export_png)
        self.menu_export.addSeparator()
        self.menu_export.addAction(self.action_export_card_images)
        self.menu_file.addAction(self.action_new_document)
        self.menu_file.addAction(self.action_load_document)
        self.menu_file.addAction(self.action_save_document)
        self.menu_file.addAction(self.action_save_as)
        self.menu_file.addSeparator()
        self.menu_file.addAction(self.action_print_preview)
        self.menu_file.addAction(self.action_print)
        self.menu_file.addAction(self.menu_export.menuAction())
        self.menu_file.addSeparator()
        self.menu_file.addAction(self.action_import_deck_list)
        self.menu_file.addAction(self.action_add_custom_cards)
        self.menu_application.addAction(self.action_show_settings)
        self.menu_application.addAction(self.action_show_toolbar)
        self.menu_application.addAction(self.action_download_card_data)
        self.menu_application.addAction(self.action_cleanup_local_image_cache)
        self.menu_application.addSeparator()
        self.menu_application.addAction(self.action_show_changelog)
        self.menu_application.addAction(self.action_show_about_dialog)
        self.menu_application.addSeparator()
        self.menu_application.addAction(self.action_quit)
        self.menu_edit.addAction(self.action_undo)
        self.menu_edit.addAction(self.action_redo)
        self.menu_edit.addSeparator()
        self.menu_edit.addAction(self.action_edit_document_settings)
        self.menu_edit.addAction(self.action_compact_document)
        self.menu_edit.addAction(self.action_shuffle_document)
        self.menu_edit.addAction(self.action_download_missing_card_images)
        self.menu_edit.addSeparator()
        self.menu_edit.addAction(self.action_new_page)
        self.menu_edit.addAction(self.action_add_empty_card)
        self.menu_edit.addAction(self.action_discard_page)
        self.menuWeb_links.addAction(self.action_web_source_code)
        self.menuWeb_links.addAction(self.action_web_source_code_github)
        self.menuWeb_links.addAction(self.action_web_project_on_pypi)
        self.menuWeb_links.addSeparator()
        self.menuWeb_links.addAction(self.action_web_contribute_translations)
        self.menuWeb_links.addAction(self.action_web_kofi)
        self.menubar.addAction(self.menu_application.menuAction())
        self.menubar.addAction(self.menu_file.menuAction())
        self.menubar.addAction(self.menu_edit.menuAction())
        self.menubar.addAction(self.menuWeb_links.menuAction())
        self.toolBar.addAction(self.action_load_document)
        self.toolBar.addAction(self.action_save_document)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.action_undo)
        self.toolBar.addAction(self.action_redo)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.action_print_preview)
        self.toolBar.addAction(self.action_print)
        self.toolBar.addAction(self.action_print_pdf)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.action_new_page)
        self.toolBar.addAction(self.action_discard_page)

        self.retranslateUi(MainWindow)
        self.action_show_toolbar.toggled['bool'].connect(self.toolBar.setVisible) # type: ignore
        self.toolBar.visibilityChanged['bool'].connect(self.action_show_toolbar.setChecked) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MTGProxyPrinter"))
        self.menu_file.setTitle(_translate("MainWindow", "Fi&le"))
        self.menu_export.setTitle(_translate("MainWindow", "Export"))
        self.menu_application.setTitle(_translate("MainWindow", "Application"))
        self.menu_edit.setTitle(_translate("MainWindow", "Edit"))
        self.menuWeb_links.setTitle(_translate("MainWindow", "Web links"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "Show toolbar"))
        self.action_quit.setText(_translate("MainWindow", "&Quit"))
        self.action_quit.setShortcut(_translate("MainWindow", "Ctrl+Q"))
        self.action_print.setText(_translate("MainWindow", "&Print"))
        self.action_print.setToolTip(_translate("MainWindow", "Print the current document"))
        self.action_print.setShortcut(_translate("MainWindow", "Ctrl+P"))
        self.action_print_preview.setText(_translate("MainWindow", "&Show print preview"))
        self.action_print_preview.setToolTip(_translate("MainWindow", "Show print preview window"))
        self.action_print_pdf.setText(_translate("MainWindow", "&Create PDF"))
        self.action_print_pdf.setToolTip(_translate("MainWindow", "Create a PDF document"))
        self.action_discard_page.setText(_translate("MainWindow", "Discard page"))
        self.action_discard_page.setToolTip(_translate("MainWindow", "Discard this page."))
        self.action_show_settings.setText(_translate("MainWindow", "Settings"))
        self.action_download_card_data.setText(_translate("MainWindow", "Update card data"))
        self.action_new_page.setText(_translate("MainWindow", "New Page"))
        self.action_new_page.setToolTip(_translate("MainWindow", "Add a new, empty page."))
        self.action_save_document.setText(_translate("MainWindow", "Save"))
        self.action_save_document.setShortcut(_translate("MainWindow", "Ctrl+S"))
        self.action_new_document.setText(_translate("MainWindow", "New"))
        self.action_new_document.setShortcut(_translate("MainWindow", "Ctrl+N"))
        self.action_load_document.setText(_translate("MainWindow", "Load"))
        self.action_load_document.setShortcut(_translate("MainWindow", "Ctrl+L"))
        self.action_save_as.setText(_translate("MainWindow", "Save as …"))
        self.action_show_about_dialog.setText(_translate("MainWindow", "About …"))
        self.action_show_changelog.setText(_translate("MainWindow", "Show Changelog"))
        self.action_compact_document.setText(_translate("MainWindow", "Compact document"))
        self.action_compact_document.setToolTip(_translate("MainWindow", "Minimize page count: Fill empty slots on pages by moving cards from the end of the document"))
        self.action_edit_document_settings.setText(_translate("MainWindow", "Edit document settings"))
        self.action_edit_document_settings.setToolTip(_translate("MainWindow", "Configure page size, margins, image spacings for the currently edited document."))
        self.action_import_deck_list.setText(_translate("MainWindow", "Import deck list"))
        self.action_import_deck_list.setToolTip(_translate("MainWindow", "Import a deck list from online sources"))
        self.action_cleanup_local_image_cache.setText(_translate("MainWindow", "Cleanup card images"))
        self.action_cleanup_local_image_cache.setToolTip(_translate("MainWindow", "Delete locally stored card images you no longer need."))
        self.action_show_toolbar.setText(_translate("MainWindow", "Show toolbar"))
        self.action_show_toolbar.setShortcut(_translate("MainWindow", "Ctrl+M"))
        self.action_download_missing_card_images.setText(_translate("MainWindow", "Download missing card images"))
        self.action_shuffle_document.setText(_translate("MainWindow", "Shuffle document"))
        self.action_shuffle_document.setToolTip(_translate("MainWindow", "Randomly rearrange all card image.\n"
"If you want to quickly print a full deck for playing,\n"
"use this to reduce the initial deck shuffling required"))
        self.action_undo.setText(_translate("MainWindow", "Undo"))
        self.action_redo.setText(_translate("MainWindow", "Redo"))
        self.action_add_empty_card.setText(_translate("MainWindow", "Add empty card to page"))
        self.action_add_empty_card.setToolTip(_translate("MainWindow", "Add an empty spacer filling a card slot"))
        self.action_add_custom_cards.setText(_translate("MainWindow", "Add custom cards"))
        self.action_export_png.setText(_translate("MainWindow", "Export as image sequence"))
        self.action_export_png.setToolTip(_translate("MainWindow", "Export document as an image sequence"))
        self.action_export_card_images.setText(_translate("MainWindow", "Export individual card images"))
        self.action_export_card_images.setToolTip(_translate("MainWindow", "Export all card images to a directory"))
        self.action_web_source_code.setText(_translate("MainWindow", "Source Code"))
        self.action_web_source_code_github.setText(_translate("MainWindow", "Source Code (GitHub)"))
        self.action_web_contribute_translations.setText(_translate("MainWindow", "Contribute Translations"))
        self.action_web_kofi.setText(_translate("MainWindow", "Support development on Ko-Fi"))
        self.action_web_project_on_pypi.setText(_translate("MainWindow", "Project on PyPI"))
from mtg_proxy_printer.ui.central_widget import CentralWidget
