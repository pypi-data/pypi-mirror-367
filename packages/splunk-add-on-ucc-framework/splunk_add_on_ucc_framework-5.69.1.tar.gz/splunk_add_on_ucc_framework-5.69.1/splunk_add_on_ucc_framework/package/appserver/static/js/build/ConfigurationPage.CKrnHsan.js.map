{"version":3,"mappings":"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","names":["CustomTab","tab","customCompontentContext","useContext","CustomComponentContext","loading","setLoading","useState","divRef","useRef","appName","getUnifiedConfigs","loadCustomTab","resolve","customComp","Control","getBuildDirPath","external","loadedCustomtab","useEffect","jsxs","Fragment","_","jsx","ButtonWrapper","styled","ConfigurationFormView","serviceName","form","error","setError","isSubmitting","setIsSubmitting","currentServiceState","setCurrentServiceState","abortController","getRequest","generateEndPointUrl","err","caughtError","data","handleSubmit","event","handleFormSubmit","set","customComponentContext","PageContext","pageContext","BaseFormView","PAGE_CONF","MODE_CONFIG","UCCButton","WaitSpinnerWrapper","PropTypes","ConfigurationTable","selectedTab","updateIsPageOpen","entity","setEntity","isConfigurationPageStyle","STYLE_PAGE","handleRequestOpen","MODE_CREATE","handleModalDialogClose","generateModalDialog","EntityModal","handleOpenPageStyleDialog","row","mode","formlabel","MODE_CLONE","handlePageDialogClose","generatePageDialog","EntityPage","getTableWrapper","TableWrapper","TableContextProvider","ConfigurationTable$1","memo","DownloadButton","props","Button","ArrowBroadUnderbarDown","fileUrl","OpenApiDownloadButton","StyledTypography","Typography","UccCredit","unifiedConfigs","uccVersion","Link","StyledHeaderControls","Row","ColumnLayout","WrapBar","TabBar","ConfigurationPage","invariant","title","description","subDescription","tabs","platform","usePlatform","filteredTabs","shouldHideForPlatform","permittedTabNames","useMemo","isComponentMounted","activeTabId","setActiveTabId","isPageOpen","setIsPageOpen","queryTabValue","useQuery","handleChange","useCallback","e","selectedTabId","getCustomTab","React","getTabContent","TabComponent","ErrorBoundary","PageContextProvider","TitleComponent","SubTitleComponent","SubDescription","ToastMessages"],"ignoreList":[],"sources":["../../src/components/CustomTab/CustomTab.tsx","../../src/components/ConfigurationFormView.jsx","../../src/components/ConfigurationTable.jsx","../../src/components/DownloadButton/DownloadButton.tsx","../../src/components/DownloadButton/OpenApiDownloadBtn.tsx","../../src/components/UCCCredit/UCCCredit.tsx","../../src/pages/Configuration/ConfigurationPage.tsx"],"sourcesContent":["import React, { useContext, useEffect, useRef, useState } from 'react';\nimport { _ } from '@splunk/ui-utils/i18n';\nimport { getUnifiedConfigs } from '../../util/util';\nimport { getBuildDirPath } from '../../util/script';\nimport { CustomTabConstructor } from './CustomTabBase';\nimport { Tab } from './CustomTab.types';\nimport CustomComponentContext from '../../context/CustomComponentContext';\n\ninterface CustomTabProps {\n    tab: Tab;\n}\n\nconst CustomTab: React.FC<CustomTabProps> = ({ tab }) => {\n    const customCompontentContext = useContext(CustomComponentContext);\n\n    const [loading, setLoading] = useState(true);\n    const divRef = useRef<HTMLDivElement>(null);\n\n    const globalConfig = getUnifiedConfigs();\n    const appName = globalConfig.meta.name;\n\n    const loadCustomTab = (): Promise<CustomTabConstructor> =>\n        new Promise((resolve) => {\n            const customComp = tab?.customTab?.src\n                ? customCompontentContext?.[tab?.customTab?.src]\n                : undefined;\n\n            if (customComp?.type === 'tab') {\n                const Control = customComp.component;\n                resolve(Control);\n            } else if (tab.customTab?.type === 'external') {\n                import(\n                    /* @vite-ignore */ `${getBuildDirPath()}/custom/${tab.customTab.src}.js`\n                ).then((external) => {\n                    const Control = external.default;\n                    resolve(Control);\n                });\n            } else {\n                // eslint-disable-next-line import/no-dynamic-require, global-require\n                require([`app/${appName}/js/build/custom/${tab.customTab!.src}`], (\n                    loadedCustomtab\n                ) => {\n                    resolve(loadedCustomtab);\n                });\n            }\n        });\n\n    useEffect(() => {\n        loadCustomTab().then((Control) => {\n            if (divRef.current) {\n                const customControl = new Control(tab, divRef.current);\n                customControl.render();\n                setLoading(false);\n            }\n        });\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <>\n            {loading && _('Loading...')}\n            <div ref={divRef} style={{ visibility: loading ? 'hidden' : 'visible' }} />\n        </>\n    );\n};\n\nexport default CustomTab;\n","import React, { useRef, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { _ } from '@splunk/ui-utils/i18n';\nimport styled from 'styled-components';\n\nimport BaseFormView from './BaseFormView/BaseFormView';\nimport { UCCButton } from './UCCButton/UCCButton';\nimport { getRequest, generateEndPointUrl } from '../util/api';\nimport { MODE_CONFIG } from '../constants/modes';\nimport { WaitSpinnerWrapper } from './table/CustomTableStyle';\nimport { PAGE_CONF } from '../constants/pages';\nimport PageContext from '../context/PageContext';\nimport CustomComponentContext from '../context/CustomComponentContext';\n\nconst ButtonWrapper = styled.div`\n    margin-left: 270px !important;\n    width: 150px;\n`;\n\nfunction ConfigurationFormView({ serviceName }) {\n    const form = useRef(); // nosemgrep: typescript.react.security.audit.react-no-refs.react-no-refs\n    const [error, setError] = useState(null);\n    const [isSubmitting, setIsSubmitting] = useState(false);\n    const [currentServiceState, setCurrentServiceState] = useState({});\n\n    useEffect(() => {\n        const abortController = new AbortController();\n        getRequest({\n            endpointUrl: generateEndPointUrl(`settings/${encodeURIComponent(serviceName)}`),\n            handleError: true,\n            signal: abortController.signal,\n            callbackOnError: (err) => {\n                if (abortController.signal.aborted) {\n                    return;\n                }\n                setError(err);\n            },\n        })\n            .catch((caughtError) => {\n                if (abortController.signal.aborted) {\n                    return null;\n                }\n                throw caughtError;\n            })\n            .then((data) => {\n                if (!data) {\n                    return;\n                }\n                setCurrentServiceState(data.entry[0].content);\n            });\n\n        return () => {\n            abortController.abort();\n        };\n    }, [serviceName]);\n\n    /**\n     * @param event {React.MouseEvent<HTMLButtonElement>}\n     */\n    const handleSubmit = (event) => {\n        form.current.handleSubmit(event);\n    };\n\n    const handleFormSubmit = (set) => {\n        setIsSubmitting(set);\n    };\n\n    if (error) {\n        throw error;\n    }\n\n    // Ref is used here to call submit method of form only\n    return Object.keys(currentServiceState).length ? (\n        <>\n            <CustomComponentContext.Consumer>\n                {(customComponentContext) => (\n                    <PageContext.Consumer>\n                        {(pageContext) => (\n                            <BaseFormView // nosemgrep: typescript.react.security.audit.react-no-refs.react-no-refs\n                                ref={form}\n                                page={PAGE_CONF}\n                                stanzaName={serviceName}\n                                serviceName=\"settings\"\n                                mode={MODE_CONFIG}\n                                currentServiceState={currentServiceState}\n                                handleFormSubmit={handleFormSubmit}\n                                pageContext={pageContext}\n                                customComponentContext={customComponentContext}\n                            />\n                        )}\n                    </PageContext.Consumer>\n                )}\n            </CustomComponentContext.Consumer>\n\n            <ButtonWrapper>\n                <UCCButton\n                    className=\"saveBtn\"\n                    label={_('Save')}\n                    onClick={handleSubmit}\n                    loading={isSubmitting}\n                />\n            </ButtonWrapper>\n        </>\n    ) : (\n        <WaitSpinnerWrapper size=\"medium\" />\n    );\n}\n\nConfigurationFormView.propTypes = {\n    serviceName: PropTypes.string.isRequired,\n};\n\nexport default ConfigurationFormView;\n","import React, { useState, memo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { TableContextProvider } from '../context/TableContext';\nimport TableWrapper from './table/TableWrapper';\nimport EntityModal from './EntityModal/EntityModal';\nimport EntityPage from './EntityPage/EntityPage';\nimport { MODE_CREATE, MODE_CLONE } from '../constants/modes';\nimport { PAGE_CONF } from '../constants/pages';\nimport { STYLE_PAGE } from '../constants/dialogStyles';\n\nfunction ConfigurationTable({ selectedTab, updateIsPageOpen }) {\n    const [entity, setEntity] = useState({ open: false });\n\n    const isConfigurationPageStyle = selectedTab.style === STYLE_PAGE;\n\n    useEffect(() => {\n        if (isConfigurationPageStyle) {\n            updateIsPageOpen(!!entity.open);\n        }\n    }, [updateIsPageOpen, isConfigurationPageStyle, entity]);\n\n    const handleRequestOpen = () => {\n        setEntity({\n            ...entity,\n            open: true,\n            mode: MODE_CREATE,\n            formLabel: selectedTab.formTitle\n                ? `Add ${selectedTab.formTitle}`\n                : `Add ${selectedTab.title}`,\n        });\n    };\n\n    // handle close request for modal style dialog\n    const handleModalDialogClose = () => {\n        setEntity({ ...entity, open: false });\n    };\n\n    // TODO: returnFocus ADDON-78884\n    // generate modal style dialog\n    const generateModalDialog = () => (\n        <EntityModal\n            page={PAGE_CONF}\n            open={entity.open}\n            handleRequestClose={handleModalDialogClose}\n            returnFocus={() => {}}\n            serviceName={selectedTab.name}\n            mode={MODE_CREATE}\n            formLabel={entity.formLabel}\n        />\n    );\n\n    // handle clone/edit request per row from table for page style dialog\n    const handleOpenPageStyleDialog = (row, mode) => {\n        const formlabel = selectedTab?.formTitle || selectedTab.title;\n        setEntity({\n            ...entity,\n            open: true,\n            stanzaName: row.name,\n            formLabel: mode === MODE_CLONE ? `Clone ${formlabel}` : `Update ${formlabel}`,\n            mode,\n        });\n    };\n\n    // handle close request for page style dialog\n    const handlePageDialogClose = () => {\n        setEntity({ ...entity, open: false });\n    };\n\n    // generate page style dialog\n    const generatePageDialog = () => (\n        <EntityPage\n            open={entity.open}\n            handleRequestClose={handlePageDialogClose}\n            serviceName={selectedTab.name}\n            stanzaName={entity.stanzaName}\n            mode={entity.mode}\n            formLabel={entity.formLabel}\n            page={PAGE_CONF}\n        />\n    );\n\n    const getTableWrapper = () => (\n        <div\n            style={\n                isConfigurationPageStyle && entity.open ? { display: 'none' } : { display: 'block' }\n            }\n        >\n            <TableWrapper\n                page={PAGE_CONF}\n                serviceName={selectedTab.name}\n                handleRequestModalOpen={() => handleRequestOpen()}\n                handleOpenPageStyleDialog={handleOpenPageStyleDialog}\n            />\n        </div>\n    );\n\n    return (\n        <TableContextProvider value={null}>\n            {isConfigurationPageStyle && entity.open && generatePageDialog()}\n            {getTableWrapper()}\n            {!isConfigurationPageStyle && entity.open && generateModalDialog()}\n        </TableContextProvider>\n    );\n}\n\nConfigurationTable.propTypes = {\n    selectedTab: PropTypes.object,\n    updateIsPageOpen: PropTypes.func,\n};\n\nexport default memo(ConfigurationTable);\n","import React, { ReactElement } from 'react';\nimport Button from '@splunk/react-ui/Button';\nimport ArrowBroadUnderbarDown from '@splunk/react-icons/ArrowBroadUnderbarDown';\n\ninterface DownloadButtonProps {\n    // needs to be same domain if not it will just open link\n    fileUrl: string;\n    fileNameAfterDownload: string;\n    children: ReactElement | ReactElement[] | string;\n}\n\nfunction DownloadButton(props: DownloadButtonProps) {\n    return (\n        <Button\n            target=\"_blank\"\n            to={props.fileUrl}\n            download={props.fileNameAfterDownload}\n            data-test=\"downloadButton\"\n            icon={<ArrowBroadUnderbarDown />}\n        >\n            {props.children}\n        </Button>\n    );\n}\n\nexport default DownloadButton;\n","import React from 'react';\nimport { getBuildDirPath } from '../../util/script';\nimport DownloadButton from './DownloadButton';\n\nconst fileUrl = getBuildDirPath().replace('js/build', 'openapi.json');\n\nfunction OpenApiDownloadButton() {\n    return (\n        <DownloadButton fileUrl={fileUrl} fileNameAfterDownload=\"openapi.json\">\n            OpenAPI.json\n        </DownloadButton>\n    );\n}\n\nexport default OpenApiDownloadButton;\n","import React from 'react';\nimport { Typography } from '@splunk/react-ui/Typography';\nimport styled from 'styled-components';\nimport Link from '@splunk/react-ui/Link';\nimport { getUnifiedConfigs } from '../../util/util';\n\nconst StyledTypography = styled(Typography)`\n    font-size: 0.8em;\n`;\n\nconst UccCredit = () => {\n    const unifiedConfigs = getUnifiedConfigs();\n\n    if (unifiedConfigs?.meta?.hideUCCVersion) {\n        return null;\n    }\n    // eslint-disable-next-line no-underscore-dangle\n    const uccVersion = unifiedConfigs?.meta?._uccVersion ?? null;\n    return (\n        <StyledTypography\n            as=\"span\"\n            title=\"Splunk Add-On UCC framework is a framework to generate UI-based Splunk add-ons. It includes UI, REST handlers, Modular inputs, OAuth and Alert action templates.\"\n            data-test=\"ucc-credit\"\n        >\n            Made with{' '}\n            <Link to=\"https://splunk.github.io/addonfactory-ucc-generator/\" openInNewContext>\n                UCC\n            </Link>{' '}\n            {uccVersion}\n        </StyledTypography>\n    );\n};\n\nexport default UccCredit;\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { _ } from '@splunk/ui-utils/i18n';\nimport TabBar, { TabBarChangeHandler } from '@splunk/react-ui/TabBar';\nimport ToastMessages from '@splunk/react-toast-notifications/ToastMessages';\nimport ColumnLayout from '@splunk/react-ui/ColumnLayout';\n\nimport styled from 'styled-components';\nimport { z } from 'zod';\nimport useQuery from '../../hooks/useQuery';\nimport { getUnifiedConfigs } from '../../util/util';\nimport { TitleComponent, SubTitleComponent } from '../Input/InputPageStyle';\nimport ErrorBoundary from '../../components/ErrorBoundary/ErrorBoundary';\nimport CustomTab from '../../components/CustomTab/CustomTab';\nimport ConfigurationFormView from '../../components/ConfigurationFormView';\nimport ConfigurationTable from '../../components/ConfigurationTable';\nimport OpenApiDownloadButton from '../../components/DownloadButton/OpenApiDownloadBtn';\nimport SubDescription from '../../components/SubDescription/SubDescription';\nimport UccCredit from '../../components/UCCCredit/UCCCredit';\nimport { TabSchema } from '../../types/globalConfig/pages';\nimport { PageContextProvider } from '../../context/PageContext';\nimport { shouldHideForPlatform } from '../../util/pageContext';\nimport { usePlatform } from '../../hooks/usePlatform';\nimport { invariant } from '../../util/invariant';\n\nconst StyledHeaderControls = styled.div`\n    display: inline-flex;\n    align-items: center;\n    justify-content: end;\n    flex-wrap: wrap;\n    gap: 0.4rem;\n`;\n\nconst Row = styled(ColumnLayout.Row)`\n    padding: 5px 0px;\n\n    .dropdown {\n        text-align: right;\n    }\n\n    .input_button {\n        text-align: right;\n        margin-right: 0px;\n    }\n`;\n\ntype Tab = z.infer<typeof TabSchema>;\n\nconst WrapBar = styled(TabBar)`\n    flex-wrap: wrap;\n`;\n\nfunction ConfigurationPage() {\n    const unifiedConfigs = getUnifiedConfigs();\n    invariant(unifiedConfigs.pages.configuration, 'Configuration page not found in global config');\n    const { title, description, subDescription, tabs } = unifiedConfigs.pages.configuration;\n\n    const platform = usePlatform(unifiedConfigs, 'configuration');\n\n    const filteredTabs = tabs.filter(\n        (tab) => !shouldHideForPlatform(tab.hideForPlatform, platform)\n    );\n\n    const permittedTabNames = useMemo(() => filteredTabs.map((tab) => tab.name), [filteredTabs]);\n    const isComponentMounted = useRef(false);\n\n    const [activeTabId, setActiveTabId] = useState(filteredTabs[0].name);\n    const [isPageOpen, setIsPageOpen] = useState(false);\n\n    const query = useQuery();\n    const queryTabValue = query?.get('tab');\n\n    // Run initially and when query is updated to set active tab based on initial URL\n    // or while navigating browser history\n    useEffect(() => {\n        // Only change active tab when provided tab in query is specified in globalConfig\n        // and if the current active tab is not same as provided in query\n        if (\n            queryTabValue &&\n            permittedTabNames.includes(queryTabValue) &&\n            queryTabValue !== activeTabId\n        ) {\n            setActiveTabId(queryTabValue);\n        }\n    }, [queryTabValue, permittedTabNames, activeTabId]);\n\n    useEffect(() => {\n        isComponentMounted.current = true;\n        return () => {\n            isComponentMounted.current = false;\n        };\n    }, []);\n\n    const handleChange = useCallback<TabBarChangeHandler>((e, { selectedTabId }) => {\n        if (isComponentMounted.current && selectedTabId) {\n            setActiveTabId(selectedTabId);\n            setIsPageOpen(false);\n        }\n    }, []);\n\n    const updateIsPageOpen = (data: boolean) => {\n        if (isComponentMounted.current) {\n            setIsPageOpen(data);\n        }\n    };\n\n    const getCustomTab = (tab: Tab) => React.createElement(CustomTab, { tab });\n\n    const getTabContent = (tab: Tab) => {\n        let TabComponent;\n        if (tab?.customTab) {\n            TabComponent = getCustomTab(tab);\n        } else {\n            TabComponent = tab?.table ? (\n                <ConfigurationTable\n                    key={tab.name}\n                    selectedTab={tab}\n                    updateIsPageOpen={updateIsPageOpen}\n                />\n            ) : (\n                <ConfigurationFormView key={tab.name} serviceName={tab.name} />\n            );\n        }\n\n        return (\n            <div\n                key={tab.name}\n                style={tab.name !== activeTabId ? { display: 'none' } : { display: 'block' }}\n                id={`${tab.name}Tab`}\n            >\n                {TabComponent}\n            </div>\n        );\n    };\n\n    return (\n        <ErrorBoundary>\n            <PageContextProvider platform={platform}>\n                <div style={isPageOpen ? { display: 'none' } : { display: 'block' }}>\n                    <ColumnLayout gutter={8}>\n                        <Row>\n                            <ColumnLayout.Column span={9}>\n                                <TitleComponent>{_(title)}</TitleComponent>\n                                <SubTitleComponent>{_(description || '')}</SubTitleComponent>\n                                <SubDescription\n                                    text={subDescription?.text || ''}\n                                    links={subDescription?.links}\n                                />\n                            </ColumnLayout.Column>\n                            <ColumnLayout.Column span={3} style={{ textAlignLast: 'right' }}>\n                                <StyledHeaderControls>\n                                    <UccCredit />\n                                    <OpenApiDownloadButton />\n                                </StyledHeaderControls>\n                            </ColumnLayout.Column>\n                        </Row>\n                    </ColumnLayout>\n                    <WrapBar activeTabId={activeTabId} onChange={handleChange}>\n                        {filteredTabs.map((tab) => (\n                            <TabBar.Tab key={tab.name} label={_(tab.title)} tabId={tab.name} />\n                        ))}\n                    </WrapBar>\n                </div>\n                {filteredTabs.map((tab) => getTabContent(tab))}\n                <ToastMessages position=\"top-right\" />\n            </PageContextProvider>\n        </ErrorBoundary>\n    );\n}\n\nexport default ConfigurationPage;\n"],"file":"ConfigurationPage.CKrnHsan.js"}