{"version":3,"file":"Dashboard.DataIngestion.C2vpnEog.js","sources":["../../node_modules/@splunk/react-ui/Paragraph.js","../../src/pages/Dashboard/DataIngestionModal.tsx","../../src/pages/Dashboard/DashboardModal.tsx","../../src/pages/Dashboard/DataIngestion.tsx"],"sourcesContent":["/******/ (() => {\n    // webpackBootstrap\n    /******/ \"use strict\";\n    /******/ // The require scope\n    /******/    var e = {};\n    /******/\n    /************************************************************************/\n    /******/ /* webpack/runtime/compat get default export */\n    /******/    (() => {\n        /******/ // getDefaultExport function for compatibility with non-harmony modules\n        /******/ e.n = r => {\n            /******/ var t = r && r.__esModule ? \n            /******/ () => r[\"default\"]\n            /******/ : () => r\n            /******/;\n            e.d(t, {\n                a: t\n            });\n            /******/            return t;\n            /******/        };\n        /******/    })();\n    /******/\n    /******/ /* webpack/runtime/define property getters */\n    /******/    (() => {\n        /******/ // define getter functions for harmony exports\n        /******/ e.d = (r, t) => {\n            /******/ for (var n in t) {\n                /******/ if (e.o(t, n) && !e.o(r, n)) {\n                    /******/ Object.defineProperty(r, n, {\n                        enumerable: true,\n                        get: t[n]\n                    });\n                    /******/                }\n                /******/            }\n            /******/        };\n        /******/    })();\n    /******/\n    /******/ /* webpack/runtime/hasOwnProperty shorthand */\n    /******/    (() => {\n        /******/ e.o = (e, r) => Object.prototype.hasOwnProperty.call(e, r)\n        /******/;\n    })();\n    /******/\n    /******/ /* webpack/runtime/make namespace object */\n    /******/    (() => {\n        /******/ // define __esModule on exports\n        /******/ e.r = e => {\n            /******/ if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\n                /******/ Object.defineProperty(e, Symbol.toStringTag, {\n                    value: \"Module\"\n                });\n                /******/            }\n            /******/            Object.defineProperty(e, \"__esModule\", {\n                value: true\n            });\n            /******/        };\n        /******/    })();\n    /******/\n    /************************************************************************/    var r = {};\n    // ESM COMPAT FLAG\n        e.r(r);\n    // EXPORTS\n        e.d(r, {\n        default: () => /* reexport */ m\n    });\n    // CONCATENATED MODULE: external \"react\"\n    const t = require(\"react\");\n    var n =  e.n(t);\n    // CONCATENATED MODULE: external \"prop-types\"\n    const o = require(\"prop-types\");\n    var a =  e.n(o);\n    // CONCATENATED MODULE: external \"styled-components\"\n    const i = require(\"styled-components\");\n    var l =  e.n(i);\n    // CONCATENATED MODULE: external \"@splunk/themes\"\n    const c = require(\"@splunk/themes\");\n    // CONCATENATED MODULE: ./src/Paragraph/ParagraphStyles.ts\n    var s = l().p.withConfig({\n        displayName: \"ParagraphStyles__Styled\",\n        componentId: \"sic5zk-0\"\n    })([ \"\", \";\", \";\", \"\" ], c.mixins.reset(\"block\"), c.mixins.typography(\"body\"), (0, \n    c.pick)({\n        enterprise: (0, i.css)([ \"margin-bottom:calc(\", \" / 2);\" ], c.variables.lineHeight),\n        prisma: (0, i.css)([ \"margin-bottom:14px;\" ])\n    }));\n    // CONCATENATED MODULE: ./src/Paragraph/Paragraph.tsx\n    function u() {\n        return u = Object.assign ? Object.assign.bind() : function(e) {\n            for (var r = 1; r < arguments.length; r++) {\n                var t = arguments[r];\n                for (var n in t) {\n                    ({}).hasOwnProperty.call(t, n) && (e[n] = t[n]);\n                }\n            }\n            return e;\n        }, u.apply(null, arguments);\n    }\n    function p(e, r) {\n        if (null == e) return {};\n        var t, n, o = f(e, r);\n        if (Object.getOwnPropertySymbols) {\n            var a = Object.getOwnPropertySymbols(e);\n            for (n = 0; n < a.length; n++) {\n                t = a[n], r.includes(t) || {}.propertyIsEnumerable.call(e, t) && (o[t] = e[t]);\n            }\n        }\n        return o;\n    }\n    function f(e, r) {\n        if (null == e) return {};\n        var t = {};\n        for (var n in e) {\n            if ({}.hasOwnProperty.call(e, n)) {\n                if (r.includes(n)) continue;\n                t[n] = e[n];\n            }\n        }\n        return t;\n    }\n    var d = {\n        children: a().node,\n        elementRef: a().oneOfType([ a().func, a().object ])\n    };\n    function y(e) {\n        var r = e.children, t = e.elementRef, o = p(e, [ \"children\", \"elementRef\" ]);\n        // @docs-props-type ParagraphPropsBase\n                \n        return n().createElement(s, u({\n            \"data-test\": \"paragraph\",\n            ref: t\n        }, o), r);\n    }\n    y.propTypes = d;\n    /* harmony default export */    const m = y;\n    // CONCATENATED MODULE: ./src/Paragraph/index.ts\n    module.exports = r;\n    /******/})();","import Modal from '@splunk/react-ui/Modal';\nimport React, { ReactElement, useCallback, useEffect } from 'react';\nimport styled from 'styled-components';\n\nimport variables from '@splunk/themes/variables';\nimport Button from '@splunk/react-ui/Button';\nimport Dropdown from '@splunk/react-ui/Dropdown';\nimport Menu from '@splunk/react-ui/Menu';\nimport Checkmark from '@splunk/react-icons/Checkmark';\nimport P from '@splunk/react-ui/Paragraph';\n\nimport { makeVisualAdjustmentsOnDataIngestionModal } from './utils';\nimport { UCCButton } from '../../components/UCCButton/UCCButton';\n\nconst ModalWrapper = styled(Modal)`\n    width: 60vw;\n    height: 80vh;\n    margin-top: 3vh;\n`;\n\nconst ModalHeader = styled(Modal.Header)`\n    background-color: ${variables.neutral200};\n`;\n\nconst ModalFooter = styled(Modal.Footer)`\n    background-color: ${variables.neutral200};\n`;\n\nconst ModalBody = styled(Modal.Body)`\n    background-color: ${variables.neutral200};\n    padding: 15px 30px;\n    height: 70vh;\n`;\n\nconst FooterButtonGroup = styled('div')`\n    display: grid;\n    grid-template-columns: 0.35fr 1fr;\n    margin: 0px ${variables.spacingSmall};\n\n    .footerBtn:first-child {\n        justify-self: start;\n    }\n\n    .footerBtn:last-child {\n        justify-self: end;\n    }\n`;\n\nexport const DataIngestionModal = ({\n    open = false,\n    handleRequestClose,\n    title,\n    acceptBtnLabel = 'Done',\n    dataIngestionDropdownValues,\n    selectValueForDropdownInModal,\n    setSelectValueForDropdownInModal,\n    children,\n}: {\n    open?: boolean;\n    handleRequestClose: () => void;\n    title?: string;\n    acceptBtnLabel?: string;\n    dataIngestionDropdownValues: Record<string, string>[];\n    selectValueForDropdownInModal: string;\n    setSelectValueForDropdownInModal: React.Dispatch<React.SetStateAction<string | null>>;\n    children: ReactElement;\n}) => {\n    const toggle = (\n        <Button label={selectValueForDropdownInModal} style={{ minWidth: '160px' }} isMenu />\n    );\n    const items: React.ReactElement[] = [];\n\n    const filteredItemByValue = (findItem: string) =>\n        dataIngestionDropdownValues.filter((item) => item.value === findItem)[0];\n    const filteredItemByLabel = useCallback(\n        (findItem: string) => dataIngestionDropdownValues.find((item) => item.label === findItem),\n        [dataIngestionDropdownValues]\n    );\n    // add selected value\n    const selectedItem = filteredItemByValue(selectValueForDropdownInModal);\n    items.push(\n        <React.Fragment key={`selected-${selectedItem?.value}`}>\n            <Menu.Item key={`selected-${selectedItem?.label}`} className=\"dropdown_menu_item\">\n                <Checkmark style={{ color: '#00A4FD', marginRight: '2px' }} />\n                {selectedItem?.label}\n            </Menu.Item>\n            <Menu.Divider key=\"divider\" />\n        </React.Fragment>\n    );\n\n    // add list in dropdown except the selected value\n    dataIngestionDropdownValues.forEach((item, index) => {\n        if (selectValueForDropdownInModal !== item.value) {\n            items.push(\n                // eslint-disable-next-line react/no-array-index-key\n                <Menu.Item key={`${item.label}-${index}`} className=\"dropdown_menu_item\">\n                    {item.label}\n                </Menu.Item>\n            );\n        }\n    });\n\n    // handle onchange dropdown values\n    const handleDropdownClick = useCallback(\n        (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n            const selectedValue = (e.target as HTMLElement).textContent || '';\n            const findSelectedValue = filteredItemByLabel(selectedValue);\n            if (findSelectedValue) {\n                setSelectValueForDropdownInModal(findSelectedValue.value);\n            }\n        },\n        [filteredItemByLabel, setSelectValueForDropdownInModal]\n    );\n\n    useEffect(() => {\n        makeVisualAdjustmentsOnDataIngestionModal();\n    }, [open]);\n\n    // TODO: returnFocus ADDON-78884\n    return (\n        <ModalWrapper returnFocus={() => {}} open={open} onRequestClose={handleRequestClose}>\n            <ModalHeader\n                onRequestClose={handleRequestClose}\n                title={`Data ingestion details (By ${title})`}\n            />\n            <ModalBody>\n                {children}\n                <div\n                    id=\"data_ingestion_modal_dropdown\"\n                    data-test=\"data_ingestion_modal_dropdown\"\n                    className=\"invisible_before_moving\"\n                >\n                    <P id=\"data_ingestion_dropdown_label\" data-test=\"data_ingestion_dropdown_label\">\n                        {title}\n                    </P>\n                    <Dropdown toggle={toggle}>\n                        <Menu\n                            stopScrollPropagation\n                            style={{\n                                maxHeight: '40vh',\n                                overflow: 'auto',\n                                padding: '5px 0px',\n                                margin: '10px 0px',\n                            }}\n                            onClick={handleDropdownClick}\n                        >\n                            {items}\n                        </Menu>\n                    </Dropdown>\n                </div>\n            </ModalBody>\n            <ModalFooter>\n                <FooterButtonGroup>\n                    <Button\n                        id=\"open_search_on_visualization\"\n                        data-test=\"open_search_on_visualization\"\n                        label=\"View ingested events in search\"\n                        openInNewContext\n                        onClick={() => {\n                            const searchButtonForNumberOfEvents = document.querySelector(\n                                '#data_ingestion_modal_events_count_viz [data-test=\"open-search-button\"]'\n                            ) as HTMLElement | null;\n\n                            if (searchButtonForNumberOfEvents) {\n                                searchButtonForNumberOfEvents.click();\n                            } else {\n                                const searchButtonForDataVolume = document.querySelector(\n                                    '#data_ingestion_modal_data_volume_viz [data-test=\"open-search-button\"]'\n                                ) as HTMLElement | null;\n                                searchButtonForDataVolume?.click();\n                            }\n                        }}\n                    />\n                    <UCCButton\n                        id=\"done_button_footer\"\n                        data-test=\"done_button_footer\"\n                        className=\"footerBtn\"\n                        onClick={handleRequestClose}\n                        label={acceptBtnLabel}\n                    />\n                </FooterButtonGroup>\n            </ModalFooter>\n        </ModalWrapper>\n    );\n};\n","import React, { useEffect, useCallback, useRef, useState, useMemo } from 'react';\nimport { DashboardCore } from '@splunk/dashboard-core';\nimport { DashboardContextProvider } from '@splunk/dashboard-context';\nimport EnterpriseViewOnlyPreset from '@splunk/dashboard-presets/EnterpriseViewOnlyPreset';\nimport type { DashboardCoreApi } from '@splunk/dashboard-types';\nimport { EventType } from '@splunk/react-events-viewer/types/common-types';\nimport { getUnifiedConfigs } from '../../util/util';\n\nimport {\n    createNewQueryForDataVolumeInModal,\n    createNewQueryForNumberOfEventsInModal,\n    fetchDropdownValuesFromQuery,\n    getActionButtons,\n    loadDashboardJsonDefinition,\n    queryMap,\n} from './utils';\nimport { FEATURE_FLAGS } from './consts';\nimport { FieldValue, SearchResponse } from '../../util/searchUtil';\n\n/**\n * @param {object} props\n * @param {string} props.selectValueForDropdownInModal state for value in the modal\n * @param {string} props.selectTitleForDropdownInModal state for title in the modal\n * @param {string} props.setDataIngestionDropdownValues set state for dropdown values in modal\n */\nexport const DashboardModal = ({\n    selectValueForDropdownInModal,\n    selectTitleForDropdownInModal,\n    setDataIngestionDropdownValues,\n}: {\n    selectValueForDropdownInModal: string;\n    selectTitleForDropdownInModal: string;\n    setDataIngestionDropdownValues: React.Dispatch<React.SetStateAction<object[]>>;\n}) => {\n    const dashboardCoreApi = useRef<DashboardCoreApi | null>(null);\n    const setDashboardCoreApi = useCallback((api: DashboardCoreApi | null) => {\n        dashboardCoreApi.current = api;\n    }, []);\n    const [dataIngestionModalDef, setDataIngestionModalDef] = useState<Record<\n        string,\n        unknown\n    > | null>(null);\n    const [dropdownFetchedValues, setDropdownFetchedValues] = useState<SearchResponse<EventType>[]>(\n        []\n    );\n\n    const globalConfig = useMemo(() => getUnifiedConfigs(), []);\n\n    const mergeInputValues = (\n        activeValues?: string[],\n        inactiveValues?: string[] | string\n    ): Record<string, string>[] => {\n        let safeInactiveValues: Record<string, string>[] = [];\n        if (typeof inactiveValues === 'string') {\n            safeInactiveValues = [{ label: `${inactiveValues} (disabled)`, value: inactiveValues }];\n        } else if (Array.isArray(inactiveValues)) {\n            safeInactiveValues = inactiveValues.map((item: string) => ({\n                label: `${item} (disabled)`,\n                value: item,\n            }));\n        }\n\n        let safeActiveValues: Record<string, string>[] = [];\n        if (typeof activeValues === 'string') {\n            safeActiveValues = [{ label: activeValues, value: activeValues }];\n        } else if (Array.isArray(activeValues)) {\n            safeActiveValues = activeValues.map((item: string) => ({\n                label: item,\n                value: item,\n            }));\n        }\n        return [...safeActiveValues, ...safeInactiveValues];\n    };\n\n    const processResults = (results: Record<string, string>[], fieldKey: string) =>\n        results.reduce((extractColumnsValues: Record<string, string>[], value) => {\n            if (queryMap[fieldKey] === value.field) {\n                const dropDownValues = JSON.parse(value.values);\n                return dropDownValues.map((item: FieldValue) => ({\n                    label: item.value,\n                    value: item.value,\n                }));\n            }\n            return extractColumnsValues;\n        }, []);\n\n    const updateModalData = useCallback(() => {\n        if (!dataIngestionModalDef) {\n            return null;\n        }\n\n        const copyDataIngestionModalJson = JSON.parse(JSON.stringify(dataIngestionModalDef));\n        let extractColumnsValues: Record<string, string>[] = [];\n\n        if (selectTitleForDropdownInModal === 'Input') {\n            const activeState = dropdownFetchedValues[0]?.results[0]?.Active;\n            const activeInputs = dropdownFetchedValues[0]?.results[0]?.event_input;\n            const inactiveInputs = dropdownFetchedValues[0]?.results[1]?.event_input;\n\n            // Handle cases where only active or inactive inputs exist\n            if (activeState === 'yes') {\n                extractColumnsValues = mergeInputValues(activeInputs, inactiveInputs);\n            } else if (activeState === 'no') {\n                extractColumnsValues = mergeInputValues(inactiveInputs, activeInputs);\n            }\n        } else if (selectTitleForDropdownInModal === 'Account') {\n            extractColumnsValues = processResults(\n                dropdownFetchedValues[1]?.results || [],\n                selectTitleForDropdownInModal\n            );\n        } else {\n            extractColumnsValues = processResults(\n                dropdownFetchedValues[2]?.results || [],\n                selectTitleForDropdownInModal\n            );\n        }\n\n        setDataIngestionDropdownValues(extractColumnsValues);\n\n        const eventsQuery = createNewQueryForNumberOfEventsInModal(\n            selectTitleForDropdownInModal,\n            selectValueForDropdownInModal,\n            copyDataIngestionModalJson.dataSources.ds_search_1.options.query\n        );\n        const dataVolumeQuery = createNewQueryForDataVolumeInModal(\n            selectTitleForDropdownInModal,\n            selectValueForDropdownInModal,\n            copyDataIngestionModalJson.dataSources.data_ingestion_modal_data_volume_ds.options.query\n        );\n\n        copyDataIngestionModalJson.dataSources.data_ingestion_modal_data_volume_ds.options.query =\n            dataVolumeQuery;\n        copyDataIngestionModalJson.dataSources.ds_search_1.options.query = eventsQuery;\n\n        // Modify visualizations only for specific cases\n        if (\n            selectTitleForDropdownInModal === 'Input' ||\n            selectTitleForDropdownInModal === 'Account'\n        ) {\n            // Remove data volume visualization for \"Input\" and \"Account\"\n            delete copyDataIngestionModalJson.visualizations.data_ingestion_modal_data_volume_viz;\n            delete copyDataIngestionModalJson.dataSources.data_ingestion_modal_data_volume_ds;\n            delete copyDataIngestionModalJson.layout.structure[2];\n            copyDataIngestionModalJson.layout.structure =\n                copyDataIngestionModalJson.layout.structure.filter(\n                    (item: Record<string, unknown>) => item !== null\n                );\n            copyDataIngestionModalJson.layout.structure[2].position.y = 80;\n        } else if (selectTitleForDropdownInModal === 'Host') {\n            // Remove event count visualization for \"Host\"\n            delete copyDataIngestionModalJson.visualizations.data_ingestion_modal_events_count_viz;\n            delete copyDataIngestionModalJson.dataSources.ds_search_1;\n            delete copyDataIngestionModalJson.layout.structure[3];\n            copyDataIngestionModalJson.layout.structure =\n                copyDataIngestionModalJson.layout.structure.filter(\n                    (item: Record<string, unknown>) => item !== null\n                );\n        }\n\n        return copyDataIngestionModalJson;\n    }, [\n        dataIngestionModalDef,\n        dropdownFetchedValues,\n        selectTitleForDropdownInModal,\n        selectValueForDropdownInModal,\n        setDataIngestionDropdownValues,\n    ]);\n\n    useEffect(() => {\n        const fetchDropdownValues = async () => {\n            const values = await fetchDropdownValuesFromQuery(globalConfig);\n            setDropdownFetchedValues(values);\n        };\n\n        fetchDropdownValues();\n    }, [globalConfig]);\n\n    // Update the dashboard when the modal data changes\n    useEffect(() => {\n        const updateDefinitionForDashboardModal = async () => {\n            if (dashboardCoreApi.current && dataIngestionModalDef) {\n                const updatedModalData = await updateModalData();\n                if (updatedModalData) {\n                    dashboardCoreApi.current?.updateDefinition(updatedModalData);\n                }\n            }\n        };\n\n        updateDefinitionForDashboardModal();\n    }, [dataIngestionModalDef, selectValueForDropdownInModal, updateModalData]);\n\n    useEffect(() => {\n        loadDashboardJsonDefinition(\n            'data_ingestion_modal_definition.json',\n            setDataIngestionModalDef\n        );\n    }, []);\n\n    return dataIngestionModalDef ? (\n        <DashboardContextProvider preset={EnterpriseViewOnlyPreset} featureFlags={FEATURE_FLAGS}>\n            <DashboardCore\n                width=\"100%\"\n                height=\"auto\"\n                dashboardCoreApiRef={setDashboardCoreApi}\n                actionMenus={getActionButtons('data_ingestion')}\n            />\n        </DashboardContextProvider>\n    ) : null;\n};\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { DashboardCore } from '@splunk/dashboard-core';\nimport { DashboardContextProvider } from '@splunk/dashboard-context';\nimport EnterpriseViewOnlyPreset from '@splunk/dashboard-presets/EnterpriseViewOnlyPreset';\nimport Search from '@splunk/react-ui/Search';\nimport Message from '@splunk/react-ui/Message';\nimport type { DashboardCoreApi, PluginEventHandler } from '@splunk/dashboard-types';\nimport { debounce } from 'lodash';\nimport TabLayout from '@splunk/react-ui/TabLayout';\n\nimport { z } from 'zod';\nimport {\n    createNewQueryBasedOnSearchAndHideTraffic,\n    getActionButtons,\n    makeVisualAdjustmentsOnDataIngestionPage,\n    addDescriptionToExpandedViewByOptions,\n} from './utils';\nimport { DataIngestionModal } from './DataIngestionModal';\nimport { DashboardModal } from './DashboardModal';\nimport { FEATURE_FLAGS } from './consts';\n\nconst VIEW_BY_INFO_MAP: Record<string, string> = {\n    Input: 'Volume metrics are not available when the Input view is selected.',\n    Account: 'Volume metrics are not available when the Account view is selected.',\n    Host: 'Event metrics are not available when the Host view is selected.',\n};\n\nconst EventPayloadSchema = z.object({\n    payload: z\n        .object({\n            data: z\n                .object({\n                    fields: z.array(\n                        z.object({\n                            name: z.string(),\n                        })\n                    ),\n                })\n                .optional(),\n            cellIndex: z.number().optional(),\n            value: z.string().optional(),\n        })\n        .optional(),\n});\n\nexport const DataIngestionDashboard = ({\n    dashboardDefinition,\n}: {\n    dashboardDefinition: Record<string, unknown>;\n}) => {\n    const dashboardCoreApi = useRef<DashboardCoreApi | null>(null);\n    const [searchInput, setSearchInput] = useState('');\n    const [viewByInput, setViewByInput] = useState<string>('');\n    const [toggleNoTraffic, setToggleNoTraffic] = useState(false);\n    const [selectValueForDropdownInModal, setSelectValueForDropdownInModal] = useState<\n        string | null\n    >(null);\n    const [selectTitleForDropdownInModal, setSelectTitleForDropdownInModal] = useState<\n        string | null\n    >(null);\n    const [dataIngestionDropdownValues, setDataIngestionDropdownValues] = useState([{}]);\n    useEffect(() => {\n        makeVisualAdjustmentsOnDataIngestionPage();\n\n        // Select the target node for observing mutations\n        const targetNode = document.querySelector(\n            '[data-input-id=\"data_ingestion_table_input\"] button'\n        );\n        const config = { attributes: true };\n        const callback = (mutationsList: MutationRecord[]) => {\n            mutationsList.forEach((mutation: MutationRecord) => {\n                if (mutation.attributeName === 'data-test-value') {\n                    // Update the dashboard definition\n                    dashboardCoreApi.current?.updateDefinition(dashboardDefinition);\n                    setSearchInput('');\n                    setToggleNoTraffic(false);\n\n                    // Get the view-by option from the mutated element\n                    const viewByOption = (mutation.target as HTMLElement)?.getAttribute('label');\n                    setViewByInput(viewByOption || '');\n                }\n                if (mutation.attributeName === 'aria-expanded') {\n                    addDescriptionToExpandedViewByOptions(mutation.target as Element);\n                }\n            });\n        };\n\n        // Create a MutationObserver instance and start observing\n        const observer = new MutationObserver(callback);\n        if (targetNode) {\n            observer.observe(targetNode, config);\n        }\n\n        // Set the current \"view by\" option when the component mounts\n        const currentViewBy = document\n            .querySelector('[data-input-id=\"data_ingestion_table_input\"] button')\n            ?.getAttribute('label');\n\n        setViewByInput(currentViewBy || '');\n\n        // Clean-up function to disconnect the observer when the component unmounts\n        return () => {\n            if (observer && targetNode) {\n                observer.disconnect();\n            }\n        };\n    }, [dashboardDefinition]);\n\n    const setDashboardCoreApi = useCallback((api: DashboardCoreApi | null) => {\n        dashboardCoreApi.current = api;\n    }, []);\n\n    const debounceHandlerChangeData = useMemo(\n        () =>\n            debounce((searchValue, hideToggleValue) => {\n                const copyJson = JSON.parse(JSON.stringify(dashboardDefinition));\n\n                if (copyJson?.inputs?.data_ingestion_table_input?.options?.items?.length > 0) {\n                    const selectedLabel =\n                        document\n                            ?.querySelector('[data-input-id=\"data_ingestion_table_input\"] button')\n                            ?.getAttribute('label') || 'Source type';\n\n                    const item = copyJson.inputs.data_ingestion_table_input.options.items.find(\n                        (it: { label: string }) => it.label === selectedLabel\n                    );\n\n                    const newQuery = createNewQueryBasedOnSearchAndHideTraffic(\n                        searchValue,\n                        hideToggleValue,\n                        item.value,\n                        selectedLabel\n                    );\n                    copyJson.dataSources.data_ingestion_table_ds.options.query = newQuery;\n                    dashboardCoreApi.current?.updateDefinition(copyJson);\n                }\n            }, 1000),\n        [dashboardDefinition]\n    );\n\n    const handleChangeSearch = (e: unknown, { value }: { value: string }) => {\n        setSearchInput(value);\n        debounceHandlerChangeData(value, toggleNoTraffic);\n    };\n\n    const infoMessage = VIEW_BY_INFO_MAP[viewByInput];\n\n    const handleDashboardEvent: PluginEventHandler = useCallback(async (event) => {\n        const result = EventPayloadSchema.safeParse(event);\n        if (!result.success) {\n            return;\n        }\n        const { payload } = result.data;\n        if (\n            event.type === 'datasource.done' &&\n            event.targetId === 'data_ingestion_table_ds' &&\n            payload?.data\n        ) {\n            const modalInputSelectorName = payload.data?.fields[0]?.name;\n            setSelectTitleForDropdownInModal(modalInputSelectorName);\n        }\n        if (\n            event.type === 'cell.click' &&\n            event.targetId === 'data_ingestion_table_viz' &&\n            payload?.cellIndex === 0 &&\n            payload.value\n        ) {\n            setSelectValueForDropdownInModal(payload.value);\n        }\n    }, []);\n\n    const dashboardPlugin = useMemo(\n        () => ({ onEventTrigger: handleDashboardEvent }),\n        [handleDashboardEvent]\n    );\n    return (\n        <DashboardContextProvider\n            preset={EnterpriseViewOnlyPreset}\n            initialDefinition={dashboardDefinition}\n            dashboardPlugin={dashboardPlugin}\n            featureFlags={FEATURE_FLAGS}\n        >\n            <>\n                <DataIngestionModal\n                    open={!!selectValueForDropdownInModal}\n                    handleRequestClose={() => setSelectValueForDropdownInModal(null)}\n                    title={selectTitleForDropdownInModal || ''}\n                    acceptBtnLabel=\"Done\"\n                    dataIngestionDropdownValues={dataIngestionDropdownValues}\n                    selectValueForDropdownInModal={selectValueForDropdownInModal || ''}\n                    setSelectValueForDropdownInModal={setSelectValueForDropdownInModal}\n                >\n                    <TabLayout.Panel\n                        label=\"data_ingestion_modal\"\n                        panelId=\"dataIngestionModalDefTabPanel\"\n                    >\n                        <DashboardModal\n                            selectValueForDropdownInModal={selectValueForDropdownInModal || ''}\n                            selectTitleForDropdownInModal={selectTitleForDropdownInModal || ''}\n                            setDataIngestionDropdownValues={setDataIngestionDropdownValues}\n                        />\n                    </TabLayout.Panel>\n                </DataIngestionModal>\n\n                <DashboardCore\n                    width=\"100%\"\n                    height=\"auto\"\n                    dashboardCoreApiRef={setDashboardCoreApi}\n                    actionMenus={getActionButtons('data_ingestion')}\n                />\n\n                <div\n                    id=\"data_ingestion_search\"\n                    data-test=\"data_ingestion_search\"\n                    className=\"invisible_before_moving\"\n                >\n                    <p id=\"data_ingestion_search_label\" data-test=\"data_ingestion_search_label\">\n                        Search\n                    </p>\n                    <Search\n                        id=\"data_ingestion_search_input\"\n                        onChange={handleChangeSearch}\n                        value={searchInput}\n                        style={{ minWidth: '150px', gridRow: '6', gridColumn: '1' }}\n                    />\n                </div>\n                <div\n                    id=\"info_message_for_data_ingestion\"\n                    data-test=\"info_message_for_data_ingestion\"\n                    className=\"invisible_before_moving\"\n                >\n                    {infoMessage && (\n                        <Message appearance=\"fill\" type=\"info\">\n                            {infoMessage}\n                        </Message>\n                    )}\n                </div>\n            </>\n        </DashboardContextProvider>\n    );\n};\n\nexport default DataIngestionDashboard;\n"],"names":["e","r","n","m","t","require$$0","o","require$$1","a","i","require$$2","l","c","require$$3","s","u","p","f","d","y","ParagraphModule","ModalWrapper","styled","Modal","ModalHeader","variables","ModalFooter","ModalBody","FooterButtonGroup","DataIngestionModal","open","handleRequestClose","title","acceptBtnLabel","dataIngestionDropdownValues","selectValueForDropdownInModal","setSelectValueForDropdownInModal","children","toggle","jsx","Button","items","filteredItemByValue","findItem","item","filteredItemByLabel","useCallback","selectedItem","jsxs","React","Menu","Checkmark","index","handleDropdownClick","selectedValue","findSelectedValue","useEffect","makeVisualAdjustmentsOnDataIngestionModal","P","Dropdown","searchButtonForNumberOfEvents","UCCButton","DashboardModal","selectTitleForDropdownInModal","setDataIngestionDropdownValues","dashboardCoreApi","useRef","setDashboardCoreApi","api","dataIngestionModalDef","setDataIngestionModalDef","useState","dropdownFetchedValues","setDropdownFetchedValues","globalConfig","useMemo","getUnifiedConfigs","mergeInputValues","activeValues","inactiveValues","safeInactiveValues","safeActiveValues","processResults","results","fieldKey","extractColumnsValues","value","queryMap","updateModalData","copyDataIngestionModalJson","activeState","activeInputs","inactiveInputs","eventsQuery","createNewQueryForNumberOfEventsInModal","dataVolumeQuery","createNewQueryForDataVolumeInModal","values","fetchDropdownValuesFromQuery","updatedModalData","loadDashboardJsonDefinition","DashboardContextProvider","EnterpriseViewOnlyPreset","FEATURE_FLAGS","DashboardCore","getActionButtons","VIEW_BY_INFO_MAP","EventPayloadSchema","z.object","z.array","z.string","z.number","DataIngestionDashboard","dashboardDefinition","searchInput","setSearchInput","viewByInput","setViewByInput","toggleNoTraffic","setToggleNoTraffic","setSelectTitleForDropdownInModal","makeVisualAdjustmentsOnDataIngestionPage","targetNode","config","callback","mutationsList","mutation","viewByOption","addDescriptionToExpandedViewByOptions","observer","currentViewBy","debounceHandlerChangeData","debounce","searchValue","hideToggleValue","copyJson","selectedLabel","it","newQuery","createNewQueryBasedOnSearchAndHideTraffic","handleChangeSearch","infoMessage","handleDashboardEvent","event","result","payload","modalInputSelectorName","dashboardPlugin","Fragment","TabLayout","Search","Message"],"mappings":"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","x_google_ignoreList":[0]}