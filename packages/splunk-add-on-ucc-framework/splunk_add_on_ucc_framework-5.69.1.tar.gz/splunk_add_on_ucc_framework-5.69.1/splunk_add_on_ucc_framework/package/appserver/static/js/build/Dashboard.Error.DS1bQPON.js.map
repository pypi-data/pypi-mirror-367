{"version":3,"file":"Dashboard.Error.DS1bQPON.js","sources":["../../src/pages/Dashboard/ErrorPageConfig.ts","../../src/pages/Dashboard/Error.tsx"],"sourcesContent":["// export const TROUBLESHOOTING_CONFIG = {\n//     BASIC_ERROR_TYPES: [\n//         {\n//             header: 'Authentication',\n//             description:\n//                 'Brief description for authentication errors and a generic approach to address it.',\n//         },\n//         {\n//             header: 'Permission',\n//             description:\n//                 'Brief description for permission errors and a generic approach to address it.',\n//         },\n//         {\n//             header: 'Connection',\n//             description:\n//                 'Brief description for connection errors and a generic approach to address it.',\n//         },\n//         {\n//             header: 'Configuration',\n//             description:\n//                 'Brief description for configuration errors and a generic approach to address it.',\n//         },\n//     ],\n//     LIST_INTRODUCTION_TEXT: 'Here are common error types for Splunk TAs:',\n//     CLOSE_LABEL: 'Close',\n//     DESCRIPTION: 'Description',\n//     TITLE: 'Troubleshoot add-on errors',\n//     INFO_MESSAGE:\n//         'These are generic instructions provided by Splunk. For detailed troubleshooting guidance, please refer to each TAâ€™s documentation if there is one.',\n// };\n\nexport const OPEN_SEARCH_LABEL = 'Open in Search';\n\n// export const TROUBLESHOOTING_BTN_LABEL = 'Troubleshoot add-on errors';\n","import React, { useEffect } from 'react';\nimport { DashboardCore } from '@splunk/dashboard-core';\nimport { DashboardContextProvider } from '@splunk/dashboard-context';\nimport EnterpriseViewOnlyPreset from '@splunk/dashboard-presets/EnterpriseViewOnlyPreset';\nimport Button from '@splunk/react-ui/Button';\nimport variables from '@splunk/themes/variables';\nimport styled from 'styled-components';\nimport SearchJob from '@splunk/search-job';\nimport type { DashboardCoreApi } from '@splunk/dashboard-types';\n\nimport { getActionButtons, waitForElementToDisplayAndMoveThemToCanvas } from './utils';\nimport { OPEN_SEARCH_LABEL } from './ErrorPageConfig';\nimport { getUnifiedConfigs } from '../../util/util';\nimport { FEATURE_FLAGS } from './consts';\n\nconst OpenSearchStyledBtn = styled(Button)`\n    max-width: fit-content;\n    font-size: ${variables.fontSize};\n    align-content: flex-end;\n    place-self: end;\n    grid-column: 2;\n    grid-row: 4;\n    bottom: 8px;\n`;\n\n// const OpenTroubleshootingBtn = styled(OpenSearchStyledBtn)` // commented out for now but will be needed latter on\n//     margin-right: 145px;\n// `;\n\nexport const ErrorDashboard = ({\n    dashboardDefinition,\n}: {\n    dashboardDefinition: Record<string, unknown>;\n}) => {\n    // const [displayTroubleShootingModal, setDisplayTroubleShootingModal] = useState(false); // commented out for now but will be needed latter on\n    const dashboardCoreApi = React.useRef<DashboardCoreApi | null>();\n\n    const globalConfig = getUnifiedConfigs();\n\n    const setDashboardCoreApi = React.useCallback((api: DashboardCoreApi | null) => {\n        dashboardCoreApi.current = api;\n    }, []);\n\n    useEffect(() => {\n        waitForElementToDisplayAndMoveThemToCanvas(\n            '[data-input-id=\"errors_tab_input\"][data-input-type=\"input.timerange\"]',\n            '#errors_tab_description_viz'\n        );\n\n        waitForElementToDisplayAndMoveThemToCanvas(\n            '[data-input-id=\"errors_type_input\"][data-input-type=\"input.multiselect\"]',\n            '#errors_tab_errors_list_viz'\n        );\n\n        waitForElementToDisplayAndMoveThemToCanvas(\n            '#open_search_error_events_tab_with_types',\n            '#errors_tab_errors_list_viz'\n        );\n        // waitForElementToDisplayAndMoveThemToCanvas( // commented out for now but will be needed latter on\n        //     '#open_trouble_shooting_overlay',\n        //     '#errors_tab_errors_list_viz'\n        // );\n    }, []);\n\n    useEffect(() => {\n        // dashboardCoreApi?.current at beginning is null so ignore that iteration\n        if (!dashboardCoreApi?.current) {\n            return () => {};\n        }\n\n        // search call to for error types\n        const mySearchJob = SearchJob.create(\n            {\n                search: `index=_internal source=*${globalConfig.meta.restRoot}* log_level=ERROR | dedup exc_l | table exc_l`,\n                earliest_time: '0', // all time\n                latest_time: 'now',\n            },\n            { cache: true, cancelOnUnload: true } // default cache 10min = 600 in seconds\n        );\n\n        const resultsSubscription = mySearchJob\n            .getResults()\n            .subscribe((results: { results?: Array<{ exc_l: string }> }) => {\n                if (results?.results?.length) {\n                    const copyJson = JSON.parse(JSON.stringify(dashboardDefinition));\n\n                    copyJson.inputs.errors_type_input.options.items = [\n                        {\n                            label: 'All',\n                            value: '*',\n                        },\n                    ];\n                    results.results\n                        .sort((a, b) => {\n                            const nameA = a.exc_l.toUpperCase(); // ignore upper and lowercase\n                            const nameB = b.exc_l.toUpperCase(); // ignore upper and lowercase\n                            if (nameA < nameB) {\n                                return -1;\n                            }\n                            if (nameA > nameB) {\n                                return 1;\n                            }\n\n                            // names must be equal\n                            return 0;\n                        })\n                        .forEach((result) =>\n                            copyJson.inputs.errors_type_input.options.items.push({\n                                label: result.exc_l,\n                                value: `\"${result.exc_l}\"`,\n                            })\n                        );\n\n                    dashboardCoreApi.current?.updateDefinition(copyJson);\n                }\n            });\n\n        return () => {\n            resultsSubscription.unsubscribe();\n        };\n    }, [dashboardDefinition, globalConfig.meta.restRoot, dashboardCoreApi]);\n\n    return dashboardDefinition ? (\n        <DashboardContextProvider\n            preset={EnterpriseViewOnlyPreset}\n            initialDefinition={dashboardDefinition}\n            featureFlags={FEATURE_FLAGS}\n        >\n            <>\n                <OpenSearchStyledBtn\n                    id=\"open_search_error_events_tab_with_types\"\n                    label={OPEN_SEARCH_LABEL}\n                    openInNewContext\n                    onClick={\n                        () =>\n                            (\n                                document.querySelector(\n                                    '#errors_tab_errors_list_viz [data-test=\"open-search-button\"]'\n                                ) as HTMLElement\n                            )?.click() // todo: no better easy way to get events table query\n                    }\n                />\n                {/* <OpenTroubleshootingBtn // commented out for now but will be needed latter on\n                    id=\"open_trouble_shooting_overlay\"\n                    label={TROUBLESHOOTING_BTN_LABEL}\n                    onClick={() => setDisplayTroubleShootingModal(true)}\n                    icon={<QuestionCircle width={16} height={16} />}\n                /> */}\n                {/* <DashboardInfoModal  // commented out for now but will be needed latter on\n                    title={TROUBLESHOOTING_CONFIG.TITLE}\n                    subtitle={TROUBLESHOOTING_CONFIG.DESCRIPTION}\n                    open={displayTroubleShootingModal}\n                    handleRequestClose={() => setDisplayTroubleShootingModal(false)}\n                    closeBtnLabel={TROUBLESHOOTING_CONFIG.CLOSE_LABEL}\n                    infoMessage={TROUBLESHOOTING_CONFIG.INFO_MESSAGE}\n                    listIntroductionText={TROUBLESHOOTING_CONFIG.LIST_INTRODUCTION_TEXT}\n                    errorTypesInfo={TROUBLESHOOTING_CONFIG.BASIC_ERROR_TYPES}\n                    troubleshootingButton={{\n                        link: globalConfig.pages.dashboard?.troubleshooting_url,\n                    }}\n                /> */}\n                <DashboardCore\n                    width=\"100%\"\n                    height=\"auto\"\n                    actionMenus={getActionButtons('error')}\n                    dashboardCoreApiRef={setDashboardCoreApi}\n                />\n            </>\n        </DashboardContextProvider>\n    ) : null;\n};\n\nexport default ErrorDashboard;\n"],"names":["OPEN_SEARCH_LABEL","OpenSearchStyledBtn","styled","Button","variables","ErrorDashboard","dashboardDefinition","dashboardCoreApi","React","globalConfig","getUnifiedConfigs","setDashboardCoreApi","api","useEffect","waitForElementToDisplayAndMoveThemToCanvas","resultsSubscription","SearchJob","results","copyJson","a","nameA","nameB","result","jsx","DashboardContextProvider","EnterpriseViewOnlyPreset","FEATURE_FLAGS","jsxs","Fragment","DashboardCore","getActionButtons"],"mappings":"saA+BO,MAAMA,EAAoB,iBChB3BC,EAAsBC,EAAOC,CAAM;AAAA;AAAA,iBAExBC,EAAU,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYtBC,EAAiB,CAAC,CAC3B,oBAAAC,CACJ,IAEM,CAEF,MAAMC,EAAmBC,EAAM,OAAA,EAEzBC,EAAeC,EAAA,EAEfC,EAAsBH,EAAM,YAAaI,GAAiC,CAC5EL,EAAiB,QAAUK,CAC/B,EAAG,CAAA,CAAE,EAELC,OAAAA,EAAAA,UAAU,IAAM,CACZC,EACI,wEACA,6BAAA,EAGJA,EACI,2EACA,6BAAA,EAGJA,EACI,2CACA,6BAAA,CAMR,EAAG,CAAA,CAAE,EAELD,EAAAA,UAAU,IAAM,CAEZ,GAAI,CAACN,GAAkB,QACnB,MAAO,IAAM,CAAC,EAalB,MAAMQ,EATcC,EAAU,OAC1B,CACI,OAAQ,2BAA2BP,EAAa,KAAK,QAAQ,gDAC7D,cAAe,IACf,YAAa,KAAA,EAEjB,CAAE,MAAO,GAAM,eAAgB,EAAA,CAAK,EAInC,WAAA,EACA,UAAWQ,GAAoD,CAC5D,GAAIA,GAAS,SAAS,OAAQ,CAC1B,MAAMC,EAAW,KAAK,MAAM,KAAK,UAAUZ,CAAmB,CAAC,EAE/DY,EAAS,OAAO,kBAAkB,QAAQ,MAAQ,CAC9C,CACI,MAAO,MACP,MAAO,GAAA,CACX,EAEJD,EAAQ,QACH,KAAK,CAACE,EAAG,IAAM,CACZ,MAAMC,EAAQD,EAAE,MAAM,YAAA,EAChBE,EAAQ,EAAE,MAAM,YAAA,EACtB,OAAID,EAAQC,EACD,GAEPD,EAAQC,EACD,EAIJ,CACX,CAAC,EACA,QAASC,GACNJ,EAAS,OAAO,kBAAkB,QAAQ,MAAM,KAAK,CACjD,MAAOI,EAAO,MACd,MAAO,IAAIA,EAAO,KAAK,GAAA,CAC1B,CAAA,EAGTf,EAAiB,SAAS,iBAAiBW,CAAQ,CACvD,CACJ,CAAC,EAEL,MAAO,IAAM,CACTH,EAAoB,YAAA,CACxB,CACJ,EAAG,CAACT,EAAqBG,EAAa,KAAK,SAAUF,CAAgB,CAAC,EAE/DD,EACHiB,EAAAA,IAACC,EAAAA,yBAAA,CACG,OAAQC,EACR,kBAAmBnB,EACnB,aAAcoB,EAEd,SAAAC,EAAAA,KAAAC,WAAA,CACI,SAAA,CAAAL,EAAAA,IAACtB,EAAA,CACG,GAAG,0CACH,MAAOD,EACP,iBAAgB,GAChB,QACI,IAEQ,SAAS,cACL,8DAAA,GAEL,MAAA,CAAM,CAAA,EAsBrBuB,EAAAA,IAACM,EAAAA,cAAA,CACG,MAAM,OACN,OAAO,OACP,YAAaC,EAAiB,OAAO,EACrC,oBAAqBnB,CAAA,CAAA,CACzB,CAAA,CACJ,CAAA,CAAA,EAEJ,IACR"}