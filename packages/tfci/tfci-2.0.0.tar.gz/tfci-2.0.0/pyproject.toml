[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "tfci"
version = "2.0.0"
description = "Time Forecasting CI - 시계열 예측 라이브러리"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "TFCI Team", email = "rosci671233@gmail.com"}
]
maintainers = [
    {name = "TFCI Team", email = "rosci671233@gmail.com"}
]
keywords = ["time-series", "forecasting", "prophet", "machine-learning", "prediction"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "pandas>=1.3.0",
    "numpy>=1.21.0",
    "prophet>=1.1.0",
    "scikit-learn>=1.0.0",
    "tqdm>=4.62.0",
    "PyYAML>=6.0",
    "requests>=2.25.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
]
db = [
    "ibm-db>=3.2.0",
    "psycopg2-binary>=2.9.0",
    "pymongo>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/your-username/tfci"
Documentation = "https://github.com/rosci671233/tfci#readme"
Repository = "https://github.com/your-username/tfci"
Issues = "https://github.com/your-username/tfci/issues"

# [project.scripts] 섹션 제거 - 패키지로 사용할 예정



[tool.setuptools.packages.find]
where = ["."]
include = ["tfci*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.coverage.run]
source = ["."]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 