# Copyright 2024 SAFRAN SA
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import abc
import pandas as pd
import numpy as np

class ABCReductor(abc.ABC): 
    """
    This is the abstract class ruling the reducers class. The reducer is responsible for reducing the size of the system to be solved based on different hypotheses.
    
    Args:
        data (dict): A dictionary containing the reducers parameters.
        expl_dofs (pd.DataFrame): DataFrame describing the positioning of dofs. It is generated by ABCSystem objects.

    Attributes:
        expl_dofs (pd.DataFrame): DataFrame describing the positioning of dofs. It is generated by ABCSystem objects.
        
    """
    @property
    @abc.abstractmethod
    def factory_keyword(self)->str:
        """
        Returns:
            str: keyword that is used to call the creation of this class in the system factory.
        """
        ...
        
    def __init__(self,data:dict,expl_dofs:pd.DataFrame, *args):
        self.data = data
        self.expl_dofs = expl_dofs
        self.__post_init__(*args)
    
    def __post_init__(self, *args):
        """
        A post init method to be customized if needed when building new class.
        """
        pass
    
    def output_expl_dofs(self) -> pd.DataFrame:
        """
        Returns the explicit dof list after transformation by the reducer.
        
        Returns:
            pd.DataFrame: reduced explicit dof DataFrame after passing through the reducer.

        """
        return self.expl_dofs
    
    def reduce_vectorx(self,q:np.ndarray) -> np.ndarray:
        """
        Applies the reduce_vector method to the input vector of displacement.

        Args:
            q (np.ndarray): vector of displacement of full size.
        
        Returns:
            np.ndarray: reduced vector of displacement. 

        """
        return self.reduce_vector(q)

    @abc.abstractmethod
    def update_reductor(self,*args) -> None:
        """
        Using the given parameters, performs an update of the reductor and 
        generates its new transformation matrix 

        """
        pass
    
    @abc.abstractmethod
    def expand(self,q:np.ndarray) -> np.ndarray:
        """
        From reduced vector, performs the inverse transformation to retrieve the original vector.

        Args:
            q (np.ndarray): reduced vector of displacement

        Returns:
            np.ndarray: full size vector of displacement.
        """
        pass
    
    @abc.abstractmethod
    def reduce_vector(self,x:np.ndarray) -> np.ndarray:
        """
        From original vector, performs the transformation to get the reduced vector.

        Args:
            x (np.ndarray): full size vector.

        Returns:
            np.ndarray: reduced vector.
        """
        pass
    
    @abc.abstractmethod
    def reduce_matrix(self,dJdx:np.ndarray) -> np.ndarray:
        """
        From original matrix, perform the transformation to get the reduced matrix.

        Args:
            dJdx (np.ndarray): full size jacobian matrix with respect to displacement.

        Returns:
            np.ndarray: reduced size jacobian matrix with respect to displacement.
        """
        pass