name: 🧪 Test Suite
# 測試套件：運行所有測試確保代碼品質

on:
  push:
    branches: [main, dev]
    paths:
      - 'petsard/**'
      - 'tests/**'
      - 'pyproject.toml'
      - '.github/workflows/test-suite.yml'
  pull_request:
    branches: [main, dev]
    paths:
      - 'petsard/**'
      - 'tests/**'
      - 'pyproject.toml'
      - '.github/workflows/test-suite.yml'

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    continue-on-error: true  # 不強制要求測試通過才能合併

    strategy:
      matrix:
        python-version: ['3.10', '3.11']

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: 📦 Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: 🔧 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: 🔍 Run Ruff Code Quality Check
        id: ruff-check
        run: |
          echo "## 🔍 程式碼品質檢查 Code Quality Check" >> ruff_report.md
          echo "" >> ruff_report.md
          echo "**Python 版本**: ${{ matrix.python-version }}" >> ruff_report.md
          echo "**執行時間**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> ruff_report.md
          echo "" >> ruff_report.md

          # 運行 Ruff 檢查並捕獲結果
          if ruff check . --output-format=text > ruff_output.txt 2>&1; then
            echo "ruff_status=success" >> $GITHUB_OUTPUT
            echo "### ✅ 程式碼品質檢查通過 Code Quality Check Passed" >> ruff_report.md
            echo "" >> ruff_report.md
            echo "🎉 **所有程式碼都符合品質標準！** All code meets quality standards!" >> ruff_report.md
            echo "" >> ruff_report.md
            echo "**檢查項目 Checked Rules:**" >> ruff_report.md
            echo "- ✅ **E**: pycodestyle errors (程式碼風格錯誤)" >> ruff_report.md
            echo "- ✅ **W**: pycodestyle warnings (程式碼風格警告)" >> ruff_report.md
            echo "- ✅ **F**: pyflakes (未使用的導入、變數等)" >> ruff_report.md
            echo "- ✅ **I**: isort (導入排序)" >> ruff_report.md
            echo "- ✅ **B**: flake8-bugbear (常見錯誤模式)" >> ruff_report.md
            echo "- ✅ **C4**: flake8-comprehensions (列表推導式優化)" >> ruff_report.md
            echo "- ✅ **UP**: pyupgrade (Python 語法現代化)" >> ruff_report.md
          else
            echo "ruff_status=failed" >> $GITHUB_OUTPUT
            echo "### ❌ 程式碼品質檢查失敗 Code Quality Check Failed" >> ruff_report.md
            echo "" >> ruff_report.md
            
            # 分析錯誤並分類
            echo "#### 🔍 詳細錯誤分析 Detailed Error Analysis" >> ruff_report.md
            echo "" >> ruff_report.md
            
            # 統計各類錯誤數量
            E_COUNT=$(grep -c "^[^:]*:[^:]*:[^:]*: E" ruff_output.txt 2>/dev/null || echo "0")
            W_COUNT=$(grep -c "^[^:]*:[^:]*:[^:]*: W" ruff_output.txt 2>/dev/null || echo "0")
            F_COUNT=$(grep -c "^[^:]*:[^:]*:[^:]*: F" ruff_output.txt 2>/dev/null || echo "0")
            I_COUNT=$(grep -c "^[^:]*:[^:]*:[^:]*: I" ruff_output.txt 2>/dev/null || echo "0")
            B_COUNT=$(grep -c "^[^:]*:[^:]*:[^:]*: B" ruff_output.txt 2>/dev/null || echo "0")
            C4_COUNT=$(grep -c "^[^:]*:[^:]*:[^:]*: C4" ruff_output.txt 2>/dev/null || echo "0")
            UP_COUNT=$(grep -c "^[^:]*:[^:]*:[^:]*: UP" ruff_output.txt 2>/dev/null || echo "0")
            
            echo "**錯誤統計 Error Statistics:**" >> ruff_report.md
            echo "- 🔴 **E (pycodestyle errors)**: $E_COUNT 個錯誤" >> ruff_report.md
            echo "- 🟡 **W (pycodestyle warnings)**: $W_COUNT 個警告" >> ruff_report.md
            echo "- 🔵 **F (pyflakes)**: $F_COUNT 個問題" >> ruff_report.md
            echo "- 🟣 **I (isort)**: $I_COUNT 個導入問題" >> ruff_report.md
            echo "- 🟠 **B (bugbear)**: $B_COUNT 個潛在錯誤" >> ruff_report.md
            echo "- 🟢 **C4 (comprehensions)**: $C4_COUNT 個優化建議" >> ruff_report.md
            echo "- 🔶 **UP (pyupgrade)**: $UP_COUNT 個語法現代化建議" >> ruff_report.md
            echo "" >> ruff_report.md
            
            # 按類別顯示具體錯誤
            for rule_type in E W F I B C4 UP; do
              if grep -q "^[^:]*:[^:]*:[^:]*: $rule_type" ruff_output.txt 2>/dev/null; then
                echo "#### 📋 $rule_type 類別錯誤詳情 $rule_type Category Details" >> ruff_report.md
                echo "" >> ruff_report.md
                echo "```" >> ruff_report.md
                grep "^[^:]*:[^:]*:[^:]*: $rule_type" ruff_output.txt | head -20 >> ruff_report.md
                echo "```" >> ruff_report.md
                echo "" >> ruff_report.md
              fi
            done
            
            # 如果錯誤太多，提供完整輸出
            TOTAL_ERRORS=$(wc -l < ruff_output.txt)
            if [ "$TOTAL_ERRORS" -gt 50 ]; then
              echo "⚠️ **注意**: 發現 $TOTAL_ERRORS 個問題，以上僅顯示部分內容。完整報告請查看下方詳細輸出。" >> ruff_report.md
              echo "" >> ruff_report.md
            fi
          fi
          
          # 添加 Ruff 配置信息
          echo "### ⚙️ Ruff 配置信息 Ruff Configuration" >> ruff_report.md
          echo "" >> ruff_report.md
          echo "**配置來源**: \`pyproject.toml\`" >> ruff_report.md
          echo "**行長度限制**: 88 字符" >> ruff_report.md
          echo "**目標 Python 版本**: 3.11" >> ruff_report.md
          echo "**忽略規則**: E501 (行長度，已由 line-length 處理)" >> ruff_report.md
          echo "" >> ruff_report.md
          
          # 完整輸出
          echo "### 📝 完整 Ruff 輸出 Full Ruff Output" >> ruff_report.md
          echo "" >> ruff_report.md
          echo "<details>" >> ruff_report.md
          echo "<summary>點擊查看完整 Ruff 檢查輸出 Click to view full Ruff output</summary>" >> ruff_report.md
          echo "" >> ruff_report.md
          echo "```" >> ruff_report.md
          cat ruff_output.txt >> ruff_report.md
          echo "```" >> ruff_report.md
          echo "</details>" >> ruff_report.md
          echo "" >> ruff_report.md
          
      - name: 🧪 Run Unit Tests with Coverage
        id: unit-tests
        run: |
          echo "## 🧪 測試結果 Test Results" >> test_report.md
          echo "" >> test_report.md
          echo "**Python 版本**: ${{ matrix.python-version }}" >> test_report.md
          echo "**執行時間**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> test_report.md
          echo "" >> test_report.md
          
          # 運行測試並捕獲結果，包含覆蓋率
          if pytest tests/ --cov=petsard --cov-report=term-missing --cov-report=xml --tb=short -v --disable-warnings --junit-xml=pytest-results.xml > test_output.txt 2>&1; then
            echo "test_status=success" >> $GITHUB_OUTPUT
            echo "### ✅ 測試通過 Tests Passed" >> test_report.md
            
            # 顯示通過的測試統計
            PASSED_COUNT=$(grep -c "PASSED" test_output.txt 2>/dev/null || echo "0")
            echo "" >> test_report.md
            echo "🎉 **通過測試數量**: $PASSED_COUNT 個測試" >> test_report.md
            echo "" >> test_report.md
          else
            echo "test_status=failed" >> $GITHUB_OUTPUT
            echo "### ❌ 測試失敗 Tests Failed" >> test_report.md
            
            # 統計測試結果
            PASSED_COUNT=$(grep -c "PASSED" test_output.txt 2>/dev/null || echo "0")
            FAILED_COUNT=$(grep -c "FAILED" test_output.txt 2>/dev/null || echo "0")
            ERROR_COUNT=$(grep -c "ERROR" test_output.txt 2>/dev/null || echo "0")
            SKIPPED_COUNT=$(grep -c "SKIPPED" test_output.txt 2>/dev/null || echo "0")
            
            echo "" >> test_report.md
            echo "📊 **測試統計 Test Statistics:**" >> test_report.md
            echo "- ✅ **通過 Passed**: $PASSED_COUNT" >> test_report.md
            echo "- ❌ **失敗 Failed**: $FAILED_COUNT" >> test_report.md
            echo "- 🔥 **錯誤 Error**: $ERROR_COUNT" >> test_report.md
            echo "- ⏭️ **跳過 Skipped**: $SKIPPED_COUNT" >> test_report.md
            echo "" >> test_report.md
            
            # 提取失敗的測試名稱列表
            echo "#### 🔍 失敗測試列表 Failed Test List" >> test_report.md
            echo "" >> test_report.md
            if grep "FAILED" test_output.txt | grep -o "tests/[^:]*::[^[:space:]]*" > failed_tests.txt 2>/dev/null; then
              echo "**失敗的測試項目 Failed Test Items:**" >> test_report.md
              echo "" >> test_report.md
              while IFS= read -r test_name; do
                echo "- ❌ \`$test_name\`" >> test_report.md
              done < failed_tests.txt
              echo "" >> test_report.md
            fi
            
            # 提取 FAILURES 部分的詳細錯誤
            if grep -A 100 "FAILURES" test_output.txt > failures.txt 2>/dev/null; then
              echo "#### 📋 失敗測試詳細錯誤 Detailed Failure Information" >> test_report.md
              echo "" >> test_report.md
              echo "<details>" >> test_report.md
              echo "<summary>點擊查看詳細錯誤信息 Click to view detailed error information</summary>" >> test_report.md
              echo "" >> test_report.md
              echo "```" >> test_report.md
              head -200 failures.txt >> test_report.md
              echo "```" >> test_report.md
              echo "</details>" >> test_report.md
              echo "" >> test_report.md
            fi
            
            # 提取 short test summary
            if grep -A 50 "short test summary" test_output.txt > summary.txt 2>/dev/null; then
              echo "#### 📝 測試摘要 Test Summary" >> test_report.md
              echo "" >> test_report.md
              echo "```" >> test_report.md
              cat summary.txt >> test_report.md
              echo "```" >> test_report.md
              echo "" >> test_report.md
            fi
          fi
          
      - name: 📊 Generate Coverage Report
        if: always()
        run: |
          echo "" >> test_report.md
          echo "### 📊 測試覆蓋率 Test Coverage" >> test_report.md
          echo "" >> test_report.md
          
          # 生成覆蓋率報告
          if [ -f coverage.xml ]; then
            # 簡化的覆蓋率提取
            COVERAGE_PERCENT=$(grep -o 'line-rate="[0-9.]*"' coverage.xml | head -1 | grep -o '[0-9.]*' | awk '{printf "%.1f%%", $1*100}')
            if [ -z "$COVERAGE_PERCENT" ]; then
              COVERAGE_PERCENT="N/A"
            fi
            echo "**整體覆蓋率 Overall Coverage**: $COVERAGE_PERCENT" >> test_report.md
            echo "" >> test_report.md
            
            # 生成詳細覆蓋率報告
            pytest --cov=petsard --cov-report=term-missing --tb=no -q > coverage_detail.txt 2>&1 || true
            if grep -A 50 "Name.*Stmts.*Miss.*Cover.*Missing" coverage_detail.txt > coverage_table.txt 2>/dev/null; then
              echo "**詳細覆蓋率報告 Detailed Coverage Report:**" >> test_report.md
              echo "" >> test_report.md
              echo "```" >> test_report.md
              cat coverage_table.txt >> test_report.md
              echo "```" >> test_report.md
              echo "" >> test_report.md
              
              # 覆蓋率解讀說明
              echo "**📖 覆蓋率解讀說明 Coverage Explanation:**" >> test_report.md
              echo "- **Stmts**: 程式碼行數 (Total lines of code)" >> test_report.md
              echo "- **Miss**: 未測試行數 (Lines not covered by tests)" >> test_report.md
              echo "- **Cover**: 覆蓋率百分比 (Coverage percentage)" >> test_report.md
              echo "- **Missing**: 未覆蓋的具體行號 (Specific line numbers not covered)" >> test_report.md
              echo "" >> test_report.md
              
              # 覆蓋率品質評估
              COVERAGE_NUM=$(echo $COVERAGE_PERCENT | sed 's/%//')
              if [ ! -z "$COVERAGE_NUM" ] && [ "$COVERAGE_NUM" != "N/A" ]; then
                if (( $(echo "$COVERAGE_NUM >= 90" | bc -l 2>/dev/null || echo 0) )); then
                  echo "🎉 **覆蓋率評級**: 優秀 (Excellent) - 90%+ 覆蓋率" >> test_report.md
                elif (( $(echo "$COVERAGE_NUM >= 80" | bc -l 2>/dev/null || echo 0) )); then
                  echo "✅ **覆蓋率評級**: 良好 (Good) - 80-89% 覆蓋率" >> test_report.md
                elif (( $(echo "$COVERAGE_NUM >= 70" | bc -l 2>/dev/null || echo 0) )); then
                  echo "⚠️ **覆蓋率評級**: 尚可 (Fair) - 70-79% 覆蓋率，建議提升" >> test_report.md
                else
                  echo "❌ **覆蓋率評級**: 需改進 (Needs Improvement) - <70% 覆蓋率，強烈建議增加測試" >> test_report.md
                fi
              fi
            fi
          fi
          
          echo "" >> test_report.md
          echo "### 📝 完整測試輸出 Full Test Output" >> test_report.md
          echo "" >> test_report.md
          echo "<details>" >> test_report.md
          echo "<summary>點擊查看完整測試輸出 Click to view full test output</summary>" >> test_report.md
          echo "" >> test_report.md
          echo "```" >> test_report.md
          cat test_output.txt >> test_report.md
          echo "```" >> test_report.md
          echo "</details>" >> test_report.md
          
      - name: 🧪 Run Functional Tests
        id: functional-tests
        run: |
          echo "" >> test_report.md
          echo "### 🔄 功能測試 Functional Tests" >> test_report.md
          echo "" >> test_report.md
          
          if pytest tests/test_petsard.py -v --disable-warnings --tb=short > functional_output.txt 2>&1; then
            echo "functional_status=success" >> $GITHUB_OUTPUT
            echo "✅ **功能測試通過** Functional tests passed" >> test_report.md
            
            # 統計通過的功能測試
            FUNC_PASSED=$(grep -c "PASSED" functional_output.txt 2>/dev/null || echo "0")
            echo "" >> test_report.md
            echo "🎉 **通過的功能測試**: $FUNC_PASSED 個" >> test_report.md
          else
            echo "functional_status=failed" >> $GITHUB_OUTPUT
            echo "❌ **功能測試失敗** Functional tests failed" >> test_report.md
            
            # 統計功能測試結果
            FUNC_PASSED=$(grep -c "PASSED" functional_output.txt 2>/dev/null || echo "0")
            FUNC_FAILED=$(grep -c "FAILED" functional_output.txt 2>/dev/null || echo "0")
            FUNC_ERROR=$(grep -c "ERROR" functional_output.txt 2>/dev/null || echo "0")
            
            echo "" >> test_report.md
            echo "📊 **功能測試統計 Functional Test Statistics:**" >> test_report.md
            echo "- ✅ **通過 Passed**: $FUNC_PASSED" >> test_report.md
            echo "- ❌ **失敗 Failed**: $FUNC_FAILED" >> test_report.md
            echo "- 🔥 **錯誤 Error**: $FUNC_ERROR" >> test_report.md
            echo "" >> test_report.md
            
            # 提取失敗的功能測試名稱
            if grep "FAILED" functional_output.txt | grep -o "tests/test_petsard.py::[^[:space:]]*" > failed_functional.txt 2>/dev/null; then
              echo "**失敗的功能測試 Failed Functional Tests:**" >> test_report.md
              echo "" >> test_report.md
              while IFS= read -r test_name; do
                echo "- ❌ \`$test_name\`" >> test_report.md
              done < failed_functional.txt
              echo "" >> test_report.md
            fi
          fi
          
          echo "" >> test_report.md
          echo "<details>" >> test_report.md
          echo "<summary>點擊查看完整功能測試輸出 Click to view full functional test output</summary>" >> test_report.md
          echo "" >> test_report.md
          echo "```" >> test_report.md
          cat functional_output.txt >> test_report.md
          echo "```" >> test_report.md
          echo "</details>" >> test_report.md
          
      - name: 📊 Generate Test Summary
        run: |
          # 合併 Ruff 報告到主報告
          if [ -f ruff_report.md ]; then
            cat ruff_report.md >> test_report.md
            echo "" >> test_report.md
          fi
          
          echo "### 📊 測試摘要 Test Summary" >> test_report.md
          echo "" >> test_report.md
          
          # 檢查所有步驟的狀態
          RUFF_STATUS="${{ steps.ruff-check.outputs.ruff_status }}"
          UNIT_STATUS="${{ steps.unit-tests.outputs.test_status }}"
          FUNC_STATUS="${{ steps.functional-tests.outputs.functional_status }}"
          
          if [[ "$RUFF_STATUS" == "success" && "$UNIT_STATUS" == "success" && "$FUNC_STATUS" == "success" ]]; then
            echo "🎉 **所有檢查都通過！** All checks passed!" >> test_report.md
            echo "- ✅ 程式碼品質檢查通過" >> test_report.md
            echo "- ✅ 單元測試通過" >> test_report.md
            echo "- ✅ 功能測試通過" >> test_report.md
            echo "test_overall=success" >> $GITHUB_ENV
          else
            echo "⚠️ **部分檢查失敗** Some checks failed" >> test_report.md
            echo "- $([ "$RUFF_STATUS" == "success" ] && echo "✅" || echo "❌") 程式碼品質檢查" >> test_report.md
            echo "- $([ "$UNIT_STATUS" == "success" ] && echo "✅" || echo "❌") 單元測試" >> test_report.md
            echo "- $([ "$FUNC_STATUS" == "success" ] && echo "✅" || echo "❌") 功能測試" >> test_report.md
            echo "test_overall=failed" >> $GITHUB_ENV
          fi
          
          echo "" >> test_report.md
          echo "---" >> test_report.md
          echo "*此報告由測試套件自動生成 | Auto-generated by Test Suite*" >> test_report.md
          
      - name: 💬 Comment Test Results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('test_report.md', 'utf8');
            
            // 檢查是否已有測試結果留言
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.data.find(comment =>
              comment.user.type === 'Bot' &&
              (comment.body.includes('🧪 測試結果 Test Results') || comment.body.includes('🧪 測試套件報告 Test Suite Report'))
            );
            
            const commentBody = `## 🧪 測試套件報告 Test Suite Report\n\n${report}`;
            
            if (botComment) {
              // 更新現有留言
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              // 創建新留言
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              });
            }
            
      - name: 📤 Upload Test Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-python-${{ matrix.python-version }}
          path: |
            test_output.txt
            functional_output.txt
            test_report.md
            coverage.xml
            failures.txt
            summary.txt
            coverage_detail.txt
            coverage_table.txt
            ruff_output.txt
            ruff_report.md
            failed_tests.txt
            failed_functional.txt
            pytest-results.xml
          retention-days: 7
          
      - name: ℹ️ Test Status Summary
        if: always()
        run: |
          if [[ "$test_overall" == "success" ]]; then
            echo "::notice::🎉 所有檢查通過！All checks passed for Python ${{ matrix.python-version }} (Code Quality + Tests)"
          else
            echo "::warning::⚠️ 部分檢查失敗，但不會阻止合併。Some checks failed for Python ${{ matrix.python-version }} (Code Quality + Tests), but merge is not blocked."
          fi