name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  issues: write
  pull-requests: write
  id-token: write  # Required for PyPI trusted publishing

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Generate proto files
        run: make proto

      - name: Run tests
        run: pytest tests/ -v --cov=tektii

  release:
    name: Semantic Release & Publish
    runs-on: ubuntu-latest
    needs: test
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Proto Files
        uses: actions/cache@v3
        with:
          path: |
            proto/*.proto
            tektii/strategy/grpc/*_pb2*.py
          key: ${{ runner.os }}-proto-${{ hashFiles('proto/pull_proto.py') }}
          restore-keys: |
            ${{ runner.os }}-proto-

      - name: Install semantic-release
        run: |
          npm install -g semantic-release@21
          npm install -g @semantic-release/commit-analyzer@10
          npm install -g @semantic-release/release-notes-generator@11
          npm install -g @semantic-release/exec@6
          npm install -g @semantic-release/git@10
          npm install -g @semantic-release/github@9
          npm install -g conventional-changelog-conventionalcommits@6

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Generate proto files for build
        run: |
          pip install grpcio-tools requests
          python proto/pull_proto.py
          mkdir -p tektii/strategy/grpc
          touch tektii/strategy/grpc/__init__.py
          python -m grpc_tools.protoc \
            -I./proto \
            --python_out=./tektii/strategy/grpc \
            --grpc_python_out=./tektii/strategy/grpc \
            --pyi_out=./tektii/strategy/grpc \
            proto/trading/v1/*.proto
          # Move generated files to correct location
          mv tektii/strategy/grpc/trading/v1/* tektii/strategy/grpc/ 2>/dev/null || true
          rm -rf tektii/strategy/grpc/trading
          # Fix imports in generated files
          for file in tektii/strategy/grpc/*_pb2*.py; do \
            if [ -f "$file" ]; then \
              sed -i 's/from trading\.v1 import/from . import/g' "$file"; \
              sed -i 's/import trading\.v1\./from . import /g' "$file"; \
            fi; \
          done

      - name: Get release status
        id: check_release
        run: |
          echo "current_version=$(grep -E '^version = ' pyproject.toml | head -1 | sed 's/version = "\(.*\)"/\1/')" >> $GITHUB_OUTPUT

      - name: Run semantic-release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: "github-actions[bot]"
          GIT_AUTHOR_EMAIL: "github-actions[bot]@users.noreply.github.com"
          GIT_COMMITTER_NAME: "github-actions[bot]"
          GIT_COMMITTER_EMAIL: "github-actions[bot]@users.noreply.github.com"
        run: |
          semantic-release
          NEW_VERSION=$(grep -E '^version = ' pyproject.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          if [ "${{ steps.check_release.outputs.current_version }}" != "$NEW_VERSION" ]; then
            echo "released=true" >> $GITHUB_OUTPUT
            echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            echo "released=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to PyPI
        if: steps.semantic_release.outputs.released == 'true'
        uses: pypa/gh-action-pypi-publish@release/v1
