# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import market_data_pb2 as trading_dot_v1_dot_market__data__pb2
from . import orders_pb2 as trading_dot_v1_dot_orders__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in trading/v1/service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TektiiStrategyStub(object):
    """TektiiStrategy is implemented by trading strategies and called by provider adapters.
    It handles event processing and lifecycle management.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ProcessEvent = channel.unary_unary(
                '/trading.v1.TektiiStrategy/ProcessEvent',
                request_serializer=trading_dot_v1_dot_orders__pb2.TektiiEvent.SerializeToString,
                response_deserializer=trading_dot_v1_dot_orders__pb2.ProcessEventResponse.FromString,
                _registered_method=True)
        self.Initialize = channel.unary_unary(
                '/trading.v1.TektiiStrategy/Initialize',
                request_serializer=trading_dot_v1_dot_orders__pb2.InitRequest.SerializeToString,
                response_deserializer=trading_dot_v1_dot_orders__pb2.InitResponse.FromString,
                _registered_method=True)
        self.Shutdown = channel.unary_unary(
                '/trading.v1.TektiiStrategy/Shutdown',
                request_serializer=trading_dot_v1_dot_orders__pb2.ShutdownRequest.SerializeToString,
                response_deserializer=trading_dot_v1_dot_orders__pb2.ShutdownResponse.FromString,
                _registered_method=True)


class TektiiStrategyServicer(object):
    """TektiiStrategy is implemented by trading strategies and called by provider adapters.
    It handles event processing and lifecycle management.
    """

    def ProcessEvent(self, request, context):
        """Event Processing - strategies handle internally, no actions returned
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Initialize(self, request, context):
        """Lifecycle Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Shutdown(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TektiiStrategyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ProcessEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.ProcessEvent,
                    request_deserializer=trading_dot_v1_dot_orders__pb2.TektiiEvent.FromString,
                    response_serializer=trading_dot_v1_dot_orders__pb2.ProcessEventResponse.SerializeToString,
            ),
            'Initialize': grpc.unary_unary_rpc_method_handler(
                    servicer.Initialize,
                    request_deserializer=trading_dot_v1_dot_orders__pb2.InitRequest.FromString,
                    response_serializer=trading_dot_v1_dot_orders__pb2.InitResponse.SerializeToString,
            ),
            'Shutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.Shutdown,
                    request_deserializer=trading_dot_v1_dot_orders__pb2.ShutdownRequest.FromString,
                    response_serializer=trading_dot_v1_dot_orders__pb2.ShutdownResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trading.v1.TektiiStrategy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('trading.v1.TektiiStrategy', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TektiiStrategy(object):
    """TektiiStrategy is implemented by trading strategies and called by provider adapters.
    It handles event processing and lifecycle management.
    """

    @staticmethod
    def ProcessEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.v1.TektiiStrategy/ProcessEvent',
            trading_dot_v1_dot_orders__pb2.TektiiEvent.SerializeToString,
            trading_dot_v1_dot_orders__pb2.ProcessEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Initialize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.v1.TektiiStrategy/Initialize',
            trading_dot_v1_dot_orders__pb2.InitRequest.SerializeToString,
            trading_dot_v1_dot_orders__pb2.InitResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Shutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.v1.TektiiStrategy/Shutdown',
            trading_dot_v1_dot_orders__pb2.ShutdownRequest.SerializeToString,
            trading_dot_v1_dot_orders__pb2.ShutdownResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TektiiBrokerStub(object):
    """TektiiBroker is implemented by provider adapters (backtest engine, brokers).
    Strategies call these methods to query state and manage orders.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetState = channel.unary_unary(
                '/trading.v1.TektiiBroker/GetState',
                request_serializer=trading_dot_v1_dot_orders__pb2.StateRequest.SerializeToString,
                response_deserializer=trading_dot_v1_dot_orders__pb2.StateResponse.FromString,
                _registered_method=True)
        self.GetHistoricalData = channel.unary_unary(
                '/trading.v1.TektiiBroker/GetHistoricalData',
                request_serializer=trading_dot_v1_dot_market__data__pb2.HistoricalDataRequest.SerializeToString,
                response_deserializer=trading_dot_v1_dot_market__data__pb2.HistoricalDataResponse.FromString,
                _registered_method=True)
        self.GetMarketDepth = channel.unary_unary(
                '/trading.v1.TektiiBroker/GetMarketDepth',
                request_serializer=trading_dot_v1_dot_market__data__pb2.MarketDepthRequest.SerializeToString,
                response_deserializer=trading_dot_v1_dot_market__data__pb2.MarketDepthResponse.FromString,
                _registered_method=True)
        self.GetRiskMetrics = channel.unary_unary(
                '/trading.v1.TektiiBroker/GetRiskMetrics',
                request_serializer=trading_dot_v1_dot_orders__pb2.RiskMetricsRequest.SerializeToString,
                response_deserializer=trading_dot_v1_dot_orders__pb2.RiskMetricsResponse.FromString,
                _registered_method=True)
        self.PlaceOrder = channel.unary_unary(
                '/trading.v1.TektiiBroker/PlaceOrder',
                request_serializer=trading_dot_v1_dot_orders__pb2.PlaceOrderRequest.SerializeToString,
                response_deserializer=trading_dot_v1_dot_orders__pb2.PlaceOrderResponse.FromString,
                _registered_method=True)
        self.CancelOrder = channel.unary_unary(
                '/trading.v1.TektiiBroker/CancelOrder',
                request_serializer=trading_dot_v1_dot_orders__pb2.CancelOrderRequest.SerializeToString,
                response_deserializer=trading_dot_v1_dot_orders__pb2.CancelOrderResponse.FromString,
                _registered_method=True)
        self.ModifyOrder = channel.unary_unary(
                '/trading.v1.TektiiBroker/ModifyOrder',
                request_serializer=trading_dot_v1_dot_orders__pb2.ModifyOrderRequest.SerializeToString,
                response_deserializer=trading_dot_v1_dot_orders__pb2.ModifyOrderResponse.FromString,
                _registered_method=True)
        self.ValidateOrder = channel.unary_unary(
                '/trading.v1.TektiiBroker/ValidateOrder',
                request_serializer=trading_dot_v1_dot_orders__pb2.ValidateOrderRequest.SerializeToString,
                response_deserializer=trading_dot_v1_dot_orders__pb2.ValidateOrderResponse.FromString,
                _registered_method=True)
        self.ClosePosition = channel.unary_unary(
                '/trading.v1.TektiiBroker/ClosePosition',
                request_serializer=trading_dot_v1_dot_orders__pb2.ClosePositionRequest.SerializeToString,
                response_deserializer=trading_dot_v1_dot_orders__pb2.ClosePositionResponse.FromString,
                _registered_method=True)
        self.ModifyTradeProtection = channel.unary_unary(
                '/trading.v1.TektiiBroker/ModifyTradeProtection',
                request_serializer=trading_dot_v1_dot_orders__pb2.ModifyTradeProtectionRequest.SerializeToString,
                response_deserializer=trading_dot_v1_dot_orders__pb2.ModifyTradeProtectionResponse.FromString,
                _registered_method=True)


class TektiiBrokerServicer(object):
    """TektiiBroker is implemented by provider adapters (backtest engine, brokers).
    Strategies call these methods to query state and manage orders.
    """

    def GetState(self, request, context):
        """Query Methods - pull-based data access
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHistoricalData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMarketDepth(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRiskMetrics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlaceOrder(self, request, context):
        """Order Management - synchronous with immediate feedback
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateOrder(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClosePosition(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ModifyTradeProtection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TektiiBrokerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetState,
                    request_deserializer=trading_dot_v1_dot_orders__pb2.StateRequest.FromString,
                    response_serializer=trading_dot_v1_dot_orders__pb2.StateResponse.SerializeToString,
            ),
            'GetHistoricalData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetHistoricalData,
                    request_deserializer=trading_dot_v1_dot_market__data__pb2.HistoricalDataRequest.FromString,
                    response_serializer=trading_dot_v1_dot_market__data__pb2.HistoricalDataResponse.SerializeToString,
            ),
            'GetMarketDepth': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMarketDepth,
                    request_deserializer=trading_dot_v1_dot_market__data__pb2.MarketDepthRequest.FromString,
                    response_serializer=trading_dot_v1_dot_market__data__pb2.MarketDepthResponse.SerializeToString,
            ),
            'GetRiskMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRiskMetrics,
                    request_deserializer=trading_dot_v1_dot_orders__pb2.RiskMetricsRequest.FromString,
                    response_serializer=trading_dot_v1_dot_orders__pb2.RiskMetricsResponse.SerializeToString,
            ),
            'PlaceOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.PlaceOrder,
                    request_deserializer=trading_dot_v1_dot_orders__pb2.PlaceOrderRequest.FromString,
                    response_serializer=trading_dot_v1_dot_orders__pb2.PlaceOrderResponse.SerializeToString,
            ),
            'CancelOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelOrder,
                    request_deserializer=trading_dot_v1_dot_orders__pb2.CancelOrderRequest.FromString,
                    response_serializer=trading_dot_v1_dot_orders__pb2.CancelOrderResponse.SerializeToString,
            ),
            'ModifyOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyOrder,
                    request_deserializer=trading_dot_v1_dot_orders__pb2.ModifyOrderRequest.FromString,
                    response_serializer=trading_dot_v1_dot_orders__pb2.ModifyOrderResponse.SerializeToString,
            ),
            'ValidateOrder': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateOrder,
                    request_deserializer=trading_dot_v1_dot_orders__pb2.ValidateOrderRequest.FromString,
                    response_serializer=trading_dot_v1_dot_orders__pb2.ValidateOrderResponse.SerializeToString,
            ),
            'ClosePosition': grpc.unary_unary_rpc_method_handler(
                    servicer.ClosePosition,
                    request_deserializer=trading_dot_v1_dot_orders__pb2.ClosePositionRequest.FromString,
                    response_serializer=trading_dot_v1_dot_orders__pb2.ClosePositionResponse.SerializeToString,
            ),
            'ModifyTradeProtection': grpc.unary_unary_rpc_method_handler(
                    servicer.ModifyTradeProtection,
                    request_deserializer=trading_dot_v1_dot_orders__pb2.ModifyTradeProtectionRequest.FromString,
                    response_serializer=trading_dot_v1_dot_orders__pb2.ModifyTradeProtectionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trading.v1.TektiiBroker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('trading.v1.TektiiBroker', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TektiiBroker(object):
    """TektiiBroker is implemented by provider adapters (backtest engine, brokers).
    Strategies call these methods to query state and manage orders.
    """

    @staticmethod
    def GetState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.v1.TektiiBroker/GetState',
            trading_dot_v1_dot_orders__pb2.StateRequest.SerializeToString,
            trading_dot_v1_dot_orders__pb2.StateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetHistoricalData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.v1.TektiiBroker/GetHistoricalData',
            trading_dot_v1_dot_market__data__pb2.HistoricalDataRequest.SerializeToString,
            trading_dot_v1_dot_market__data__pb2.HistoricalDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMarketDepth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.v1.TektiiBroker/GetMarketDepth',
            trading_dot_v1_dot_market__data__pb2.MarketDepthRequest.SerializeToString,
            trading_dot_v1_dot_market__data__pb2.MarketDepthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRiskMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.v1.TektiiBroker/GetRiskMetrics',
            trading_dot_v1_dot_orders__pb2.RiskMetricsRequest.SerializeToString,
            trading_dot_v1_dot_orders__pb2.RiskMetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PlaceOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.v1.TektiiBroker/PlaceOrder',
            trading_dot_v1_dot_orders__pb2.PlaceOrderRequest.SerializeToString,
            trading_dot_v1_dot_orders__pb2.PlaceOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.v1.TektiiBroker/CancelOrder',
            trading_dot_v1_dot_orders__pb2.CancelOrderRequest.SerializeToString,
            trading_dot_v1_dot_orders__pb2.CancelOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ModifyOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.v1.TektiiBroker/ModifyOrder',
            trading_dot_v1_dot_orders__pb2.ModifyOrderRequest.SerializeToString,
            trading_dot_v1_dot_orders__pb2.ModifyOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateOrder(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.v1.TektiiBroker/ValidateOrder',
            trading_dot_v1_dot_orders__pb2.ValidateOrderRequest.SerializeToString,
            trading_dot_v1_dot_orders__pb2.ValidateOrderResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ClosePosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.v1.TektiiBroker/ClosePosition',
            trading_dot_v1_dot_orders__pb2.ClosePositionRequest.SerializeToString,
            trading_dot_v1_dot_orders__pb2.ClosePositionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ModifyTradeProtection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/trading.v1.TektiiBroker/ModifyTradeProtection',
            trading_dot_v1_dot_orders__pb2.ModifyTradeProtectionRequest.SerializeToString,
            trading_dot_v1_dot_orders__pb2.ModifyTradeProtectionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
