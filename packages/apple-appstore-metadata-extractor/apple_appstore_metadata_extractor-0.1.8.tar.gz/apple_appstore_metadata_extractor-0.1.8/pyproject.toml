[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "apple-appstore-metadata-extractor"
version = "0.1.8"
description = "Extract and monitor metadata from Apple App Store applications"
readme = "README.md"
authors = [
    {name = "Bickster LLC", email = "support@bickster.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Libraries",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
keywords = ["app store", "metadata", "ios", "apple", "scraping", "monitoring"]
requires-python = ">=3.11"
dependencies = [
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",
    "lxml>=4.9.0",
    "pydantic>=2.5.0",
    "aiohttp>=3.9.0",
    "tenacity>=8.2.0",
    "rich>=13.7.0",
    "click>=8.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "types-requests>=2.31.0",
]

[project.urls]
Homepage = "https://github.com/Bickster-LLC/appstore-metadata-extractor-python"
Documentation = "https://github.com/Bickster-LLC/appstore-metadata-extractor-python#readme"
Repository = "https://github.com/Bickster-LLC/appstore-metadata-extractor-python"
Issues = "https://github.com/Bickster-LLC/appstore-metadata-extractor-python/issues"
Changelog = "https://github.com/Bickster-LLC/appstore-metadata-extractor-python/blob/main/CHANGELOG.md"

[project.scripts]
appstore-extractor = "appstore_metadata_extractor.cli:cli"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
appstore_metadata_extractor = ["py.typed"]

# ==================== CODE FORMATTING ====================

[tool.black]
line-length = 88
target-version = ["py311", "py312"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["appstore_metadata_extractor"]
src_paths = ["src", "tests"]

# ==================== TYPE CHECKING ====================

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
# BeautifulSoup and web scraping modules have dynamic APIs
# that cause many false positive type errors
module = [
    "appstore_metadata_extractor.scraper"
]
ignore_errors = true  # Too many BeautifulSoup false positives
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
# CLI has complex Click decorators and dynamic attributes
module = [
    "appstore_metadata_extractor.cli",
    "appstore_metadata_extractor.cli.*"
]
ignore_errors = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# ==================== TESTING ====================

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --cov=appstore_metadata_extractor --cov-report=term-missing"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if False:",
    "pass",
]

# ==================== LINTING ====================

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = [
    "E501",  # line too long (Black handles this)
    "E203",  # whitespace before ':'
    "B008",  # function calls in argument defaults
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401", "E402"]
"test_*.py" = ["S101", "ARG", "PLR2004"]
