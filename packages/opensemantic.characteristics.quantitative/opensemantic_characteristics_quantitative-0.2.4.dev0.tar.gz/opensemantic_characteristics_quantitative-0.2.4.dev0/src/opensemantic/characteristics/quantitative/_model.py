from typing import Any, Optional

from pydantic.v1 import Field

from opensemantic.characteristics.quantitative._static import QuantityValue, UnitEnum


class MomentOfInertiaUnit(UnitEnum):
    kilo_gram_meter_squared = "Item:OSWd211fc61709b5e48a4c96473c86a8d13"


class MomentOfInertia(QuantityValue):
    """
    The rotational inertia or resistance to change in direction or speed of rotation about a defined axis.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "2e958a0e-6535-58a8-abf2-bd1fa3c6dd59",
            "title": "MomentOfInertia",
            "title*": {"en": "Moment of inertia", "de": "Massenträgheitsmoment"},
            "description": "The rotational inertia or resistance to change in direction or speed of rotation about a defined axis.",
            "description*": {
                "en": "The rotational inertia or resistance to change in direction or speed of rotation about a defined axis."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMomentOfInertiaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2e958a0e653558a8abf2bd1fa3c6dd59"]
    unit: Optional[MomentOfInertiaUnit] = Field(
        MomentOfInertiaUnit.kilo_gram_meter_squared,
        options={"enum_titles": ["kg·m²"]},
        title="MomentOfInertiaUnit",
        x_enum_varnames=["kilo_gram_meter_squared"],
    )


class MomentOfInertiaInTheYAxis(MomentOfInertia):
    """
    The rotational inertia or resistance to change in direction or speed of rotation about a defined axis.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "54513644-9011-55ce-82c3-161b8ce76cf1",
            "title": "MomentOfInertiaInTheYAxis",
            "title*": {"en": "Moment of Inertia in the Y axis"},
            "description": "The rotational inertia or resistance to change in direction or speed of rotation about a defined axis.",
            "description*": {
                "en": "The rotational inertia or resistance to change in direction or speed of rotation about a defined axis."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMomentOfInertiaInTheYAxisValue",
            "@context": [
                "/wiki/Category:OSW2e958a0e653558a8abf2bd1fa3c6dd59?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW54513644901155ce82c3161b8ce76cf1"]


class LengthMolarEnergyUnit(UnitEnum):
    joule_meter_per_mole = "Item:OSWb4031d8f85595a128c76bdeb7bb1cbd7"


class LengthMolarEnergy(QuantityValue):
    """
    This is an autogenerated partial class definition of 'LengthMolarEnergy'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "cc185b33-860b-596a-82ed-bb6eae8f7377",
            "title": "LengthMolarEnergy",
            "title*": {"en": "Length Molar Energy"},
            "description": "This is an autogenerated partial class definition of 'LengthMolarEnergy'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLengthMolarEnergyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcc185b33860b596a82edbb6eae8f7377"]
    unit: Optional[LengthMolarEnergyUnit] = Field(
        LengthMolarEnergyUnit.joule_meter_per_mole,
        options={"enum_titles": ["J·m/mol"]},
        title="LengthMolarEnergyUnit",
        x_enum_varnames=["joule_meter_per_mole"],
    )


class ViscosityUnit(UnitEnum):
    pascal_second = "Item:OSWfb230f7ff1a55c23accf8ae94aacc9e1"
    milli_pascal_second = (
        "Item:OSWfb230f7ff1a55c23accf8ae94aacc9e1#OSW8e1783ac9f0b5fe3b404dcfbce8940cb"
    )


class Viscosity(QuantityValue):
    """
    Viscosity is a measure of the resistance of a fluid which is being deformed by either shear stress or extensional stress. In general terms it is the resistance of a liquid to flow, or its "thickness". Viscosity describes a fluid's internal resistance to flow and may be thought of as a measure of fluid friction. [Wikipedia]. In general conversation or in non-scientific contexts, if someone refers to the viscosity of a fluid, they're likely talking about its dynamic (or absolute) viscosity. However, in engineering or scientific contexts, it's essential to clarify which type of viscosity is being discussed, as the interpretation and use of the data may differ depending on whether one is talking about dynamic or kinematic viscosity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "ed71b6bb-a4a7-58b5-b100-82861ad0ea44",
            "title": "Viscosity",
            "title*": {"en": "Viscosity"},
            "description": "Viscosity is a measure of the resistance of a fluid which is being deformed by either shear stress or extensional stress. In general terms it is the resistance of a liquid to flow, or its \"thickness\". Viscosity describes a fluid's internal resistance to flow and may be thought of as a measure of fluid friction. [Wikipedia]. In general conversation or in non-scientific contexts, if someone refers to the viscosity of a fluid, they're likely talking about its dynamic (or absolute) viscosity. However, in engineering or scientific contexts, it's essential to clarify which type of viscosity is being discussed, as the interpretation and use of the data may differ depending on whether one is talking about dynamic or kinematic viscosity.",
            "description*": {
                "en": "Viscosity is a measure of the resistance of a fluid which is being deformed by either shear stress or extensional stress. In general terms it is the resistance of a liquid to flow, or its \"thickness\". Viscosity describes a fluid's internal resistance to flow and may be thought of as a measure of fluid friction. [Wikipedia]. In general conversation or in non-scientific contexts, if someone refers to the viscosity of a fluid, they're likely talking about its dynamic (or absolute) viscosity. However, in engineering or scientific contexts, it's essential to clarify which type of viscosity is being discussed, as the interpretation and use of the data may differ depending on whether one is talking about dynamic or kinematic viscosity."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasViscosityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWed71b6bba4a758b5b10082861ad0ea44"]
    unit: Optional[ViscosityUnit] = Field(
        ViscosityUnit.pascal_second,
        options={"enum_titles": ["Pa·s", "mPa·s"]},
        title="ViscosityUnit",
        x_enum_varnames=["pascal_second", "milli_pascal_second"],
    )


class TemperatureUnit(UnitEnum):
    Celsius = "Item:OSWad04992cecb75af4be6f2205e791b42e"
    milli_Celsius = (
        "Item:OSWad04992cecb75af4be6f2205e791b42e#OSW883731d442e852778ae00df071dd0719"
    )


class Temperature(QuantityValue):
    """
    Temperature is a physical property of matter that quantitatively expresses the common notions of hot and cold. Objects of low temperature are cold, while various degrees of higher temperatures are referred to as warm or hot. Heat spontaneously flows from bodies of a higher temperature to bodies of lower temperature, at a rate that increases with the temperature difference and the thermal conductivity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "20927e49-00e9-5e93-9856-98c92995f964",
            "title": "Temperature",
            "title*": {"en": "Temperature"},
            "description": "Temperature is a physical property of matter that quantitatively expresses the common notions of hot and cold. Objects of low temperature are cold, while various degrees of higher temperatures are referred to as warm or hot. Heat spontaneously flows from bodies of a higher temperature to bodies of lower temperature, at a rate that increases with the temperature difference and the thermal conductivity.",
            "description*": {
                "en": "Temperature is a physical property of matter that quantitatively expresses the common notions of hot and cold. Objects of low temperature are cold, while various degrees of higher temperatures are referred to as warm or hot. Heat spontaneously flows from bodies of a higher temperature to bodies of lower temperature, at a rate that increases with the temperature difference and the thermal conductivity."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTemperatureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW20927e4900e95e93985698c92995f964"]
    unit: Optional[TemperatureUnit] = Field(
        TemperatureUnit.Celsius,
        options={"enum_titles": ["°C", "m°C"]},
        title="TemperatureUnit",
        x_enum_varnames=["Celsius", "milli_Celsius"],
    )


class ThermodynamicTemperature(Temperature):
    """
    Thermodynamic temperature is the absolute measure of temperature and is one of the principal parameters of thermodynamics.
    Temperature is a physical property of matter that quantitatively expresses the common notions of hot and cold.
    In thermodynamics, in a system of which the entropy is considered as an independent externally controlled variable, absolute, or thermodynamic temperature is defined as the derivative of the internal energy with respect to the entropy. This is a base quantity in the International System of Quantities, ISQ, on which the International System of Units, SI, is based.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "69b648b4-fe1a-5607-b167-a699f899be87",
            "title": "ThermodynamicTemperature",
            "title*": {
                "en": "Thermodynamic temperature",
                "de": "Thermodynamische Temperatur",
            },
            "description": "Thermodynamic temperature is the absolute measure of temperature and is one of the principal parameters of thermodynamics.\nTemperature is a physical property of matter that quantitatively expresses the common notions of hot and cold.\nIn thermodynamics, in a system of which the entropy is considered as an independent externally controlled variable, absolute, or thermodynamic temperature is defined as the derivative of the internal energy with respect to the entropy. This is a base quantity in the International System of Quantities, ISQ, on which the International System of Units, SI, is based.",
            "description*": {
                "en": "Thermodynamic temperature is the absolute measure of temperature and is one of the principal parameters of thermodynamics.\nTemperature is a physical property of matter that quantitatively expresses the common notions of hot and cold.\nIn thermodynamics, in a system of which the entropy is considered as an independent externally controlled variable, absolute, or thermodynamic temperature is defined as the derivative of the internal energy with respect to the entropy. This is a base quantity in the International System of Quantities, ISQ, on which the International System of Units, SI, is based."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThermodynamicTemperatureValue",
            "@context": [
                "/wiki/Category:OSW20927e4900e95e93985698c92995f964?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW69b648b4fe1a5607b167a699f899be87"]


class RankineTemperature(ThermodynamicTemperature):
    """
    Größe, die eine Temperaturskala benutzt, die wie die Kelvin-Skala beim absoluten Temperatur-Nullpunkt (0 K) ihren Nullwert hat, jedoch im Gegensatz zu dieser den Skalenabstand der Fahrenheit-Skala verwendet
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1c1be013-4d4e-55e2-917c-5ee4c4adaa39",
            "title": "RankineTemperature",
            "title*": {"en": "Rankine temperature"},
            "description": "Größe, die eine Temperaturskala benutzt, die wie die Kelvin-Skala beim absoluten Temperatur-Nullpunkt (0 K) ihren Nullwert hat, jedoch im Gegensatz zu dieser den Skalenabstand der Fahrenheit-Skala verwendet",
            "description*": {
                "en": "Größe, die eine Temperaturskala benutzt, die wie die Kelvin-Skala beim absoluten Temperatur-Nullpunkt (0 K) ihren Nullwert hat, jedoch im Gegensatz zu dieser den Skalenabstand der Fahrenheit-Skala verwendet"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRankineTemperatureValue",
            "@context": [
                "/wiki/Category:OSW69b648b4fe1a5607b167a699f899be87?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1c1be0134d4e55e2917c5ee4c4adaa39"]


class SpecificEnergyUnit(UnitEnum):
    joule_per_kilo_gram = (
        "Item:OSW0fb024653eb9557482d93f027840ee33#OSWffdf8410a8c65687a122eaf44719162d"
    )


class SpecificEnergy(QuantityValue):
    """
    $\\textit{Specific Energy}$ is defined as the energy per unit mass.
      Common metric units are $J/kg$.
      It is an intensive property.
      Contrast this with energy, which is an extensive property.
      There are two main types of specific energy: potential energy and specific kinetic energy.
      Others are the $\\textit{gray}$ and $\\textit{sievert}$, which are measures for the absorption of radiation.
      $$$$
      The concept of specific energy applies to a particular or theoretical way of extracting useful energy from the material considered that is usually implied by context.
      These intensive properties are each symbolized by using the lower case letter of the symbol for the corresponding extensive property,
       which is symbolized by a capital letter.
      For example, the extensive thermodynamic property enthalpy is symbolized by $H$; specific enthalpy is symbolized by $h$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9a32b5a8-4f23-5a0c-b0a9-e9fba9bd252e",
            "title": "SpecificEnergy",
            "title*": {"en": "Specific Energy"},
            "description": "$\\textit{Specific Energy}$ is defined as the energy per unit mass. \n  Common metric units are $J/kg$. \n  It is an intensive property. \n  Contrast this with energy, which is an extensive property. \n  There are two main types of specific energy: potential energy and specific kinetic energy. \n  Others are the $\\textit{gray}$ and $\\textit{sievert}$, which are measures for the absorption of radiation. \n  $$$$\n  The concept of specific energy applies to a particular or theoretical way of extracting useful energy from the material considered that is usually implied by context. \n  These intensive properties are each symbolized by using the lower case letter of the symbol for the corresponding extensive property,\n   which is symbolized by a capital letter. \n  For example, the extensive thermodynamic property enthalpy is symbolized by $H$; specific enthalpy is symbolized by $h$.",
            "description*": {
                "en": "$\\textit{Specific Energy}$ is defined as the energy per unit mass. \n  Common metric units are $J/kg$. \n  It is an intensive property. \n  Contrast this with energy, which is an extensive property. \n  There are two main types of specific energy: potential energy and specific kinetic energy. \n  Others are the $\\textit{gray}$ and $\\textit{sievert}$, which are measures for the absorption of radiation. \n  $$$$\n  The concept of specific energy applies to a particular or theoretical way of extracting useful energy from the material considered that is usually implied by context. \n  These intensive properties are each symbolized by using the lower case letter of the symbol for the corresponding extensive property,\n   which is symbolized by a capital letter. \n  For example, the extensive thermodynamic property enthalpy is symbolized by $H$; specific enthalpy is symbolized by $h$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificEnergyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9a32b5a84f235a0cb0a9e9fba9bd252e"]
    unit: Optional[SpecificEnergyUnit] = Field(
        SpecificEnergyUnit.joule_per_kilo_gram,
        options={"enum_titles": ["J/kg"]},
        title="SpecificEnergyUnit",
        x_enum_varnames=["joule_per_kilo_gram"],
    )


class AmountOfSubstancePerMassUnit(UnitEnum):
    mole_per_kilo_gram = "Item:OSWfd92e9c2c69754f78e4145ad3d31c34b"
    pico_mole_per_kilo_gram = (
        "Item:OSWfd92e9c2c69754f78e4145ad3d31c34b#OSWd77b5543087f560caec2016c89521715"
    )
    nano_mole_per_kilo_gram = (
        "Item:OSWfd92e9c2c69754f78e4145ad3d31c34b#OSW51bd13e67a4758bba50388bd5cffe504"
    )
    kilo_mole_per_kilo_gram = (
        "Item:OSWfd92e9c2c69754f78e4145ad3d31c34b#OSW84e7943cec52598082a96c43ab77d33a"
    )
    femto_mole_per_kilo_gram = (
        "Item:OSWfd92e9c2c69754f78e4145ad3d31c34b#OSWce6b64163d095affbef6daa39c9cd063"
    )
    centi_mole_per_kilo_gram = (
        "Item:OSWfd92e9c2c69754f78e4145ad3d31c34b#OSW9abfd6b6d96b507abac8057d6e35a74f"
    )
    milli_mole_per_kilo_gram = (
        "Item:OSWfd92e9c2c69754f78e4145ad3d31c34b#OSW78a5da75d0d15046935df4e27fa7d3a9"
    )
    micro_mole_per_kilo_gram = (
        "Item:OSWfd92e9c2c69754f78e4145ad3d31c34b#OSWa9d227b6d12958eba67fdf22b0934535"
    )


class AmountOfSubstancePerMass(QuantityValue):
    """
    This is an autogenerated partial class definition of 'AmountOfSubstancePerMass'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "efff8e22-b4d6-5024-bd04-4362634938e1",
            "title": "AmountOfSubstancePerMass",
            "title*": {"en": "Amount of Substance per Mass"},
            "description": "This is an autogenerated partial class definition of 'AmountOfSubstancePerMass'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAmountOfSubstancePerMassValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWefff8e22b4d65024bd044362634938e1"]
    unit: Optional[AmountOfSubstancePerMassUnit] = Field(
        AmountOfSubstancePerMassUnit.mole_per_kilo_gram,
        options={
            "enum_titles": [
                "mol/kg",
                "pmol/kg",
                "nmol/kg",
                "kmol/kg",
                "fmol/kg",
                "cmol/kg",
                "mmol/kg",
                "μmol/kg",
            ]
        },
        title="AmountOfSubstancePerMassUnit",
        x_enum_varnames=[
            "mole_per_kilo_gram",
            "pico_mole_per_kilo_gram",
            "nano_mole_per_kilo_gram",
            "kilo_mole_per_kilo_gram",
            "femto_mole_per_kilo_gram",
            "centi_mole_per_kilo_gram",
            "milli_mole_per_kilo_gram",
            "micro_mole_per_kilo_gram",
        ],
    )


class DimensionlessUnit(UnitEnum):
    dimensionless = "Item:OSW5d3fe58ebbac5483bad8904ff8811366"


class Dimensionless(QuantityValue):
    """
    In dimensional analysis, a dimensionless quantity or quantity of dimension one is a quantity without an associated physical dimension. It is thus a "pure" number, and as such always has a dimension of 1. Dimensionless quantities are widely used in mathematics, physics, engineering, economics, and in everyday life (such as in counting). Numerous well-known quantities, such as $\pi$, $\epsilon$, and $\psi$, are dimensionless. By contrast, non-dimensionless quantities are measured in units of length, area, time, etc. Dimensionless quantities are often defined as products or ratios of quantities that are not dimensionless, but whose dimensions cancel out when their powers are multiplied.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "bcaa33bd-770e-53e0-9d5e-6087d141648b",
            "title": "Dimensionless",
            "title*": {"en": "Dimensionless"},
            "description": 'In dimensional analysis, a dimensionless quantity or quantity of dimension one is a quantity without an associated physical dimension. It is thus a "pure" number, and as such always has a dimension of 1. Dimensionless quantities are widely used in mathematics, physics, engineering, economics, and in everyday life (such as in counting). Numerous well-known quantities, such as $\\pi$, $\\epsilon$, and $\\psi$, are dimensionless. By contrast, non-dimensionless quantities are measured in units of length, area, time, etc. Dimensionless quantities are often defined as products or ratios of quantities that are not dimensionless, but whose dimensions cancel out when their powers are multiplied.',
            "description*": {
                "en": 'In dimensional analysis, a dimensionless quantity or quantity of dimension one is a quantity without an associated physical dimension. It is thus a "pure" number, and as such always has a dimension of 1. Dimensionless quantities are widely used in mathematics, physics, engineering, economics, and in everyday life (such as in counting). Numerous well-known quantities, such as $\\pi$, $\\epsilon$, and $\\psi$, are dimensionless. By contrast, non-dimensionless quantities are measured in units of length, area, time, etc. Dimensionless quantities are often defined as products or ratios of quantities that are not dimensionless, but whose dimensions cancel out when their powers are multiplied.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDimensionlessValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWbcaa33bd770e53e09d5e6087d141648b"]
    unit: Optional[DimensionlessUnit] = Field(
        DimensionlessUnit.dimensionless,
        options={"enum_titles": ["#"]},
        title="DimensionlessUnit",
        x_enum_varnames=[""],
    )


class DimensionlessRatio(Dimensionless):
    """
    This is an autogenerated partial class definition of 'DimensionlessRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "67faac86-0ed7-5875-8aa4-484387e5d5c9",
            "title": "DimensionlessRatio",
            "title*": {"en": "Dimensionless Ratio"},
            "description": "This is an autogenerated partial class definition of 'DimensionlessRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDimensionlessRatioValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW67faac860ed758758aa4484387e5d5c9"]


class VolumeFlowRatio(DimensionlessRatio):
    """
    Volume flow ratio is commonly used in fluid dynamics and engineering,
      referring to the ratio of the flow rates of two or more fluid streams within a system. In HVAC systems,
      the flow ratio could compare the amount of fresh air introduced to the amount of recirculated air.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "91098185-e0b2-5060-9bee-fef37c7e1fe0",
            "title": "VolumeFlowRatio",
            "title*": {"en": "Volume Flow Ratio"},
            "description": "Volume flow ratio is commonly used in fluid dynamics and engineering, \n  referring to the ratio of the flow rates of two or more fluid streams within a system. In HVAC systems, \n  the flow ratio could compare the amount of fresh air introduced to the amount of recirculated air.",
            "description*": {
                "en": "Volume flow ratio is commonly used in fluid dynamics and engineering, \n  referring to the ratio of the flow rates of two or more fluid streams within a system. In HVAC systems, \n  the flow ratio could compare the amount of fresh air introduced to the amount of recirculated air."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVolumeFlowRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW91098185e0b250609beefef37c7e1fe0"]


class DutyCycle(DimensionlessRatio):
    """
    A duty cycle or power cycle is the fraction of one period in which a signal or system is active.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0ddf63f6-9e72-5cb6-9e0e-5e0deca608b2",
            "title": "DutyCycle",
            "title*": {"en": "Duty Cycle"},
            "description": "A duty cycle or power cycle is the fraction of one period in which a signal or system is active.",
            "description*": {
                "en": "A duty cycle or power cycle is the fraction of one period in which a signal or system is active."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDutyCycleValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0ddf63f69e725cb69e0e5e0deca608b2"]


class MassUnit(UnitEnum):
    kilo_gram = (
        "Item:OSW3c9bf4c3682f5a52b6e99f7ad7949903#OSWda255533fa615a42b08ddb7aaa8236f0"
    )


class Mass(QuantityValue):
    """
    In physics, mass, more specifically inertial mass, can be defined as a quantitative measure of an object's resistance to acceleration. The SI unit of mass is the kilogram ($kg$)
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "e9be062d-e2d1-5d10-8913-97a18212f920",
            "title": "Mass",
            "title*": {"en": "Mass", "de": "Masse"},
            "description": "In physics, mass, more specifically inertial mass, can be defined as a quantitative measure of an object's resistance to acceleration. The SI unit of mass is the kilogram ($kg$)",
            "description*": {
                "en": "In physics, mass, more specifically inertial mass, can be defined as a quantitative measure of an object's resistance to acceleration. The SI unit of mass is the kilogram ($kg$)"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe9be062de2d15d10891397a18212f920"]
    unit: Optional[MassUnit] = Field(
        MassUnit.kilo_gram,
        options={"enum_titles": ["kg"]},
        title="MassUnit",
        x_enum_varnames=["kilo_gram"],
    )


class StageStructureMass(Mass):
    """
    This is an autogenerated partial class definition of 'StageStructureMass'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c74bc7a7-558c-5c9a-a7aa-0282ab29e3cd",
            "title": "StageStructureMass",
            "title*": {"en": "Stage Structure Mass"},
            "description": "This is an autogenerated partial class definition of 'StageStructureMass'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasStageStructureMassValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc74bc7a7558c5c9aa7aa0282ab29e3cd"]


class TotalLinearStoppingPowerUnit(UnitEnum):
    joule_per_meter = "Item:OSW0505357de255592eb766bdfce883acb3"


class TotalLinearStoppingPower(QuantityValue):
    """
    The "Total Linear Stopping Power" is defined as the average energy loss of the particle per unit path length.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "d95e7eb1-0378-5c85-97c8-cd21e96c3c86",
            "title": "TotalLinearStoppingPower",
            "title*": {"en": "Total Linear Stopping Power"},
            "description": 'The "Total Linear Stopping Power" is defined as the average energy loss of the particle per unit path length.',
            "description*": {
                "en": 'The "Total Linear Stopping Power" is defined as the average energy loss of the particle per unit path length.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTotalLinearStoppingPowerValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd95e7eb103785c8597c8cd21e96c3c86"]
    unit: Optional[TotalLinearStoppingPowerUnit] = Field(
        TotalLinearStoppingPowerUnit.joule_per_meter,
        options={"enum_titles": ["J/m"]},
        title="TotalLinearStoppingPowerUnit",
        x_enum_varnames=["joule_per_meter"],
    )


class ThermalResistanceUnit(UnitEnum):
    kelvin_per_watt = "Item:OSW3e3198453a27527ead13a1e41cd9d0f0"


class ThermalResistance(QuantityValue):
    """
    $\\textit{Thermal Resistance}$ is a heat property and a measure of a temperature difference by which an object or material resists a heat flow (heat per time unit or thermal resistance). Thermal resistance is the reciprocal thermal conductance. the thermodynamic temperature difference divided by heat flow rate. Thermal resistance $R$ has the units $\frac{m^2 \cdot K}{W}$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "55e45a78-a828-5422-8a5a-c2e6893d1d95",
            "title": "ThermalResistance",
            "title*": {"en": "Thermal resistance", "de": "Thermischer Widerstand"},
            "description": "$\\textit{Thermal Resistance}$ is a heat property and a measure of a temperature difference by which an object or material resists a heat flow (heat per time unit or thermal resistance). Thermal resistance is the reciprocal thermal conductance. the thermodynamic temperature difference divided by heat flow rate. Thermal resistance $R$ has the units $\\frac{m^2 \\cdot K}{W}$.",
            "description*": {
                "en": "$\\textit{Thermal Resistance}$ is a heat property and a measure of a temperature difference by which an object or material resists a heat flow (heat per time unit or thermal resistance). Thermal resistance is the reciprocal thermal conductance. the thermodynamic temperature difference divided by heat flow rate. Thermal resistance $R$ has the units $\\frac{m^2 \\cdot K}{W}$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThermalResistanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW55e45a78a82854228a5ac2e6893d1d95"]
    unit: Optional[ThermalResistanceUnit] = Field(
        ThermalResistanceUnit.kelvin_per_watt,
        options={"enum_titles": ["K/W"]},
        title="ThermalResistanceUnit",
        x_enum_varnames=["kelvin_per_watt"],
    )


class DisplacementCurrentDensityUnit(UnitEnum):
    ampere_per_meter_squared = "Item:OSW2b1e97f1edd650c088abbe8896fe0333"
    kilo_ampere_per_meter_squared = (
        "Item:OSW2b1e97f1edd650c088abbe8896fe0333#OSWa80d9ac2c0455902ab9531512c9b7667"
    )
    ampere_per_milli_meter_squared = (
        "Item:OSW2b1e97f1edd650c088abbe8896fe0333#OSW8d7d0b57aaba5f8a8f40e8bacc5cb2f6"
    )
    mega_ampere_per_meter_squared = (
        "Item:OSW2b1e97f1edd650c088abbe8896fe0333#OSWd0a4ce0cc105550b9bcbc416589a1b85"
    )
    ampere_per_centi_meter_squared = (
        "Item:OSW2b1e97f1edd650c088abbe8896fe0333#OSWec1a540d03745760af1d26077e9d762e"
    )


class DisplacementCurrentDensity(QuantityValue):
    """
    $\text{Displacement Current Density}$ is the time rate of change of the $\\textit{Electric Flux Density}$.
      This is a measure of how quickly the electric field changes if we observe it as a function of time.
      This is different than if we look at how the electric field changes spatially, that is, over a region of space for a fixed amount of time.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4838a696-4ad4-58f6-8585-2d1a1a5a62ac",
            "title": "DisplacementCurrentDensity",
            "title*": {"en": "Displacement Current Density"},
            "description": "$\\text{Displacement Current Density}$ is the time rate of change of the $\\textit{Electric Flux Density}$. \n  This is a measure of how quickly the electric field changes if we observe it as a function of time. \n  This is different than if we look at how the electric field changes spatially, that is, over a region of space for a fixed amount of time.",
            "description*": {
                "en": "$\\text{Displacement Current Density}$ is the time rate of change of the $\\textit{Electric Flux Density}$. \n  This is a measure of how quickly the electric field changes if we observe it as a function of time. \n  This is different than if we look at how the electric field changes spatially, that is, over a region of space for a fixed amount of time."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDisplacementCurrentDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4838a6964ad458f685852d1a1a5a62ac"]
    unit: Optional[DisplacementCurrentDensityUnit] = Field(
        DisplacementCurrentDensityUnit.ampere_per_meter_squared,
        options={"enum_titles": ["A/m²", "kA/m²", "A/mm²", "MA/m²", "A/cm²"]},
        title="DisplacementCurrentDensityUnit",
        x_enum_varnames=[
            "ampere_per_meter_squared",
            "kilo_ampere_per_meter_squared",
            "ampere_per_milli_meter_squared",
            "mega_ampere_per_meter_squared",
            "ampere_per_centi_meter_squared",
        ],
    )


class VolumeUnit(UnitEnum):
    meter_cubed = "Item:OSW7aa0d48fa4a45427a03c5abd43b488f8"
    milli_meter_cubed = (
        "Item:OSW7aa0d48fa4a45427a03c5abd43b488f8#OSWa9d92cf2bcb95b1887a23f99b51d8d36"
    )
    deci_meter_cubed = (
        "Item:OSW7aa0d48fa4a45427a03c5abd43b488f8#OSWdda7ee9dea455958af1466a861d5bf7d"
    )
    micro_meter_cubed = (
        "Item:OSW7aa0d48fa4a45427a03c5abd43b488f8#OSW7126d9f54e0b565898ccf21988c04366"
    )
    deca_meter_cubed = (
        "Item:OSW7aa0d48fa4a45427a03c5abd43b488f8#OSW5024fe1a02365460bbc23fa2e8a46a7b"
    )
    centi_meter_cubed = (
        "Item:OSW7aa0d48fa4a45427a03c5abd43b488f8#OSWcd2df951f11a56d2a06705a8f16b0662"
    )


class Volume(QuantityValue):
    """
    The volume of a solid object is the three-dimensional concept of how much space it occupies, often quantified numerically. One-dimensional figures (such as lines) and two-dimensional shapes (such as squares) are assigned zero volume in the three-dimensional space.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "f5c54cd7-0ddf-5ff3-b1ef-1aee6ae8f0cb",
            "title": "Volume",
            "title*": {"en": "Volume"},
            "description": "The volume of a solid object is the three-dimensional concept of how much space it occupies, often quantified numerically. One-dimensional figures (such as lines) and two-dimensional shapes (such as squares) are assigned zero volume in the three-dimensional space.",
            "description*": {
                "en": "The volume of a solid object is the three-dimensional concept of how much space it occupies, often quantified numerically. One-dimensional figures (such as lines) and two-dimensional shapes (such as squares) are assigned zero volume in the three-dimensional space."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVolumeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf5c54cd70ddf5ff3b1ef1aee6ae8f0cb"]
    unit: Optional[VolumeUnit] = Field(
        VolumeUnit.meter_cubed,
        options={"enum_titles": ["m³", "mm³", "dm³", "μm³", "dam³", "cm³"]},
        title="VolumeUnit",
        x_enum_varnames=[
            "meter_cubed",
            "milli_meter_cubed",
            "deci_meter_cubed",
            "micro_meter_cubed",
            "deca_meter_cubed",
            "centi_meter_cubed",
        ],
    )


class FirstMomentOfArea(Volume):
    """
    The first moment of area is the summation of area times distance to an axis. It is a measure of the distribution of the area of a shape in relationship to an axis.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0a1c176c-39c8-5b16-858e-4439af7f4e80",
            "title": "FirstMomentOfArea",
            "title*": {"en": "First Moment of Area"},
            "description": "The first moment of area is the summation of area times distance to an axis. It is a measure of the distribution of the area of a shape in relationship to an axis.",
            "description*": {
                "en": "The first moment of area is the summation of area times distance to an axis. It is a measure of the distribution of the area of a shape in relationship to an axis."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFirstMomentOfAreaValue",
            "@context": [
                "/wiki/Category:OSWf5c54cd70ddf5ff3b1ef1aee6ae8f0cb?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0a1c176c39c85b16858e4439af7f4e80"]


class FermiTemperature(Temperature):
    """
    "Fermi Temperature" is the temperature associated with the Fermi energy.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "869c9ca2-3865-5776-b81a-4d9a9576ffa9",
            "title": "FermiTemperature",
            "title*": {"en": "Fermi Temperature"},
            "description": '"Fermi Temperature" is the temperature associated with the Fermi energy.',
            "description*": {
                "en": '"Fermi Temperature" is the temperature associated with the Fermi energy.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFermiTemperatureValue",
            "@context": [
                "/wiki/Category:OSW20927e4900e95e93985698c92995f964?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW869c9ca238655776b81a4d9a9576ffa9"]


class ForcePerAreaUnit(UnitEnum):
    pascal = "Item:OSWb663e6bff3595e7b93b28fffce66c50c"
    milli_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW38b0e12539b05ce28cd126c8eea29f95"
    )
    deca_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW8d40059d9e3951bb97378fe3f119ba21"
    )
    kilo_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW264ebdc21f54568593a91bbd832b6fbf"
    )
    micro_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW5def4be309ce50ee933c99cf4b74e310"
    )
    hecto_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW482939f123595314beca39ad32d65a15"
    )
    mega_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW0ec5bf8132b25e58b7032766bd9b3225"
    )
    giga_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW49bb4743a5735e189777f3c6bd422a52"
    )


class ForcePerArea(QuantityValue):
    """
    The force applied to a unit area of surface; measured in pascals (SI unit) or in dynes (cgs unit)
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "2ff3a26d-af13-5634-81ac-c8b0ebc5b37f",
            "title": "ForcePerArea",
            "title*": {"en": "Force Per Area"},
            "description": "The force applied to a unit area of surface; measured in pascals (SI unit) or in dynes (cgs unit)",
            "description*": {
                "en": "The force applied to a unit area of surface; measured in pascals (SI unit) or in dynes (cgs unit)"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasForcePerAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2ff3a26daf13563481acc8b0ebc5b37f"]
    unit: Optional[ForcePerAreaUnit] = Field(
        ForcePerAreaUnit.pascal,
        options={
            "enum_titles": ["Pa", "mPa", "daPa", "kPa", "μPa", "hPa", "MPa", "GPa"]
        },
        title="ForcePerAreaUnit",
        x_enum_varnames=[
            "pascal",
            "milli_pascal",
            "deca_pascal",
            "kilo_pascal",
            "micro_pascal",
            "hecto_pascal",
            "mega_pascal",
            "giga_pascal",
        ],
    )


class Pressure(ForcePerArea):
    """
    Pressure is an effect which occurs when a force is applied on a surface. Pressure is the amount of force acting on a unit area. Pressure is distinct from stress, as the former is the ratio of the component of force normal to a surface to the surface area. Stress is a tensor that relates the vector force to the vector area.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b58cb5a4-654f-52e1-804c-74c035d21352",
            "title": "Pressure",
            "title*": {"en": "Pressure", "de": "Druck"},
            "description": "Pressure is an effect which occurs when a force is applied on a surface. Pressure is the amount of force acting on a unit area. Pressure is distinct from stress, as the former is the ratio of the component of force normal to a surface to the surface area. Stress is a tensor that relates the vector force to the vector area.",
            "description*": {
                "en": "Pressure is an effect which occurs when a force is applied on a surface. Pressure is the amount of force acting on a unit area. Pressure is distinct from stress, as the former is the ratio of the component of force normal to a surface to the surface area. Stress is a tensor that relates the vector force to the vector area."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPressureValue",
            "@context": [
                "/wiki/Category:OSW2ff3a26daf13563481acc8b0ebc5b37f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb58cb5a4654f52e1804c74c035d21352"]


class SystolicBloodPressure(Pressure):
    """
    The pressure of blood in the arteries which rises to a maximum as blood is pumped out by the left ventricle (systole) and drops to a minimum in diastole. The systolic/diastolic pressure is normally ~120/80 mmHg in a young adult.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "884b9506-5e35-5545-b9ad-5d495e65a1ea",
            "title": "SystolicBloodPressure",
            "title*": {"en": "Systolic Blood Pressure"},
            "description": "The pressure of blood in the arteries which rises to a maximum as blood is pumped out by the left ventricle (systole) and drops to a minimum in diastole. The systolic/diastolic pressure is normally ~120/80 mmHg in a young adult.",
            "description*": {
                "en": "The pressure of blood in the arteries which rises to a maximum as blood is pumped out by the left ventricle (systole) and drops to a minimum in diastole. The systolic/diastolic pressure is normally ~120/80 mmHg in a young adult."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSystolicBloodPressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW884b95065e355545b9ad5d495e65a1ea"]


class LengthUnit(UnitEnum):
    meter = "Item:OSWf101d25e944856e3bd4b4c9863db7de2"
    micro_meter = (
        "Item:OSWf101d25e944856e3bd4b4c9863db7de2#OSWb2830572baec5cca970dde12bf0f5a2a"
    )
    nano_meter = (
        "Item:OSWf101d25e944856e3bd4b4c9863db7de2#OSW60a0f8bd28955fd6ae61177af381696c"
    )
    centi_meter = (
        "Item:OSWf101d25e944856e3bd4b4c9863db7de2#OSWe55fa0526c5d58c8a166d59ab5455fd9"
    )
    pico_meter = (
        "Item:OSWf101d25e944856e3bd4b4c9863db7de2#OSW419e951a0df45ae8a8a27806200814b7"
    )
    deca_meter = (
        "Item:OSWf101d25e944856e3bd4b4c9863db7de2#OSWf488c3090a5c542aa45dd20b7d37a8ec"
    )
    kilo_meter = (
        "Item:OSWf101d25e944856e3bd4b4c9863db7de2#OSWb1de8f91f1275572b37c2edfe40d5de6"
    )
    deci_meter = (
        "Item:OSWf101d25e944856e3bd4b4c9863db7de2#OSWf89b36f291825b78b2e376b41104ed80"
    )
    hecto_meter = (
        "Item:OSWf101d25e944856e3bd4b4c9863db7de2#OSW53a491fdba4d52428769e4bd5c447906"
    )
    milli_meter = (
        "Item:OSWf101d25e944856e3bd4b4c9863db7de2#OSW322dec469be75aedb008b3ebff29db86"
    )
    fermi = (
        "Item:OSWf101d25e944856e3bd4b4c9863db7de2#OSW53d6030c99a152d28ce56e57b5376f95"
    )


class Length(QuantityValue):
    """
    In geometric measurements, length most commonly refers to the est dimension of an object. In some contexts, the term "length" is reserved for a certain dimension of an object along which the length is measured.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "ee9c7e5c-343e-542c-b5a8-b4648315902f",
            "title": "Length",
            "title*": {"en": "Length", "de": "Länge"},
            "description": 'In geometric measurements, length most commonly refers to the est dimension of an object. In some contexts, the term "length" is reserved for a certain dimension of an object along which the length is measured.',
            "description*": {
                "en": 'In geometric measurements, length most commonly refers to the est dimension of an object. In some contexts, the term "length" is reserved for a certain dimension of an object along which the length is measured.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLengthValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWee9c7e5c343e542cb5a8b4648315902f"]
    unit: Optional[LengthUnit] = Field(
        LengthUnit.meter,
        options={
            "enum_titles": [
                "m",
                "μm",
                "nm",
                "cm",
                "pm",
                "dam",
                "km",
                "dm",
                "hm",
                "mm",
                "fm",
            ]
        },
        title="LengthUnit",
        x_enum_varnames=[
            "meter",
            "micro_meter",
            "nano_meter",
            "centi_meter",
            "pico_meter",
            "deca_meter",
            "kilo_meter",
            "deci_meter",
            "hecto_meter",
            "milli_meter",
            "fermi",
        ],
    )


class RadialDistance(Length):
    """
    In classical geometry, the "Radial Distance" is a coordinate in polar coordinate systems (r, $\theta$). Basically the radial distance is the scalar Euclidean distance between a point and the origin of the system of coordinates.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1c582dc8-1597-51f9-9cb8-3fa8f973389b",
            "title": "RadialDistance",
            "title*": {"en": "Radial Distance"},
            "description": 'In classical geometry, the "Radial Distance" is a coordinate in polar coordinate systems (r, $\\theta$). Basically the radial distance is the scalar Euclidean distance between a point and the origin of the system of coordinates.',
            "description*": {
                "en": 'In classical geometry, the "Radial Distance" is a coordinate in polar coordinate systems (r, $\\theta$). Basically the radial distance is the scalar Euclidean distance between a point and the origin of the system of coordinates.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRadialDistanceValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1c582dc8159751f99cb83fa8f973389b"]


class MassSpecificBiogeochemicalRateUnit(UnitEnum):
    micro_gram_per_day_per_gram = "Item:OSWe362097950ff5522865e835757765c17"


class MassSpecificBiogeochemicalRate(QuantityValue):
    """
    the rate at which a specific chemical element or compound is processed or transformed within an ecosystem, calculated per unit mass of the relevant biological material. Unreduced, SI unit is g * g-1 * s-1
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "fde2a071-8a7c-5aec-a158-2631aec8f5e1",
            "title": "MassSpecificBiogeochemicalRate",
            "title*": {"en": "Mass Specific Biogeochemical Rate"},
            "description": "the rate at which a specific chemical element or compound is processed or transformed within an ecosystem, calculated per unit mass of the relevant biological material. Unreduced, SI unit is g * g-1 * s-1",
            "description*": {
                "en": "the rate at which a specific chemical element or compound is processed or transformed within an ecosystem, calculated per unit mass of the relevant biological material. Unreduced, SI unit is g * g-1 * s-1"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassSpecificBiogeochemicalRateValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfde2a0718a7c5aeca1582631aec8f5e1"]
    unit: Optional[MassSpecificBiogeochemicalRateUnit] = Field(
        MassSpecificBiogeochemicalRateUnit.micro_gram_per_day_per_gram,
        options={"enum_titles": ["μg/(g·d)"]},
        title="MassSpecificBiogeochemicalRateUnit",
        x_enum_varnames=["micro_gram_per_day_per_gram"],
    )


class DiffusionCoefficientForFluenceRate(Length):
    """
    The "Diffusion Coefficient for Fluence Rate" is a proportionality constant between the .
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "fadb71c3-03c5-5656-bd54-245387aa2ca8",
            "title": "DiffusionCoefficientForFluenceRate",
            "title*": {"en": "Diffusion Coefficient for Fluence Rate"},
            "description": 'The "Diffusion Coefficient for Fluence Rate" is a proportionality constant between the .',
            "description*": {
                "en": 'The "Diffusion Coefficient for Fluence Rate" is a proportionality constant between the .'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDiffusionCoefficientForFluenceRateValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfadb71c303c55656bd54245387aa2ca8"]


class EnergyUnit(UnitEnum):
    joule = "Item:OSW730568cd7ae65906abbbcef1d15cb074"
    atto_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSWa73c696efa58519aa07c265ea965ceda"
    )
    kilo_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSWad2518d42b685f569679c3599455c3d3"
    )
    peta_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW4e7003f5d7ff58a190167711dd63b0bd"
    )
    milli_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW6df751011258508e9d15967190c819f3"
    )
    giga_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSWc26bf1cf449d56ef8122745336585d2b"
    )
    femto_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW2d5cdc08b064506e8f9a5b0456b7a0b3"
    )
    exa_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW5ba80670b2945c08b35551442d3169d5"
    )
    tera_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW0ac3643d930d5c99936e5ece487a9634"
    )
    mega_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSWc1525b1f1fc05c40b9715328bf707805"
    )


class Energy(QuantityValue):
    """
    Energy is the quantity characterizing the ability of a system to do work.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "c87ddd4a-7d11-59f0-a75b-686a61ef4e8e",
            "title": "Energy",
            "title*": {"en": "Energy", "de": "Energie"},
            "description": "Energy is the quantity characterizing the ability of a system to do work.",
            "description*": {
                "en": "Energy is the quantity characterizing the ability of a system to do work."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnergyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e"]
    unit: Optional[EnergyUnit] = Field(
        EnergyUnit.joule,
        options={
            "enum_titles": ["J", "aJ", "kJ", "PJ", "mJ", "GJ", "fJ", "EJ", "TJ", "MJ"]
        },
        title="EnergyUnit",
        x_enum_varnames=[
            "joule",
            "atto_joule",
            "kilo_joule",
            "peta_joule",
            "milli_joule",
            "giga_joule",
            "femto_joule",
            "exa_joule",
            "tera_joule",
            "mega_joule",
        ],
    )


class ThermalEnergy(Energy):
    """
    "Thermal Energy" is the portion of the thermodynamic or internal energy of a system that is responsible for the temperature of the system. From a macroscopic thermodynamic description, the thermal energy of a system is given by its constant volume specific heat capacity C(T), a temperature coefficient also called thermal capacity, at any given absolute temperature (T): $U_{thermal} = C(T) \cdot T$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "487ed07f-775b-5dc2-b0f8-185d06e33fb8",
            "title": "ThermalEnergy",
            "title*": {"en": "Thermal Energy"},
            "description": '"Thermal Energy" is the portion of the thermodynamic or internal energy of a system that is responsible for the temperature of the system. From a macroscopic thermodynamic description, the thermal energy of a system is given by its constant volume specific heat capacity C(T), a temperature coefficient also called thermal capacity, at any given absolute temperature (T): $U_{thermal} = C(T) \\cdot T$.',
            "description*": {
                "en": '"Thermal Energy" is the portion of the thermodynamic or internal energy of a system that is responsible for the temperature of the system. From a macroscopic thermodynamic description, the thermal energy of a system is given by its constant volume specific heat capacity C(T), a temperature coefficient also called thermal capacity, at any given absolute temperature (T): $U_{thermal} = C(T) \\cdot T$.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThermalEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW487ed07f775b5dc2b0f8185d06e33fb8"]


class ThermalDiffusionCoefficientUnit(UnitEnum):
    meter_squared_per_second = "Item:OSW20b837bfd2fa5c3abc86347ce702f27c"
    milli_meter_squared_per_second = (
        "Item:OSW20b837bfd2fa5c3abc86347ce702f27c#OSW5db8f161eb8c59129cef62d84dd3309c"
    )
    centi_meter_squared_per_second = (
        "Item:OSW20b837bfd2fa5c3abc86347ce702f27c#OSW031bb99ee99a5794a24c66e6203c21db"
    )


class ThermalDiffusionCoefficient(QuantityValue):
    """
    The "Thermal Diffusion Coefficient" is .
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "e86c6ab0-958a-515d-a6b3-7bbec5a4c8e6",
            "title": "ThermalDiffusionCoefficient",
            "title*": {"en": "Thermal Diffusion Coefficient"},
            "description": 'The "Thermal Diffusion Coefficient" is .',
            "description*": {"en": 'The "Thermal Diffusion Coefficient" is .'},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThermalDiffusionCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe86c6ab0958a515da6b37bbec5a4c8e6"]
    unit: Optional[ThermalDiffusionCoefficientUnit] = Field(
        ThermalDiffusionCoefficientUnit.meter_squared_per_second,
        options={"enum_titles": ["m²/s", "mm²/s", "cm²/s"]},
        title="ThermalDiffusionCoefficientUnit",
        x_enum_varnames=[
            "meter_squared_per_second",
            "milli_meter_squared_per_second",
            "centi_meter_squared_per_second",
        ],
    )


class ElectricChargePerMassUnit(UnitEnum):
    ampere_meter_squared_per_joule_per_second = (
        "Item:OSW57e1f78efd6a50fd8f2c35ea808d7b86"
    )


class ElectricChargePerMass(QuantityValue):
    """
    "Electric Charge Per Mass" is the charge associated with a specific mass of a substance. In the SI and ISO systems this is $1 kg$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "27391d33-7252-54a2-88fe-fb618be785f7",
            "title": "ElectricChargePerMass",
            "title*": {"en": "Electric Charge Per Mass"},
            "description": '"Electric Charge Per Mass" is the charge associated with a specific mass of a substance. In the SI and ISO systems this is $1 kg$.',
            "description*": {
                "en": '"Electric Charge Per Mass" is the charge associated with a specific mass of a substance. In the SI and ISO systems this is $1 kg$.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricChargePerMassValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW27391d33725254a288fefb618be785f7"]
    unit: Optional[ElectricChargePerMassUnit] = Field(
        ElectricChargePerMassUnit.ampere_meter_squared_per_joule_per_second,
        options={"enum_titles": ["A·m²/(J·s)"]},
        title="ElectricChargePerMassUnit",
        x_enum_varnames=["ampere_meter_squared_per_joule_per_second"],
    )


class MassEquivalent(Mass):
    """
    "Mass Equivalent" is the mass of a substance that reacts with (or is equivalent to) an arbitrary mass of
    another substance in a given chemical reaction.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ea122144-0096-5c81-8daf-0b53062ccf4a",
            "title": "MassEquivalent",
            "title*": {"en": "Mass Equivalent"},
            "description": '"Mass Equivalent" is the mass of a substance that reacts with (or is equivalent to) an arbitrary mass of \nanother substance in a given chemical reaction.',
            "description*": {
                "en": '"Mass Equivalent" is the mass of a substance that reacts with (or is equivalent to) an arbitrary mass of \nanother substance in a given chemical reaction.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassEquivalentValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWea12214400965c818daf0b53062ccf4a"]


class InverseVolumeUnit(UnitEnum):
    per_meter_cubed = "Item:OSW22ea6fd32be65173b6ce52e47446c8ed"
    per_milli_meter_cubed = (
        "Item:OSW22ea6fd32be65173b6ce52e47446c8ed#OSWd3bd49d926475edfbe5b54108429d801"
    )
    per_centi_meter_cubed = (
        "Item:OSW22ea6fd32be65173b6ce52e47446c8ed#OSWf6d64151fc835995b48c0fc8bb64a36a"
    )


class InverseVolume(QuantityValue):
    """
    This is an autogenerated partial class definition of 'InverseVolume'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "dc5df784-e44e-5802-beda-722786fd75bf",
            "title": "InverseVolume",
            "title*": {"en": "Inverse Volume"},
            "description": "This is an autogenerated partial class definition of 'InverseVolume'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInverseVolumeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWdc5df784e44e5802beda722786fd75bf"]
    unit: Optional[InverseVolumeUnit] = Field(
        InverseVolumeUnit.per_meter_cubed,
        options={"enum_titles": ["1/m³", "1/mm³", "1/cm³"]},
        title="InverseVolumeUnit",
        x_enum_varnames=[
            "per_meter_cubed",
            "per_milli_meter_cubed",
            "per_centi_meter_cubed",
        ],
    )


class IonConcentration(InverseVolume):
    """
    "Ion Concentration" is the number of ions per unit volume. Also known as ion density.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0e8c5f1a-9053-50cc-bc81-45c63ae0d57c",
            "title": "IonConcentration",
            "title*": {"en": "Ion Concentration"},
            "description": '"Ion Concentration" is the number of ions per unit volume. Also known as ion density.',
            "description*": {
                "en": '"Ion Concentration" is the number of ions per unit volume. Also known as ion density.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasIonConcentrationValue",
            "@context": [
                "/wiki/Category:OSWdc5df784e44e5802beda722786fd75bf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0e8c5f1a905350ccbc8145c63ae0d57c"]


class TimeUnit(UnitEnum):
    second = "Item:OSW85302b21cf045998b80f38c9fdb88f84"
    nano_second = (
        "Item:OSW85302b21cf045998b80f38c9fdb88f84#OSW14e2efd7a4a05306a74663592edb23e8"
    )
    micro_second = (
        "Item:OSW85302b21cf045998b80f38c9fdb88f84#OSW90ff22cff2dd5d8ba6de84bf9a70c50c"
    )
    pico_second = (
        "Item:OSW85302b21cf045998b80f38c9fdb88f84#OSWc6f2918cbdef5bde8d00cf86938c7f8e"
    )
    atto_second = (
        "Item:OSW85302b21cf045998b80f38c9fdb88f84#OSW2e4fec0373f45f1891403f06e433c5eb"
    )
    kilo_second = (
        "Item:OSW85302b21cf045998b80f38c9fdb88f84#OSWbc38445f00d056069fef04f8e25c66f6"
    )
    deci_second = (
        "Item:OSW85302b21cf045998b80f38c9fdb88f84#OSW78488a0c8e885365beff30aae10a4efd"
    )
    femto_second = (
        "Item:OSW85302b21cf045998b80f38c9fdb88f84#OSWd1e24421c83d5defb5c22e9a5fe490fb"
    )
    milli_second = (
        "Item:OSW85302b21cf045998b80f38c9fdb88f84#OSW84d4f530814e5251b06e73ee0184e32b"
    )


class Time(QuantityValue):
    """
    Time is a basic component of the measuring system used to sequence events, to compare the durations of events and the intervals between them, and to quantify the motions of objects.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "389cb87d-31be-515a-a5d2-f12e2b66e938",
            "title": "Time",
            "title*": {"en": "Time", "de": "Zeit"},
            "description": "Time is a basic component of the measuring system used to sequence events, to compare the durations of events and the intervals between them, and to quantify the motions of objects.",
            "description*": {
                "en": "Time is a basic component of the measuring system used to sequence events, to compare the durations of events and the intervals between them, and to quantify the motions of objects."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTimeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW389cb87d31be515aa5d2f12e2b66e938"]
    unit: Optional[TimeUnit] = Field(
        TimeUnit.second,
        options={"enum_titles": ["s", "ns", "µs", "ps", "as", "ks", "ds", "fs", "ms"]},
        title="TimeUnit",
        x_enum_varnames=[
            "second",
            "nano_second",
            "micro_second",
            "pico_second",
            "atto_second",
            "kilo_second",
            "deci_second",
            "femto_second",
            "milli_second",
        ],
    )


class ReverberationTime(Time):
    """
    Reverberation Time is the time required for reflections of a direct sound to decay by 60 dB below the level of the direct sound.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "594b0155-a9f7-506a-8c7b-c45f4822387f",
            "title": "ReverberationTime",
            "title*": {"en": "Reverberation Time"},
            "description": "Reverberation Time is the time required for reflections of a direct sound to decay by 60 dB below the level of the direct sound.",
            "description*": {
                "en": "Reverberation Time is the time required for reflections of a direct sound to decay by 60 dB below the level of the direct sound."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasReverberationTimeValue",
            "@context": [
                "/wiki/Category:OSW389cb87d31be515aa5d2f12e2b66e938?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW594b0155a9f7506a8c7bc45f4822387f"]


class Stress(ForcePerArea):
    """
    Stress is a measure of the average amount of force exerted per unit area of a surface within a deformable body on which internal forces act. In other words, it is a measure of the intensity or internal distribution of the total internal forces acting within a deformable body across imaginary surfaces. These internal forces are produced between the particles in the body as a reaction to external forces applied on the body. Stress is defined as ${\rm{Stress}} = \frac{F}{A}$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "74ae1de6-6beb-525e-a52e-edabf09ab228",
            "title": "Stress",
            "title*": {"en": "Stress"},
            "description": "Stress is a measure of the average amount of force exerted per unit area of a surface within a deformable body on which internal forces act. In other words, it is a measure of the intensity or internal distribution of the total internal forces acting within a deformable body across imaginary surfaces. These internal forces are produced between the particles in the body as a reaction to external forces applied on the body. Stress is defined as ${\\rm{Stress}} = \\frac{F}{A}$.",
            "description*": {
                "en": "Stress is a measure of the average amount of force exerted per unit area of a surface within a deformable body on which internal forces act. In other words, it is a measure of the intensity or internal distribution of the total internal forces acting within a deformable body across imaginary surfaces. These internal forces are produced between the particles in the body as a reaction to external forces applied on the body. Stress is defined as ${\\rm{Stress}} = \\frac{F}{A}$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasStressValue",
            "@context": [
                "/wiki/Category:OSW2ff3a26daf13563481acc8b0ebc5b37f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW74ae1de66beb525ea52eedabf09ab228"]


class Angle(DimensionlessRatio):
    """
    The abstract notion of angle. Narrow concepts include plane angle and solid angle. While both plane angle and solid angle are dimensionless, they are actually length/length and area/area respectively.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2339256a-f71e-5635-a541-ac7f5a437141",
            "title": "Angle",
            "title*": {"en": "Angle"},
            "description": "The abstract notion of angle. Narrow concepts include plane angle and solid angle. While both plane angle and solid angle are dimensionless, they are actually length/length and area/area respectively.",
            "description*": {
                "en": "The abstract notion of angle. Narrow concepts include plane angle and solid angle. While both plane angle and solid angle are dimensionless, they are actually length/length and area/area respectively."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngleValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2339256af71e5635a541ac7f5a437141"]


class Azimuth(Angle):
    """
    The horizontal angle between an object and a cardinal direction, generally north.
      In the context of architecture, this would refer to the direction a structure faces relative to the direction north.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "d912fbf9-0a89-5d56-8036-bb01e07fe232",
            "title": "Azimuth",
            "title*": {"en": "Azimuth"},
            "description": "The horizontal angle between an object and a cardinal direction, generally north. \n  In the context of architecture, this would refer to the direction a structure faces relative to the direction north.",
            "description*": {
                "en": "The horizontal angle between an object and a cardinal direction, generally north. \n  In the context of architecture, this would refer to the direction a structure faces relative to the direction north."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAzimuthValue",
            "@context": [
                "/wiki/Category:OSW2339256af71e5635a541ac7f5a437141?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd912fbf90a895d568036bb01e07fe232"]


class Dimensionless(QuantityValue):
    """
    In dimensional analysis, a dimensionless quantity or quantity of dimension one is a quantity without an associated physical dimension. It is thus a "pure" number, and as such always has a dimension of 1. Dimensionless quantities are widely used in mathematics, physics, engineering, economics, and in everyday life (such as in counting). Numerous well-known quantities, such as $\pi$, $\epsilon$, and $\psi$, are dimensionless. By contrast, non-dimensionless quantities are measured in units of length, area, time, etc. Dimensionless quantities are often defined as products or ratios of quantities that are not dimensionless, but whose dimensions cancel out when their powers are multiplied.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "bcaa33bd-770e-53e0-9d5e-6087d141648b",
            "title": "Dimensionless",
            "title*": {"en": "Dimensionless"},
            "description": 'In dimensional analysis, a dimensionless quantity or quantity of dimension one is a quantity without an associated physical dimension. It is thus a "pure" number, and as such always has a dimension of 1. Dimensionless quantities are widely used in mathematics, physics, engineering, economics, and in everyday life (such as in counting). Numerous well-known quantities, such as $\\pi$, $\\epsilon$, and $\\psi$, are dimensionless. By contrast, non-dimensionless quantities are measured in units of length, area, time, etc. Dimensionless quantities are often defined as products or ratios of quantities that are not dimensionless, but whose dimensions cancel out when their powers are multiplied.',
            "description*": {
                "en": 'In dimensional analysis, a dimensionless quantity or quantity of dimension one is a quantity without an associated physical dimension. It is thus a "pure" number, and as such always has a dimension of 1. Dimensionless quantities are widely used in mathematics, physics, engineering, economics, and in everyday life (such as in counting). Numerous well-known quantities, such as $\\pi$, $\\epsilon$, and $\\psi$, are dimensionless. By contrast, non-dimensionless quantities are measured in units of length, area, time, etc. Dimensionless quantities are often defined as products or ratios of quantities that are not dimensionless, but whose dimensions cancel out when their powers are multiplied.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDimensionlessValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWbcaa33bd770e53e09d5e6087d141648b"]
    unit: Optional[DimensionlessUnit] = Field(
        DimensionlessUnit.dimensionless,
        options={"enum_titles": ["#"]},
        title="DimensionlessUnit",
        x_enum_varnames=[""],
    )


class MagneticFluxUnit(UnitEnum):
    weber = "Item:OSW7f1fb9d6ddeb5fb7a8a39067553a6dc1"
    milli_weber = (
        "Item:OSW7f1fb9d6ddeb5fb7a8a39067553a6dc1#OSWa09dcefcc2be5cb1ae116d0189c300e3"
    )


class MagneticFlux(QuantityValue):
    """
    "Magnetic Flux" is the product of the average magnetic field times the perpendicular area that it penetrates.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "82a515de-9bcc-5af8-a2f3-3974e7ec0f1a",
            "title": "MagneticFlux",
            "title*": {"en": "Magnetic flux", "de": "Magnetischer Flux"},
            "description": '"Magnetic Flux" is the product of the average magnetic field times the perpendicular area that it penetrates.',
            "description*": {
                "en": '"Magnetic Flux" is the product of the average magnetic field times the perpendicular area that it penetrates.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMagneticFluxValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW82a515de9bcc5af8a2f33974e7ec0f1a"]
    unit: Optional[MagneticFluxUnit] = Field(
        MagneticFluxUnit.weber,
        options={"enum_titles": ["Wb", "mWb"]},
        title="MagneticFluxUnit",
        x_enum_varnames=["weber", "milli_weber"],
    )


class ControlMass(Mass):
    """
    The upper design gross mass limit of a system at a specified mission event against which margins are calculated after accounting for basic masses of flight hardware, MGA, and uncertainties. It may include propellants, crew, and cargo.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "d6fcda46-9e69-56fc-ab37-90181555ecce",
            "title": "ControlMass",
            "title*": {"en": "Control Mass."},
            "description": "The upper design gross mass limit of a system at a specified mission event against which margins are calculated after accounting for basic masses of flight hardware, MGA, and uncertainties. It may include propellants, crew, and cargo.",
            "description*": {
                "en": "The upper design gross mass limit of a system at a specified mission event against which margins are calculated after accounting for basic masses of flight hardware, MGA, and uncertainties. It may include propellants, crew, and cargo."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasControlMassValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd6fcda469e6956fcab3790181555ecce"]


class MolarFlowRateUnit(UnitEnum):
    mole_per_second = "Item:OSW6b764c5799c45b62bb947ed93f8b99eb"
    kilo_mole_per_second = (
        "Item:OSW6b764c5799c45b62bb947ed93f8b99eb#OSWb3ad32c2d89057e08a13a3562b52bd17"
    )
    micro_mole_per_second = (
        "Item:OSW6b764c5799c45b62bb947ed93f8b99eb#OSW10e98cb9b70150158fc1544d9f094ad2"
    )


class MolarFlowRate(QuantityValue):
    """
    Molar Flow Rate is a measure of the amount of substance (the number of molecules) that passes through a given area perpendicular to the flow in a given time. Typically this area is constrained, for example a section through a pipe, but it could also apply to an open flow.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "1ccf7d20-cba9-5e54-a9c0-b3f6c9ca2c6b",
            "title": "MolarFlowRate",
            "title*": {"en": "Molar Flow Rate"},
            "description": "Molar Flow Rate is a measure of the amount of substance (the number of molecules) that passes through a given area perpendicular to the flow in a given time. Typically this area is constrained, for example a section through a pipe, but it could also apply to an open flow.",
            "description*": {
                "en": "Molar Flow Rate is a measure of the amount of substance (the number of molecules) that passes through a given area perpendicular to the flow in a given time. Typically this area is constrained, for example a section through a pipe, but it could also apply to an open flow."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarFlowRateValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1ccf7d20cba95e54a9c0b3f6c9ca2c6b"]
    unit: Optional[MolarFlowRateUnit] = Field(
        MolarFlowRateUnit.mole_per_second,
        options={"enum_titles": ["mol/s", "kmol/s", "μmol/s"]},
        title="MolarFlowRateUnit",
        x_enum_varnames=[
            "mole_per_second",
            "kilo_mole_per_second",
            "micro_mole_per_second",
        ],
    )


class ResonanceEnergy(Energy):
    """
    "Resonance Energy" in a nuclear reaction, is the kinetic energy of an incident particle, in the reference frame of the target, corresponding to a resonance in a nuclear reaction.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0299be3f-8ccc-586f-b297-5ad954b2e3bd",
            "title": "ResonanceEnergy",
            "title*": {"en": "Resonance Energy"},
            "description": '"Resonance Energy" in a nuclear reaction, is the kinetic energy of an incident particle, in the reference frame of the target, corresponding to a resonance in a nuclear reaction.',
            "description*": {
                "en": '"Resonance Energy" in a nuclear reaction, is the kinetic energy of an incident particle, in the reference frame of the target, corresponding to a resonance in a nuclear reaction.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasResonanceEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0299be3f8ccc586fb2975ad954b2e3bd"]


class InformationEntropy(Dimensionless):
    """
    Information Entropy is a concept from information theory. It tells how much information there is in an event. In general, the more uncertain or random the event is, the more information it will contain. The concept of information entropy was created by a mathematician. He was named Claude Elwood Shannon. It has applications in many areas, including lossless data compression, statistical inference, cryptography and recently in other disciplines as biology, physics or machine learning.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "9b6dead1-d473-58a0-99b7-3ba6b309597e",
            "title": "InformationEntropy",
            "title*": {"en": "Information Entropy"},
            "description": "Information Entropy is a concept from information theory. It tells how much information there is in an event. In general, the more uncertain or random the event is, the more information it will contain. The concept of information entropy was created by a mathematician. He was named Claude Elwood Shannon. It has applications in many areas, including lossless data compression, statistical inference, cryptography and recently in other disciplines as biology, physics or machine learning.",
            "description*": {
                "en": "Information Entropy is a concept from information theory. It tells how much information there is in an event. In general, the more uncertain or random the event is, the more information it will contain. The concept of information entropy was created by a mathematician. He was named Claude Elwood Shannon. It has applications in many areas, including lossless data compression, statistical inference, cryptography and recently in other disciplines as biology, physics or machine learning."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInformationEntropyValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9b6dead1d47358a099b73ba6b309597e"]


class EnergyPerElectricChargeUnit(UnitEnum):
    volt = "Item:OSW85efe1428cb75363a75aab6435e2d98d"
    micro_volt = (
        "Item:OSW85efe1428cb75363a75aab6435e2d98d#OSWc0cb09a94aa553589a59ea70bfccfc96"
    )
    mega_volt = (
        "Item:OSW85efe1428cb75363a75aab6435e2d98d#OSW78798aa1bdcb57f0aea8d4eb86ff3355"
    )
    milli_volt = (
        "Item:OSW85efe1428cb75363a75aab6435e2d98d#OSW82d25d00b1485cc18c204f95de4536a9"
    )
    kilo_volt = (
        "Item:OSW85efe1428cb75363a75aab6435e2d98d#OSW4deed980237a5360b48e0dd1331d4199"
    )


class EnergyPerElectricCharge(QuantityValue):
    """
    Voltage is a representation of the electric potential energy per unit charge. If a unit of electrical charge were placed in a location, the voltage indicates the potential energy of it at that point. In other words, it is a measurement of the energy contained within an electric field, or an electric circuit, at a given point. Voltage is a scalar quantity. The SI unit of voltage is the volt, such that $1 volt = 1 joule/coulomb$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "ce9a8c0d-fd21-59b2-a628-364ae9fbe9f3",
            "title": "EnergyPerElectricCharge",
            "title*": {"en": "Energy per electric charge"},
            "description": "Voltage is a representation of the electric potential energy per unit charge. If a unit of electrical charge were placed in a location, the voltage indicates the potential energy of it at that point. In other words, it is a measurement of the energy contained within an electric field, or an electric circuit, at a given point. Voltage is a scalar quantity. The SI unit of voltage is the volt, such that $1 volt = 1 joule/coulomb$.",
            "description*": {
                "en": "Voltage is a representation of the electric potential energy per unit charge. If a unit of electrical charge were placed in a location, the voltage indicates the potential energy of it at that point. In other words, it is a measurement of the energy contained within an electric field, or an electric circuit, at a given point. Voltage is a scalar quantity. The SI unit of voltage is the volt, such that $1 volt = 1 joule/coulomb$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnergyPerElectricChargeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWce9a8c0dfd2159b2a628364ae9fbe9f3"]
    unit: Optional[EnergyPerElectricChargeUnit] = Field(
        EnergyPerElectricChargeUnit.volt,
        options={"enum_titles": ["V", "µV", "MV", "mV", "kV"]},
        title="EnergyPerElectricChargeUnit",
        x_enum_varnames=["volt", "micro_volt", "mega_volt", "milli_volt", "kilo_volt"],
    )


class CatalyticActivityConcentrationUnit(UnitEnum):
    mole_per_meter_cubed_per_second = "Item:OSW030b700cf26d53fe804f2dcd9cbc44ca"


class CatalyticActivityConcentration(QuantityValue):
    """
    The catalytic activity of an enzyme per unit volume, where volume refers to that of the original enzyme‐containing preparation, not that of the assay system. It may be expressed in katals per litre.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "6d3afdeb-7207-5dae-90db-b01171c2d1db",
            "title": "CatalyticActivityConcentration",
            "title*": {"en": "Catalytic Activity Concentration"},
            "description": "The catalytic activity of an enzyme per unit volume, where volume refers to that of the original enzyme‐containing preparation, not that of the assay system. It may be expressed in katals per litre.",
            "description*": {
                "en": "The catalytic activity of an enzyme per unit volume, where volume refers to that of the original enzyme‐containing preparation, not that of the assay system. It may be expressed in katals per litre."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCatalyticActivityConcentrationValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6d3afdeb72075dae90dbb01171c2d1db"]
    unit: Optional[CatalyticActivityConcentrationUnit] = Field(
        CatalyticActivityConcentrationUnit.mole_per_meter_cubed_per_second,
        options={"enum_titles": ["mol/(m²·m·s)"]},
        title="CatalyticActivityConcentrationUnit",
        x_enum_varnames=["mole_per_meter_cubed_per_second"],
    )


class SpecificModulusUnit(UnitEnum):
    meter_squared_per_second_squared = "Item:OSWf6d6f2af61295484ab10221fe5922f97"
    kilo_meter_squared_per_second_squared = (
        "Item:OSWf6d6f2af61295484ab10221fe5922f97#OSWf19ea831be1053a9b70d6403acc15022"
    )


class SpecificModulus(QuantityValue):
    """
    <p><b>Specific modulus</b> is a <a href="/wiki/Materials_property" class="mw-redirect" title="Materials property">materials property</a> consisting of the <a href="/wiki/Elastic_modulus" title="Elastic modulus">elastic modulus</a> per mass <a href="/wiki/Density" title="Density">density</a> of a material. It is also known as the <b>stiffness to weight ratio</b> or <b>specific stiffness</b>. High specific modulus materials find wide application in <a href="/wiki/Aerospace" title="Aerospace">aerospace</a> applications where minimum structural <a href="/wiki/Weight" title="Weight">weight</a> is required. The <a href="/wiki/Dimensional_analysis" title="Dimensional analysis">dimensional analysis</a> yields units of distance squared per time squared.</p>
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "2aeee06f-4fdf-5b97-bc4b-b4c3893af100",
            "title": "SpecificModulus",
            "title*": {"en": "Specific Modulus"},
            "description": '<p><b>Specific modulus</b> is a <a href="/wiki/Materials_property" class="mw-redirect" title="Materials property">materials property</a> consisting of the <a href="/wiki/Elastic_modulus" title="Elastic modulus">elastic modulus</a> per mass <a href="/wiki/Density" title="Density">density</a> of a material. It is also known as the <b>stiffness to weight ratio</b> or <b>specific stiffness</b>. High specific modulus materials find wide application in <a href="/wiki/Aerospace" title="Aerospace">aerospace</a> applications where minimum structural <a href="/wiki/Weight" title="Weight">weight</a> is required. The <a href="/wiki/Dimensional_analysis" title="Dimensional analysis">dimensional analysis</a> yields units of distance squared per time squared.</p>',
            "description*": {
                "en": '<p><b>Specific modulus</b> is a <a href="/wiki/Materials_property" class="mw-redirect" title="Materials property">materials property</a> consisting of the <a href="/wiki/Elastic_modulus" title="Elastic modulus">elastic modulus</a> per mass <a href="/wiki/Density" title="Density">density</a> of a material. It is also known as the <b>stiffness to weight ratio</b> or <b>specific stiffness</b>. High specific modulus materials find wide application in <a href="/wiki/Aerospace" title="Aerospace">aerospace</a> applications where minimum structural <a href="/wiki/Weight" title="Weight">weight</a> is required. The <a href="/wiki/Dimensional_analysis" title="Dimensional analysis">dimensional analysis</a> yields units of distance squared per time squared.</p>'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificModulusValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2aeee06f4fdf5b97bc4bb4c3893af100"]
    unit: Optional[SpecificModulusUnit] = Field(
        SpecificModulusUnit.meter_squared_per_second_squared,
        options={"enum_titles": ["m²/s²", "km²/s²"]},
        title="SpecificModulusUnit",
        x_enum_varnames=[
            "meter_squared_per_second_squared",
            "kilo_meter_squared_per_second_squared",
        ],
    )


class IonicStrengthUnit(UnitEnum):
    mole_per_kilo_gram = "Item:OSWfd92e9c2c69754f78e4145ad3d31c34b"
    pico_mole_per_kilo_gram = (
        "Item:OSWfd92e9c2c69754f78e4145ad3d31c34b#OSWd77b5543087f560caec2016c89521715"
    )
    nano_mole_per_kilo_gram = (
        "Item:OSWfd92e9c2c69754f78e4145ad3d31c34b#OSW51bd13e67a4758bba50388bd5cffe504"
    )
    kilo_mole_per_kilo_gram = (
        "Item:OSWfd92e9c2c69754f78e4145ad3d31c34b#OSW84e7943cec52598082a96c43ab77d33a"
    )
    femto_mole_per_kilo_gram = (
        "Item:OSWfd92e9c2c69754f78e4145ad3d31c34b#OSWce6b64163d095affbef6daa39c9cd063"
    )
    centi_mole_per_kilo_gram = (
        "Item:OSWfd92e9c2c69754f78e4145ad3d31c34b#OSW9abfd6b6d96b507abac8057d6e35a74f"
    )
    milli_mole_per_kilo_gram = (
        "Item:OSWfd92e9c2c69754f78e4145ad3d31c34b#OSW78a5da75d0d15046935df4e27fa7d3a9"
    )
    micro_mole_per_kilo_gram = (
        "Item:OSWfd92e9c2c69754f78e4145ad3d31c34b#OSWa9d227b6d12958eba67fdf22b0934535"
    )


class IonicStrength(QuantityValue):
    """
    The "Ionic Strength" of a solution is a measure of the concentration of ions in that solution.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "b691a525-fb3f-5892-a203-e1246382b04b",
            "title": "IonicStrength",
            "title*": {"en": "Ionic Strength"},
            "description": 'The "Ionic Strength" of a solution is a measure of the concentration of ions in that solution.',
            "description*": {
                "en": 'The "Ionic Strength" of a solution is a measure of the concentration of ions in that solution.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasIonicStrengthValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb691a525fb3f5892a203e1246382b04b"]
    unit: Optional[IonicStrengthUnit] = Field(
        IonicStrengthUnit.mole_per_kilo_gram,
        options={
            "enum_titles": [
                "mol/kg",
                "pmol/kg",
                "nmol/kg",
                "kmol/kg",
                "fmol/kg",
                "cmol/kg",
                "mmol/kg",
                "μmol/kg",
            ]
        },
        title="IonicStrengthUnit",
        x_enum_varnames=[
            "mole_per_kilo_gram",
            "pico_mole_per_kilo_gram",
            "nano_mole_per_kilo_gram",
            "kilo_mole_per_kilo_gram",
            "femto_mole_per_kilo_gram",
            "centi_mole_per_kilo_gram",
            "milli_mole_per_kilo_gram",
            "micro_mole_per_kilo_gram",
        ],
    )


class AngularMomentumUnit(UnitEnum):
    joule_second = "Item:OSWf045a04750e15ea2b152fb3bfebf162a"
    atto_joule_second = (
        "Item:OSWf045a04750e15ea2b152fb3bfebf162a#OSW3eaa66dd20f856fe9a5c4199bc0a1ea4"
    )


class AngularMomentum(QuantityValue):
    """
    Angular Momentum of an object rotating about some reference point is the measure of the extent to which the object will continue to rotate about that point unless acted upon by an external torque. In particular, if a point mass rotates about an axis, then the angular momentum with respect to a point on the axis is related to the mass of the object, the velocity and the distance of the mass to the axis. While the motion associated with linear momentum has no absolute frame of reference, the rotation associated with angular momentum is sometimes spoken of as being measured relative to the fixed stars.  $\\textit{Angular Momentum}$, $\\textit{Moment of Momentum}, or $\\textit{Rotational Momentum", is a vector quantity that represents the product of a body's rotational inertia and rotational velocity about a particular axis.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "11c230fd-fd06-5eee-822d-39afdc9fba80",
            "title": "AngularMomentum",
            "title*": {"en": "Angular Momentum"},
            "description": "Angular Momentum of an object rotating about some reference point is the measure of the extent to which the object will continue to rotate about that point unless acted upon by an external torque. In particular, if a point mass rotates about an axis, then the angular momentum with respect to a point on the axis is related to the mass of the object, the velocity and the distance of the mass to the axis. While the motion associated with linear momentum has no absolute frame of reference, the rotation associated with angular momentum is sometimes spoken of as being measured relative to the fixed stars.  $\\textit{Angular Momentum}$, $\\textit{Moment of Momentum}, or $\\textit{Rotational Momentum\", is a vector quantity that represents the product of a body's rotational inertia and rotational velocity about a particular axis.",
            "description*": {
                "en": "Angular Momentum of an object rotating about some reference point is the measure of the extent to which the object will continue to rotate about that point unless acted upon by an external torque. In particular, if a point mass rotates about an axis, then the angular momentum with respect to a point on the axis is related to the mass of the object, the velocity and the distance of the mass to the axis. While the motion associated with linear momentum has no absolute frame of reference, the rotation associated with angular momentum is sometimes spoken of as being measured relative to the fixed stars.  $\\textit{Angular Momentum}$, $\\textit{Moment of Momentum}, or $\\textit{Rotational Momentum\", is a vector quantity that represents the product of a body's rotational inertia and rotational velocity about a particular axis."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngularMomentumValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW11c230fdfd065eee822d39afdc9fba80"]
    unit: Optional[AngularMomentumUnit] = Field(
        AngularMomentumUnit.joule_second,
        options={"enum_titles": ["J·s", "aJ·s"]},
        title="AngularMomentumUnit",
        x_enum_varnames=["joule_second", "atto_joule_second"],
    )


class ChemicalAffinityUnit(UnitEnum):
    joule_per_mole = "Item:OSW7e66beeef6b05637a554d3506d689000"
    kilo_joule_per_mole = (
        "Item:OSW7e66beeef6b05637a554d3506d689000#OSW23b10a54326955adb1862933713551f9"
    )


class ChemicalAffinity(QuantityValue):
    """
    In chemical physics and physical chemistry, "Chemical Affinity" is the electronic property by which dissimilar chemical species are capable of forming chemical compounds. Chemical affinity can also refer to the tendency of an atom or compound to combine by chemical reaction with atoms or compounds of unlike composition.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "697915ca-05ad-53cc-95b0-f14a3fd3fe5d",
            "title": "ChemicalAffinity",
            "title*": {"en": "Chemical Affinity"},
            "description": 'In chemical physics and physical chemistry, "Chemical Affinity" is the electronic property by which dissimilar chemical species are capable of forming chemical compounds. Chemical affinity can also refer to the tendency of an atom or compound to combine by chemical reaction with atoms or compounds of unlike composition.',
            "description*": {
                "en": 'In chemical physics and physical chemistry, "Chemical Affinity" is the electronic property by which dissimilar chemical species are capable of forming chemical compounds. Chemical affinity can also refer to the tendency of an atom or compound to combine by chemical reaction with atoms or compounds of unlike composition.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasChemicalAffinityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW697915ca05ad53cc95b0f14a3fd3fe5d"]
    unit: Optional[ChemicalAffinityUnit] = Field(
        ChemicalAffinityUnit.joule_per_mole,
        options={"enum_titles": ["J/mol", "kJ/mol"]},
        title="ChemicalAffinityUnit",
        x_enum_varnames=["joule_per_mole", "kilo_joule_per_mole"],
    )


class LuminousExposureUnit(UnitEnum):
    hour_lux = "Item:OSW91dd8f1236fc5d328855ad69ed6ba6c4"


class LuminousExposure(QuantityValue):
    """
    Luminous Exposure is the time-integrated illuminance.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "3e3b614b-b90a-58aa-89b5-dcddd0045fe9",
            "title": "LuminousExposure",
            "title*": {"en": "Luminous Exposure"},
            "description": "Luminous Exposure is the time-integrated illuminance.",
            "description*": {
                "en": "Luminous Exposure is the time-integrated illuminance."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLuminousExposureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3e3b614bb90a58aa89b5dcddd0045fe9"]
    unit: Optional[LuminousExposureUnit] = Field(
        LuminousExposureUnit.hour_lux,
        options={"enum_titles": ["lx·h"]},
        title="LuminousExposureUnit",
        x_enum_varnames=["hour_lux"],
    )


class ElectricCurrentPerAngleUnit(UnitEnum):
    ampere_per_radian = "Item:OSW3aba7ea2f6a552d4a9762e4b654d32a1"


class ElectricCurrentPerAngle(QuantityValue):
    """
    This is an autogenerated partial class definition of 'ElectricCurrentPerAngle'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "f46a3d86-7835-54a1-9d5b-ce2a41a98552",
            "title": "ElectricCurrentPerAngle",
            "title*": {"en": "Electric Current per Angle"},
            "description": "This is an autogenerated partial class definition of 'ElectricCurrentPerAngle'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricCurrentPerAngleValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf46a3d86783554a19d5bce2a41a98552"]
    unit: Optional[ElectricCurrentPerAngleUnit] = Field(
        ElectricCurrentPerAngleUnit.ampere_per_radian,
        options={"enum_titles": ["A/rad"]},
        title="ElectricCurrentPerAngleUnit",
        x_enum_varnames=["ampere_per_radian"],
    )


class AngularFrequencyUnit(UnitEnum):
    radian_per_second = "Item:OSWb0010d0f4c7a52e18edbfdc34e4c0653"


class AngularFrequency(QuantityValue):
    """
    "Angular frequency", symbol $\omega$ (also referred to by the terms angular speed, radial frequency, circular frequency, orbital frequency, radian frequency, and pulsatance) is a scalar measure of rotation rate. Angular frequency (or angular speed) is the magnitude of the vector quantity angular velocity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9534c898-b7d4-5510-adfa-6673507a4e10",
            "title": "AngularFrequency",
            "title*": {"en": "Angular frequency", "de": "Kreisfrequenz"},
            "description": '"Angular frequency", symbol $\\omega$ (also referred to by the terms angular speed, radial frequency, circular frequency, orbital frequency, radian frequency, and pulsatance) is a scalar measure of rotation rate. Angular frequency (or angular speed) is the magnitude of the vector quantity angular velocity.',
            "description*": {
                "en": '"Angular frequency", symbol $\\omega$ (also referred to by the terms angular speed, radial frequency, circular frequency, orbital frequency, radian frequency, and pulsatance) is a scalar measure of rotation rate. Angular frequency (or angular speed) is the magnitude of the vector quantity angular velocity.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngularFrequencyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9534c898b7d45510adfa6673507a4e10"]
    unit: Optional[AngularFrequencyUnit] = Field(
        AngularFrequencyUnit.radian_per_second,
        options={"enum_titles": ["rad/s"]},
        title="AngularFrequencyUnit",
        x_enum_varnames=["radian_per_second"],
    )


class LarmorAngularFrequency(AngularFrequency):
    """
    The "Larmor Frequency" describes angular momentum vector precession about the external field axis with an angular frequency.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a190a51f-7ec1-50b2-aea3-c45ff0ac32d3",
            "title": "LarmorAngularFrequency",
            "title*": {"en": "Larmor Angular Frequency"},
            "description": 'The "Larmor Frequency" describes angular momentum vector precession about the external field axis with an angular frequency.',
            "description*": {
                "en": 'The "Larmor Frequency" describes angular momentum vector precession about the external field axis with an angular frequency.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLarmorAngularFrequencyValue",
            "@context": [
                "/wiki/Category:OSW9534c898b7d45510adfa6673507a4e10?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa190a51f7ec150b2aea3c45ff0ac32d3"]


class MolarEnergyUnit(UnitEnum):
    joule_per_mole = "Item:OSW7e66beeef6b05637a554d3506d689000"
    kilo_joule_per_mole = (
        "Item:OSW7e66beeef6b05637a554d3506d689000#OSW23b10a54326955adb1862933713551f9"
    )


class MolarEnergy(QuantityValue):
    """
    "Molar Energy" is the total energy contained by a thermodynamic system. The unit is $$J/mol$$, also expressed as $$joule/mole$$,  or $$joules per mole$$. This unit is commonly used in the SI unit system. The quantity has the dimension of $$M \cdot L^2 \cdot  T^{-2} \cdot N^{-1}$$ where $$M$$ is mass, $$L$$ is length, $$T$$ is time, and $$N$$ is amount of substance.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "21ec5968-e3c2-533d-98f2-0564838541fa",
            "title": "MolarEnergy",
            "title*": {"en": "Molar Energy"},
            "description": '"Molar Energy" is the total energy contained by a thermodynamic system. The unit is $$J/mol$$, also expressed as $$joule/mole$$,  or $$joules per mole$$. This unit is commonly used in the SI unit system. The quantity has the dimension of $$M \\cdot L^2 \\cdot  T^{-2} \\cdot N^{-1}$$ where $$M$$ is mass, $$L$$ is length, $$T$$ is time, and $$N$$ is amount of substance.',
            "description*": {
                "en": '"Molar Energy" is the total energy contained by a thermodynamic system. The unit is $$J/mol$$, also expressed as $$joule/mole$$,  or $$joules per mole$$. This unit is commonly used in the SI unit system. The quantity has the dimension of $$M \\cdot L^2 \\cdot  T^{-2} \\cdot N^{-1}$$ where $$M$$ is mass, $$L$$ is length, $$T$$ is time, and $$N$$ is amount of substance.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarEnergyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW21ec5968e3c2533d98f20564838541fa"]
    unit: Optional[MolarEnergyUnit] = Field(
        MolarEnergyUnit.joule_per_mole,
        options={"enum_titles": ["J/mol", "kJ/mol"]},
        title="MolarEnergyUnit",
        x_enum_varnames=["joule_per_mole", "kilo_joule_per_mole"],
    )


class MolarThermodynamicEnergy(MolarEnergy):
    """
    auf die Stoffmenge bezogene Energie
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "51019f19-23e2-5459-af8d-b3083b6002e9",
            "title": "MolarThermodynamicEnergy",
            "title*": {"en": "Molar thermodynamic energy"},
            "description": "auf die Stoffmenge bezogene Energie",
            "description*": {"en": "auf die Stoffmenge bezogene Energie"},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarThermodynamicEnergyValue",
            "@context": [
                "/wiki/Category:OSW21ec5968e3c2533d98f20564838541fa?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW51019f1923e25459af8db3083b6002e9"]


class VelocityUnit(UnitEnum):
    meter_per_second = "Item:OSW78331234e1a15aeebd8b0caa71201939"
    kilo_meter_per_second = (
        "Item:OSW78331234e1a15aeebd8b0caa71201939#OSW9f12ce12bc725cd59791265e2e480fd2"
    )
    micro_meter_per_second = (
        "Item:OSW78331234e1a15aeebd8b0caa71201939#OSWfc9fca27ba5b543c8780521b4af39189"
    )
    centi_meter_per_second = (
        "Item:OSW78331234e1a15aeebd8b0caa71201939#OSWd094e4cfd62c52248aad5ef87c19fb7d"
    )
    milli_meter_per_second = (
        "Item:OSW78331234e1a15aeebd8b0caa71201939#OSW4937ac85021f506cb7ba3958f2216bd1"
    )


class Velocity(QuantityValue):
    """
    In kinematics, velocity is the speed of an object and a specification of its direction of motion. Speed describes only how fast an object is moving, whereas velocity gives both how fast and in what direction the object is moving.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "397c67ec-e63a-5a5c-96ba-d9349f49f3d7",
            "title": "Velocity",
            "title*": {"en": "Velocity", "de": "Geschwindigkeit"},
            "description": "In kinematics, velocity is the speed of an object and a specification of its direction of motion. Speed describes only how fast an object is moving, whereas velocity gives both how fast and in what direction the object is moving.",
            "description*": {
                "en": "In kinematics, velocity is the speed of an object and a specification of its direction of motion. Speed describes only how fast an object is moving, whereas velocity gives both how fast and in what direction the object is moving."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVelocityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW397c67ece63a5a5c96bad9349f49f3d7"]
    unit: Optional[VelocityUnit] = Field(
        VelocityUnit.meter_per_second,
        options={"enum_titles": ["m/s", "km/s", "μm/s", "cm/s", "mm/s"]},
        title="VelocityUnit",
        x_enum_varnames=[
            "meter_per_second",
            "kilo_meter_per_second",
            "micro_meter_per_second",
            "centi_meter_per_second",
            "milli_meter_per_second",
        ],
    )


class SpecificImpulseByMass(Velocity):
    """
    This is an autogenerated partial class definition of 'SpecificImpulseByMass'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "50d86e51-0c6f-5ba8-9824-93f58e0ed602",
            "title": "SpecificImpulseByMass",
            "title*": {"en": "Specific Impulse by Mass"},
            "description": "This is an autogenerated partial class definition of 'SpecificImpulseByMass'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificImpulseByMassValue",
            "@context": [
                "/wiki/Category:OSW397c67ece63a5a5c96bad9349f49f3d7?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW50d86e510c6f5ba8982493f58e0ed602"]


class MassConcentrationOfWaterUnit(UnitEnum):
    gram_per_deci_meter_cubed = (
        "Item:OSW9161ae8b61ca56a687f8db32bdf2ddd3#OSW08e3de493176593ebb6435ee52474b42"
    )


class MassConcentrationOfWater(QuantityValue):
    """
    Mass Concentration of Water is one of a number of Concentration quantities defined by ISO 80000.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "d6ce0df1-d9eb-5b72-9914-49f83965927c",
            "title": "MassConcentrationOfWater",
            "title*": {"en": "Mass Concentration of Water"},
            "description": "Mass Concentration of Water is one of a number of Concentration quantities defined by ISO 80000.",
            "description*": {
                "en": "Mass Concentration of Water is one of a number of Concentration quantities defined by ISO 80000."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassConcentrationOfWaterValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd6ce0df1d9eb5b72991449f83965927c"]
    unit: Optional[MassConcentrationOfWaterUnit] = Field(
        MassConcentrationOfWaterUnit.gram_per_deci_meter_cubed,
        options={"enum_titles": ["g/dm³"]},
        title="MassConcentrationOfWaterUnit",
        x_enum_varnames=["gram_per_deci_meter_cubed"],
    )


class DensityUnit(UnitEnum):
    gram_per_liter = "Item:OSW754b1a3564725113ac583f91ae2ea959"
    milli_gram_per_milli_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW99bbcff947e1508bad38d748ad6ff8e2"
    )
    gram_per_milli_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSWe905ceb23b3b550489bed5baa6c9b466"
    )
    femto_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW449dc7494f3f5c0bbd9aff1d1fd2f591"
    )
    pico_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW84ec459d4d135bf28a610cd00061d18c"
    )
    kilo_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW40c933269ec45fc1aeef04aefce2b374"
    )
    micro_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW457d0485a44c57cda788a583bf9ab4ff"
    )
    nano_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW42fdef27c8ae5c8fbf1876c400f27101"
    )
    gram_per_deci_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW1a48aea5dca45c34bbde02b0df02f6f8"
    )
    milli_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSWca4043a385f25aa3a98122f2aefd0d2e"
    )


class Density(QuantityValue):
    """
    The mass density or density of a material is defined as its mass per unit volume.
      The symbol most often used for density is $\rho$.
       Mathematically, density is defined as mass divided by volume: $\rho = m/V$,
        where $\rho$ is the density, $m$ is the mass, and $V$ is the volume.
        In some cases, density is also defined as its weight per unit volume, although this quantity is more properly called specific weight.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "571f68d4-b471-5284-b2dc-5020ad51cf72",
            "title": "Density",
            "title*": {"en": "Density"},
            "description": "The mass density or density of a material is defined as its mass per unit volume. \n  The symbol most often used for density is $\\rho$. \n   Mathematically, density is defined as mass divided by volume: $\\rho = m/V$,\n    where $\\rho$ is the density, $m$ is the mass, and $V$ is the volume. \n    In some cases, density is also defined as its weight per unit volume, although this quantity is more properly called specific weight.",
            "description*": {
                "en": "The mass density or density of a material is defined as its mass per unit volume. \n  The symbol most often used for density is $\\rho$. \n   Mathematically, density is defined as mass divided by volume: $\\rho = m/V$,\n    where $\\rho$ is the density, $m$ is the mass, and $V$ is the volume. \n    In some cases, density is also defined as its weight per unit volume, although this quantity is more properly called specific weight."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW571f68d4b4715284b2dc5020ad51cf72"]
    unit: Optional[DensityUnit] = Field(
        DensityUnit.gram_per_liter,
        options={
            "enum_titles": [
                "g/L",
                "mg/mL",
                "g/mL",
                "fg/L",
                "pg/L",
                "kg/L",
                "μg/L",
                "ng/L",
                "g/dL",
                "mg/L",
            ]
        },
        title="DensityUnit",
        x_enum_varnames=[
            "gram_per_liter",
            "milli_gram_per_milli_liter",
            "gram_per_milli_liter",
            "femto_gram_per_liter",
            "pico_gram_per_liter",
            "kilo_gram_per_liter",
            "micro_gram_per_liter",
            "nano_gram_per_liter",
            "gram_per_deci_liter",
            "milli_gram_per_liter",
        ],
    )


class ElectricCurrentPerEnergyUnit(UnitEnum):
    ampere_per_joule = "Item:OSW35db123ef0b25089bab3d9eaa2b5cb67"


class ElectricCurrentPerEnergy(QuantityValue):
    """
    This is an autogenerated partial class definition of 'ElectricCurrentPerEnergy'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "89839410-1b5d-5986-8314-ca9df841107b",
            "title": "ElectricCurrentPerEnergy",
            "title*": {"en": "Electric Current per Energy"},
            "description": "This is an autogenerated partial class definition of 'ElectricCurrentPerEnergy'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricCurrentPerEnergyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW898394101b5d59868314ca9df841107b"]
    unit: Optional[ElectricCurrentPerEnergyUnit] = Field(
        ElectricCurrentPerEnergyUnit.ampere_per_joule,
        options={"enum_titles": ["A/J"]},
        title="ElectricCurrentPerEnergyUnit",
        x_enum_varnames=["ampere_per_joule"],
    )


class IonizationEnergy(Energy):
    """
    "Ionization Energy" is the energy difference between an electron at rest at infinity and an electron at a certain energy level. The amount of energy required to remove an electron from that atom or molecule in the gas phase.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "510287e6-716f-5be0-98e9-ad2c80ea3d4f",
            "title": "IonizationEnergy",
            "title*": {"en": "Ionization Energy"},
            "description": '"Ionization Energy" is the energy difference between an electron at rest at infinity and an electron at a certain energy level. The amount of energy required to remove an electron from that atom or molecule in the gas phase.',
            "description*": {
                "en": '"Ionization Energy" is the energy difference between an electron at rest at infinity and an electron at a certain energy level. The amount of energy required to remove an electron from that atom or molecule in the gas phase.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasIonizationEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW510287e6716f5be098e9ad2c80ea3d4f"]


class AcceptorIonizationEnergy(IonizationEnergy):
    """
    "Acceptor Ionization Energy" is the ionization energy of an acceptor.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c0f0bce2-b276-5c13-898e-cb55bde6cd0f",
            "title": "AcceptorIonizationEnergy",
            "title*": {"en": "Acceptor Ionization Energy"},
            "description": '"Acceptor Ionization Energy" is the ionization energy of an acceptor.',
            "description*": {
                "en": '"Acceptor Ionization Energy" is the ionization energy of an acceptor.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAcceptorIonizationEnergyValue",
            "@context": [
                "/wiki/Category:OSW510287e6716f5be098e9ad2c80ea3d4f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc0f0bce2b2765c13898ecb55bde6cd0f"]


class MassFlowRateUnit(UnitEnum):
    kilo_gram_per_second = (
        "Item:OSWf6bfa826fcea5795b76c5756f7ec78fb#OSWfe7b5227d12757e789055c9fd32d15e4"
    )


class MassFlowRate(QuantityValue):
    """
    "Mass Flow Rate" is a measure of Mass flux. The common symbol is $\dot{m}$ (pronounced $m-dot$), although sometimes $\mu$ is used. The SI units are $kg s-1$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4a0860ff-03e6-5af1-9b7c-64e3b837fc81",
            "title": "MassFlowRate",
            "title*": {"en": "Mass Flow Rate"},
            "description": '"Mass Flow Rate" is a measure of Mass flux. The common symbol is $\\dot{m}$ (pronounced $m-dot$), although sometimes $\\mu$ is used. The SI units are $kg s-1$.',
            "description*": {
                "en": '"Mass Flow Rate" is a measure of Mass flux. The common symbol is $\\dot{m}$ (pronounced $m-dot$), although sometimes $\\mu$ is used. The SI units are $kg s-1$.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassFlowRateValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4a0860ff03e65af19b7c64e3b837fc81"]
    unit: Optional[MassFlowRateUnit] = Field(
        MassFlowRateUnit.kilo_gram_per_second,
        options={"enum_titles": ["kg/s"]},
        title="MassFlowRateUnit",
        x_enum_varnames=["kilo_gram_per_second"],
    )


class Altitude(Length):
    """
    Altitude or height is defined based on the context in which it is used (aviation, geometry, geographical survey, sport, and more). As a general definition, altitude is a distance measurement, usually in the vertical or "up" direction, between a reference datum and a point or object. The reference datum also often varies according to the context. [Wikipedia]
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2423ce4a-8e5c-5a27-8249-2fd72d06ee04",
            "title": "Altitude",
            "title*": {"en": "Altitude"},
            "description": 'Altitude or height is defined based on the context in which it is used (aviation, geometry, geographical survey, sport, and more). As a general definition, altitude is a distance measurement, usually in the vertical or "up" direction, between a reference datum and a point or object. The reference datum also often varies according to the context. [Wikipedia]',
            "description*": {
                "en": 'Altitude or height is defined based on the context in which it is used (aviation, geometry, geographical survey, sport, and more). As a general definition, altitude is a distance measurement, usually in the vertical or "up" direction, between a reference datum and a point or object. The reference datum also often varies according to the context. [Wikipedia]'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAltitudeValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2423ce4a8e5c5a2782492fd72d06ee04"]


class ConcentrationUnit(UnitEnum):
    mole_per_meter_cubed = "Item:OSW8ac2d9421f455305abb01a51d001cc54"
    milli_mole_per_meter_cubed = (
        "Item:OSW8ac2d9421f455305abb01a51d001cc54#OSWdc37f32c45c75ead9b0ac9a0547030eb"
    )
    mole_per_deci_meter_cubed = (
        "Item:OSW8ac2d9421f455305abb01a51d001cc54#OSW2c20bbad810959ffa4d1ea210b290227"
    )
    kilo_mole_per_meter_cubed = (
        "Item:OSW8ac2d9421f455305abb01a51d001cc54#OSWe718f1e8ec1952069a956ab1096f08cb"
    )
    pico_mole_per_meter_cubed = (
        "Item:OSW8ac2d9421f455305abb01a51d001cc54#OSW8bb63381b7c355e3984be7dca4baf030"
    )


class Concentration(QuantityValue):
    """
    In chemistry, concentration is defined as the abundance of a constituent divided by the total volume of a mixture. Furthermore, in chemistry, four types of mathematical description can be distinguished: mass concentration, molar concentration, number concentration, and volume concentration. The term concentration can be applied to any kind of chemical mixture, but most frequently it refers to solutes in solutions.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4ce5add3-85d2-545a-b8ab-50e4b222dab4",
            "title": "Concentration",
            "title*": {"en": "Concentration"},
            "description": "In chemistry, concentration is defined as the abundance of a constituent divided by the total volume of a mixture. Furthermore, in chemistry, four types of mathematical description can be distinguished: mass concentration, molar concentration, number concentration, and volume concentration. The term concentration can be applied to any kind of chemical mixture, but most frequently it refers to solutes in solutions.",
            "description*": {
                "en": "In chemistry, concentration is defined as the abundance of a constituent divided by the total volume of a mixture. Furthermore, in chemistry, four types of mathematical description can be distinguished: mass concentration, molar concentration, number concentration, and volume concentration. The term concentration can be applied to any kind of chemical mixture, but most frequently it refers to solutes in solutions."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasConcentrationValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4ce5add385d2545ab8ab50e4b222dab4"]
    unit: Optional[ConcentrationUnit] = Field(
        ConcentrationUnit.mole_per_meter_cubed,
        options={"enum_titles": ["mol/m³", "mmol/m³", "mol/dm³", "kmol/m³", "pmol/m³"]},
        title="ConcentrationUnit",
        x_enum_varnames=[
            "mole_per_meter_cubed",
            "milli_mole_per_meter_cubed",
            "mole_per_deci_meter_cubed",
            "kilo_mole_per_meter_cubed",
            "pico_mole_per_meter_cubed",
        ],
    )


class AmountOfSubstanceOfConcentration(Concentration):
    """
    "Amount of Substance of Concentration of B" is defined as the amount of a constituent divided by the volume of the mixture.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ec3d914b-6db2-5306-8384-89afb9a45cc8",
            "title": "AmountOfSubstanceOfConcentration",
            "title*": {"en": "Amount of Substance of Concentration"},
            "description": '"Amount of Substance of Concentration of B" is defined as the amount of a constituent divided by the volume of the mixture.',
            "description*": {
                "en": '"Amount of Substance of Concentration of B" is defined as the amount of a constituent divided by the volume of the mixture.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAmountOfSubstanceOfConcentrationValue",
            "@context": [
                "/wiki/Category:OSW4ce5add385d2545ab8ab50e4b222dab4?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWec3d914b6db25306838489afb9a45cc8"]


class MassPerAreaUnit(UnitEnum):
    kilo_gram_per_meter_squared = (
        "Item:OSWb93e608c86fd5480a5de9cd1b3e9ea22#OSW86b6ab5f70aa5624be17645333d53d51"
    )


class MassPerArea(QuantityValue):
    """
    The area density (also known as areal density, surface density, or superficial density) of a two-dimensional object is calculated as the mass per unit area. The SI derived unit is: kilogram per square metre  ($kg \cdot m^{-2}$).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "b9612bfb-909c-5eab-9e57-e8d8a6c86082",
            "title": "MassPerArea",
            "title*": {"en": "Mass per Area"},
            "description": "The area density (also known as areal density, surface density, or superficial density) of a two-dimensional object is calculated as the mass per unit area. The SI derived unit is: kilogram per square metre  ($kg \\cdot m^{-2}$).",
            "description*": {
                "en": "The area density (also known as areal density, surface density, or superficial density) of a two-dimensional object is calculated as the mass per unit area. The SI derived unit is: kilogram per square metre  ($kg \\cdot m^{-2}$)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassPerAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb9612bfb909c5eab9e57e8d8a6c86082"]
    unit: Optional[MassPerAreaUnit] = Field(
        MassPerAreaUnit.kilo_gram_per_meter_squared,
        options={"enum_titles": ["kg/m²"]},
        title="MassPerAreaUnit",
        x_enum_varnames=["kilo_gram_per_meter_squared"],
    )


class ParticleFluenceUnit(UnitEnum):
    per_meter_squared = "Item:OSW3adb44b7a27d5ed0b9691b095779cb1f"


class ParticleFluence(QuantityValue):
    """
    "Particle Fluence" is the total number of particles that intersect a unit area in a specific time interval of interest, and has units of /m2 (number of particles per meter squared).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "0f5611df-8241-5498-93b5-bd0a8e137680",
            "title": "ParticleFluence",
            "title*": {"en": "Particle Fluence"},
            "description": '"Particle Fluence" is the total number of particles that intersect a unit area in a specific time interval of interest, and has units of /m2 (number of particles per meter squared).',
            "description*": {
                "en": '"Particle Fluence" is the total number of particles that intersect a unit area in a specific time interval of interest, and has units of /m2 (number of particles per meter squared).'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasParticleFluenceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0f5611df8241549893b5bd0a8e137680"]
    unit: Optional[ParticleFluenceUnit] = Field(
        ParticleFluenceUnit.per_meter_squared,
        options={"enum_titles": ["1/m²"]},
        title="ParticleFluenceUnit",
        x_enum_varnames=["per_meter_squared"],
    )


class PressureBurningRateIndex(Dimensionless):
    """
    This is an autogenerated partial class definition of 'PressureBurningRateIndex'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2ba24c91-1c37-5c43-a823-fe91a4fc825a",
            "title": "PressureBurningRateIndex",
            "title*": {"en": "Pressure Burning Rate Index"},
            "description": "This is an autogenerated partial class definition of 'PressureBurningRateIndex'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPressureBurningRateIndexValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2ba24c911c375c43a823fe91a4fc825a"]


class DoseEquivalent(SpecificEnergy):
    """
    "Dose Equivalent" (former), or $\\textit{Equivalent Absorbed Radiation Dose}$, usually shortened to $\\textit{Equivalent Dose}$, is a computed average measure of the radiation absorbed by a fixed mass of biological tissue, that attempts to account for the different biological damage potential of different types of ionizing radiation. The equivalent dose to a tissue is found by multiplying the absorbed dose, in gray, by a dimensionless "quality factor" $Q$, dependent upon radiation type, and by another dimensionless factor $N$, dependent on all other pertinent factors. N depends upon the part of the body irradiated, the time and volume over which the dose was spread, even the species of the subject.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "fe1ff8f4-4b16-5f1f-985b-575117e59d3b",
            "title": "DoseEquivalent",
            "title*": {"en": "Dose Equivalent"},
            "description": '"Dose Equivalent" (former), or $\\textit{Equivalent Absorbed Radiation Dose}$, usually shortened to $\\textit{Equivalent Dose}$, is a computed average measure of the radiation absorbed by a fixed mass of biological tissue, that attempts to account for the different biological damage potential of different types of ionizing radiation. The equivalent dose to a tissue is found by multiplying the absorbed dose, in gray, by a dimensionless "quality factor" $Q$, dependent upon radiation type, and by another dimensionless factor $N$, dependent on all other pertinent factors. N depends upon the part of the body irradiated, the time and volume over which the dose was spread, even the species of the subject.',
            "description*": {
                "en": '"Dose Equivalent" (former), or $\\textit{Equivalent Absorbed Radiation Dose}$, usually shortened to $\\textit{Equivalent Dose}$, is a computed average measure of the radiation absorbed by a fixed mass of biological tissue, that attempts to account for the different biological damage potential of different types of ionizing radiation. The equivalent dose to a tissue is found by multiplying the absorbed dose, in gray, by a dimensionless "quality factor" $Q$, dependent upon radiation type, and by another dimensionless factor $N$, dependent on all other pertinent factors. N depends upon the part of the body irradiated, the time and volume over which the dose was spread, even the species of the subject.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDoseEquivalentValue",
            "@context": [
                "/wiki/Category:OSW9a32b5a84f235a0cb0a9e9fba9bd252e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfe1ff8f44b165f1f985b575117e59d3b"]


class Gain(DimensionlessRatio):
    """
    A general term used to denote an increase in signal power or signal strength in transmission from one point to another. Gain is usually expressed in decibels and is widely used to denote transducer gain.  An increase or amplification. In radar there are two general usages of the term: (a) antenna gain, or gain factor, is the ratio of the power transmitted along the beam axis to that of an isotropic radiator transmitting the same total power; (b) receiver gain, or video gain, is the amplification given a signal by the receiver.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "064063da-7251-5522-948c-f03fca30ebbc",
            "title": "Gain",
            "title*": {"en": "Gain"},
            "description": "A general term used to denote an increase in signal power or signal strength in transmission from one point to another. Gain is usually expressed in decibels and is widely used to denote transducer gain.  An increase or amplification. In radar there are two general usages of the term: (a) antenna gain, or gain factor, is the ratio of the power transmitted along the beam axis to that of an isotropic radiator transmitting the same total power; (b) receiver gain, or video gain, is the amplification given a signal by the receiver.",
            "description*": {
                "en": "A general term used to denote an increase in signal power or signal strength in transmission from one point to another. Gain is usually expressed in decibels and is widely used to denote transducer gain.  An increase or amplification. In radar there are two general usages of the term: (a) antenna gain, or gain factor, is the ratio of the power transmitted along the beam axis to that of an isotropic radiator transmitting the same total power; (b) receiver gain, or video gain, is the amplification given a signal by the receiver."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasGainValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW064063da72515522948cf03fca30ebbc"]


class VolumeThermalExpansionUnit(UnitEnum):
    meter_cubed_per_kelvin = "Item:OSWb9f55dd232415132bdf9e63794052746"
    centi_meter_cubed_per_kelvin = (
        "Item:OSWb9f55dd232415132bdf9e63794052746#OSW554b5cf2e310542f848f9522a4f34f70"
    )


class VolumeThermalExpansion(QuantityValue):
    """
    When the temperature of a substance changes, the energy that is stored in the intermolecular bonds between atoms changes. When the stored energy increases, so does the length of the molecular bonds. As a result, solids typically expand in response to heating and contract on cooling; this dimensional response to temperature change is expressed by its coefficient of thermal expansion.

    Different coefficients of thermal expansion can be defined for a substance depending on whether the expansion is measured by:

        * linear thermal expansion
        * area thermal expansion
        * volumetric thermal expansion

    These characteristics are closely related. The volumetric thermal expansion coefficient can be defined for both liquids and solids. The linear thermal expansion can only be defined for solids, and is common in engineering applications.

    Some substances expand when cooled, such as freezing water, so they have negative thermal expansion coefficients. [Wikipedia]
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "fa99fdcf-e84d-5a00-8472-386406ac1416",
            "title": "VolumeThermalExpansion",
            "title*": {"en": "Volume Thermal Expansion"},
            "description": "When the temperature of a substance changes, the energy that is stored in the intermolecular bonds between atoms changes. When the stored energy increases, so does the length of the molecular bonds. As a result, solids typically expand in response to heating and contract on cooling; this dimensional response to temperature change is expressed by its coefficient of thermal expansion.\n\nDifferent coefficients of thermal expansion can be defined for a substance depending on whether the expansion is measured by:\n\n    * linear thermal expansion\n    * area thermal expansion\n    * volumetric thermal expansion\n\nThese characteristics are closely related. The volumetric thermal expansion coefficient can be defined for both liquids and solids. The linear thermal expansion can only be defined for solids, and is common in engineering applications.\n\nSome substances expand when cooled, such as freezing water, so they have negative thermal expansion coefficients. [Wikipedia]",
            "description*": {
                "en": "When the temperature of a substance changes, the energy that is stored in the intermolecular bonds between atoms changes. When the stored energy increases, so does the length of the molecular bonds. As a result, solids typically expand in response to heating and contract on cooling; this dimensional response to temperature change is expressed by its coefficient of thermal expansion.\n\nDifferent coefficients of thermal expansion can be defined for a substance depending on whether the expansion is measured by:\n\n    * linear thermal expansion\n    * area thermal expansion\n    * volumetric thermal expansion\n\nThese characteristics are closely related. The volumetric thermal expansion coefficient can be defined for both liquids and solids. The linear thermal expansion can only be defined for solids, and is common in engineering applications.\n\nSome substances expand when cooled, such as freezing water, so they have negative thermal expansion coefficients. [Wikipedia]"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVolumeThermalExpansionValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfa99fdcfe84d5a008472386406ac1416"]
    unit: Optional[VolumeThermalExpansionUnit] = Field(
        VolumeThermalExpansionUnit.meter_cubed_per_kelvin,
        options={"enum_titles": ["m³/K", "cm³/K"]},
        title="VolumeThermalExpansionUnit",
        x_enum_varnames=["meter_cubed_per_kelvin", "centi_meter_cubed_per_kelvin"],
    )


class PathLength(Length):
    """
    "PathLength" is
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "00ae7010-dd63-5404-bd82-873cfd7a3254",
            "title": "PathLength",
            "title*": {"en": "Path Length"},
            "description": '"PathLength" is',
            "description*": {"en": '"PathLength" is'},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPathLengthValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW00ae7010dd635404bd82873cfd7a3254"]


class MassPerElectricChargeUnit(UnitEnum):
    second_tesla = "Item:OSW5935489883d15f2fb2ef853f57c66f49"


class MassPerElectricCharge(QuantityValue):
    """
    The mass-to-charge ratio ratio ($m/Q$) is a physical quantity that is widely used in the electrodynamics of charged particles, for example, in electron optics and ion optics. The importance of the mass-to-charge ratio, according to classical electrodynamics, is that two particles with the same mass-to-charge ratio move in the same path in a vacuum when subjected to the same electric and magnetic fields. Its SI units are $kg/C$, but it can also be measured in Thomson ($Th$).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "81c50bcd-5413-593a-b0b8-92c5612090fe",
            "title": "MassPerElectricCharge",
            "title*": {"en": "Mass per Electric Charge"},
            "description": "The mass-to-charge ratio ratio ($m/Q$) is a physical quantity that is widely used in the electrodynamics of charged particles, for example, in electron optics and ion optics. The importance of the mass-to-charge ratio, according to classical electrodynamics, is that two particles with the same mass-to-charge ratio move in the same path in a vacuum when subjected to the same electric and magnetic fields. Its SI units are $kg/C$, but it can also be measured in Thomson ($Th$).",
            "description*": {
                "en": "The mass-to-charge ratio ratio ($m/Q$) is a physical quantity that is widely used in the electrodynamics of charged particles, for example, in electron optics and ion optics. The importance of the mass-to-charge ratio, according to classical electrodynamics, is that two particles with the same mass-to-charge ratio move in the same path in a vacuum when subjected to the same electric and magnetic fields. Its SI units are $kg/C$, but it can also be measured in Thomson ($Th$)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassPerElectricChargeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW81c50bcd5413593ab0b892c5612090fe"]
    unit: Optional[MassPerElectricChargeUnit] = Field(
        MassPerElectricChargeUnit.second_tesla,
        options={"enum_titles": ["T·s"]},
        title="MassPerElectricChargeUnit",
        x_enum_varnames=["second_tesla"],
    )


class AmountOfSubstanceUnit(UnitEnum):
    mole = "Item:OSW4d9412cede875e399cffb35415646316"
    milli_mole = (
        "Item:OSW4d9412cede875e399cffb35415646316#OSW09461c4b2fa85ab683a3572a199ef16b"
    )
    femto_mole = (
        "Item:OSW4d9412cede875e399cffb35415646316#OSWb4b00897b51e505a8c8cac8d6958b73b"
    )
    kilo_mole = (
        "Item:OSW4d9412cede875e399cffb35415646316#OSW2971b3cb7eca516184282ecfa45bfb81"
    )
    micro_mole = (
        "Item:OSW4d9412cede875e399cffb35415646316#OSW1d4f11a4a1425dba81c9dac510278967"
    )


class AmountOfSubstance(QuantityValue):
    """
    $\\textit{Amount of Substance}$ is a standards-defined quantity that measures the size of an ensemble of elementary entities,
       such as atoms, molecules, electrons, and other particles.
      It is sometimes referred to as chemical amount.

      The International System of Units (SI) defines the amount of substance to be proportional to the number of elementary entities present.
      The SI unit for amount of substance is mole.
      It has the unit symbol $mol$.

      The mole is defined as the amount of substance that contains an equal number of elementary entities as there are atoms in 0.012kg of the isotope carbon-12.
      This number is called Avogadro's number and has the value $6.02214179(30) \times 10^{23}$.

      The only other unit of amount of substance in current use is the $pound-mole$ with the symbol $lb-mol$,
       which is sometimes used in chemical engineering in the United States.
      One $pound-mole$ is exactly $453.59237 mol$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "2f222621-d774-5171-93dc-5eab674e3721",
            "title": "AmountOfSubstance",
            "title*": {"en": "Amount of substance", "de": "Stoffmenge"},
            "description": "$\\textit{Amount of Substance}$ is a standards-defined quantity that measures the size of an ensemble of elementary entities,\n   such as atoms, molecules, electrons, and other particles. \n  It is sometimes referred to as chemical amount.\n\n  The International System of Units (SI) defines the amount of substance to be proportional to the number of elementary entities present. \n  The SI unit for amount of substance is mole. \n  It has the unit symbol $mol$.\n\n  The mole is defined as the amount of substance that contains an equal number of elementary entities as there are atoms in 0.012kg of the isotope carbon-12. \n  This number is called Avogadro's number and has the value $6.02214179(30) \\times 10^{23}$. \n  \n  The only other unit of amount of substance in current use is the $pound-mole$ with the symbol $lb-mol$,\n   which is sometimes used in chemical engineering in the United States. \n  One $pound-mole$ is exactly $453.59237 mol$.",
            "description*": {
                "en": "$\\textit{Amount of Substance}$ is a standards-defined quantity that measures the size of an ensemble of elementary entities,\n   such as atoms, molecules, electrons, and other particles. \n  It is sometimes referred to as chemical amount.\n\n  The International System of Units (SI) defines the amount of substance to be proportional to the number of elementary entities present. \n  The SI unit for amount of substance is mole. \n  It has the unit symbol $mol$.\n\n  The mole is defined as the amount of substance that contains an equal number of elementary entities as there are atoms in 0.012kg of the isotope carbon-12. \n  This number is called Avogadro's number and has the value $6.02214179(30) \\times 10^{23}$. \n  \n  The only other unit of amount of substance in current use is the $pound-mole$ with the symbol $lb-mol$,\n   which is sometimes used in chemical engineering in the United States. \n  One $pound-mole$ is exactly $453.59237 mol$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAmountOfSubstanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2f222621d774517193dc5eab674e3721"]
    unit: Optional[AmountOfSubstanceUnit] = Field(
        AmountOfSubstanceUnit.mole,
        options={"enum_titles": ["mol", "mmol", "fmol", "kmol", "μmol"]},
        title="AmountOfSubstanceUnit",
        x_enum_varnames=["mole", "milli_mole", "femto_mole", "kilo_mole", "micro_mole"],
    )


class LondonPenetrationDepth(Length):
    """
    "London Penetration Depth" characterizes the distance to which a magnetic field penetrates into a superconductor and becomes equal to 1/e times that of the magnetic field at the surface of the superconductor.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "956f7143-2fec-58ba-8d84-b3744876ad5d",
            "title": "LondonPenetrationDepth",
            "title*": {"en": "London Penetration Depth"},
            "description": '"London Penetration Depth" characterizes the distance to which a magnetic field penetrates into a superconductor and becomes equal to 1/e times that of the magnetic field at the surface of the superconductor.',
            "description*": {
                "en": '"London Penetration Depth" characterizes the distance to which a magnetic field penetrates into a superconductor and becomes equal to 1/e times that of the magnetic field at the surface of the superconductor.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLondonPenetrationDepthValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW956f71432fec58ba8d84b3744876ad5d"]


class VoltageRatio(DimensionlessRatio):
    """
    This is an autogenerated partial class definition of 'VoltageRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b62313a0-be8e-5248-9be4-95eea7c6f856",
            "title": "VoltageRatio",
            "title*": {"en": "Voltage Ratio"},
            "description": "This is an autogenerated partial class definition of 'VoltageRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVoltageRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb62313a0be8e52489be495eea7c6f856"]


class MolalityOfSolute(AmountOfSubstancePerMass):
    """
    The "Molality of Solute" of a solution is defined as the amount of substance of solute divided by the mass in kg of the solvent.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "4041cc5b-57dc-5efc-bb97-01f04e4a68ce",
            "title": "MolalityOfSolute",
            "title*": {"en": "Molality of Solute"},
            "description": 'The "Molality of Solute" of a solution is defined as the amount of substance of solute divided by the mass in kg of the solvent.',
            "description*": {
                "en": 'The "Molality of Solute" of a solution is defined as the amount of substance of solute divided by the mass in kg of the solvent.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolalityOfSoluteValue",
            "@context": [
                "/wiki/Category:OSWefff8e22b4d65024bd044362634938e1?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4041cc5b57dc5efcbb9701f04e4a68ce"]


class ShannonDiversityIndex(InformationEntropy):
    """
    Information entropy applied to a collection of indiviual organisms [of selected species] in a sample area. A measure of biodiversity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ab8d90e4-cf37-5a00-a31a-76e87df91860",
            "title": "ShannonDiversityIndex",
            "title*": {"en": "Shannon Diversity Index"},
            "description": "Information entropy applied to a collection of indiviual organisms [of selected species] in a sample area. A measure of biodiversity.",
            "description*": {
                "en": "Information entropy applied to a collection of indiviual organisms [of selected species] in a sample area. A measure of biodiversity."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasShannonDiversityIndexValue",
            "@context": [
                "/wiki/Category:OSW9b6dead1d47358a099b73ba6b309597e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWab8d90e4cf375a00a31a76e87df91860"]


class LinearElectricCurrentDensityUnit(UnitEnum):
    ampere_per_meter = "Item:OSW21e01a5082e35d5cbcf741df0a054cee"
    ampere_per_milli_meter = (
        "Item:OSW21e01a5082e35d5cbcf741df0a054cee#OSW81d243ef653b5b6b890b1102d37d6d78"
    )
    kilo_ampere_per_meter = (
        "Item:OSW21e01a5082e35d5cbcf741df0a054cee#OSWe299bb79004b52b3a4c9f8a739b881bf"
    )
    ampere_per_centi_meter = (
        "Item:OSW21e01a5082e35d5cbcf741df0a054cee#OSW8d315234960451fa895c98b88e9f1b28"
    )
    milli_ampere_per_milli_meter = (
        "Item:OSW21e01a5082e35d5cbcf741df0a054cee#OSWe385b197cb0e581d8e25ce1ec9a73c7a"
    )


class LinearElectricCurrentDensity(QuantityValue):
    """
    "Linear Electric Linear Current Density" is the electric current per unit length. Electric current, $I$, through a curve $C$ is defined as $I = \int_C J _s \times e_n$, where $e_n$ is a unit vector perpendicular to the surface and line vector element, and $dr$ is the differential of position vector $r$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "6ce762ef-103d-5b15-976d-cfa13914bef4",
            "title": "LinearElectricCurrentDensity",
            "title*": {"en": "Linear Electric Current Density"},
            "description": '"Linear Electric Linear Current Density" is the electric current per unit length. Electric current, $I$, through a curve $C$ is defined as $I = \\int_C J _s \\times e_n$, where $e_n$ is a unit vector perpendicular to the surface and line vector element, and $dr$ is the differential of position vector $r$.',
            "description*": {
                "en": '"Linear Electric Linear Current Density" is the electric current per unit length. Electric current, $I$, through a curve $C$ is defined as $I = \\int_C J _s \\times e_n$, where $e_n$ is a unit vector perpendicular to the surface and line vector element, and $dr$ is the differential of position vector $r$.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLinearElectricCurrentDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6ce762ef103d5b15976dcfa13914bef4"]
    unit: Optional[LinearElectricCurrentDensityUnit] = Field(
        LinearElectricCurrentDensityUnit.ampere_per_meter,
        options={"enum_titles": ["A/m", "A/mm", "kA/m", "A/cm", "mA/mm"]},
        title="LinearElectricCurrentDensityUnit",
        x_enum_varnames=[
            "ampere_per_meter",
            "ampere_per_milli_meter",
            "kilo_ampere_per_meter",
            "ampere_per_centi_meter",
            "milli_ampere_per_milli_meter",
        ],
    )


class ElectricCurrentPerLength(LinearElectricCurrentDensity):
    """
    This is an autogenerated partial class definition of 'ElectricCurrentPerLength'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "8ba7ac8b-06c4-53e2-885c-c41c9d9ee0bb",
            "title": "ElectricCurrentPerLength",
            "title*": {"en": "Electric Current per Length"},
            "description": "This is an autogenerated partial class definition of 'ElectricCurrentPerLength'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricCurrentPerLengthValue",
            "@context": [
                "/wiki/Category:OSW6ce762ef103d5b15976dcfa13914bef4?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8ba7ac8b06c453e2885cc41c9d9ee0bb"]


class MagneticFieldStrength(ElectricCurrentPerLength):
    """
    $\\textit{Magnetic Field Strength}$ is a vector quantity obtained at a given point by subtracting the magnetization $M$ from the magnetic flux density $B$ divided by the magnetic constant $\mu_0$. The magnetic field strength is related to the total current density $J_{tot}$ via: $\text{rot} H = J_{tot}$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "5066212a-dfda-5519-af30-7363bd1c5c79",
            "title": "MagneticFieldStrength",
            "title*": {"en": "Magnetic field strength", "de": "Magnetische Feldstärke"},
            "description": "$\\textit{Magnetic Field Strength}$ is a vector quantity obtained at a given point by subtracting the magnetization $M$ from the magnetic flux density $B$ divided by the magnetic constant $\\mu_0$. The magnetic field strength is related to the total current density $J_{tot}$ via: $\\text{rot} H = J_{tot}$.",
            "description*": {
                "en": "$\\textit{Magnetic Field Strength}$ is a vector quantity obtained at a given point by subtracting the magnetization $M$ from the magnetic flux density $B$ divided by the magnetic constant $\\mu_0$. The magnetic field strength is related to the total current density $J_{tot}$ via: $\\text{rot} H = J_{tot}$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMagneticFieldStrengthValue",
            "@context": [
                "/wiki/Category:OSW8ba7ac8b06c453e2885cc41c9d9ee0bb?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW5066212adfda5519af307363bd1c5c79"]


class AuxillaryMagneticField(MagneticFieldStrength):
    """
    Magnetic Fields surround magnetic materials and electric currents and are detected by the force they exert on other magnetic materials and moving electric charges. The electric and magnetic fields are two interrelated aspects of a single object, called the electromagnetic field. A pure electric field in one reference frame is observed as a combination of both an electric field and a magnetic field in a moving reference frame. The Auxillary Magnetic Field, H characterizes how the true Magnetic Field B influences the organization of magnetic dipoles in a given medium.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "083bc854-46db-5746-90ad-c35135516c66",
            "title": "AuxillaryMagneticField",
            "title*": {"en": "Auxillary Magnetic Field"},
            "description": "Magnetic Fields surround magnetic materials and electric currents and are detected by the force they exert on other magnetic materials and moving electric charges. The electric and magnetic fields are two interrelated aspects of a single object, called the electromagnetic field. A pure electric field in one reference frame is observed as a combination of both an electric field and a magnetic field in a moving reference frame. The Auxillary Magnetic Field, H characterizes how the true Magnetic Field B influences the organization of magnetic dipoles in a given medium.",
            "description*": {
                "en": "Magnetic Fields surround magnetic materials and electric currents and are detected by the force they exert on other magnetic materials and moving electric charges. The electric and magnetic fields are two interrelated aspects of a single object, called the electromagnetic field. A pure electric field in one reference frame is observed as a combination of both an electric field and a magnetic field in a moving reference frame. The Auxillary Magnetic Field, H characterizes how the true Magnetic Field B influences the organization of magnetic dipoles in a given medium."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAuxillaryMagneticFieldValue",
            "@context": [
                "/wiki/Category:OSW5066212adfda5519af307363bd1c5c79?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW083bc85446db574690adc35135516c66"]


class CartesianCoordinates(Length):
    """
    "Cartesian Coordinates" specify each point uniquely in a plane by a pair of numerical coordinates, which are the signed distances from the point to two fixed perpendicular directed lines, measured in the same unit of length.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c8457fe4-bcf1-5a08-8818-28cd270ddfa1",
            "title": "CartesianCoordinates",
            "title*": {"en": "Cartesian coordinates", "de": "Kartesische Koordinaten"},
            "description": '"Cartesian Coordinates" specify each point uniquely in a plane by a pair of numerical coordinates, which are the signed distances from the point to two fixed perpendicular directed lines, measured in the same unit of length.',
            "description*": {
                "en": '"Cartesian Coordinates" specify each point uniquely in a plane by a pair of numerical coordinates, which are the signed distances from the point to two fixed perpendicular directed lines, measured in the same unit of length.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCartesianCoordinatesValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc8457fe4bcf15a08881828cd270ddfa1"]


class QuarticElectricDipoleMomentPerCubicEnergyUnit(UnitEnum):
    field_4_per_joule_cubed = "Item:OSWe0b098248f7557aaa6a892a6ecbd32b8"


class QuarticElectricDipoleMomentPerCubicEnergy(QuantityValue):
    """
    This is an autogenerated partial class definition of 'QuarticElectricDipoleMomentPerCubicEnergy'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "2caa3692-da12-558c-97bc-fa1841254d1b",
            "title": "QuarticElectricDipoleMomentPerCubicEnergy",
            "title*": {"en": "Quartic Electric Dipole Moment per Cubic Energy"},
            "description": "This is an autogenerated partial class definition of 'QuarticElectricDipoleMomentPerCubicEnergy'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasQuarticElectricDipoleMomentPerCubicEnergyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2caa3692da12558c97bcfa1841254d1b"]
    unit: Optional[QuarticElectricDipoleMomentPerCubicEnergyUnit] = Field(
        QuarticElectricDipoleMomentPerCubicEnergyUnit.field_4_per_joule_cubed,
        options={"enum_titles": ["C⁴·m⁴/J³"]},
        title="QuarticElectricDipoleMomentPerCubicEnergyUnit",
        x_enum_varnames=["4_per_joule_cubed"],
    )


class HalfValueThickness(Length):
    """
    The "Half-Value Thickness" is the thickness of the material at which the intensity of radiation entering it is reduced by one half.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3c905c5f-f487-5816-b882-78e68e643c27",
            "title": "HalfValueThickness",
            "title*": {"en": "Half-Value Thickness"},
            "description": 'The "Half-Value Thickness" is the thickness of the material at which the intensity of radiation entering it is reduced by one half.',
            "description*": {
                "en": 'The "Half-Value Thickness" is the thickness of the material at which the intensity of radiation entering it is reduced by one half.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasHalfValueThicknessValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3c905c5ff4875816b88278e68e643c27"]


class PhaseDifference(Angle):
    """
    "Phase Difference" is the difference, expressed in electrical degrees or time, between two waves having the same frequency and referenced to the same point in time. Two oscillators that have the same frequency and different phases have a phase difference, and the oscillators are said to be out of phase with each other. The amount by which such oscillators are out of step with each other can be expressed in degrees from $0^\circ$ to $360^\circ$, or in radians from 0 to ${2\pi}$. If the phase difference is $180^\circ$ ($\pi$ radians), then the two oscillators are said to be in antiphase.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "4d94267d-704a-581c-b3c3-01ab2aab5aa6",
            "title": "PhaseDifference",
            "title*": {"en": "Phase difference", "de": "Phasenverschiebungswinkel"},
            "description": '"Phase Difference" is the difference, expressed in electrical degrees or time, between two waves having the same frequency and referenced to the same point in time. Two oscillators that have the same frequency and different phases have a phase difference, and the oscillators are said to be out of phase with each other. The amount by which such oscillators are out of step with each other can be expressed in degrees from $0^\\circ$ to $360^\\circ$, or in radians from 0 to ${2\\pi}$. If the phase difference is $180^\\circ$ ($\\pi$ radians), then the two oscillators are said to be in antiphase.',
            "description*": {
                "en": '"Phase Difference" is the difference, expressed in electrical degrees or time, between two waves having the same frequency and referenced to the same point in time. Two oscillators that have the same frequency and different phases have a phase difference, and the oscillators are said to be out of phase with each other. The amount by which such oscillators are out of step with each other can be expressed in degrees from $0^\\circ$ to $360^\\circ$, or in radians from 0 to ${2\\pi}$. If the phase difference is $180^\\circ$ ($\\pi$ radians), then the two oscillators are said to be in antiphase.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPhaseDifferenceValue",
            "@context": [
                "/wiki/Category:OSW2339256af71e5635a541ac7f5a437141?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4d94267d704a581cb3c301ab2aab5aa6"]


class SpecificGibbsEnergy(SpecificEnergy):
    """
    Energy has corresponding intensive (size-independent) properties for pure materials. A corresponding intensive property is "Specific Gibbs Energy}, which is $\\textit{Gibbs Energy} per mass of substance involved. $\\textit{Specific Gibbs Energy" is denoted by a lower case g, with dimension of energy per mass (SI unit: joule/kg).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "68ebaa3e-9a6b-5caa-90f1-486bd5236739",
            "title": "SpecificGibbsEnergy",
            "title*": {"en": "Specific Gibbs Energy"},
            "description": 'Energy has corresponding intensive (size-independent) properties for pure materials. A corresponding intensive property is "Specific Gibbs Energy}, which is $\\textit{Gibbs Energy} per mass of substance involved. $\\textit{Specific Gibbs Energy" is denoted by a lower case g, with dimension of energy per mass (SI unit: joule/kg).',
            "description*": {
                "en": 'Energy has corresponding intensive (size-independent) properties for pure materials. A corresponding intensive property is "Specific Gibbs Energy}, which is $\\textit{Gibbs Energy} per mass of substance involved. $\\textit{Specific Gibbs Energy" is denoted by a lower case g, with dimension of energy per mass (SI unit: joule/kg).'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificGibbsEnergyValue",
            "@context": [
                "/wiki/Category:OSW9a32b5a84f235a0cb0a9e9fba9bd252e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW68ebaa3e9a6b5caa90f1486bd5236739"]


class VolumePerUnitAreaUnit(UnitEnum):
    meter = "Item:OSWa2c814499650570090ea4ac058c81e3b"


class VolumePerUnitArea(QuantityValue):
    """
    This is an autogenerated partial class definition of 'VolumePerUnitArea'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "c64d0369-be91-52ea-9731-2548eb67383d",
            "title": "VolumePerUnitArea",
            "title*": {"en": "Volume per Unit Area"},
            "description": "This is an autogenerated partial class definition of 'VolumePerUnitArea'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVolumePerUnitAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc64d0369be9152ea97312548eb67383d"]
    unit: Optional[VolumePerUnitAreaUnit] = Field(
        VolumePerUnitAreaUnit.meter,
        options={"enum_titles": ["m³/m²"]},
        title="VolumePerUnitAreaUnit",
        x_enum_varnames=["meter"],
    )


class HorizontalVelocity(Velocity):
    """
    Component of a projectile's velocity, which acts parallel to the ground and does not lift the projectile in the air.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "6713dc0c-e346-5125-95f2-d28e8f6bd8bb",
            "title": "HorizontalVelocity",
            "title*": {"en": "Horizontal Velocity"},
            "description": "Component of a projectile's velocity, which acts parallel to the ground and does not lift the projectile in the air.",
            "description*": {
                "en": "Component of a projectile's velocity, which acts parallel to the ground and does not lift the projectile in the air."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasHorizontalVelocityValue",
            "@context": [
                "/wiki/Category:OSW397c67ece63a5a5c96bad9349f49f3d7?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6713dc0ce346512595f2d28e8f6bd8bb"]


class PlaneAngleUnit(UnitEnum):
    radian = "Item:OSW6b270053305955a89f37c50637fc7aeb"
    micro_radian = (
        "Item:OSW6b270053305955a89f37c50637fc7aeb#OSW80a423e717c3546f8085fa732b37409e"
    )
    milli_radian = (
        "Item:OSW6b270053305955a89f37c50637fc7aeb#OSW8fb3bf64b8f751498553ead8995be20c"
    )


class PlaneAngle(QuantityValue):
    """
    An angle formed by two straight lines (in the same plane) angle - the space between two lines or planes that intersect; the inclination of one line to another; measured in degrees or radians
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "cfa8c174-8f3b-586e-9a03-04ab1e2dbc41",
            "title": "PlaneAngle",
            "title*": {"en": "Plane angle", "de": "Ebener Winkel"},
            "description": "An angle formed by two straight lines (in the same plane) angle - the space between two lines or planes that intersect; the inclination of one line to another; measured in degrees or radians",
            "description*": {
                "en": "An angle formed by two straight lines (in the same plane) angle - the space between two lines or planes that intersect; the inclination of one line to another; measured in degrees or radians"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPlaneAngleValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcfa8c1748f3b586e9a0304ab1e2dbc41"]
    unit: Optional[PlaneAngleUnit] = Field(
        PlaneAngleUnit.radian,
        options={"enum_titles": ["rad", "µrad", "mrad"]},
        title="PlaneAngleUnit",
        x_enum_varnames=["radian", "micro_radian", "milli_radian"],
    )


class PositivePlaneAngle(PlaneAngle):
    """
    A "PositivePlaneAngle" is a plane angle strictly greater than zero.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "84aa24df-02cb-576a-b92f-da7f55dcac6e",
            "title": "PositivePlaneAngle",
            "title*": {"en": "Positive Plane Angle"},
            "description": 'A "PositivePlaneAngle" is a plane angle strictly greater than zero.',
            "description*": {
                "en": 'A "PositivePlaneAngle" is a plane angle strictly greater than zero.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPositivePlaneAngleValue",
            "@context": [
                "/wiki/Category:OSWcfa8c1748f3b586e9a0304ab1e2dbc41?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW84aa24df02cb576ab92fda7f55dcac6e"]


class TotalMassStoppingPowerUnit(UnitEnum):
    joule_meter_squared_per_kilo_gram = "Item:OSWe0fa484f50015a438e4338bb521a34ae"


class TotalMassStoppingPower(QuantityValue):
    """
    If a substance is compared in gaseous and solid form, then the linear stopping powers of the two states are very different just because of the different density. One therefore often divides S(E) by the density of the material to obtain the "Mass Stopping Power". The mass stopping power then depends only very little on the density of the material.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "c02cab00-88b0-5f12-b174-944247c8e903",
            "title": "TotalMassStoppingPower",
            "title*": {"en": "Total Mass Stopping Power"},
            "description": 'If a substance is compared in gaseous and solid form, then the linear stopping powers of the two states are very different just because of the different density. One therefore often divides S(E) by the density of the material to obtain the "Mass Stopping Power". The mass stopping power then depends only very little on the density of the material.',
            "description*": {
                "en": 'If a substance is compared in gaseous and solid form, then the linear stopping powers of the two states are very different just because of the different density. One therefore often divides S(E) by the density of the material to obtain the "Mass Stopping Power". The mass stopping power then depends only very little on the density of the material.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTotalMassStoppingPowerValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc02cab0088b05f12b174944247c8e903"]
    unit: Optional[TotalMassStoppingPowerUnit] = Field(
        TotalMassStoppingPowerUnit.joule_meter_squared_per_kilo_gram,
        options={"enum_titles": ["J·m²/kg"]},
        title="TotalMassStoppingPowerUnit",
        x_enum_varnames=["joule_meter_squared_per_kilo_gram"],
    )


class AbsoluteTypographicMeasurement(Length):
    """
    This is an autogenerated partial class definition of 'AbsoluteTypographicMeasurement'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b6919e9f-2e94-555a-8a7d-56a7cc3d9c85",
            "title": "AbsoluteTypographicMeasurement",
            "title*": {"en": "Absolute typographic measurement"},
            "description": "This is an autogenerated partial class definition of 'AbsoluteTypographicMeasurement'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAbsoluteTypographicMeasurementValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb6919e9f2e94555a8a7d56a7cc3d9c85"]


class ElectricCurrentUnit(UnitEnum):
    ampere = "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec"
    milli_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSW614e3543b8aa55a5b4aa87c9cd179703"
    )
    mega_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSWc611b97c5c4354059113fb8f17a26f2f"
    )
    pico_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSWb59bf21962f75857965df77a55549178"
    )
    kilo_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSW49e59ce46e35588193327425fa1d89ab"
    )
    micro_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSW771bd899c7045f84b282cc653efe6d28"
    )


class ElectricCurrent(QuantityValue):
    """
    "Electric Current" is the flow (movement) of electric charge. The amount of electric current through some surface, for example, a section through a copper conductor, is defined as the amount of electric charge flowing through that surface over time. Current is a scalar-valued quantity. Electric current is one of the base quantities in the International System of Quantities, ISQ, on which the International System of Units, SI, is based.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "7c210ed3-aad8-5519-ae73-30073a9d6f9f",
            "title": "ElectricCurrent",
            "title*": {"en": "Electric current", "de": "Elektrische Stromstärke"},
            "description": '"Electric Current" is the flow (movement) of electric charge. The amount of electric current through some surface, for example, a section through a copper conductor, is defined as the amount of electric charge flowing through that surface over time. Current is a scalar-valued quantity. Electric current is one of the base quantities in the International System of Quantities, ISQ, on which the International System of Units, SI, is based.',
            "description*": {
                "en": '"Electric Current" is the flow (movement) of electric charge. The amount of electric current through some surface, for example, a section through a copper conductor, is defined as the amount of electric charge flowing through that surface over time. Current is a scalar-valued quantity. Electric current is one of the base quantities in the International System of Quantities, ISQ, on which the International System of Units, SI, is based.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricCurrentValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7c210ed3aad85519ae7330073a9d6f9f"]
    unit: Optional[ElectricCurrentUnit] = Field(
        ElectricCurrentUnit.ampere,
        options={"enum_titles": ["A", "mA", "MA", "pA", "kA", "μA"]},
        title="ElectricCurrentUnit",
        x_enum_varnames=[
            "ampere",
            "milli_ampere",
            "mega_ampere",
            "pico_ampere",
            "kilo_ampere",
            "micro_ampere",
        ],
    )


class IonCurrent(ElectricCurrent):
    """
    An ion current is the influx and/or efflux of ions through an ion channel.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "03fe5609-198b-578d-b061-a3dbdf3c720b",
            "title": "IonCurrent",
            "title*": {"en": "Ion Current"},
            "description": "An ion current is the influx and/or efflux of ions through an ion channel.",
            "description*": {
                "en": "An ion current is the influx and/or efflux of ions through an ion channel."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasIonCurrentValue",
            "@context": [
                "/wiki/Category:OSW7c210ed3aad85519ae7330073a9d6f9f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW03fe5609198b578db061a3dbdf3c720b"]


class LinearMomentumUnit(UnitEnum):
    newton_second = "Item:OSWb05df920a96b5987aeb46a9b4f7ca333"


class LinearMomentum(QuantityValue):
    """
    Linear momentum is the quantity obtained by multiplying the mass of a body by its linear velocity. The momentum of a continuous medium is given by the integral of the velocity over the mass of the medium or by the product of the total mass of the medium and the velocity of the center of gravity of the medium.The SI unit for linear momentum is meter-kilogram per second ($m-kg/s$).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "22f40c87-ac43-5474-b852-5e7268e7ca01",
            "title": "LinearMomentum",
            "title*": {"en": "Linear Momentum"},
            "description": "Linear momentum is the quantity obtained by multiplying the mass of a body by its linear velocity. The momentum of a continuous medium is given by the integral of the velocity over the mass of the medium or by the product of the total mass of the medium and the velocity of the center of gravity of the medium.The SI unit for linear momentum is meter-kilogram per second ($m-kg/s$).",
            "description*": {
                "en": "Linear momentum is the quantity obtained by multiplying the mass of a body by its linear velocity. The momentum of a continuous medium is given by the integral of the velocity over the mass of the medium or by the product of the total mass of the medium and the velocity of the center of gravity of the medium.The SI unit for linear momentum is meter-kilogram per second ($m-kg/s$)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLinearMomentumValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW22f40c87ac435474b8525e7268e7ca01"]
    unit: Optional[LinearMomentumUnit] = Field(
        LinearMomentumUnit.newton_second,
        options={"enum_titles": ["N·m·s/m"]},
        title="LinearMomentumUnit",
        x_enum_varnames=["newton_second"],
    )


class EccentricityOfOrbit(DimensionlessRatio):
    """
    The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. In a two-body problem with inverse-square-law force, every orbit is a Kepler orbit. The eccentricity of this Kepler orbit is a positive number that defines its shape.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "577e79a6-dcff-5f1e-a297-ca5c75e2a4a6",
            "title": "EccentricityOfOrbit",
            "title*": {"en": "Eccentricity Of Orbit"},
            "description": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. In a two-body problem with inverse-square-law force, every orbit is a Kepler orbit. The eccentricity of this Kepler orbit is a positive number that defines its shape.",
            "description*": {
                "en": "The orbital eccentricity of an astronomical object is a parameter that determines the amount by which its orbit around another body deviates from a perfect circle. In a two-body problem with inverse-square-law force, every orbit is a Kepler orbit. The eccentricity of this Kepler orbit is a positive number that defines its shape."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEccentricityOfOrbitValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW577e79a6dcff5f1ea297ca5c75e2a4a6"]


class FrictionCoefficient(DimensionlessRatio):
    """
    "Friction Coefficient" is the ratio of the force of friction between two bodies and the force pressing them together
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "8f66d565-d52b-52ba-b7fe-2840caf54ffa",
            "title": "FrictionCoefficient",
            "title*": {"en": "Friction Coefficient"},
            "description": '"Friction Coefficient" is the ratio of the force of friction between two bodies and the force pressing them together',
            "description*": {
                "en": '"Friction Coefficient" is the ratio of the force of friction between two bodies and the force pressing them together'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFrictionCoefficientValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8f66d565d52b52bab7fe2840caf54ffa"]


class DynamicFrictionCoefficient(FrictionCoefficient):
    """
    Kinetic (or dynamic) friction occurs when two objects are moving relative to each other and rub together (like a sled on the ground).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2fe5b071-3ef4-5b60-96fb-35cb7085cfe7",
            "title": "DynamicFrictionCoefficient",
            "title*": {"en": "Dynamic Friction Coefficient"},
            "description": "Kinetic (or dynamic) friction occurs when two objects are moving relative to each other and rub together (like a sled on the ground).",
            "description*": {
                "en": "Kinetic (or dynamic) friction occurs when two objects are moving relative to each other and rub together (like a sled on the ground)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDynamicFrictionCoefficientValue",
            "@context": [
                "/wiki/Category:OSW8f66d565d52b52bab7fe2840caf54ffa?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2fe5b0713ef45b6096fb35cb7085cfe7"]


class IsothermalCompressibilityUnit(UnitEnum):
    per_pascal = "Item:OSWf030abd4441d52a7a8c5f84950985ea4"


class IsothermalCompressibility(QuantityValue):
    """
    The isothermal compressibility defines the rate of change of system volume with pressure.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "3c3443b8-e139-5c6f-9867-93f1d9f7d27a",
            "title": "IsothermalCompressibility",
            "title*": {
                "en": "Isothermal compressibility",
                "de": "Isotherme Kompressibilität",
            },
            "description": "The isothermal compressibility defines the rate of change of system volume with pressure.",
            "description*": {
                "en": "The isothermal compressibility defines the rate of change of system volume with pressure."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasIsothermalCompressibilityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3c3443b8e1395c6f986793f1d9f7d27a"]
    unit: Optional[IsothermalCompressibilityUnit] = Field(
        IsothermalCompressibilityUnit.per_pascal,
        options={"enum_titles": ["1/Pa"]},
        title="IsothermalCompressibilityUnit",
        x_enum_varnames=["per_pascal"],
    )


class PolarMomentOfInertia(MomentOfInertia):
    """
    The polar moment of inertia is a quantity used to predict an object's ability to resist torsion, in objects (or segments of objects) with an invariant circular cross-section and no significant warping or out-of-plane deformation. It is used to calculate the angular displacement of an object subjected to a torque. It is analogous to the area moment of inertia, which characterizes an object's ability to resist bending.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "bf23a344-7dad-5d69-bc7a-45ab4de68e83",
            "title": "PolarMomentOfInertia",
            "title*": {"en": "Polar moment of inertia"},
            "description": "The polar moment of inertia is a quantity used to predict an object's ability to resist torsion, in objects (or segments of objects) with an invariant circular cross-section and no significant warping or out-of-plane deformation. It is used to calculate the angular displacement of an object subjected to a torque. It is analogous to the area moment of inertia, which characterizes an object's ability to resist bending.",
            "description*": {
                "en": "The polar moment of inertia is a quantity used to predict an object's ability to resist torsion, in objects (or segments of objects) with an invariant circular cross-section and no significant warping or out-of-plane deformation. It is used to calculate the angular displacement of an object subjected to a torque. It is analogous to the area moment of inertia, which characterizes an object's ability to resist bending."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPolarMomentOfInertiaValue",
            "@context": [
                "/wiki/Category:OSW2e958a0e653558a8abf2bd1fa3c6dd59?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWbf23a3447dad5d69bc7a45ab4de68e83"]


class ReactionEnergy(Energy):
    """
    "Reaction Energy" in a nuclear reaction, is the sum of the kinetic energies and photon energies of the reaction products minus the sum of the kinetic and photon energies of the reactants.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "fb812934-8093-5fe7-954a-0a6c341d8b9f",
            "title": "ReactionEnergy",
            "title*": {"en": "Reaction Energy"},
            "description": '"Reaction Energy" in a nuclear reaction, is the sum of the kinetic energies and photon energies of the reaction products minus the sum of the kinetic and photon energies of the reactants.',
            "description*": {
                "en": '"Reaction Energy" in a nuclear reaction, is the sum of the kinetic energies and photon energies of the reaction products minus the sum of the kinetic and photon energies of the reactants.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasReactionEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfb81293480935fe7954a0a6c341d8b9f"]


class SpectralRadiantEnergyDensityUnit(UnitEnum):
    field_4 = "Item:OSW9660b61081145dbcb6d4ebb5ab9244ff"


class SpectralRadiantEnergyDensity(QuantityValue):
    """
    "Spectral Radiant Energy Density" is the spectral concentration of radiant energy density (in terms of wavelength), or the spectral radiant energy density (in terms of wave length).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "8ec996b0-f248-559d-b27d-621ab9651953",
            "title": "SpectralRadiantEnergyDensity",
            "title*": {"en": "Spectral Radiant Energy Density"},
            "description": '"Spectral Radiant Energy Density" is the spectral concentration of radiant energy density (in terms of wavelength), or the spectral radiant energy density (in terms of wave length).',
            "description*": {
                "en": '"Spectral Radiant Energy Density" is the spectral concentration of radiant energy density (in terms of wavelength), or the spectral radiant energy density (in terms of wave length).'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpectralRadiantEnergyDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8ec996b0f248559db27d621ab9651953"]
    unit: Optional[SpectralRadiantEnergyDensityUnit] = Field(
        SpectralRadiantEnergyDensityUnit.field_4,
        options={"enum_titles": ["J/m⁴"]},
        title="SpectralRadiantEnergyDensityUnit",
        x_enum_varnames=["4"],
    )


class ForceUnit(UnitEnum):
    newton = "Item:OSW8113ac9c25615c21902a9447ab03cc0a"
    milli_newton = (
        "Item:OSW8113ac9c25615c21902a9447ab03cc0a#OSWf2fd2b42f5a653f398f9fb35200f39fe"
    )
    mega_newton = (
        "Item:OSW8113ac9c25615c21902a9447ab03cc0a#OSW2b1c9c4b62385c4488e52fc40d8b7bbb"
    )
    kilo_newton = (
        "Item:OSW8113ac9c25615c21902a9447ab03cc0a#OSW9e26f43774ed54c9b9bf757fca6ad5e7"
    )
    micro_newton = (
        "Item:OSW8113ac9c25615c21902a9447ab03cc0a#OSW31a9dadf838358bfa5504d7781711397"
    )


class Force(QuantityValue):
    """
    "Force" is an influence that causes mass to accelerate. It may be experienced as a lift, a push, or a pull. Force is defined by Newton's Second Law as $F = m \times a $, where $F$ is force, $m$ is mass and $a$ is acceleration. Net force is mathematically equal to the time rate of change of the momentum of the body on which it acts. Since momentum is a vector quantity (has both a magnitude and direction), force also is a vector quantity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "1b832c1a-42c0-55eb-9669-bb0cdda18d7f",
            "title": "Force",
            "title*": {"en": "Force", "de": "Kraft"},
            "description": '"Force" is an influence that causes mass to accelerate. It may be experienced as a lift, a push, or a pull. Force is defined by Newton\'s Second Law as $F = m \\times a $, where $F$ is force, $m$ is mass and $a$ is acceleration. Net force is mathematically equal to the time rate of change of the momentum of the body on which it acts. Since momentum is a vector quantity (has both a magnitude and direction), force also is a vector quantity.',
            "description*": {
                "en": '"Force" is an influence that causes mass to accelerate. It may be experienced as a lift, a push, or a pull. Force is defined by Newton\'s Second Law as $F = m \\times a $, where $F$ is force, $m$ is mass and $a$ is acceleration. Net force is mathematically equal to the time rate of change of the momentum of the body on which it acts. Since momentum is a vector quantity (has both a magnitude and direction), force also is a vector quantity.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasForceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1b832c1a42c055eb9669bb0cdda18d7f"]
    unit: Optional[ForceUnit] = Field(
        ForceUnit.newton,
        options={"enum_titles": ["N", "mN", "MN", "kN", "μN"]},
        title="ForceUnit",
        x_enum_varnames=[
            "newton",
            "milli_newton",
            "mega_newton",
            "kilo_newton",
            "micro_newton",
        ],
    )


class Thrust(Force):
    """
    Thrust is a reaction force described quantitatively by Newton's Second and Third Laws. When a system expels or accelerates mass in one direction the accelerated mass will cause a proportional but opposite force on that system.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7bf742d6-7349-5bb8-bd77-d1ea5295b2cd",
            "title": "Thrust",
            "title*": {"en": "Thrust"},
            "description": "Thrust is a reaction force described quantitatively by Newton's Second and Third Laws. When a system expels or accelerates mass in one direction the accelerated mass will cause a proportional but opposite force on that system.",
            "description*": {
                "en": "Thrust is a reaction force described quantitatively by Newton's Second and Third Laws. When a system expels or accelerates mass in one direction the accelerated mass will cause a proportional but opposite force on that system."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThrustValue",
            "@context": [
                "/wiki/Category:OSW1b832c1a42c055eb9669bb0cdda18d7f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7bf742d673495bb8bd77d1ea5295b2cd"]


class MaxSeaLevelThrust(Thrust):
    """
    This is an autogenerated partial class definition of 'MaxSeaLevelThrust'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "79efc6b7-a03a-5e5e-b6bd-fc8e6bf1056c",
            "title": "MaxSeaLevelThrust",
            "title*": {"en": "Max Sea Level Thrust"},
            "description": "This is an autogenerated partial class definition of 'MaxSeaLevelThrust'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMaxSeaLevelThrustValue",
            "@context": [
                "/wiki/Category:OSW7bf742d673495bb8bd77d1ea5295b2cd?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW79efc6b7a03a5e5eb6bdfc8e6bf1056c"]


class LatticeVector(Length):
    """
    "Lattice Vector" is a translation vector that maps the crystal lattice on itself.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ff95a9d8-0837-5e7c-9631-c797e43546cd",
            "title": "LatticeVector",
            "title*": {"en": "Lattice Vector"},
            "description": '"Lattice Vector" is a translation vector that maps the crystal lattice on itself.',
            "description*": {
                "en": '"Lattice Vector" is a translation vector that maps the crystal lattice on itself.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLatticeVectorValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWff95a9d808375e7c9631c797e43546cd"]


class AngularReciprocalLatticeVectorUnit(UnitEnum):
    per_meter = "Item:OSW28e75b089e145904998a54f1c4125bf3"
    per_centi_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW0dcebe41477056aba0e706c148970688"
    )
    per_nano_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWdc9edf9277ed57cdb7a6f218551afa8d"
    )
    per_milli_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWe77bc3c1bd7a566eadb55f3b68d351f2"
    )
    per_pico_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWd0475e49e0715ec488fba3fe0fdd9b02"
    )
    per_micro_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW45c24d8b68485accbdd684f05231c74c"
    )
    per_kilo_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW124eebfb89dc54bc9cc223fd49c40480"
    )


class AngularReciprocalLatticeVector(QuantityValue):
    """
    "Angular Reciprocal Lattice Vector" is a vector whose scalar products with all fundamental lattice vectors are integral multiples of $2\pi$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "0dca3665-339d-53b2-aeb2-c152dc1ff577",
            "title": "AngularReciprocalLatticeVector",
            "title*": {"en": "Angular Reciprocal Lattice Vector"},
            "description": '"Angular Reciprocal Lattice Vector" is a vector whose scalar products with all fundamental lattice vectors are integral multiples of $2\\pi$.',
            "description*": {
                "en": '"Angular Reciprocal Lattice Vector" is a vector whose scalar products with all fundamental lattice vectors are integral multiples of $2\\pi$.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngularReciprocalLatticeVectorValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0dca3665339d53b2aeb2c152dc1ff577"]
    unit: Optional[AngularReciprocalLatticeVectorUnit] = Field(
        AngularReciprocalLatticeVectorUnit.per_meter,
        options={
            "enum_titles": ["1/m", "1/cm", "1/nm", "1/mm", "1/pm", "1/μm", "1/km"]
        },
        title="AngularReciprocalLatticeVectorUnit",
        x_enum_varnames=[
            "per_meter",
            "per_centi_meter",
            "per_nano_meter",
            "per_milli_meter",
            "per_pico_meter",
            "per_micro_meter",
            "per_kilo_meter",
        ],
    )


class FundamentalReciprocalLatticeVector(AngularReciprocalLatticeVector):
    """
    "Fundamental Reciprocal Lattice Vector" are fundamental, or primary, translation vectors the reciprocal lattice.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "db0431d4-d0ea-5820-a783-8ea18c8e04af",
            "title": "FundamentalReciprocalLatticeVector",
            "title*": {"en": "Fundamental Reciprocal Lattice Vector"},
            "description": '"Fundamental Reciprocal Lattice Vector" are fundamental, or primary, translation vectors the reciprocal lattice.',
            "description*": {
                "en": '"Fundamental Reciprocal Lattice Vector" are fundamental, or primary, translation vectors the reciprocal lattice.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFundamentalReciprocalLatticeVectorValue",
            "@context": [
                "/wiki/Category:OSW0dca3665339d53b2aeb2c152dc1ff577?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWdb0431d4d0ea5820a7838ea18c8e04af"]


class EnergyDensityOfStatesUnit(UnitEnum):
    per_joule_per_meter_cubed = "Item:OSW397d9707b473555a8b294558cbc5d2a1"


class EnergyDensityOfStates(QuantityValue):
    """
    "Energy Density of States" refers to electrons or other entities, e.g. phonons. It can, for example, refer to amount of substance instead of volume.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "cd73bd1d-42a7-5671-896b-bf11ed611b6e",
            "title": "EnergyDensityOfStates",
            "title*": {"en": "Energy Density of States"},
            "description": '"Energy Density of States" refers to electrons or other entities, e.g. phonons. It can, for example, refer to amount of substance instead of volume.',
            "description*": {
                "en": '"Energy Density of States" refers to electrons or other entities, e.g. phonons. It can, for example, refer to amount of substance instead of volume.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnergyDensityOfStatesValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcd73bd1d42a75671896bbf11ed611b6e"]
    unit: Optional[EnergyDensityOfStatesUnit] = Field(
        EnergyDensityOfStatesUnit.per_joule_per_meter_cubed,
        options={"enum_titles": ["1/(J·m³)"]},
        title="EnergyDensityOfStatesUnit",
        x_enum_varnames=["per_joule_per_meter_cubed"],
    )


class AreaTimeUnit(UnitEnum):
    centi_meter_squared_minute = "Item:OSWa5c77be3eb415d749ce66c39717fb676"


class AreaTime(QuantityValue):
    """
    This is an autogenerated partial class definition of 'AreaTime'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "990c8c6a-812a-50a3-9649-7a2038885114",
            "title": "AreaTime",
            "title*": {"en": "Area Time"},
            "description": "This is an autogenerated partial class definition of 'AreaTime'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAreaTimeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW990c8c6a812a50a396497a2038885114"]
    unit: Optional[AreaTimeUnit] = Field(
        AreaTimeUnit.centi_meter_squared_minute,
        options={"enum_titles": ["cm²·min"]},
        title="AreaTimeUnit",
        x_enum_varnames=["centi_meter_squared_minute"],
    )


class CoercivityUnit(UnitEnum):
    ampere_per_meter = "Item:OSW21e01a5082e35d5cbcf741df0a054cee"
    ampere_per_milli_meter = (
        "Item:OSW21e01a5082e35d5cbcf741df0a054cee#OSW81d243ef653b5b6b890b1102d37d6d78"
    )
    kilo_ampere_per_meter = (
        "Item:OSW21e01a5082e35d5cbcf741df0a054cee#OSWe299bb79004b52b3a4c9f8a739b881bf"
    )
    ampere_per_centi_meter = (
        "Item:OSW21e01a5082e35d5cbcf741df0a054cee#OSW8d315234960451fa895c98b88e9f1b28"
    )
    milli_ampere_per_milli_meter = (
        "Item:OSW21e01a5082e35d5cbcf741df0a054cee#OSWe385b197cb0e581d8e25ce1ec9a73c7a"
    )


class Coercivity(QuantityValue):
    """
    $\\textit{Coercivity}$, also referred to as $\\textit{Coercive Field Strength}$, is the magnetic field strength to be applied to bring the magnetic flux density in a substance from its remaining magnetic flux density to zero. This is defined as the coercive field strength in a substance when either the magnetic flux density or the magnetic polarization and magnetization is brought from its value at magnetic saturation to zero by monotonic reduction of the applied magnetic field strength. The quantity which is brought to zero should be stated, and the appropriate symbol used: $H_{cB}$, $H_{cJ}$ or $H_{cM}$ for the coercivity relating to the magnetic flux density, the magnetic polarization or the magnetization respectively, where $H_{cJ} = H_{cM}$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "aa1087e4-2844-5c44-b8c9-1a4c7ca76806",
            "title": "Coercivity",
            "title*": {"en": "Coercivity"},
            "description": "$\\textit{Coercivity}$, also referred to as $\\textit{Coercive Field Strength}$, is the magnetic field strength to be applied to bring the magnetic flux density in a substance from its remaining magnetic flux density to zero. This is defined as the coercive field strength in a substance when either the magnetic flux density or the magnetic polarization and magnetization is brought from its value at magnetic saturation to zero by monotonic reduction of the applied magnetic field strength. The quantity which is brought to zero should be stated, and the appropriate symbol used: $H_{cB}$, $H_{cJ}$ or $H_{cM}$ for the coercivity relating to the magnetic flux density, the magnetic polarization or the magnetization respectively, where $H_{cJ} = H_{cM}$.",
            "description*": {
                "en": "$\\textit{Coercivity}$, also referred to as $\\textit{Coercive Field Strength}$, is the magnetic field strength to be applied to bring the magnetic flux density in a substance from its remaining magnetic flux density to zero. This is defined as the coercive field strength in a substance when either the magnetic flux density or the magnetic polarization and magnetization is brought from its value at magnetic saturation to zero by monotonic reduction of the applied magnetic field strength. The quantity which is brought to zero should be stated, and the appropriate symbol used: $H_{cB}$, $H_{cJ}$ or $H_{cM}$ for the coercivity relating to the magnetic flux density, the magnetic polarization or the magnetization respectively, where $H_{cJ} = H_{cM}$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCoercivityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWaa1087e428445c44b8c91a4c7ca76806"]
    unit: Optional[CoercivityUnit] = Field(
        CoercivityUnit.ampere_per_meter,
        options={"enum_titles": ["A/m", "A/mm", "kA/m", "A/cm", "mA/mm"]},
        title="CoercivityUnit",
        x_enum_varnames=[
            "ampere_per_meter",
            "ampere_per_milli_meter",
            "kilo_ampere_per_meter",
            "ampere_per_centi_meter",
            "milli_ampere_per_milli_meter",
        ],
    )


class LinearAttenuationCoefficientUnit(UnitEnum):
    per_meter = "Item:OSW28e75b089e145904998a54f1c4125bf3"
    per_centi_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW0dcebe41477056aba0e706c148970688"
    )
    per_nano_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWdc9edf9277ed57cdb7a6f218551afa8d"
    )
    per_milli_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWe77bc3c1bd7a566eadb55f3b68d351f2"
    )
    per_pico_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWd0475e49e0715ec488fba3fe0fdd9b02"
    )
    per_micro_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW45c24d8b68485accbdd684f05231c74c"
    )
    per_kilo_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW124eebfb89dc54bc9cc223fd49c40480"
    )


class LinearAttenuationCoefficient(QuantityValue):
    """
    "Linear Attenuation Coefficient", also called the attenuation coefficient,  narrow beam attenuation coefficient, or absorption coefficient, is a quantity that characterizes how easily a material or medium can be penetrated by a beam of light, sound, particles, or other energy or matter.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "15273de4-0c54-5109-b5f3-0c7672e9b514",
            "title": "LinearAttenuationCoefficient",
            "title*": {"en": "Linear Attenuation Coefficient"},
            "description": '"Linear Attenuation Coefficient", also called the attenuation coefficient,  narrow beam attenuation coefficient, or absorption coefficient, is a quantity that characterizes how easily a material or medium can be penetrated by a beam of light, sound, particles, or other energy or matter.',
            "description*": {
                "en": '"Linear Attenuation Coefficient", also called the attenuation coefficient,  narrow beam attenuation coefficient, or absorption coefficient, is a quantity that characterizes how easily a material or medium can be penetrated by a beam of light, sound, particles, or other energy or matter.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLinearAttenuationCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW15273de40c545109b5f30c7672e9b514"]
    unit: Optional[LinearAttenuationCoefficientUnit] = Field(
        LinearAttenuationCoefficientUnit.per_meter,
        options={
            "enum_titles": ["1/m", "1/cm", "1/nm", "1/mm", "1/pm", "1/μm", "1/km"]
        },
        title="LinearAttenuationCoefficientUnit",
        x_enum_varnames=[
            "per_meter",
            "per_centi_meter",
            "per_nano_meter",
            "per_milli_meter",
            "per_pico_meter",
            "per_micro_meter",
            "per_kilo_meter",
        ],
    )


class AreaUnit(UnitEnum):
    meter_squared = "Item:OSWd10e5841c68e5aad94b481b58ef9dfb9"
    deci_meter_squared = (
        "Item:OSWd10e5841c68e5aad94b481b58ef9dfb9#OSW90aaf1cb6a9f518a8e7ed0b7fc2fc325"
    )
    milli_meter_squared = (
        "Item:OSWd10e5841c68e5aad94b481b58ef9dfb9#OSWeca22bf4270853038ef3395bd6dd797b"
    )
    nano_meter_squared = (
        "Item:OSWd10e5841c68e5aad94b481b58ef9dfb9#OSW8ef862bedf335232a9d387b1ee29cd1d"
    )
    centi_meter_squared = (
        "Item:OSWd10e5841c68e5aad94b481b58ef9dfb9#OSWe36916dd7a34557b8a52c38d6dd7b832"
    )
    micro_meter_squared = (
        "Item:OSWd10e5841c68e5aad94b481b58ef9dfb9#OSWd45e991f8e6658dcb6c891c9c0ea094f"
    )


class Area(QuantityValue):
    """
    Area is a quantity expressing the two-dimensional size of a defined part of a surface, typically a region bounded by a closed curve.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "1fcf1694-712e-5684-8850-71efdf775bd9",
            "title": "Area",
            "title*": {"en": "Area", "de": "Fläche"},
            "description": "Area is a quantity expressing the two-dimensional size of a defined part of a surface, typically a region bounded by a closed curve.",
            "description*": {
                "en": "Area is a quantity expressing the two-dimensional size of a defined part of a surface, typically a region bounded by a closed curve."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1fcf1694712e5684885071efdf775bd9"]
    unit: Optional[AreaUnit] = Field(
        AreaUnit.meter_squared,
        options={"enum_titles": ["m²", "dm²", "mm²", "nm²", "cm²", "μm²"]},
        title="AreaUnit",
        x_enum_varnames=[
            "meter_squared",
            "deci_meter_squared",
            "milli_meter_squared",
            "nano_meter_squared",
            "centi_meter_squared",
            "micro_meter_squared",
        ],
    )


class CrossSection(Area):
    """
    "Cross-section" is used to express the likelihood of interaction between particles. For a specified target particle and for a specified reaction or process produced by incident charged or uncharged particles of specified type and energy, it is the mean number of such reactions or processes divided by the incident-particle fluence.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a002dbed-f44c-5a86-a375-783a4e7ba6e7",
            "title": "CrossSection",
            "title*": {"en": "Cross-section"},
            "description": '"Cross-section" is used to express the likelihood of interaction between particles. For a specified target particle and for a specified reaction or process produced by incident charged or uncharged particles of specified type and energy, it is the mean number of such reactions or processes divided by the incident-particle fluence.',
            "description*": {
                "en": '"Cross-section" is used to express the likelihood of interaction between particles. For a specified target particle and for a specified reaction or process produced by incident charged or uncharged particles of specified type and energy, it is the mean number of such reactions or processes divided by the incident-particle fluence.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCrossSectionValue",
            "@context": [
                "/wiki/Category:OSW1fcf1694712e5684885071efdf775bd9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa002dbedf44c5a86a375783a4e7ba6e7"]


class TotalCrossSection(CrossSection):
    """
    "Total Cross-section" is related to the absorbance of the light intensity through Beer-Lambert's law. It is the sum of all cross-sections corresponding to the various reactions or processes between an incident particle of specified type and energy and a target particle.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "198956c9-3610-5dd0-8347-46aef5674329",
            "title": "TotalCrossSection",
            "title*": {"en": "Total Cross-section"},
            "description": '"Total Cross-section" is related to the absorbance of the light intensity through Beer-Lambert\'s law. It is the sum of all cross-sections corresponding to the various reactions or processes between an incident particle of specified type and energy and a target particle.',
            "description*": {
                "en": '"Total Cross-section" is related to the absorbance of the light intensity through Beer-Lambert\'s law. It is the sum of all cross-sections corresponding to the various reactions or processes between an incident particle of specified type and energy and a target particle.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTotalCrossSectionValue",
            "@context": [
                "/wiki/Category:OSWa002dbedf44c5a86a375783a4e7ba6e7?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW198956c936105dd0834746aef5674329"]


class DiffusionLengthSolidStatePhysics(Length):
    """
    "Solid State Diffusion Length" is the average distance traveled by a particle, such as a minority carrier in a semiconductor
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "9a071c3e-82af-50f6-bef8-0aee14562a5d",
            "title": "DiffusionLengthSolidStatePhysics",
            "title*": {"en": "Diffusion Length (Solid State Physics)"},
            "description": '"Solid State Diffusion Length" is the average distance traveled by a particle, such as a minority carrier in a semiconductor',
            "description*": {
                "en": '"Solid State Diffusion Length" is the average distance traveled by a particle, such as a minority carrier in a semiconductor'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDiffusionLengthSolidStatePhysicsValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9a071c3e82af50f6bef80aee14562a5d"]


class MassOfSolidBooster(Mass):
    """
    This is an autogenerated partial class definition of 'MassOfSolidBooster'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3805347e-a7cc-5372-812c-240ee9c72d57",
            "title": "MassOfSolidBooster",
            "title*": {"en": "Mass Of Solid Booster"},
            "description": "This is an autogenerated partial class definition of 'MassOfSolidBooster'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassOfSolidBoosterValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3805347ea7cc5372812c240ee9c72d57"]


class SpecificInternalEnergy(SpecificEnergy):
    """
    Energy has corresponding intensive (size-independent) properties for pure materials. A corresponding intensive property is specific internal energy, which is energy per mass of substance involved. Specific internal energy is denoted by a lower case u, with dimension of energy per mass (SI unit: joule/kg).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "aff5b15f-9ff3-598e-a650-71f64badcb81",
            "title": "SpecificInternalEnergy",
            "title*": {"en": "Specific Internal Energy"},
            "description": "Energy has corresponding intensive (size-independent) properties for pure materials. A corresponding intensive property is specific internal energy, which is energy per mass of substance involved. Specific internal energy is denoted by a lower case u, with dimension of energy per mass (SI unit: joule/kg).",
            "description*": {
                "en": "Energy has corresponding intensive (size-independent) properties for pure materials. A corresponding intensive property is specific internal energy, which is energy per mass of substance involved. Specific internal energy is denoted by a lower case u, with dimension of energy per mass (SI unit: joule/kg)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificInternalEnergyValue",
            "@context": [
                "/wiki/Category:OSW9a32b5a84f235a0cb0a9e9fba9bd252e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWaff5b15f9ff3598ea65071f64badcb81"]


class ReactorTimeConstant(Time):
    """
    The "Reactor Time Constant", also called the reactor period, is the time during which the neutron flux density in a reactor changes by the factor e = 2.718 (e: basis of natural logarithms), when the neutron flux density increases or decreases exponentially.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "6bf46ca1-fcca-5886-971f-9f2c9119a4a7",
            "title": "ReactorTimeConstant",
            "title*": {"en": "Reactor Time Constant"},
            "description": 'The "Reactor Time Constant", also called the reactor period, is the time during which the neutron flux density in a reactor changes by the factor e = 2.718 (e: basis of natural logarithms), when the neutron flux density increases or decreases exponentially.',
            "description*": {
                "en": 'The "Reactor Time Constant", also called the reactor period, is the time during which the neutron flux density in a reactor changes by the factor e = 2.718 (e: basis of natural logarithms), when the neutron flux density increases or decreases exponentially.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasReactorTimeConstantValue",
            "@context": [
                "/wiki/Category:OSW389cb87d31be515aa5d2f12e2b66e938?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6bf46ca1fcca5886971f9f2c9119a4a7"]


class ReciprocalMassUnit(UnitEnum):
    per_gram = "Item:OSW779e33a057275cba9d6f363a1526d8bf"


class ReciprocalMass(QuantityValue):
    """
    This is an autogenerated partial class definition of 'ReciprocalMass'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "01d40c43-6663-572d-80de-0e503436a120",
            "title": "ReciprocalMass",
            "title*": {"en": "Reciprocal mass"},
            "description": "This is an autogenerated partial class definition of 'ReciprocalMass'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasReciprocalMassValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW01d40c436663572d80de0e503436a120"]
    unit: Optional[ReciprocalMassUnit] = Field(
        ReciprocalMassUnit.per_gram,
        options={"enum_titles": ["1/g"]},
        title="ReciprocalMassUnit",
        x_enum_varnames=["per_gram"],
    )


class TrueExhaustVelocity(Velocity):
    """
    This is an autogenerated partial class definition of 'TrueExhaustVelocity'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1397ec65-62ae-5659-b527-a5d3738756c7",
            "title": "TrueExhaustVelocity",
            "title*": {"en": "True Exhaust Velocity"},
            "description": "This is an autogenerated partial class definition of 'TrueExhaustVelocity'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTrueExhaustVelocityValue",
            "@context": [
                "/wiki/Category:OSW397c67ece63a5a5c96bad9349f49f3d7?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1397ec6562ae5659b527a5d3738756c7"]


class ElectrolyticConductivityUnit(UnitEnum):
    siemens_per_meter = "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d"
    nano_siemens_per_meter = (
        "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d#OSW6cc3591d052d589cb271f6710f816486"
    )
    kilo_siemens_per_meter = (
        "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d#OSWe2d30b3b09325ef7819f6d51071e147e"
    )
    milli_siemens_per_meter = (
        "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d#OSWd609b57361b3560d8614f22a0031921f"
    )
    micro_siemens_per_meter = (
        "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d#OSWa26d6194b3be5f54a4665a01e3df9426"
    )
    deci_siemens_per_meter = (
        "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d#OSW7b2e1f125aa350409a4f5d467534727a"
    )
    pico_siemens_per_meter = (
        "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d#OSWc9f2986f0974565b904f1d0d756d5318"
    )
    mega_siemens_per_meter = (
        "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d#OSW27b6c423e529517ba2d3f466d2c822b4"
    )
    siemens_per_centi_meter = (
        "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d#OSW88703a966490546d89632c3336e28b2a"
    )


class ElectrolyticConductivity(QuantityValue):
    """
    "Electrolytic Conductivity" of an electrolyte solution is a measure of its ability to conduct electricity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4c8a2aa1-efad-5db1-a05f-9ae73ee05fcf",
            "title": "ElectrolyticConductivity",
            "title*": {"en": "Electrolytic Conductivity"},
            "description": '"Electrolytic Conductivity" of an electrolyte solution is a measure of its ability to conduct electricity.',
            "description*": {
                "en": '"Electrolytic Conductivity" of an electrolyte solution is a measure of its ability to conduct electricity.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectrolyticConductivityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4c8a2aa1efad5db1a05f9ae73ee05fcf"]
    unit: Optional[ElectrolyticConductivityUnit] = Field(
        ElectrolyticConductivityUnit.siemens_per_meter,
        options={
            "enum_titles": [
                "S/m",
                "nS/m",
                "kS/m",
                "mS/m",
                "μS/m",
                "dS/m",
                "pS/m",
                "MS/m",
                "S/cm",
            ]
        },
        title="ElectrolyticConductivityUnit",
        x_enum_varnames=[
            "siemens_per_meter",
            "nano_siemens_per_meter",
            "kilo_siemens_per_meter",
            "milli_siemens_per_meter",
            "micro_siemens_per_meter",
            "deci_siemens_per_meter",
            "pico_siemens_per_meter",
            "mega_siemens_per_meter",
            "siemens_per_centi_meter",
        ],
    )


class OpeningRatio(DimensionlessRatio):
    """
    In the context of mechanical systems, "opening ratio" might refer to the proportion of time
      or the extent to which a valve or gate is open relative to its maximum capacity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "713e8c96-687f-5714-a306-4fc857b33456",
            "title": "OpeningRatio",
            "title*": {"en": "Opening Ratio"},
            "description": 'In the context of mechanical systems, "opening ratio" might refer to the proportion of time \n  or the extent to which a valve or gate is open relative to its maximum capacity.',
            "description*": {
                "en": 'In the context of mechanical systems, "opening ratio" might refer to the proportion of time \n  or the extent to which a valve or gate is open relative to its maximum capacity.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasOpeningRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW713e8c96687f5714a3064fc857b33456"]


class SecondMomentOfAreaUnit(UnitEnum):
    field_4 = "Item:OSWe4f01fe00389574e905718a14481ed36"
    field_4_1 = (
        "Item:OSWe4f01fe00389574e905718a14481ed36#OSW568d0d17db6551c1993de3d51c6051cc"
    )
    field_4_2 = (
        "Item:OSWe4f01fe00389574e905718a14481ed36#OSW73b630d93619585bbc7f4a3a4a3be104"
    )


class SecondMomentOfArea(QuantityValue):
    """
    The second moment of area is a property of a physical object that can be used to predict its resistance to bending and deflection. The deflection of an object under load depends not only on the load, but also on the geometry of the object's cross-section.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "bd5f31fa-763d-5f4b-9f8b-e79284269e47",
            "title": "SecondMomentOfArea",
            "title*": {"en": "Second moment of area", "de": "Flächenträgheitsmoment"},
            "description": "The second moment of area is a property of a physical object that can be used to predict its resistance to bending and deflection. The deflection of an object under load depends not only on the load, but also on the geometry of the object's cross-section.",
            "description*": {
                "en": "The second moment of area is a property of a physical object that can be used to predict its resistance to bending and deflection. The deflection of an object under load depends not only on the load, but also on the geometry of the object's cross-section."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSecondMomentOfAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWbd5f31fa763d5f4b9f8be79284269e47"]
    unit: Optional[SecondMomentOfAreaUnit] = Field(
        SecondMomentOfAreaUnit.field_4,
        options={"enum_titles": ["m⁴", "mm⁴", "cm⁴"]},
        title="SecondMomentOfAreaUnit",
        x_enum_varnames=["4", "4", "4"],
    )


class TorquePerAngleUnit(UnitEnum):
    meter_newton_per_radian = "Item:OSWcf35571886b95c2c889f076d7dab41dd"


class TorquePerAngle(QuantityValue):
    """
    This is an autogenerated partial class definition of 'TorquePerAngle'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "38077176-ba8a-52f7-a9f4-01d782b4ffa8",
            "title": "TorquePerAngle",
            "title*": {"en": "Torque per Angle"},
            "description": "This is an autogenerated partial class definition of 'TorquePerAngle'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTorquePerAngleValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW38077176ba8a52f7a9f401d782b4ffa8"]
    unit: Optional[TorquePerAngleUnit] = Field(
        TorquePerAngleUnit.meter_newton_per_radian,
        options={"enum_titles": ["N·m/rad"]},
        title="TorquePerAngleUnit",
        x_enum_varnames=["meter_newton_per_radian"],
    )


class AreaRatio(DimensionlessRatio):
    """
    This is an autogenerated partial class definition of 'AreaRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1e2d83c5-660e-5082-8bd1-4194ea5d5717",
            "title": "AreaRatio",
            "title*": {"en": "Area Ratio"},
            "description": "This is an autogenerated partial class definition of 'AreaRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAreaRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1e2d83c5660e50828bd14194ea5d5717"]


class BasicityUnit(UnitEnum):
    pico_henry = "Item:OSW50e9172c55045cb3b1460b1345303ed2"


class Basicity(QuantityValue):
    """
    Chemicals or substances having a pH higher than 7 are said to be basic; higher pH means higher basicity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "8189a49e-2c98-599a-8c63-5dbbfaa6b5b6",
            "title": "Basicity",
            "title*": {"en": "Basicity"},
            "description": "Chemicals or substances having a pH higher than 7 are said to be basic; higher pH means higher basicity.",
            "description*": {
                "en": "Chemicals or substances having a pH higher than 7 are said to be basic; higher pH means higher basicity."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasBasicityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8189a49e2c98599a8c635dbbfaa6b5b6"]
    unit: Optional[BasicityUnit] = Field(
        BasicityUnit.pico_henry,
        options={"enum_titles": ["pH"]},
        title="BasicityUnit",
        x_enum_varnames=["pico_henry"],
    )


class ReactanceUnit(UnitEnum):
    ohm = "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1"
    milli_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSWa8d17cb3f4255320af6052cbd471d716"
    )
    mega_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSW14b14dd3c32d5ee199a67e3796734a4a"
    )
    kilo_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSW5e05beabf6935ae2b559c1cffc788110"
    )
    micro_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSWacd4090bd8335717b6eea6b8c1151b29"
    )
    giga_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSW66dbbd77c6ca5d5684b223fdfcc7b773"
    )
    tera_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSW5196e38637c752e58c2b5be5521e4234"
    )


class Reactance(QuantityValue):
    """
    "Reactance" is the opposition of a circuit element to a change of electric current or voltage, due to that element's inductance or capacitance. A built-up electric field resists the change of voltage on the element, while a magnetic field resists the change of current. The notion of reactance is similar to electrical resistance, but they differ in several respects. Capacitance and inductance are inherent properties of an element, just like resistance.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "2f8fe69b-4fc5-5c83-9e55-1a63b21bcfbf",
            "title": "Reactance",
            "title*": {"en": "Reactance"},
            "description": '"Reactance" is the opposition of a circuit element to a change of electric current or voltage, due to that element\'s inductance or capacitance. A built-up electric field resists the change of voltage on the element, while a magnetic field resists the change of current. The notion of reactance is similar to electrical resistance, but they differ in several respects. Capacitance and inductance are inherent properties of an element, just like resistance.',
            "description*": {
                "en": '"Reactance" is the opposition of a circuit element to a change of electric current or voltage, due to that element\'s inductance or capacitance. A built-up electric field resists the change of voltage on the element, while a magnetic field resists the change of current. The notion of reactance is similar to electrical resistance, but they differ in several respects. Capacitance and inductance are inherent properties of an element, just like resistance.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasReactanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2f8fe69b4fc55c839e551a63b21bcfbf"]
    unit: Optional[ReactanceUnit] = Field(
        ReactanceUnit.ohm,
        options={"enum_titles": ["Ω", "mΩ", "MΩ", "kΩ", "μΩ", "GΩ", "TΩ"]},
        title="ReactanceUnit",
        x_enum_varnames=[
            "ohm",
            "milli_ohm",
            "mega_ohm",
            "kilo_ohm",
            "micro_ohm",
            "giga_ohm",
            "tera_ohm",
        ],
    )


class BatteryCapacityUnit(UnitEnum):
    ampere_second = "Item:OSW5705fe1e62ee57b3b67f335a31bc8e6e"


class BatteryCapacity(QuantityValue):
    """
    Elektrizitätsmenge oder elektrische Ladung, die eine vollgeladenen Batterie unter festgelegten Bedingungen abgeben kann als Produkt aus Entladestrom und Entladezeit
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "fcaf254c-1f7b-575a-8fcd-8c480130dd4c",
            "title": "BatteryCapacity",
            "title*": {"en": "Battery capacity"},
            "description": "Elektrizitätsmenge oder elektrische Ladung, die eine vollgeladenen Batterie unter festgelegten Bedingungen abgeben kann als Produkt aus Entladestrom und Entladezeit",
            "description*": {
                "en": "Elektrizitätsmenge oder elektrische Ladung, die eine vollgeladenen Batterie unter festgelegten Bedingungen abgeben kann als Produkt aus Entladestrom und Entladezeit"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasBatteryCapacityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfcaf254c1f7b575a8fcd8c480130dd4c"]
    unit: Optional[BatteryCapacityUnit] = Field(
        BatteryCapacityUnit.ampere_second,
        options={"enum_titles": ["A·s"]},
        title="BatteryCapacityUnit",
        x_enum_varnames=["ampere_second"],
    )


class MassPropertyUncertainty(Mass):
    """
    Variation in predicted MP due to lack of definition, manufacturing variations, environment effects, or accuracy limitation of measuring devices.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3a06c181-a537-5b68-b002-f7a28ff862d0",
            "title": "MassPropertyUncertainty",
            "title*": {"en": "Mass Property Uncertainty"},
            "description": "Variation in predicted MP due to lack of definition, manufacturing variations, environment effects, or accuracy limitation of measuring devices.",
            "description*": {
                "en": "Variation in predicted MP due to lack of definition, manufacturing variations, environment effects, or accuracy limitation of measuring devices."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassPropertyUncertaintyValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3a06c181a5375b68b002f7a28ff862d0"]


class VaporPermeabilityUnit(UnitEnum):
    kilo_gram_per_meter_per_pascal_per_second = (
        "Item:OSWa2b4ab78b9975e0891d0d14dfbb12314"
    )


class VaporPermeability(QuantityValue):
    """
    The moisture transmission rate of a material is referred to as its "permeability".
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "8a68e1f3-2c6a-525f-b76f-292b5bee6b5b",
            "title": "VaporPermeability",
            "title*": {"en": "Vapor Permeability"},
            "description": 'The moisture transmission rate of a material is referred to as its "permeability".',
            "description*": {
                "en": 'The moisture transmission rate of a material is referred to as its "permeability".'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVaporPermeabilityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8a68e1f32c6a525fb76f292b5bee6b5b"]
    unit: Optional[VaporPermeabilityUnit] = Field(
        VaporPermeabilityUnit.kilo_gram_per_meter_per_pascal_per_second,
        options={"enum_titles": ["kg/(Pa·s·m)"]},
        title="VaporPermeabilityUnit",
        x_enum_varnames=["kilo_gram_per_meter_per_pascal_per_second"],
    )


class NuclearRadius(Length):
    """
    "Nuclear Radius" is the conventional radius of sphere in which the nuclear matter is included
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "15a0e40b-150c-598d-b6a5-0b85921bba29",
            "title": "NuclearRadius",
            "title*": {"en": "Nuclear Radius"},
            "description": '"Nuclear Radius" is the conventional radius of sphere in which the nuclear matter is included',
            "description*": {
                "en": '"Nuclear Radius" is the conventional radius of sphere in which the nuclear matter is included'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasNuclearRadiusValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW15a0e40b150c598db6a50b85921bba29"]


class Work(Energy):
    """
    A force is said to do Work when it acts on a body so that there is a displacement of the point of application, however small, in the direction of the force.  The concepts of work and energy are closely tied to the concept of force because an applied force can do work on an object and cause a change in energy. Energy is defined as the ability to do work. Work is done on an object when an applied force moves it through a distance. Kinetic energy is the energy of an object in motion. The net work is equal to the change in kinetic energy.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1be0e061-6fe4-5f6e-9acb-6395577080b5",
            "title": "Work",
            "title*": {"en": "Work", "de": "Arbeit"},
            "description": "A force is said to do Work when it acts on a body so that there is a displacement of the point of application, however small, in the direction of the force.  The concepts of work and energy are closely tied to the concept of force because an applied force can do work on an object and cause a change in energy. Energy is defined as the ability to do work. Work is done on an object when an applied force moves it through a distance. Kinetic energy is the energy of an object in motion. The net work is equal to the change in kinetic energy.",
            "description*": {
                "en": "A force is said to do Work when it acts on a body so that there is a displacement of the point of application, however small, in the direction of the force.  The concepts of work and energy are closely tied to the concept of force because an applied force can do work on an object and cause a change in energy. Energy is defined as the ability to do work. Work is done on an object when an applied force moves it through a distance. Kinetic energy is the energy of an object in motion. The net work is equal to the change in kinetic energy."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasWorkValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1be0e0616fe45f6e9acb6395577080b5"]


class LengthForce(Work):
    """
    This is an autogenerated partial class definition of 'LengthForce'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "34752151-7697-54e8-8b1f-878b2b2b7bea",
            "title": "LengthForce",
            "title*": {"en": "Length Force"},
            "description": "This is an autogenerated partial class definition of 'LengthForce'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLengthForceValue",
            "@context": [
                "/wiki/Category:OSW1be0e0616fe45f6e9acb6395577080b5?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW34752151769754e88b1f878b2b2b7bea"]


class LatticePlaneSpacing(Length):
    """
    "Lattice Plane Spacing" is the distance between successive lattice planes.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "70379540-4475-5f1e-bb66-ec49748bc781",
            "title": "LatticePlaneSpacing",
            "title*": {"en": "Lattice Plane Spacing"},
            "description": '"Lattice Plane Spacing" is the distance between successive lattice planes.',
            "description*": {
                "en": '"Lattice Plane Spacing" is the distance between successive lattice planes.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLatticePlaneSpacingValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7037954044755f1ebb66ec49748bc781"]


class MassDensityUnit(UnitEnum):
    gram_per_liter = "Item:OSW754b1a3564725113ac583f91ae2ea959"
    milli_gram_per_milli_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW99bbcff947e1508bad38d748ad6ff8e2"
    )
    gram_per_milli_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSWe905ceb23b3b550489bed5baa6c9b466"
    )
    femto_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW449dc7494f3f5c0bbd9aff1d1fd2f591"
    )
    pico_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW84ec459d4d135bf28a610cd00061d18c"
    )
    kilo_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW40c933269ec45fc1aeef04aefce2b374"
    )
    micro_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW457d0485a44c57cda788a583bf9ab4ff"
    )
    nano_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW42fdef27c8ae5c8fbf1876c400f27101"
    )
    gram_per_deci_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW1a48aea5dca45c34bbde02b0df02f6f8"
    )
    milli_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSWca4043a385f25aa3a98122f2aefd0d2e"
    )


class MassDensity(QuantityValue):
    """
    The mass density or density of a material is its mass per unit volume.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "512cbc54-b9a7-5f4a-be8e-66c48204ae0f",
            "title": "MassDensity",
            "title*": {"en": "Mass density", "de": "Massendichte"},
            "description": "The mass density or density of a material is its mass per unit volume.",
            "description*": {
                "en": "The mass density or density of a material is its mass per unit volume."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW512cbc54b9a75f4abe8e66c48204ae0f"]
    unit: Optional[MassDensityUnit] = Field(
        MassDensityUnit.gram_per_liter,
        options={
            "enum_titles": [
                "g/L",
                "mg/mL",
                "g/mL",
                "fg/L",
                "pg/L",
                "kg/L",
                "μg/L",
                "ng/L",
                "g/dL",
                "mg/L",
            ]
        },
        title="MassDensityUnit",
        x_enum_varnames=[
            "gram_per_liter",
            "milli_gram_per_milli_liter",
            "gram_per_milli_liter",
            "femto_gram_per_liter",
            "pico_gram_per_liter",
            "kilo_gram_per_liter",
            "micro_gram_per_liter",
            "nano_gram_per_liter",
            "gram_per_deci_liter",
            "milli_gram_per_liter",
        ],
    )


class LinearVelocityUnit(UnitEnum):
    meter_per_second = "Item:OSW78331234e1a15aeebd8b0caa71201939"
    kilo_meter_per_second = (
        "Item:OSW78331234e1a15aeebd8b0caa71201939#OSW9f12ce12bc725cd59791265e2e480fd2"
    )
    micro_meter_per_second = (
        "Item:OSW78331234e1a15aeebd8b0caa71201939#OSWfc9fca27ba5b543c8780521b4af39189"
    )
    centi_meter_per_second = (
        "Item:OSW78331234e1a15aeebd8b0caa71201939#OSWd094e4cfd62c52248aad5ef87c19fb7d"
    )
    milli_meter_per_second = (
        "Item:OSW78331234e1a15aeebd8b0caa71201939#OSW4937ac85021f506cb7ba3958f2216bd1"
    )


class LinearVelocity(QuantityValue):
    """
    Linear Velocity, as the name implies deals with speed in a straight line, the units are often $km/hr$ or $m/s$ or $mph$ (miles per hour). Linear Velocity (v) = change in distance/change in time, where $v = \bigtriangleup d/\bigtriangleup t$
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a05bb9d4-8dca-5745-bee3-55865a3109f2",
            "title": "LinearVelocity",
            "title*": {"en": "Linear Velocity"},
            "description": "Linear Velocity, as the name implies deals with speed in a straight line, the units are often $km/hr$ or $m/s$ or $mph$ (miles per hour). Linear Velocity (v) = change in distance/change in time, where $v = \\bigtriangleup d/\\bigtriangleup t$",
            "description*": {
                "en": "Linear Velocity, as the name implies deals with speed in a straight line, the units are often $km/hr$ or $m/s$ or $mph$ (miles per hour). Linear Velocity (v) = change in distance/change in time, where $v = \\bigtriangleup d/\\bigtriangleup t$"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLinearVelocityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa05bb9d48dca5745bee355865a3109f2"]
    unit: Optional[LinearVelocityUnit] = Field(
        LinearVelocityUnit.meter_per_second,
        options={"enum_titles": ["m/s", "km/s", "μm/s", "cm/s", "mm/s"]},
        title="LinearVelocityUnit",
        x_enum_varnames=[
            "meter_per_second",
            "kilo_meter_per_second",
            "micro_meter_per_second",
            "centi_meter_per_second",
            "milli_meter_per_second",
        ],
    )


class AtmosphericPressure(Pressure):
    """
    The pressure exerted by the weight of the air above it at any point on the earth's surface. At sea level the atmosphere will support a column of mercury about $760 mm$ high. This decreases with increasing altitude. The standard value for the atmospheric pressure at sea level in SI units is $101,325 pascals$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b250ea47-42a3-5a81-b710-d43df474fe28",
            "title": "AtmosphericPressure",
            "title*": {"en": "Atmospheric Pressure"},
            "description": "The pressure exerted by the weight of the air above it at any point on the earth's surface. At sea level the atmosphere will support a column of mercury about $760 mm$ high. This decreases with increasing altitude. The standard value for the atmospheric pressure at sea level in SI units is $101,325 pascals$.",
            "description*": {
                "en": "The pressure exerted by the weight of the air above it at any point on the earth's surface. At sea level the atmosphere will support a column of mercury about $760 mm$ high. This decreases with increasing altitude. The standard value for the atmospheric pressure at sea level in SI units is $101,325 pascals$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAtmosphericPressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb250ea4742a35a81b710d43df474fe28"]


class VolumeFraction(DimensionlessRatio):
    """
    "Volume Fraction" is the volume of a constituent divided by the volume of all constituents of the mixture prior to mixing. Volume fraction is also called volume concentration in ideal solutions where the volumes of the constituents are additive (the volume of the solution is equal to the sum of the volumes of its ingredients).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "642aecc3-cec2-5d4e-bc4a-1b03ff1ae672",
            "title": "VolumeFraction",
            "title*": {"en": "Volume Fraction"},
            "description": '"Volume Fraction" is the volume of a constituent divided by the volume of all constituents of the mixture prior to mixing. Volume fraction is also called volume concentration in ideal solutions where the volumes of the constituents are additive (the volume of the solution is equal to the sum of the volumes of its ingredients).',
            "description*": {
                "en": '"Volume Fraction" is the volume of a constituent divided by the volume of all constituents of the mixture prior to mixing. Volume fraction is also called volume concentration in ideal solutions where the volumes of the constituents are additive (the volume of the solution is equal to the sum of the volumes of its ingredients).'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVolumeFractionValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW642aecc3cec25d4ebc4a1b03ff1ae672"]


class TimeTemperatureUnit(UnitEnum):
    kelvin_second = "Item:OSW258e0e8da8e15fd69ec6810d5b93c7ab"


class TimeTemperature(QuantityValue):
    """
    This is an autogenerated partial class definition of 'TimeTemperature'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "6f81fb79-192f-50e2-80ee-1ff5dd724f01",
            "title": "TimeTemperature",
            "title*": {"en": "Time Temperature"},
            "description": "This is an autogenerated partial class definition of 'TimeTemperature'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTimeTemperatureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6f81fb79192f50e280ee1ff5dd724f01"]
    unit: Optional[TimeTemperatureUnit] = Field(
        TimeTemperatureUnit.kelvin_second,
        options={"enum_titles": ["K·s"]},
        title="TimeTemperatureUnit",
        x_enum_varnames=["kelvin_second"],
    )


class MassExcess(Mass):
    """
    The "Mass Excess" of a nuclide is the difference between its actual mass and its mass number in atomic mass units. It is one of the predominant methods for tabulating nuclear mass.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "845f46b0-b81c-5e1e-985b-0532aa2428d6",
            "title": "MassExcess",
            "title*": {"en": "Mass Excess"},
            "description": 'The "Mass Excess" of a nuclide is the difference between its actual mass and its mass number in atomic mass units. It is one of the predominant methods for tabulating nuclear mass.',
            "description*": {
                "en": 'The "Mass Excess" of a nuclide is the difference between its actual mass and its mass number in atomic mass units. It is one of the predominant methods for tabulating nuclear mass.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassExcessValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW845f46b0b81c5e1e985b0532aa2428d6"]


class FugacityUnit(UnitEnum):
    pascal = "Item:OSWb663e6bff3595e7b93b28fffce66c50c"
    milli_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW38b0e12539b05ce28cd126c8eea29f95"
    )
    deca_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW8d40059d9e3951bb97378fe3f119ba21"
    )
    kilo_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW264ebdc21f54568593a91bbd832b6fbf"
    )
    micro_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW5def4be309ce50ee933c99cf4b74e310"
    )
    hecto_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW482939f123595314beca39ad32d65a15"
    )
    mega_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW0ec5bf8132b25e58b7032766bd9b3225"
    )
    giga_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW49bb4743a5735e189777f3c6bd422a52"
    )


class Fugacity(QuantityValue):
    """
    "Fugacity" of a real gas is an effective pressure which replaces the true mechanical pressure in accurate chemical equilibrium calculations. It is equal to the pressure of an ideal gas which has the same chemical potential as the real gas.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "8a40f5d0-db99-5056-8778-2d8e905f50d4",
            "title": "Fugacity",
            "title*": {"en": "Fugacity", "de": "Fugazität"},
            "description": '"Fugacity" of a real gas is an effective pressure which replaces the true mechanical pressure in accurate chemical equilibrium calculations. It is equal to the pressure of an ideal gas which has the same chemical potential as the real gas.',
            "description*": {
                "en": '"Fugacity" of a real gas is an effective pressure which replaces the true mechanical pressure in accurate chemical equilibrium calculations. It is equal to the pressure of an ideal gas which has the same chemical potential as the real gas.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFugacityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8a40f5d0db99505687782d8e905f50d4"]
    unit: Optional[FugacityUnit] = Field(
        FugacityUnit.pascal,
        options={
            "enum_titles": ["Pa", "mPa", "daPa", "kPa", "μPa", "hPa", "MPa", "GPa"]
        },
        title="FugacityUnit",
        x_enum_varnames=[
            "pascal",
            "milli_pascal",
            "deca_pascal",
            "kilo_pascal",
            "micro_pascal",
            "hecto_pascal",
            "mega_pascal",
            "giga_pascal",
        ],
    )


class PropellantMass(Mass):
    """
    This is an autogenerated partial class definition of 'PropellantMass'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3cca82ea-6a34-5bc7-9d20-9236e827ea73",
            "title": "PropellantMass",
            "title*": {"en": "Propellant Mass"},
            "description": "This is an autogenerated partial class definition of 'PropellantMass'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPropellantMassValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3cca82ea6a345bc79d209236e827ea73"]


class AttenuationCoefficientUnit(UnitEnum):
    per_meter = "Item:OSW28e75b089e145904998a54f1c4125bf3"
    per_centi_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW0dcebe41477056aba0e706c148970688"
    )
    per_nano_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWdc9edf9277ed57cdb7a6f218551afa8d"
    )
    per_milli_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWe77bc3c1bd7a566eadb55f3b68d351f2"
    )
    per_pico_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWd0475e49e0715ec488fba3fe0fdd9b02"
    )
    per_micro_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW45c24d8b68485accbdd684f05231c74c"
    )
    per_kilo_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW124eebfb89dc54bc9cc223fd49c40480"
    )


class AttenuationCoefficient(QuantityValue):
    """
    The attenuation coefficient is a quantity that characterizes how easily a material or medium can be penetrated by a beam of light, sound, particles, or other energy or matter. A large attenuation coefficient means that the beam is quickly "attenuated" (weakened) as it passes through the medium, and a small attenuation coefficient means that the medium is relatively transparent to the beam. The Attenuation Coefficient is also called linear attenuation coefficient, narrow beam attenuation coefficient, or absorption coefficient.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "0ead3c6c-f611-5bee-b175-b122432d24a7",
            "title": "AttenuationCoefficient",
            "title*": {"en": "Attenuation Coefficient"},
            "description": 'The attenuation coefficient is a quantity that characterizes how easily a material or medium can be penetrated by a beam of light, sound, particles, or other energy or matter. A large attenuation coefficient means that the beam is quickly "attenuated" (weakened) as it passes through the medium, and a small attenuation coefficient means that the medium is relatively transparent to the beam. The Attenuation Coefficient is also called linear attenuation coefficient, narrow beam attenuation coefficient, or absorption coefficient.',
            "description*": {
                "en": 'The attenuation coefficient is a quantity that characterizes how easily a material or medium can be penetrated by a beam of light, sound, particles, or other energy or matter. A large attenuation coefficient means that the beam is quickly "attenuated" (weakened) as it passes through the medium, and a small attenuation coefficient means that the medium is relatively transparent to the beam. The Attenuation Coefficient is also called linear attenuation coefficient, narrow beam attenuation coefficient, or absorption coefficient.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAttenuationCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0ead3c6cf6115beeb175b122432d24a7"]
    unit: Optional[AttenuationCoefficientUnit] = Field(
        AttenuationCoefficientUnit.per_meter,
        options={
            "enum_titles": ["1/m", "1/cm", "1/nm", "1/mm", "1/pm", "1/μm", "1/km"]
        },
        title="AttenuationCoefficientUnit",
        x_enum_varnames=[
            "per_meter",
            "per_centi_meter",
            "per_nano_meter",
            "per_milli_meter",
            "per_pico_meter",
            "per_micro_meter",
            "per_kilo_meter",
        ],
    )


class LagrangeFunctionUnit(UnitEnum):
    joule = "Item:OSW730568cd7ae65906abbbcef1d15cb074"
    atto_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSWa73c696efa58519aa07c265ea965ceda"
    )
    kilo_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSWad2518d42b685f569679c3599455c3d3"
    )
    peta_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW4e7003f5d7ff58a190167711dd63b0bd"
    )
    milli_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW6df751011258508e9d15967190c819f3"
    )
    giga_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSWc26bf1cf449d56ef8122745336585d2b"
    )
    femto_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW2d5cdc08b064506e8f9a5b0456b7a0b3"
    )
    exa_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW5ba80670b2945c08b35551442d3169d5"
    )
    tera_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW0ac3643d930d5c99936e5ece487a9634"
    )
    mega_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSWc1525b1f1fc05c40b9715328bf707805"
    )


class LagrangeFunction(QuantityValue):
    """
    The Lagrange Function is a function that summarizes the dynamics of the system.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "81ed9390-9dda-56e5-a0a9-a1996449f082",
            "title": "LagrangeFunction",
            "title*": {"en": "Lagrange Function"},
            "description": "The Lagrange Function is a function that summarizes the dynamics of the system.",
            "description*": {
                "en": "The Lagrange Function is a function that summarizes the dynamics of the system."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLagrangeFunctionValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW81ed93909dda56e5a0a9a1996449f082"]
    unit: Optional[LagrangeFunctionUnit] = Field(
        LagrangeFunctionUnit.joule,
        options={
            "enum_titles": ["J", "aJ", "kJ", "PJ", "mJ", "GJ", "fJ", "EJ", "TJ", "MJ"]
        },
        title="LagrangeFunctionUnit",
        x_enum_varnames=[
            "joule",
            "atto_joule",
            "kilo_joule",
            "peta_joule",
            "milli_joule",
            "giga_joule",
            "femto_joule",
            "exa_joule",
            "tera_joule",
            "mega_joule",
        ],
    )


class LinearElectricCurrentDensity(QuantityValue):
    """
    "Linear Electric Linear Current Density" is the electric current per unit length. Electric current, $I$, through a curve $C$ is defined as $I = \int_C J _s \times e_n$, where $e_n$ is a unit vector perpendicular to the surface and line vector element, and $dr$ is the differential of position vector $r$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "6ce762ef-103d-5b15-976d-cfa13914bef4",
            "title": "LinearElectricCurrentDensity",
            "title*": {"en": "Linear Electric Current Density"},
            "description": '"Linear Electric Linear Current Density" is the electric current per unit length. Electric current, $I$, through a curve $C$ is defined as $I = \\int_C J _s \\times e_n$, where $e_n$ is a unit vector perpendicular to the surface and line vector element, and $dr$ is the differential of position vector $r$.',
            "description*": {
                "en": '"Linear Electric Linear Current Density" is the electric current per unit length. Electric current, $I$, through a curve $C$ is defined as $I = \\int_C J _s \\times e_n$, where $e_n$ is a unit vector perpendicular to the surface and line vector element, and $dr$ is the differential of position vector $r$.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLinearElectricCurrentDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6ce762ef103d5b15976dcfa13914bef4"]
    unit: Optional[LinearElectricCurrentDensityUnit] = Field(
        LinearElectricCurrentDensityUnit.ampere_per_meter,
        options={"enum_titles": ["A/m", "A/mm", "kA/m", "A/cm", "mA/mm"]},
        title="LinearElectricCurrentDensityUnit",
        x_enum_varnames=[
            "ampere_per_meter",
            "ampere_per_milli_meter",
            "kilo_ampere_per_meter",
            "ampere_per_centi_meter",
            "milli_ampere_per_milli_meter",
        ],
    )


class PowerUnit(UnitEnum):
    watt = "Item:OSW58b03da1b2d35d8ca09043abb7fc8870"
    pico_watt = (
        "Item:OSW58b03da1b2d35d8ca09043abb7fc8870#OSWff05f4ecc2a4513292fae2aa83798da1"
    )
    micro_watt = (
        "Item:OSW58b03da1b2d35d8ca09043abb7fc8870#OSW5884b063f20a5ee19bef9444d5e10da9"
    )
    tera_watt = (
        "Item:OSW58b03da1b2d35d8ca09043abb7fc8870#OSW4303ebb8138953509f12c795a591600c"
    )
    nano_watt = (
        "Item:OSW58b03da1b2d35d8ca09043abb7fc8870#OSW3320aea347d45d0ebed5f48f7a5bf787"
    )
    mega_watt = (
        "Item:OSW58b03da1b2d35d8ca09043abb7fc8870#OSWe5ebcb7476e154cba0bc729b319cafe9"
    )
    giga_watt = (
        "Item:OSW58b03da1b2d35d8ca09043abb7fc8870#OSW3cfa1cd0ef6651c3bad40ca56ea6878c"
    )
    milli_watt = (
        "Item:OSW58b03da1b2d35d8ca09043abb7fc8870#OSW89c2f08b4360565cb2bfe50f5614a0d4"
    )
    kilo_watt = (
        "Item:OSW58b03da1b2d35d8ca09043abb7fc8870#OSWea7d8a111eca57499c3fb187d61d3170"
    )


class Power(QuantityValue):
    """
    Power is the rate at which work is performed or energy is transmitted, or the amount of energy required or expended for a given unit of time. As a rate of change of work done or the energy of a subsystem, power is: $P = W/t$, where $P$ is power, $W$ is work and {t} is time.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a819b531-01b8-54ad-923f-9f13dfb41794",
            "title": "Power",
            "title*": {"en": "Power", "de": "Leistung"},
            "description": "Power is the rate at which work is performed or energy is transmitted, or the amount of energy required or expended for a given unit of time. As a rate of change of work done or the energy of a subsystem, power is: $P = W/t$, where $P$ is power, $W$ is work and {t} is time.",
            "description*": {
                "en": "Power is the rate at which work is performed or energy is transmitted, or the amount of energy required or expended for a given unit of time. As a rate of change of work done or the energy of a subsystem, power is: $P = W/t$, where $P$ is power, $W$ is work and {t} is time."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPowerValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa819b53101b854ad923f9f13dfb41794"]
    unit: Optional[PowerUnit] = Field(
        PowerUnit.watt,
        options={"enum_titles": ["W", "pW", "µW", "TW", "nW", "MW", "GW", "mW", "kW"]},
        title="PowerUnit",
        x_enum_varnames=[
            "watt",
            "pico_watt",
            "micro_watt",
            "tera_watt",
            "nano_watt",
            "mega_watt",
            "giga_watt",
            "milli_watt",
            "kilo_watt",
        ],
    )


class ElectricPower(Power):
    """
    "Electric Power" is the rate at which electrical energy is transferred by an electric circuit. In the simple case of direct current circuits, electric power can be calculated as the product of the potential difference in the circuit (V) and the amount of current flowing in the circuit (I): $P = VI$, where $P$ is the power, $V$ is the potential difference, and $I$ is the current. However, in general electric power is calculated by taking the integral of the vector cross-product of the electrical and magnetic fields over a specified area.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "06164d3f-ebb9-5a42-add7-826696cc5387",
            "title": "ElectricPower",
            "title*": {"en": "Electric power", "de": "Wirkleistung"},
            "description": '"Electric Power" is the rate at which electrical energy is transferred by an electric circuit. In the simple case of direct current circuits, electric power can be calculated as the product of the potential difference in the circuit (V) and the amount of current flowing in the circuit (I): $P = VI$, where $P$ is the power, $V$ is the potential difference, and $I$ is the current. However, in general electric power is calculated by taking the integral of the vector cross-product of the electrical and magnetic fields over a specified area.',
            "description*": {
                "en": '"Electric Power" is the rate at which electrical energy is transferred by an electric circuit. In the simple case of direct current circuits, electric power can be calculated as the product of the potential difference in the circuit (V) and the amount of current flowing in the circuit (I): $P = VI$, where $P$ is the power, $V$ is the potential difference, and $I$ is the current. However, in general electric power is calculated by taking the integral of the vector cross-product of the electrical and magnetic fields over a specified area.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricPowerValue",
            "@context": [
                "/wiki/Category:OSWa819b53101b854ad923f9f13dfb41794?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW06164d3febb95a42add7826696cc5387"]


class InstantaneousPower(ElectricPower):
    """
    For a two-terminal element or a two-terminal circuit with terminals A and B,
       $\\textit{Instantaneous Power}$ is the product of the voltage $u_{AB}$ between the terminals and the electric current i in the element or circuit:
      $$p = u_{AB} \cdot i$$
      Where $u_{AB}$ is the line integral of the electric field strength from A to B,
        and where the electric current in the element or circuit is taken positive if its direction is from A to B and negative in the opposite case.
      $$$$
      For an n-terminal circuit, it is the sum of the instantaneous powers relative to the n - 1 pairs of terminals when one of the terminals is chosen as a common terminal for the pairs.
      $$$$
      For a polyphase element, it is the sum of the instantaneous powers in all phase elements of a polyphase element.
      $$$$
      For a polyphase line consisting of m line conductors and one neutral conductor, it is the sum of the m instantaneous powers expressed for each line conductor by the product of the polyphase line-to-neutral voltage and the corresponding line current.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "d1fc5c3f-cd5f-59e3-86f4-01c22d343569",
            "title": "InstantaneousPower",
            "title*": {"en": "Instantaneous Power"},
            "description": "For a two-terminal element or a two-terminal circuit with terminals A and B, \n   $\\textit{Instantaneous Power}$ is the product of the voltage $u_{AB}$ between the terminals and the electric current i in the element or circuit: \n  $$p = u_{AB} \\cdot i$$\n  Where $u_{AB}$ is the line integral of the electric field strength from A to B,\n    and where the electric current in the element or circuit is taken positive if its direction is from A to B and negative in the opposite case. \n  $$$$\n  For an n-terminal circuit, it is the sum of the instantaneous powers relative to the n - 1 pairs of terminals when one of the terminals is chosen as a common terminal for the pairs. \n  $$$$\n  For a polyphase element, it is the sum of the instantaneous powers in all phase elements of a polyphase element.  \n  $$$$\n  For a polyphase line consisting of m line conductors and one neutral conductor, it is the sum of the m instantaneous powers expressed for each line conductor by the product of the polyphase line-to-neutral voltage and the corresponding line current.",
            "description*": {
                "en": "For a two-terminal element or a two-terminal circuit with terminals A and B, \n   $\\textit{Instantaneous Power}$ is the product of the voltage $u_{AB}$ between the terminals and the electric current i in the element or circuit: \n  $$p = u_{AB} \\cdot i$$\n  Where $u_{AB}$ is the line integral of the electric field strength from A to B,\n    and where the electric current in the element or circuit is taken positive if its direction is from A to B and negative in the opposite case. \n  $$$$\n  For an n-terminal circuit, it is the sum of the instantaneous powers relative to the n - 1 pairs of terminals when one of the terminals is chosen as a common terminal for the pairs. \n  $$$$\n  For a polyphase element, it is the sum of the instantaneous powers in all phase elements of a polyphase element.  \n  $$$$\n  For a polyphase line consisting of m line conductors and one neutral conductor, it is the sum of the m instantaneous powers expressed for each line conductor by the product of the polyphase line-to-neutral voltage and the corresponding line current."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInstantaneousPowerValue",
            "@context": [
                "/wiki/Category:OSW06164d3febb95a42add7826696cc5387?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd1fc5c3fcd5f59e386f401c22d343569"]


class FlightPerformanceReservePropellantMass(Mass):
    """
    A quantity of propellant, at a nominal mixture ratio, along with fuel bias that is set aside from total propellant loaded to cover for statistical variations of flight hardware characteristics and environment conditions on the day of launch. The launch vehicle is designed to accommodate the maximum FPR loading.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "9b95f946-1de5-5e07-a433-02bc23eebc9b",
            "title": "FlightPerformanceReservePropellantMass",
            "title*": {"en": "Flight Performance Reserve Propellant Mass"},
            "description": "A quantity of propellant, at a nominal mixture ratio, along with fuel bias that is set aside from total propellant loaded to cover for statistical variations of flight hardware characteristics and environment conditions on the day of launch. The launch vehicle is designed to accommodate the maximum FPR loading.",
            "description*": {
                "en": "A quantity of propellant, at a nominal mixture ratio, along with fuel bias that is set aside from total propellant loaded to cover for statistical variations of flight hardware characteristics and environment conditions on the day of launch. The launch vehicle is designed to accommodate the maximum FPR loading."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFlightPerformanceReservePropellantMassValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9b95f9461de55e07a43302bc23eebc9b"]


class TemporalSummationFunctionUnit(UnitEnum):
    per_second_per_steradian = "Item:OSWaf6c62c0856f5ac288ac862f5344f227"


class TemporalSummationFunction(QuantityValue):
    """
    "Temporal Summation Function" is the ability of the human eye to produce a composite signal from the signals coming into an eye during a short time interval.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "85210337-b104-5b72-8697-2e73a44c6e1b",
            "title": "TemporalSummationFunction",
            "title*": {"en": "Temporal Summation Function"},
            "description": '"Temporal Summation Function" is the ability of the human eye to produce a composite signal from the signals coming into an eye during a short time interval.',
            "description*": {
                "en": '"Temporal Summation Function" is the ability of the human eye to produce a composite signal from the signals coming into an eye during a short time interval.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTemporalSummationFunctionValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW85210337b1045b7286972e73a44c6e1b"]
    unit: Optional[TemporalSummationFunctionUnit] = Field(
        TemporalSummationFunctionUnit.per_second_per_steradian,
        options={"enum_titles": ["1/(s·sr)"]},
        title="TemporalSummationFunctionUnit",
        x_enum_varnames=["per_second_per_steradian"],
    )


class AreaPerTimeUnit(UnitEnum):
    hertz_meter_squared = "Item:OSWbcb6356964e659dfad78833199412afc"


class AreaPerTime(QuantityValue):
    """
    This is an autogenerated partial class definition of 'AreaPerTime'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "64892b4f-11e8-52b1-8739-75a66e851abe",
            "title": "AreaPerTime",
            "title*": {"en": "Area per Time"},
            "description": "This is an autogenerated partial class definition of 'AreaPerTime'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAreaPerTimeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW64892b4f11e852b1873975a66e851abe"]
    unit: Optional[AreaPerTimeUnit] = Field(
        AreaPerTimeUnit.hertz_meter_squared,
        options={"enum_titles": ["m²·Hz"]},
        title="AreaPerTimeUnit",
        x_enum_varnames=["hertz_meter_squared"],
    )


class ThermalDiffusivity(AreaPerTime):
    """
    In heat transfer analysis, thermal diffusivity (usually denoted $\alpha$ but $a$, $\kappa$,$k$, and $D$ are also used) is the thermal conductivity divided by density and specific heat capacity at constant pressure. The formula is: $\alpha = {k \over {\rho c_p}}$, where k is thermal conductivity ($W/(\mu \cdot K)$), $\rho$ is density ($kg/m^{3}$), and $c_p$ is specific heat capacity ($\frac{J}{(kg \cdot K)}$) .The denominator $\rho c_p$, can be considered the volumetric heat capacity ($\frac{J}{(m^{3} \cdot K)}$).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "9f658cc2-5f6b-5121-957b-bcc537814b30",
            "title": "ThermalDiffusivity",
            "title*": {"en": "Thermal Diffusivity"},
            "description": "In heat transfer analysis, thermal diffusivity (usually denoted $\\alpha$ but $a$, $\\kappa$,$k$, and $D$ are also used) is the thermal conductivity divided by density and specific heat capacity at constant pressure. The formula is: $\\alpha = {k \\over {\\rho c_p}}$, where k is thermal conductivity ($W/(\\mu \\cdot K)$), $\\rho$ is density ($kg/m^{3}$), and $c_p$ is specific heat capacity ($\\frac{J}{(kg \\cdot K)}$) .The denominator $\\rho c_p$, can be considered the volumetric heat capacity ($\\frac{J}{(m^{3} \\cdot K)}$).",
            "description*": {
                "en": "In heat transfer analysis, thermal diffusivity (usually denoted $\\alpha$ but $a$, $\\kappa$,$k$, and $D$ are also used) is the thermal conductivity divided by density and specific heat capacity at constant pressure. The formula is: $\\alpha = {k \\over {\\rho c_p}}$, where k is thermal conductivity ($W/(\\mu \\cdot K)$), $\\rho$ is density ($kg/m^{3}$), and $c_p$ is specific heat capacity ($\\frac{J}{(kg \\cdot K)}$) .The denominator $\\rho c_p$, can be considered the volumetric heat capacity ($\\frac{J}{(m^{3} \\cdot K)}$)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThermalDiffusivityValue",
            "@context": [
                "/wiki/Category:OSW64892b4f11e852b1873975a66e851abe?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9f658cc25f6b5121957bbcc537814b30"]


class MolarVolumeUnit(UnitEnum):
    meter_cubed_per_mole = "Item:OSW94bba2ee2f9a573eb5fa99c9331f1626"
    centi_meter_cubed_per_mole = (
        "Item:OSW94bba2ee2f9a573eb5fa99c9331f1626#OSW90c99a00002b5483a1ac0638fdbe9078"
    )
    deci_meter_cubed_per_mole = (
        "Item:OSW94bba2ee2f9a573eb5fa99c9331f1626#OSW6eaa02f1d5ad581f97e7e017fab31412"
    )


class MolarVolume(QuantityValue):
    """
    The molar volume, symbol $V_m$, is the volume occupied by one mole of a substance (chemical element or chemical compound) at a given temperature and pressure. It is equal to the molar mass ($M$) divided by the mass density ($\rho$). It has the SI unit cubic metres per mole ($m^{1}/mol$). For ideal gases, the molar volume is given by the ideal gas equation: this is a good approximation for many common gases at standard temperature and pressure. For crystalline solids, the molar volume can be measured by X-ray crystallography.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "80447c00-1b96-5c23-a3d7-5ae4dc365fa8",
            "title": "MolarVolume",
            "title*": {"en": "Molar volume", "de": "Molvolumen"},
            "description": "The molar volume, symbol $V_m$, is the volume occupied by one mole of a substance (chemical element or chemical compound) at a given temperature and pressure. It is equal to the molar mass ($M$) divided by the mass density ($\\rho$). It has the SI unit cubic metres per mole ($m^{1}/mol$). For ideal gases, the molar volume is given by the ideal gas equation: this is a good approximation for many common gases at standard temperature and pressure. For crystalline solids, the molar volume can be measured by X-ray crystallography.",
            "description*": {
                "en": "The molar volume, symbol $V_m$, is the volume occupied by one mole of a substance (chemical element or chemical compound) at a given temperature and pressure. It is equal to the molar mass ($M$) divided by the mass density ($\\rho$). It has the SI unit cubic metres per mole ($m^{1}/mol$). For ideal gases, the molar volume is given by the ideal gas equation: this is a good approximation for many common gases at standard temperature and pressure. For crystalline solids, the molar volume can be measured by X-ray crystallography."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarVolumeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW80447c001b965c23a3d75ae4dc365fa8"]
    unit: Optional[MolarVolumeUnit] = Field(
        MolarVolumeUnit.meter_cubed_per_mole,
        options={"enum_titles": ["m³/mol", "cm³/mol", "dm³/mol"]},
        title="MolarVolumeUnit",
        x_enum_varnames=[
            "meter_cubed_per_mole",
            "centi_meter_cubed_per_mole",
            "deci_meter_cubed_per_mole",
        ],
    )


class SoundPowerLevelUnit(UnitEnum):
    byte = "Item:OSW20ac6724f1a05ee884222d546955e78f"


class SoundPowerLevel(QuantityValue):
    """
    Sound Power Level abbreviated as $SWL$ expresses sound power more practically as a relation to the threshold of hearing - 1 picoW - in a logarithmic scale.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "7f56c0da-dee6-5455-b206-ddbb22bb84f8",
            "title": "SoundPowerLevel",
            "title*": {"en": "Sound power level"},
            "description": "Sound Power Level abbreviated as $SWL$ expresses sound power more practically as a relation to the threshold of hearing - 1 picoW - in a logarithmic scale.",
            "description*": {
                "en": "Sound Power Level abbreviated as $SWL$ expresses sound power more practically as a relation to the threshold of hearing - 1 picoW - in a logarithmic scale."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSoundPowerLevelValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7f56c0dadee65455b206ddbb22bb84f8"]
    unit: Optional[SoundPowerLevelUnit] = Field(
        SoundPowerLevelUnit.byte,
        options={"enum_titles": ["B"]},
        title="SoundPowerLevelUnit",
        x_enum_varnames=["byte"],
    )


class AuditoryThresholds(SoundPowerLevel):
    """
    "Auditory Thresholds" is the thresholds of sensitivity to auditory signals and other input to the ear or the sense of hearing.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "bb129109-58f9-51da-a141-62c7078632f3",
            "title": "AuditoryThresholds",
            "title*": {"en": "Auditory Thresholds"},
            "description": '"Auditory Thresholds" is the thresholds of sensitivity to auditory signals and other input to the ear or the sense of hearing.',
            "description*": {
                "en": '"Auditory Thresholds" is the thresholds of sensitivity to auditory signals and other input to the ear or the sense of hearing.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAuditoryThresholdsValue",
            "@context": [
                "/wiki/Category:OSW7f56c0dadee65455b206ddbb22bb84f8?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWbb12910958f951daa14162c7078632f3"]


class ModulusOfElasticityUnit(UnitEnum):
    pascal = "Item:OSWb663e6bff3595e7b93b28fffce66c50c"
    milli_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW38b0e12539b05ce28cd126c8eea29f95"
    )
    deca_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW8d40059d9e3951bb97378fe3f119ba21"
    )
    kilo_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW264ebdc21f54568593a91bbd832b6fbf"
    )
    micro_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW5def4be309ce50ee933c99cf4b74e310"
    )
    hecto_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW482939f123595314beca39ad32d65a15"
    )
    mega_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW0ec5bf8132b25e58b7032766bd9b3225"
    )
    giga_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW49bb4743a5735e189777f3c6bd422a52"
    )


class ModulusOfElasticity(QuantityValue):
    """
    The Modulus of Elasticity is the mathematical description of an object or substance's tendency to be deformed elastically (that is, non-permanently) when a force is applied to it.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "b341ca53-8049-5b7e-992e-1d7cf3c06ddc",
            "title": "ModulusOfElasticity",
            "title*": {"en": "Modulus of Elasticity"},
            "description": "The Modulus of Elasticity is the mathematical description of an object or substance's tendency to be deformed elastically (that is, non-permanently) when a force is applied to it.",
            "description*": {
                "en": "The Modulus of Elasticity is the mathematical description of an object or substance's tendency to be deformed elastically (that is, non-permanently) when a force is applied to it."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasModulusOfElasticityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb341ca5380495b7e992e1d7cf3c06ddc"]
    unit: Optional[ModulusOfElasticityUnit] = Field(
        ModulusOfElasticityUnit.pascal,
        options={
            "enum_titles": ["Pa", "mPa", "daPa", "kPa", "μPa", "hPa", "MPa", "GPa"]
        },
        title="ModulusOfElasticityUnit",
        x_enum_varnames=[
            "pascal",
            "milli_pascal",
            "deca_pascal",
            "kilo_pascal",
            "micro_pascal",
            "hecto_pascal",
            "mega_pascal",
            "giga_pascal",
        ],
    )


class SpecificVolumeUnit(UnitEnum):
    meter_cubed_per_kilo_gram = "Item:OSW8967238ff12d589a8e1383b0a684ddc5"
    milli_meter_cubed_per_kilo_gram = (
        "Item:OSW8967238ff12d589a8e1383b0a684ddc5#OSW0e4d5b9c7d1557418a789c8360d239cb"
    )


class SpecificVolume(QuantityValue):
    """
    "Specific Volume" ($\nu$) is the volume occupied by a unit of mass of a material. It is equal to the inverse of density.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "26ae18e1-1ed1-58dc-9ea7-e62d1d5ce92e",
            "title": "SpecificVolume",
            "title*": {"en": "Specific Volume"},
            "description": '"Specific Volume" ($\\nu$) is the volume occupied by a unit of mass of a material. It is equal to the inverse of density.',
            "description*": {
                "en": '"Specific Volume" ($\\nu$) is the volume occupied by a unit of mass of a material. It is equal to the inverse of density.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificVolumeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW26ae18e11ed158dc9ea7e62d1d5ce92e"]
    unit: Optional[SpecificVolumeUnit] = Field(
        SpecificVolumeUnit.meter_cubed_per_kilo_gram,
        options={"enum_titles": ["m³/kg", "mm³/kg"]},
        title="SpecificVolumeUnit",
        x_enum_varnames=[
            "meter_cubed_per_kilo_gram",
            "milli_meter_cubed_per_kilo_gram",
        ],
    )


class MomentOfInertia(QuantityValue):
    """
    The rotational inertia or resistance to change in direction or speed of rotation about a defined axis.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "2e958a0e-6535-58a8-abf2-bd1fa3c6dd59",
            "title": "MomentOfInertia",
            "title*": {"en": "Moment of inertia", "de": "Massenträgheitsmoment"},
            "description": "The rotational inertia or resistance to change in direction or speed of rotation about a defined axis.",
            "description*": {
                "en": "The rotational inertia or resistance to change in direction or speed of rotation about a defined axis."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMomentOfInertiaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2e958a0e653558a8abf2bd1fa3c6dd59"]
    unit: Optional[MomentOfInertiaUnit] = Field(
        MomentOfInertiaUnit.kilo_gram_meter_squared,
        options={"enum_titles": ["kg·m²"]},
        title="MomentOfInertiaUnit",
        x_enum_varnames=["kilo_gram_meter_squared"],
    )


class ElectricChargePerAreaUnit(UnitEnum):
    coulomb_per_meter_squared = "Item:OSW1f38c1c62b2850deb24c1c3afccfc239"
    micro_coulomb_per_meter_squared = (
        "Item:OSW1f38c1c62b2850deb24c1c3afccfc239#OSWea3f16aa263f52dc941e62b9c510ade5"
    )
    milli_coulomb_per_meter_squared = (
        "Item:OSW1f38c1c62b2850deb24c1c3afccfc239#OSWaace10bd10b5537299ad0548738e0b5e"
    )
    coulomb_per_milli_meter_squared = (
        "Item:OSW1f38c1c62b2850deb24c1c3afccfc239#OSW596e6e9224085a35b395fc84aa4edde8"
    )
    coulomb_per_centi_meter_squared = (
        "Item:OSW1f38c1c62b2850deb24c1c3afccfc239#OSWf6450e8adb145e3a8cc3104122cdc667"
    )
    mega_coulomb_per_meter_squared = (
        "Item:OSW1f38c1c62b2850deb24c1c3afccfc239#OSW344d47f96cd55fe89e73f85cb1054450"
    )
    kilo_coulomb_per_meter_squared = (
        "Item:OSW1f38c1c62b2850deb24c1c3afccfc239#OSW6314b9832a355b7cab3616f5d08c4165"
    )


class ElectricChargePerArea(QuantityValue):
    """
    In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively. The respective SI units are $C \cdot m^{-1}$, $C \cdot m^{-2}$ or $C \cdot m^{-3}$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4f0b36ae-dcac-5f4d-afcc-0eaec8eb86dd",
            "title": "ElectricChargePerArea",
            "title*": {"en": "Electric charge per area"},
            "description": "In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively. The respective SI units are $C \\cdot m^{-1}$, $C \\cdot m^{-2}$ or $C \\cdot m^{-3}$.",
            "description*": {
                "en": "In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively. The respective SI units are $C \\cdot m^{-1}$, $C \\cdot m^{-2}$ or $C \\cdot m^{-3}$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricChargePerAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4f0b36aedcac5f4dafcc0eaec8eb86dd"]
    unit: Optional[ElectricChargePerAreaUnit] = Field(
        ElectricChargePerAreaUnit.coulomb_per_meter_squared,
        options={
            "enum_titles": [
                "C/m²",
                "μC/m²",
                "mC/m²",
                "C/mm²",
                "C/cm²",
                "MC/m²",
                "kC/m²",
            ]
        },
        title="ElectricChargePerAreaUnit",
        x_enum_varnames=[
            "coulomb_per_meter_squared",
            "micro_coulomb_per_meter_squared",
            "milli_coulomb_per_meter_squared",
            "coulomb_per_milli_meter_squared",
            "coulomb_per_centi_meter_squared",
            "mega_coulomb_per_meter_squared",
            "kilo_coulomb_per_meter_squared",
        ],
    )


class ElectricChargeSurfaceDensity(ElectricChargePerArea):
    """
    In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "373a1882-b437-5662-8a65-a731497d5eee",
            "title": "ElectricChargeSurfaceDensity",
            "title*": {"en": "Electric Charge Surface Density"},
            "description": "In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively.",
            "description*": {
                "en": "In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricChargeSurfaceDensityValue",
            "@context": [
                "/wiki/Category:OSW4f0b36aedcac5f4dafcc0eaec8eb86dd?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW373a1882b43756628a65a731497d5eee"]


class NeonTemperatureVarianceUnit(UnitEnum):
    Celsius_squared = "Item:OSWd9cb8583836d53228ac7907d5bf8f0f9"


class NeonTemperatureVariance(QuantityValue):
    """
    Variance for NEON temperature data measured in degrees celcius
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "cb65eb7c-e36c-5a1a-8b3b-0684f4476fca",
            "title": "NeonTemperatureVariance",
            "title*": {"en": "NEON Temperature Variance"},
            "description": "Variance for NEON temperature data measured in degrees celcius",
            "description*": {
                "en": "Variance for NEON temperature data measured in degrees celcius"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasNeonTemperatureVarianceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcb65eb7ce36c5a1a8b3b0684f4476fca"]
    unit: Optional[NeonTemperatureVarianceUnit] = Field(
        NeonTemperatureVarianceUnit.Celsius_squared,
        options={"enum_titles": ["°C²"]},
        title="NeonTemperatureVarianceUnit",
        x_enum_varnames=["Celsius_squared"],
    )


class PhaseCoefficientUnit(UnitEnum):
    per_meter = "Item:OSW28e75b089e145904998a54f1c4125bf3"
    per_centi_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW0dcebe41477056aba0e706c148970688"
    )
    per_nano_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWdc9edf9277ed57cdb7a6f218551afa8d"
    )
    per_milli_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWe77bc3c1bd7a566eadb55f3b68d351f2"
    )
    per_pico_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWd0475e49e0715ec488fba3fe0fdd9b02"
    )
    per_micro_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW45c24d8b68485accbdd684f05231c74c"
    )
    per_kilo_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW124eebfb89dc54bc9cc223fd49c40480"
    )


class PhaseCoefficient(QuantityValue):
    """
    The phase coefficient is the amount of phase shift that occurs as the wave travels one meter. Increasing the loss of the material, via the manipulation of the material's conductivity, will decrease the wavelength (increase $\beta$) and increase the attenuation coefficient (increase $\alpha$).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "023d5e32-5605-5be3-a935-0a1c4f1a3ba3",
            "title": "PhaseCoefficient",
            "title*": {"en": "Phase coefficient"},
            "description": "The phase coefficient is the amount of phase shift that occurs as the wave travels one meter. Increasing the loss of the material, via the manipulation of the material's conductivity, will decrease the wavelength (increase $\\beta$) and increase the attenuation coefficient (increase $\\alpha$).",
            "description*": {
                "en": "The phase coefficient is the amount of phase shift that occurs as the wave travels one meter. Increasing the loss of the material, via the manipulation of the material's conductivity, will decrease the wavelength (increase $\\beta$) and increase the attenuation coefficient (increase $\\alpha$)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPhaseCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW023d5e3256055be3a9350a1c4f1a3ba3"]
    unit: Optional[PhaseCoefficientUnit] = Field(
        PhaseCoefficientUnit.per_meter,
        options={
            "enum_titles": ["1/m", "1/cm", "1/nm", "1/mm", "1/pm", "1/μm", "1/km"]
        },
        title="PhaseCoefficientUnit",
        x_enum_varnames=[
            "per_meter",
            "per_centi_meter",
            "per_nano_meter",
            "per_milli_meter",
            "per_pico_meter",
            "per_micro_meter",
            "per_kilo_meter",
        ],
    )


class CalorificValue(SpecificEnergy):
    """
    The heating value (or energy value or calorific value) of a substance, usually a fuel or food (see food energy), is the amount of heat released during the combustion of a specified amount of it.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a8882045-1d0e-5563-927c-ef63406f97ab",
            "title": "CalorificValue",
            "title*": {"en": "Calorific Value"},
            "description": "The heating value (or energy value or calorific value) of a substance, usually a fuel or food (see food energy), is the amount of heat released during the combustion of a specified amount of it.",
            "description*": {
                "en": "The heating value (or energy value or calorific value) of a substance, usually a fuel or food (see food energy), is the amount of heat released during the combustion of a specified amount of it."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCalorificValueValue",
            "@context": [
                "/wiki/Category:OSW9a32b5a84f235a0cb0a9e9fba9bd252e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa88820451d0e5563927cef63406f97ab"]


class ThermalInsulanceUnit(UnitEnum):
    kelvin_meter_squared_per_watt = "Item:OSWeb19f8b7b92a5f09a0a4a398d29021dc"


class ThermalInsulance(QuantityValue):
    """
    $\\textit{Thermal Insulance}$ is the reduction of heat transfer (the transfer of thermal energy between objects of differing temperature) between objects in thermal contact or in range of radiative influence. In building technology, this quantity is often called $\\textit{Thermal Resistance}$, with the symbol $R$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "8139b637-34d3-516c-827b-33f08ced96fb",
            "title": "ThermalInsulance",
            "title*": {"en": "Thermal Insulance"},
            "description": "$\\textit{Thermal Insulance}$ is the reduction of heat transfer (the transfer of thermal energy between objects of differing temperature) between objects in thermal contact or in range of radiative influence. In building technology, this quantity is often called $\\textit{Thermal Resistance}$, with the symbol $R$.",
            "description*": {
                "en": "$\\textit{Thermal Insulance}$ is the reduction of heat transfer (the transfer of thermal energy between objects of differing temperature) between objects in thermal contact or in range of radiative influence. In building technology, this quantity is often called $\\textit{Thermal Resistance}$, with the symbol $R$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThermalInsulanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8139b63734d3516c827b33f08ced96fb"]
    unit: Optional[ThermalInsulanceUnit] = Field(
        ThermalInsulanceUnit.kelvin_meter_squared_per_watt,
        options={"enum_titles": ["m²·K/W"]},
        title="ThermalInsulanceUnit",
        x_enum_varnames=["kelvin_meter_squared_per_watt"],
    )


class Energy(QuantityValue):
    """
    Energy is the quantity characterizing the ability of a system to do work.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "c87ddd4a-7d11-59f0-a75b-686a61ef4e8e",
            "title": "Energy",
            "title*": {"en": "Energy", "de": "Energie"},
            "description": "Energy is the quantity characterizing the ability of a system to do work.",
            "description*": {
                "en": "Energy is the quantity characterizing the ability of a system to do work."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnergyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e"]
    unit: Optional[EnergyUnit] = Field(
        EnergyUnit.joule,
        options={
            "enum_titles": ["J", "aJ", "kJ", "PJ", "mJ", "GJ", "fJ", "EJ", "TJ", "MJ"]
        },
        title="EnergyUnit",
        x_enum_varnames=[
            "joule",
            "atto_joule",
            "kilo_joule",
            "peta_joule",
            "milli_joule",
            "giga_joule",
            "femto_joule",
            "exa_joule",
            "tera_joule",
            "mega_joule",
        ],
    )


class Tilt(Angle):
    """
    The angle between an object's orientation vector relative to a reference frame.
      In the context of architecture, this would refer to the angle between the ground and the face of a surface.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "de7fca61-6701-5b52-80b9-35114fbfc76b",
            "title": "Tilt",
            "title*": {"en": "Tilt"},
            "description": "The angle between an object's orientation vector relative to a reference frame.  \n  In the context of architecture, this would refer to the angle between the ground and the face of a surface.",
            "description*": {
                "en": "The angle between an object's orientation vector relative to a reference frame.  \n  In the context of architecture, this would refer to the angle between the ground and the face of a surface."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTiltValue",
            "@context": [
                "/wiki/Category:OSW2339256af71e5635a541ac7f5a437141?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWde7fca6167015b5280b935114fbfc76b"]


class MagneticFluxDensityUnit(UnitEnum):
    tesla = "Item:OSW1d9ac7ec48cc5b7da90e8c2d529d6df0"
    milli_tesla = (
        "Item:OSW1d9ac7ec48cc5b7da90e8c2d529d6df0#OSW490afd74306a568c858e46dd393110fe"
    )
    micro_tesla = (
        "Item:OSW1d9ac7ec48cc5b7da90e8c2d529d6df0#OSW30a0158af5445fbc8b08c843d0a84d5a"
    )
    nano_tesla = (
        "Item:OSW1d9ac7ec48cc5b7da90e8c2d529d6df0#OSW7b67d49640c75e54b4906f4bd72b494b"
    )


class MagneticFluxDensity(QuantityValue):
    """
    "Magnetic Flux Density" is a vector quantity and is the magnetic flux per unit area of a magnetic field at right angles to the magnetic force. It can be defined in terms of the effects the field has, for example by $B = F/q v \sin \theta$, where $F$ is the force a moving charge $q$ would experience if it was travelling at a velocity $v$ in a direction making an angle θ with that of the field. The magnetic field strength is also a vector quantity and is related to $B$ by: $H = B/\mu$, where $\mu$ is the permeability of the medium.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "91fc2f11-0c7f-5262-8dce-39bc0278562b",
            "title": "MagneticFluxDensity",
            "title*": {"en": "Magnetic flux density", "de": "Magnetische Flussdichte"},
            "description": '"Magnetic Flux Density" is a vector quantity and is the magnetic flux per unit area of a magnetic field at right angles to the magnetic force. It can be defined in terms of the effects the field has, for example by $B = F/q v \\sin \\theta$, where $F$ is the force a moving charge $q$ would experience if it was travelling at a velocity $v$ in a direction making an angle θ with that of the field. The magnetic field strength is also a vector quantity and is related to $B$ by: $H = B/\\mu$, where $\\mu$ is the permeability of the medium.',
            "description*": {
                "en": '"Magnetic Flux Density" is a vector quantity and is the magnetic flux per unit area of a magnetic field at right angles to the magnetic force. It can be defined in terms of the effects the field has, for example by $B = F/q v \\sin \\theta$, where $F$ is the force a moving charge $q$ would experience if it was travelling at a velocity $v$ in a direction making an angle θ with that of the field. The magnetic field strength is also a vector quantity and is related to $B$ by: $H = B/\\mu$, where $\\mu$ is the permeability of the medium.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMagneticFluxDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW91fc2f110c7f52628dce39bc0278562b"]
    unit: Optional[MagneticFluxDensityUnit] = Field(
        MagneticFluxDensityUnit.tesla,
        options={"enum_titles": ["T", "mT", "µT", "nT"]},
        title="MagneticFluxDensityUnit",
        x_enum_varnames=["tesla", "milli_tesla", "micro_tesla", "nano_tesla"],
    )


class ThermodynamicCriticalMagneticFluxDensity(MagneticFluxDensity):
    """
    "Thermodynamic Critical Magnetic Flux Density" is the maximum magnetic field strength below which a material remains superconducting.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1f2d386a-47e4-522e-99a0-1df0d0b4393d",
            "title": "ThermodynamicCriticalMagneticFluxDensity",
            "title*": {"en": "Thermodynamic Critical Magnetic Flux Density"},
            "description": '"Thermodynamic Critical Magnetic Flux Density" is the maximum magnetic field strength below which a material remains superconducting.',
            "description*": {
                "en": '"Thermodynamic Critical Magnetic Flux Density" is the maximum magnetic field strength below which a material remains superconducting.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThermodynamicCriticalMagneticFluxDensityValue",
            "@context": [
                "/wiki/Category:OSW91fc2f110c7f52628dce39bc0278562b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1f2d386a47e4522e99a01df0d0b4393d"]


class StaticFrictionCoefficient(FrictionCoefficient):
    """
    Static friction is friction between two or more solid objects that are not moving relative to each other. For example, static friction can prevent an object from sliding down a sloped surface.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b5fe5153-4e9a-5618-af6a-abad45c2cb28",
            "title": "StaticFrictionCoefficient",
            "title*": {"en": "Static Friction Coefficient"},
            "description": "Static friction is friction between two or more solid objects that are not moving relative to each other. For example, static friction can prevent an object from sliding down a sloped surface.",
            "description*": {
                "en": "Static friction is friction between two or more solid objects that are not moving relative to each other. For example, static friction can prevent an object from sliding down a sloped surface."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasStaticFrictionCoefficientValue",
            "@context": [
                "/wiki/Category:OSW8f66d565d52b52bab7fe2840caf54ffa?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb5fe51534e9a5618af6aabad45c2cb28"]


class InternalEnergy(Energy):
    """
    The internal energy is the total energy contained by a thermodynamic system. It is the energy needed to create the system, but excludes the energy to displace the system's surroundings, any energy associated with a move as a whole, or due to external force fields. Internal energy has two major components, kinetic energy and potential energy. The internal energy (U) is the sum of all forms of energy (Ei) intrinsic to a thermodynamic system:  $  U = \sum_i E_i $
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a1400ee0-d19b-55c0-9bfa-c6fad4965a58",
            "title": "InternalEnergy",
            "title*": {"en": "Internal energy", "de": "Innere Energie"},
            "description": "The internal energy is the total energy contained by a thermodynamic system. It is the energy needed to create the system, but excludes the energy to displace the system's surroundings, any energy associated with a move as a whole, or due to external force fields. Internal energy has two major components, kinetic energy and potential energy. The internal energy (U) is the sum of all forms of energy (Ei) intrinsic to a thermodynamic system:  $  U = \\sum_i E_i $",
            "description*": {
                "en": "The internal energy is the total energy contained by a thermodynamic system. It is the energy needed to create the system, but excludes the energy to displace the system's surroundings, any energy associated with a move as a whole, or due to external force fields. Internal energy has two major components, kinetic energy and potential energy. The internal energy (U) is the sum of all forms of energy (Ei) intrinsic to a thermodynamic system:  $  U = \\sum_i E_i $"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInternalEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa1400ee0d19b55c09bfac6fad4965a58"]


class MassRatioUnit(UnitEnum):
    field_ = "Item:OSW36c3b3d668515d6ba8fd68089a3a0371"
    field__1 = (
        "Item:OSW36c3b3d668515d6ba8fd68089a3a0371#OSWae508fcfb7fb56c78ae5250e13758161"
    )
    micro_gram_per_gram = (
        "Item:OSW36c3b3d668515d6ba8fd68089a3a0371#OSW8b2109351a6e507492cbce6f37661a92"
    )
    gram_per_kilo_gram = (
        "Item:OSW36c3b3d668515d6ba8fd68089a3a0371#OSWddab3ad9ea7357ebbf27de6e6e20405d"
    )
    milli_gram_per_gram = (
        "Item:OSW36c3b3d668515d6ba8fd68089a3a0371#OSW31fbfb51bd3f59f8ad0721cb4d285ad3"
    )
    pico_gram_per_gram = (
        "Item:OSW36c3b3d668515d6ba8fd68089a3a0371#OSW0e151b869b4358e09c5be62ba332b9e2"
    )


class MassRatio(QuantityValue):
    """
    In aerospace engineering, mass ratio is a measure of the efficiency of a rocket. It describes how much more massive the vehicle is with propellant than without; that is, it is the ratio of the rocket's wet mass (vehicle plus contents plus propellant) to its dry mass (vehicle plus contents)
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "feea4244-1eab-5f65-98b3-6cda1157f75f",
            "title": "MassRatio",
            "title*": {"en": "Mass Ratio"},
            "description": "In aerospace engineering, mass ratio is a measure of the efficiency of a rocket. It describes how much more massive the vehicle is with propellant than without; that is, it is the ratio of the rocket's wet mass (vehicle plus contents plus propellant) to its dry mass (vehicle plus contents)",
            "description*": {
                "en": "In aerospace engineering, mass ratio is a measure of the efficiency of a rocket. It describes how much more massive the vehicle is with propellant than without; that is, it is the ratio of the rocket's wet mass (vehicle plus contents plus propellant) to its dry mass (vehicle plus contents)"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassRatioValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfeea42441eab5f6598b36cda1157f75f"]
    unit: Optional[MassRatioUnit] = Field(
        MassRatioUnit.field_,
        options={"enum_titles": ["g/g", "kg/kg", "μg/g", "g/kg", "mg/g", "pg/g"]},
        title="MassRatioUnit",
        x_enum_varnames=[
            "",
            "",
            "micro_gram_per_gram",
            "gram_per_kilo_gram",
            "milli_gram_per_gram",
            "pico_gram_per_gram",
        ],
    )


class SecondStageMassRatio(MassRatio):
    """
    Mass ratio for the second stage of a multistage launcher.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "85cb752c-0cb7-520b-9217-206d5efe1858",
            "title": "SecondStageMassRatio",
            "title*": {"en": "Second Stage Mass Ratio"},
            "description": "Mass ratio for the second stage of a multistage launcher.",
            "description*": {
                "en": "Mass ratio for the second stage of a multistage launcher."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSecondStageMassRatioValue",
            "@context": [
                "/wiki/Category:OSWfeea42441eab5f6598b36cda1157f75f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW85cb752c0cb7520b9217206d5efe1858"]


class DiffusionCoefficientUnit(UnitEnum):
    meter_squared_per_second = "Item:OSW20b837bfd2fa5c3abc86347ce702f27c"
    milli_meter_squared_per_second = (
        "Item:OSW20b837bfd2fa5c3abc86347ce702f27c#OSW5db8f161eb8c59129cef62d84dd3309c"
    )
    centi_meter_squared_per_second = (
        "Item:OSW20b837bfd2fa5c3abc86347ce702f27c#OSW031bb99ee99a5794a24c66e6203c21db"
    )


class DiffusionCoefficient(QuantityValue):
    """
    The "Diffusion Coefficient" is a proportionality constant between the molar flux due to molecular diffusion and the gradient in the concentration of the species (or the driving force for diffusion). Diffusivity is encountered in Fick's law and numerous other equations of physical chemistry.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9f693a8e-95ec-5924-8b10-9c678328b872",
            "title": "DiffusionCoefficient",
            "title*": {"en": "Diffusion coefficient", "de": "Diffusionskoeffizient"},
            "description": 'The "Diffusion Coefficient" is a proportionality constant between the molar flux due to molecular diffusion and the gradient in the concentration of the species (or the driving force for diffusion). Diffusivity is encountered in Fick\'s law and numerous other equations of physical chemistry.',
            "description*": {
                "en": 'The "Diffusion Coefficient" is a proportionality constant between the molar flux due to molecular diffusion and the gradient in the concentration of the species (or the driving force for diffusion). Diffusivity is encountered in Fick\'s law and numerous other equations of physical chemistry.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDiffusionCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9f693a8e95ec59248b109c678328b872"]
    unit: Optional[DiffusionCoefficientUnit] = Field(
        DiffusionCoefficientUnit.meter_squared_per_second,
        options={"enum_titles": ["m²/s", "mm²/s", "cm²/s"]},
        title="DiffusionCoefficientUnit",
        x_enum_varnames=[
            "meter_squared_per_second",
            "milli_meter_squared_per_second",
            "centi_meter_squared_per_second",
        ],
    )


class BloodGlucoseLevelByMassUnit(UnitEnum):
    gram_per_liter = "Item:OSW754b1a3564725113ac583f91ae2ea959"
    milli_gram_per_milli_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW99bbcff947e1508bad38d748ad6ff8e2"
    )
    gram_per_milli_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSWe905ceb23b3b550489bed5baa6c9b466"
    )
    femto_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW449dc7494f3f5c0bbd9aff1d1fd2f591"
    )
    pico_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW84ec459d4d135bf28a610cd00061d18c"
    )
    kilo_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW40c933269ec45fc1aeef04aefce2b374"
    )
    micro_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW457d0485a44c57cda788a583bf9ab4ff"
    )
    nano_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW42fdef27c8ae5c8fbf1876c400f27101"
    )
    gram_per_deci_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW1a48aea5dca45c34bbde02b0df02f6f8"
    )
    milli_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSWca4043a385f25aa3a98122f2aefd0d2e"
    )


class BloodGlucoseLevelByMass(QuantityValue):
    """
    Blood sugar level, blood sugar concentration, or blood glucose level is the amount of glucose present in the blood of humans and animals.
      Glucose is a simple sugar and approximately 4 grams of glucose are present in the blood of humans at all times.
      Stored in skeletal muscle and liver cells in the form of glycogen, the body tightly regulates blood glucose levels as a part of metabolic homeostasis.
      During fasting blood glucose is maintained at a constant level at the expense of the glycogen stores in the liver and skeletal muscle.
      There are two main methods of describing concentrations: by weight, and by molecular count.
      Weights are in grams and molecular counts in moles.
      A mole is $6.022\times 10^{23}$ molecules.
      In both cases, the unit is usually modified by $milli-$ or $micro-$ or other prefix,
       and is always $per$ some volume, often a litre.
      Conversion factors depend on the molecular weight of the substance in question.
      $mmol/L$ is millimoles/liter, and is the world standard unit for measuring glucose in blood.
      Specifically, it is the designated SI (Systeme International) unit.
      Some countries use $mg/dl$.
      A mole is about $6\times 10^{23}$ molecules.
      $mg/dL$ (milligrams/deciliter) is the traditional unit for measuring $bG$ (blood glucose).
      There is a trend toward using $mmol/L$ however $mg/dL$ is much in practice.
      Some use is made of $mmol/L$ as the primary unit with $mg/dL$ quoted in parentheses.
      This acknowledges the large base of health care providers, researchers and patients who are already familiar with $mg/dL$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "ad52711f-3c22-5826-9423-65d4930ff84c",
            "title": "BloodGlucoseLevelByMass",
            "title*": {"en": "Blood Glucose Level by Mass"},
            "description": "Blood sugar level, blood sugar concentration, or blood glucose level is the amount of glucose present in the blood of humans and animals. \n  Glucose is a simple sugar and approximately 4 grams of glucose are present in the blood of humans at all times.  \n  Stored in skeletal muscle and liver cells in the form of glycogen, the body tightly regulates blood glucose levels as a part of metabolic homeostasis.\n  During fasting blood glucose is maintained at a constant level at the expense of the glycogen stores in the liver and skeletal muscle. \n  There are two main methods of describing concentrations: by weight, and by molecular count. \n  Weights are in grams and molecular counts in moles. \n  A mole is $6.022\\times 10^{23}$ molecules.\n  In both cases, the unit is usually modified by $milli-$ or $micro-$ or other prefix,\n   and is always $per$ some volume, often a litre. \n  Conversion factors depend on the molecular weight of the substance in question. \n  $mmol/L$ is millimoles/liter, and is the world standard unit for measuring glucose in blood. \n  Specifically, it is the designated SI (Systeme International) unit. \n  Some countries use $mg/dl$. \n  A mole is about $6\\times 10^{23}$ molecules.\n  $mg/dL$ (milligrams/deciliter) is the traditional unit for measuring $bG$ (blood glucose). \n  There is a trend toward using $mmol/L$ however $mg/dL$ is much in practice. \n  Some use is made of $mmol/L$ as the primary unit with $mg/dL$ quoted in parentheses. \n  This acknowledges the large base of health care providers, researchers and patients who are already familiar with $mg/dL$.",
            "description*": {
                "en": "Blood sugar level, blood sugar concentration, or blood glucose level is the amount of glucose present in the blood of humans and animals. \n  Glucose is a simple sugar and approximately 4 grams of glucose are present in the blood of humans at all times.  \n  Stored in skeletal muscle and liver cells in the form of glycogen, the body tightly regulates blood glucose levels as a part of metabolic homeostasis.\n  During fasting blood glucose is maintained at a constant level at the expense of the glycogen stores in the liver and skeletal muscle. \n  There are two main methods of describing concentrations: by weight, and by molecular count. \n  Weights are in grams and molecular counts in moles. \n  A mole is $6.022\\times 10^{23}$ molecules.\n  In both cases, the unit is usually modified by $milli-$ or $micro-$ or other prefix,\n   and is always $per$ some volume, often a litre. \n  Conversion factors depend on the molecular weight of the substance in question. \n  $mmol/L$ is millimoles/liter, and is the world standard unit for measuring glucose in blood. \n  Specifically, it is the designated SI (Systeme International) unit. \n  Some countries use $mg/dl$. \n  A mole is about $6\\times 10^{23}$ molecules.\n  $mg/dL$ (milligrams/deciliter) is the traditional unit for measuring $bG$ (blood glucose). \n  There is a trend toward using $mmol/L$ however $mg/dL$ is much in practice. \n  Some use is made of $mmol/L$ as the primary unit with $mg/dL$ quoted in parentheses. \n  This acknowledges the large base of health care providers, researchers and patients who are already familiar with $mg/dL$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasBloodGlucoseLevelByMassValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWad52711f3c225826942365d4930ff84c"]
    unit: Optional[BloodGlucoseLevelByMassUnit] = Field(
        BloodGlucoseLevelByMassUnit.gram_per_liter,
        options={
            "enum_titles": [
                "g/L",
                "mg/mL",
                "g/mL",
                "fg/L",
                "pg/L",
                "kg/L",
                "μg/L",
                "ng/L",
                "g/dL",
                "mg/L",
            ]
        },
        title="BloodGlucoseLevelByMassUnit",
        x_enum_varnames=[
            "gram_per_liter",
            "milli_gram_per_milli_liter",
            "gram_per_milli_liter",
            "femto_gram_per_liter",
            "pico_gram_per_liter",
            "kilo_gram_per_liter",
            "micro_gram_per_liter",
            "nano_gram_per_liter",
            "gram_per_deci_liter",
            "milli_gram_per_liter",
        ],
    )


class SpecificHeatCapacityUnit(UnitEnum):
    meter_squared_per_kelvin_per_second_squared = (
        "Item:OSW3b1e36710511523da37025a70b6a305d"
    )


class SpecificHeatCapacity(QuantityValue):
    """
    Specific Heat Capacity of a solid or liquid is defined as the heat required to raise unit mass of substance by one degree of temperature. This is Heat Capacity divided by Mass. Note that there are corresponding molar quantities.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "8fa24695-3141-5841-b654-12f705d138d6",
            "title": "SpecificHeatCapacity",
            "title*": {"en": "Specific Heat Capacity"},
            "description": "Specific Heat Capacity of a solid or liquid is defined as the heat required to raise unit mass of substance by one degree of temperature. This is Heat Capacity divided by Mass. Note that there are corresponding molar quantities.",
            "description*": {
                "en": "Specific Heat Capacity of a solid or liquid is defined as the heat required to raise unit mass of substance by one degree of temperature. This is Heat Capacity divided by Mass. Note that there are corresponding molar quantities."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificHeatCapacityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8fa2469531415841b65412f705d138d6"]
    unit: Optional[SpecificHeatCapacityUnit] = Field(
        SpecificHeatCapacityUnit.meter_squared_per_kelvin_per_second_squared,
        options={"enum_titles": ["m²/(s²·K)"]},
        title="SpecificHeatCapacityUnit",
        x_enum_varnames=["meter_squared_per_kelvin_per_second_squared"],
    )


class ColdReceptorThreshold(Temperature):
    """
    "Cold Receptor Threshold" is the threshold of cold-sensitive free nerve-ending.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "364dc304-7ad8-52c2-bbee-26d77fb270ab",
            "title": "ColdReceptorThreshold",
            "title*": {"en": "Cold Receptor Threshold"},
            "description": '"Cold Receptor Threshold" is the threshold of cold-sensitive free nerve-ending.',
            "description*": {
                "en": '"Cold Receptor Threshold" is the threshold of cold-sensitive free nerve-ending.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasColdReceptorThresholdValue",
            "@context": [
                "/wiki/Category:OSW20927e4900e95e93985698c92995f964?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW364dc3047ad852c2bbee26d77fb270ab"]


class ElectricQuadrupoleMomentUnit(UnitEnum):
    coulomb_meter_squared = "Item:OSW46fa6db298ce5915a82932c6e4b72085"


class ElectricQuadrupoleMoment(QuantityValue):
    """
    The Electric Quadrupole Moment is a quantity which describes the effective shape of the ellipsoid of nuclear charge distribution. A non-zero quadrupole moment Q indicates that the charge distribution is not spherically symmetric. By convention, the value of Q is taken to be positive if the ellipsoid is prolate and negative if it is oblate. In general, the electric quadrupole moment is tensor-valued.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "7fdace54-bea6-5a29-af32-ab2124bc8087",
            "title": "ElectricQuadrupoleMoment",
            "title*": {
                "en": "Electric quadrupole moment",
                "de": "Elektrisches Quadrupolmoment",
            },
            "description": "The Electric Quadrupole Moment is a quantity which describes the effective shape of the ellipsoid of nuclear charge distribution. A non-zero quadrupole moment Q indicates that the charge distribution is not spherically symmetric. By convention, the value of Q is taken to be positive if the ellipsoid is prolate and negative if it is oblate. In general, the electric quadrupole moment is tensor-valued.",
            "description*": {
                "en": "The Electric Quadrupole Moment is a quantity which describes the effective shape of the ellipsoid of nuclear charge distribution. A non-zero quadrupole moment Q indicates that the charge distribution is not spherically symmetric. By convention, the value of Q is taken to be positive if the ellipsoid is prolate and negative if it is oblate. In general, the electric quadrupole moment is tensor-valued."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricQuadrupoleMomentValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7fdace54bea65a29af32ab2124bc8087"]
    unit: Optional[ElectricQuadrupoleMomentUnit] = Field(
        ElectricQuadrupoleMomentUnit.coulomb_meter_squared,
        options={"enum_titles": ["C·m²"]},
        title="ElectricQuadrupoleMomentUnit",
        x_enum_varnames=["coulomb_meter_squared"],
    )


class MagneticReluctivityUnit(UnitEnum):
    per_meter_per_tesla = "Item:OSWdedbe50d76c75dc2a87b1000faa99b10"


class MagneticReluctivity(QuantityValue):
    """
    Length Per Unit Magnetic Flux is the the resistance of a material to the establishment of a magnetic field in it. It is the reciprocal of Magnetic Permeability, the inverse of the measure of the ability of a material to support the formation of a magnetic field within itself.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4b028ad3-52e5-57d0-b10e-8ab1735f03c2",
            "title": "MagneticReluctivity",
            "title*": {"en": "Magnetic Reluctivity"},
            "description": "Length Per Unit Magnetic Flux is the the resistance of a material to the establishment of a magnetic field in it. It is the reciprocal of Magnetic Permeability, the inverse of the measure of the ability of a material to support the formation of a magnetic field within itself.",
            "description*": {
                "en": "Length Per Unit Magnetic Flux is the the resistance of a material to the establishment of a magnetic field in it. It is the reciprocal of Magnetic Permeability, the inverse of the measure of the ability of a material to support the formation of a magnetic field within itself."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMagneticReluctivityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4b028ad352e557d0b10e8ab1735f03c2"]
    unit: Optional[MagneticReluctivityUnit] = Field(
        MagneticReluctivityUnit.per_meter_per_tesla,
        options={"enum_titles": ["1/(T·m)"]},
        title="MagneticReluctivityUnit",
        x_enum_varnames=["per_meter_per_tesla"],
    )


class SpatialSummationFunction(Length):
    """
    "Spatial Summation Function" is he ability to produce a composite signal from the signals coming into the eyes from different directions.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "f00faa77-3bc5-5f9f-b027-a0986bf4028f",
            "title": "SpatialSummationFunction",
            "title*": {"en": "Spatial Summation Function"},
            "description": '"Spatial Summation Function" is he ability to produce a composite signal from the signals coming into the eyes from different directions.',
            "description*": {
                "en": '"Spatial Summation Function" is he ability to produce a composite signal from the signals coming into the eyes from different directions.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpatialSummationFunctionValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf00faa773bc55f9fb027a0986bf4028f"]


class ParticleSourceDensityUnit(UnitEnum):
    per_meter_cubed_per_second = "Item:OSW804e40f82f4955ab8f1bd0c1e9e77d28"


class ParticleSourceDensity(QuantityValue):
    """
    "Particle Source Density" is the rate of production of particles in a 3D domain divided by the volume of that element.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "fd24274b-97b5-57eb-ad5f-bc98060ffcf6",
            "title": "ParticleSourceDensity",
            "title*": {"en": "Particle Source Density"},
            "description": '"Particle Source Density" is the rate of production of particles in a 3D domain divided by the volume of that element.',
            "description*": {
                "en": '"Particle Source Density" is the rate of production of particles in a 3D domain divided by the volume of that element.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasParticleSourceDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfd24274b97b557ebad5fbc98060ffcf6"]
    unit: Optional[ParticleSourceDensityUnit] = Field(
        ParticleSourceDensityUnit.per_meter_cubed_per_second,
        options={"enum_titles": ["1/(m³·s)"]},
        title="ParticleSourceDensityUnit",
        x_enum_varnames=["per_meter_cubed_per_second"],
    )


class MeltingPointTemperature(Temperature):
    """
    A temperature that is the one at which a substance will change its physical state from a solid to a liquid.  It is also the temperature where the solid and liquid forms of a pure substance can exist in equilibrium.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3dc44dc6-9cfb-5c34-a375-43b3c7bf7017",
            "title": "MeltingPointTemperature",
            "title*": {"en": "Melting Point Temperature"},
            "description": "A temperature that is the one at which a substance will change its physical state from a solid to a liquid.  It is also the temperature where the solid and liquid forms of a pure substance can exist in equilibrium.",
            "description*": {
                "en": "A temperature that is the one at which a substance will change its physical state from a solid to a liquid.  It is also the temperature where the solid and liquid forms of a pure substance can exist in equilibrium."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMeltingPointTemperatureValue",
            "@context": [
                "/wiki/Category:OSW20927e4900e95e93985698c92995f964?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3dc44dc69cfb5c34a37543b3c7bf7017"]


class DisplacementVectorOfIon(Length):
    """
    "Displacement Vector of Ion" is the .
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ee57e9ea-6fbe-580a-8376-5aa62cafed15",
            "title": "DisplacementVectorOfIon",
            "title*": {"en": "Displacement Vector of Ion"},
            "description": '"Displacement Vector of Ion" is the .',
            "description*": {"en": '"Displacement Vector of Ion" is the .'},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDisplacementVectorOfIonValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWee57e9ea6fbe580a83765aa62cafed15"]


class Thrust(Force):
    """
    Thrust is a reaction force described quantitatively by Newton's Second and Third Laws. When a system expels or accelerates mass in one direction the accelerated mass will cause a proportional but opposite force on that system.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7bf742d6-7349-5bb8-bd77-d1ea5295b2cd",
            "title": "Thrust",
            "title*": {"en": "Thrust"},
            "description": "Thrust is a reaction force described quantitatively by Newton's Second and Third Laws. When a system expels or accelerates mass in one direction the accelerated mass will cause a proportional but opposite force on that system.",
            "description*": {
                "en": "Thrust is a reaction force described quantitatively by Newton's Second and Third Laws. When a system expels or accelerates mass in one direction the accelerated mass will cause a proportional but opposite force on that system."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThrustValue",
            "@context": [
                "/wiki/Category:OSW1b832c1a42c055eb9669bb0cdda18d7f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7bf742d673495bb8bd77d1ea5295b2cd"]


class NozzleThroatDiameter(Length):
    """
    This is an autogenerated partial class definition of 'NozzleThroatDiameter'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "02b07b5b-2f09-5f45-afb5-157bce27379a",
            "title": "NozzleThroatDiameter",
            "title*": {"en": "Nozzle Throat Diameter"},
            "description": "This is an autogenerated partial class definition of 'NozzleThroatDiameter'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasNozzleThroatDiameterValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW02b07b5b2f095f45afb5157bce27379a"]


class InitialNozzleThroatDiameter(NozzleThroatDiameter):
    """
    This is an autogenerated partial class definition of 'InitialNozzleThroatDiameter'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "cb024afe-b31e-5a9a-bdb9-f48b2ccb6983",
            "title": "InitialNozzleThroatDiameter",
            "title*": {"en": "Initial Nozzle Throat Diameter"},
            "description": "This is an autogenerated partial class definition of 'InitialNozzleThroatDiameter'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInitialNozzleThroatDiameterValue",
            "@context": [
                "/wiki/Category:OSW02b07b5b2f095f45afb5157bce27379a?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcb024afeb31e5a9abdb9f48b2ccb6983"]


class StandardGravitationalParameterUnit(UnitEnum):
    meter_cubed_per_second_squared = "Item:OSW70d2cca5a9c75bec807d755997acbf8c"
    kilo_meter_cubed_per_second_squared = (
        "Item:OSW70d2cca5a9c75bec807d755997acbf8c#OSW111bef40f18158099e03d15fcd4af1fe"
    )


class StandardGravitationalParameter(QuantityValue):
    """
    In celestial mechanics the standard gravitational parameter of a celestial body is the product of the gravitational constant G and the mass M of the body. Expressed as $\mu = G \cdot M$. The SI units of the standard gravitational parameter are $m^{3}s^{-2}$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9a1a2b8a-06d7-54dc-b2ea-44a8cdbd7fd7",
            "title": "StandardGravitationalParameter",
            "title*": {"en": "Standard Gravitational Parameter"},
            "description": "In celestial mechanics the standard gravitational parameter of a celestial body is the product of the gravitational constant G and the mass M of the body. Expressed as $\\mu = G \\cdot M$. The SI units of the standard gravitational parameter are $m^{3}s^{-2}$.",
            "description*": {
                "en": "In celestial mechanics the standard gravitational parameter of a celestial body is the product of the gravitational constant G and the mass M of the body. Expressed as $\\mu = G \\cdot M$. The SI units of the standard gravitational parameter are $m^{3}s^{-2}$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasStandardGravitationalParameterValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9a1a2b8a06d754dcb2ea44a8cdbd7fd7"]
    unit: Optional[StandardGravitationalParameterUnit] = Field(
        StandardGravitationalParameterUnit.meter_cubed_per_second_squared,
        options={"enum_titles": ["m³/s²", "km³/s²"]},
        title="StandardGravitationalParameterUnit",
        x_enum_varnames=[
            "meter_cubed_per_second_squared",
            "kilo_meter_cubed_per_second_squared",
        ],
    )


class VoltageUnit(UnitEnum):
    volt = "Item:OSW85efe1428cb75363a75aab6435e2d98d"
    micro_volt = (
        "Item:OSW85efe1428cb75363a75aab6435e2d98d#OSWc0cb09a94aa553589a59ea70bfccfc96"
    )
    mega_volt = (
        "Item:OSW85efe1428cb75363a75aab6435e2d98d#OSW78798aa1bdcb57f0aea8d4eb86ff3355"
    )
    milli_volt = (
        "Item:OSW85efe1428cb75363a75aab6435e2d98d#OSW82d25d00b1485cc18c204f95de4536a9"
    )
    kilo_volt = (
        "Item:OSW85efe1428cb75363a75aab6435e2d98d#OSW4deed980237a5360b48e0dd1331d4199"
    )


class Voltage(QuantityValue):
    """
    $\\textit{Voltage}$, also referred to as $\\textit{Electric Tension}$, is the difference between electrical potentials of two points. For an electric field within a medium, $U_{ab} = - \int_{r_a}^{r_b} E . {dr}$, where $E$ is electric field strength.
    For an irrotational electric field, the voltage is independent of the path between the two points $a$ and $b$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "19bdaead-0e98-52b6-8da7-9f45423f2b58",
            "title": "Voltage",
            "title*": {"en": "Voltage"},
            "description": "$\\textit{Voltage}$, also referred to as $\\textit{Electric Tension}$, is the difference between electrical potentials of two points. For an electric field within a medium, $U_{ab} = - \\int_{r_a}^{r_b} E . {dr}$, where $E$ is electric field strength.\nFor an irrotational electric field, the voltage is independent of the path between the two points $a$ and $b$.",
            "description*": {
                "en": "$\\textit{Voltage}$, also referred to as $\\textit{Electric Tension}$, is the difference between electrical potentials of two points. For an electric field within a medium, $U_{ab} = - \\int_{r_a}^{r_b} E . {dr}$, where $E$ is electric field strength.\nFor an irrotational electric field, the voltage is independent of the path between the two points $a$ and $b$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVoltageValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW19bdaead0e9852b68da79f45423f2b58"]
    unit: Optional[VoltageUnit] = Field(
        VoltageUnit.volt,
        options={"enum_titles": ["V", "µV", "MV", "mV", "kV"]},
        title="VoltageUnit",
        x_enum_varnames=["volt", "micro_volt", "mega_volt", "milli_volt", "kilo_volt"],
    )


class EnergyPerAreaElectricChargeUnit(UnitEnum):
    volt_per_meter_squared = "Item:OSW50e05e2d20e858f281ef0d396691ec1e"


class EnergyPerAreaElectricCharge(QuantityValue):
    """
    "Energy Per Area Electric Charge" is the amount of electric energy associated with a unit of area.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "fad7c565-9feb-576d-8be2-4a8dd5ec3d7a",
            "title": "EnergyPerAreaElectricCharge",
            "title*": {"en": "Energy Per Area Electric Charge"},
            "description": '"Energy Per Area Electric Charge" is the amount of electric energy associated with a unit of area.',
            "description*": {
                "en": '"Energy Per Area Electric Charge" is the amount of electric energy associated with a unit of area.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnergyPerAreaElectricChargeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfad7c5659feb576d8be24a8dd5ec3d7a"]
    unit: Optional[EnergyPerAreaElectricChargeUnit] = Field(
        EnergyPerAreaElectricChargeUnit.volt_per_meter_squared,
        options={"enum_titles": ["V/m²"]},
        title="EnergyPerAreaElectricChargeUnit",
        x_enum_varnames=["volt_per_meter_squared"],
    )


class NeutronDiffusionLength(Length):
    """
    The neutron diffusion length is equivalent to the relaxation length, that is, to the distance, in which the neutron flux decreases by a factor e
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1b09e424-8a12-5246-8c82-13a883656ffa",
            "title": "NeutronDiffusionLength",
            "title*": {"en": "Neutron Diffusion Length"},
            "description": "The neutron diffusion length is equivalent to the relaxation length, that is, to the distance, in which the neutron flux decreases by a factor e",
            "description*": {
                "en": "The neutron diffusion length is equivalent to the relaxation length, that is, to the distance, in which the neutron flux decreases by a factor e"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasNeutronDiffusionLengthValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1b09e4248a1252468c8213a883656ffa"]


class SectionModulusUnit(UnitEnum):
    meter_cubed = "Item:OSW7aa0d48fa4a45427a03c5abd43b488f8"
    milli_meter_cubed = (
        "Item:OSW7aa0d48fa4a45427a03c5abd43b488f8#OSWa9d92cf2bcb95b1887a23f99b51d8d36"
    )
    deci_meter_cubed = (
        "Item:OSW7aa0d48fa4a45427a03c5abd43b488f8#OSWdda7ee9dea455958af1466a861d5bf7d"
    )
    micro_meter_cubed = (
        "Item:OSW7aa0d48fa4a45427a03c5abd43b488f8#OSW7126d9f54e0b565898ccf21988c04366"
    )
    deca_meter_cubed = (
        "Item:OSW7aa0d48fa4a45427a03c5abd43b488f8#OSW5024fe1a02365460bbc23fa2e8a46a7b"
    )
    centi_meter_cubed = (
        "Item:OSW7aa0d48fa4a45427a03c5abd43b488f8#OSWcd2df951f11a56d2a06705a8f16b0662"
    )


class SectionModulus(QuantityValue):
    """
    The Section Modulus is a geometric property for a given cross-section used in the design of beams or flexural members.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "6431223a-2530-52b9-8a72-e63b4f62ca09",
            "title": "SectionModulus",
            "title*": {"en": "Section Modulus"},
            "description": "The Section Modulus is a geometric property for a given cross-section used in the design of beams or flexural members.",
            "description*": {
                "en": "The Section Modulus is a geometric property for a given cross-section used in the design of beams or flexural members."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSectionModulusValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6431223a253052b98a72e63b4f62ca09"]
    unit: Optional[SectionModulusUnit] = Field(
        SectionModulusUnit.meter_cubed,
        options={"enum_titles": ["m³", "mm³", "dm³", "μm³", "dam³", "cm³"]},
        title="SectionModulusUnit",
        x_enum_varnames=[
            "meter_cubed",
            "milli_meter_cubed",
            "deci_meter_cubed",
            "micro_meter_cubed",
            "deca_meter_cubed",
            "centi_meter_cubed",
        ],
    )


class PowerPerAreaUnit(UnitEnum):
    watt_per_meter_squared = "Item:OSW7f2c167c5a39550d91c1f95cc01a9a11"
    watt_per_centi_meter_squared = (
        "Item:OSW7f2c167c5a39550d91c1f95cc01a9a11#OSWa735be7b016c510f98dd404ee42c6722"
    )
    pico_watt_per_meter_squared = (
        "Item:OSW7f2c167c5a39550d91c1f95cc01a9a11#OSWf194c328c8ef587c823773008774afc8"
    )
    milli_watt_per_meter_squared = (
        "Item:OSW7f2c167c5a39550d91c1f95cc01a9a11#OSWf33a1a99c6055b178a0b973e57e1aacb"
    )
    micro_watt_per_meter_squared = (
        "Item:OSW7f2c167c5a39550d91c1f95cc01a9a11#OSWbec47ab085945564b8bc080ab7934395"
    )


class PowerPerArea(QuantityValue):
    """
    This is an autogenerated partial class definition of 'PowerPerArea'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "40c46aba-16f4-5962-a733-0b7f8b88681e",
            "title": "PowerPerArea",
            "title*": {"en": "Power Per Area"},
            "description": "This is an autogenerated partial class definition of 'PowerPerArea'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPowerPerAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW40c46aba16f45962a7330b7f8b88681e"]
    unit: Optional[PowerPerAreaUnit] = Field(
        PowerPerAreaUnit.watt_per_meter_squared,
        options={"enum_titles": ["W/m²", "W/cm²", "pW/m²", "mW/m²", "µW/m²"]},
        title="PowerPerAreaUnit",
        x_enum_varnames=[
            "watt_per_meter_squared",
            "watt_per_centi_meter_squared",
            "pico_watt_per_meter_squared",
            "milli_watt_per_meter_squared",
            "micro_watt_per_meter_squared",
        ],
    )


class ForcePerAngleUnit(UnitEnum):
    newton_per_radian = "Item:OSW1a0a52ba2fe957989fe3e1a2d0bbdcc4"


class ForcePerAngle(QuantityValue):
    """
    This is an autogenerated partial class definition of 'ForcePerAngle'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "15c4097e-d256-572c-97e7-a1dbbfb154dd",
            "title": "ForcePerAngle",
            "title*": {"en": "Force per Angle"},
            "description": "This is an autogenerated partial class definition of 'ForcePerAngle'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasForcePerAngleValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW15c4097ed256572c97e7a1dbbfb154dd"]
    unit: Optional[ForcePerAngleUnit] = Field(
        ForcePerAngleUnit.newton_per_radian,
        options={"enum_titles": ["N/rad"]},
        title="ForcePerAngleUnit",
        x_enum_varnames=["newton_per_radian"],
    )


class ModulusOfRotationalSubgradeReaction(ForcePerAngle):
    """
    Modulus of Rotational Subgrade Reaction is a measure for modulus of rotational subgrade reaction, which expresses the rotational elastic bedding of a linear structural element per length, such as for a beam. It is typically measured in Nm/(m*rad).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "58c66997-3140-5450-9357-65efe8e170d5",
            "title": "ModulusOfRotationalSubgradeReaction",
            "title*": {"en": "Modulus of Rotational Subgrade Reaction"},
            "description": "Modulus of Rotational Subgrade Reaction is a measure for modulus of rotational subgrade reaction, which expresses the rotational elastic bedding of a linear structural element per length, such as for a beam. It is typically measured in Nm/(m*rad).",
            "description*": {
                "en": "Modulus of Rotational Subgrade Reaction is a measure for modulus of rotational subgrade reaction, which expresses the rotational elastic bedding of a linear structural element per length, such as for a beam. It is typically measured in Nm/(m*rad)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasModulusOfRotationalSubgradeReactionValue",
            "@context": [
                "/wiki/Category:OSW15c4097ed256572c97e7a1dbbfb154dd?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW58c6699731405450935765efe8e170d5"]


class SoundIntensity(PowerPerArea):
    """
    Sound intensity or acoustic intensity ($I$) is defined as the sound power $P_a$ per unit area $A$. The usual context is the noise measurement of sound intensity in the air at a listener's location as a sound energy quantity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7450be7f-3aa3-552e-9da4-bb8a6d952f9f",
            "title": "SoundIntensity",
            "title*": {"en": "Sound intensity"},
            "description": "Sound intensity or acoustic intensity ($I$) is defined as the sound power $P_a$ per unit area $A$. The usual context is the noise measurement of sound intensity in the air at a listener's location as a sound energy quantity.",
            "description*": {
                "en": "Sound intensity or acoustic intensity ($I$) is defined as the sound power $P_a$ per unit area $A$. The usual context is the noise measurement of sound intensity in the air at a listener's location as a sound energy quantity."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSoundIntensityValue",
            "@context": [
                "/wiki/Category:OSW40c46aba16f45962a7330b7f8b88681e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7450be7f3aa3552e9da4bb8a6d952f9f"]


class HelmholtzEnergy(Energy):
    """
    $\\textit{Helmholtz Energy}$ is one of the potentials are used to measure energy changes in systems as they evolve from an initial state to a final state. The potential used depends on the constraints of the system, such as constant temperature or pressure. $\\textit{Internal Energy}$ is the internal energy of the system, $\\textit{Enthalpy}$ is the internal energy of the system plus the energy related to pressure-volume work, and Helmholtz and Gibbs free energy are the energies available in a system to do useful work when the temperature and volume or the pressure and temperature are fixed, respectively. The name $\\textit{Helmholz Free Energy}$ is also used.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7cf1f307-6962-552c-be80-28e61a15af53",
            "title": "HelmholtzEnergy",
            "title*": {"en": "Helmholtz energy", "de": "Freie Energie"},
            "description": "$\\textit{Helmholtz Energy}$ is one of the potentials are used to measure energy changes in systems as they evolve from an initial state to a final state. The potential used depends on the constraints of the system, such as constant temperature or pressure. $\\textit{Internal Energy}$ is the internal energy of the system, $\\textit{Enthalpy}$ is the internal energy of the system plus the energy related to pressure-volume work, and Helmholtz and Gibbs free energy are the energies available in a system to do useful work when the temperature and volume or the pressure and temperature are fixed, respectively. The name $\\textit{Helmholz Free Energy}$ is also used.",
            "description*": {
                "en": "$\\textit{Helmholtz Energy}$ is one of the potentials are used to measure energy changes in systems as they evolve from an initial state to a final state. The potential used depends on the constraints of the system, such as constant temperature or pressure. $\\textit{Internal Energy}$ is the internal energy of the system, $\\textit{Enthalpy}$ is the internal energy of the system plus the energy related to pressure-volume work, and Helmholtz and Gibbs free energy are the energies available in a system to do useful work when the temperature and volume or the pressure and temperature are fixed, respectively. The name $\\textit{Helmholz Free Energy}$ is also used."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasHelmholtzEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7cf1f3076962552cbe8028e61a15af53"]


class MassDelivered(Mass):
    """
    The minimum mass a propulsive system can deliver to a specified target or location. Most mass- delivered requirements have associated Delta-V requirements, effectively specifying the path between the two points.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a3f14dbd-a73f-5a4f-aa19-595388c74d3e",
            "title": "MassDelivered",
            "title*": {"en": "Mass Delivered"},
            "description": "The minimum mass a propulsive system can deliver to a specified target or location. Most mass- delivered requirements have associated Delta-V requirements, effectively specifying the path between the two points.",
            "description*": {
                "en": "The minimum mass a propulsive system can deliver to a specified target or location. Most mass- delivered requirements have associated Delta-V requirements, effectively specifying the path between the two points."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassDeliveredValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa3f14dbda73f5a4faa19595388c74d3e"]


class HeatFlowRatePerUnitArea(PowerPerArea):
    """
    $\\textit{Heat Flux}$ is the heat rate per area. In SI units, heat flux is measured in $W/m^2$. Heat rate is a scalar quantity, while heat flux is a vectorial quantity. To define the heat flux at a certain point in space, one takes the limiting case where the size of the surface becomes infinitesimally small.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a664a34f-b54f-5c3c-8e04-22fcdd85fb27",
            "title": "HeatFlowRatePerUnitArea",
            "title*": {"en": "Heat Flow Rate per Unit Area"},
            "description": "$\\textit{Heat Flux}$ is the heat rate per area. In SI units, heat flux is measured in $W/m^2$. Heat rate is a scalar quantity, while heat flux is a vectorial quantity. To define the heat flux at a certain point in space, one takes the limiting case where the size of the surface becomes infinitesimally small.",
            "description*": {
                "en": "$\\textit{Heat Flux}$ is the heat rate per area. In SI units, heat flux is measured in $W/m^2$. Heat rate is a scalar quantity, while heat flux is a vectorial quantity. To define the heat flux at a certain point in space, one takes the limiting case where the size of the surface becomes infinitesimally small."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasHeatFlowRatePerUnitAreaValue",
            "@context": [
                "/wiki/Category:OSW40c46aba16f45962a7330b7f8b88681e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa664a34fb54f5c3c8e0422fcdd85fb27"]


class RadiantEnergyDensityUnit(UnitEnum):
    joule_per_meter_cubed = "Item:OSW9ea4bf89c42b56728392f1c55639ac18"
    mega_joule_per_meter_cubed = (
        "Item:OSW9ea4bf89c42b56728392f1c55639ac18#OSW7044da5ba4b45554b3acc6c6f3fc3624"
    )


class RadiantEnergyDensity(QuantityValue):
    """
    "Radiant Energy Density", or radiant power, is the radiant energy per unit volume.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "1769676f-fcbf-5891-9475-1d0e0bb05902",
            "title": "RadiantEnergyDensity",
            "title*": {"en": "Radiant Energy Density"},
            "description": '"Radiant Energy Density", or radiant power, is the radiant energy per unit volume.',
            "description*": {
                "en": '"Radiant Energy Density", or radiant power, is the radiant energy per unit volume.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRadiantEnergyDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1769676ffcbf589194751d0e0bb05902"]
    unit: Optional[RadiantEnergyDensityUnit] = Field(
        RadiantEnergyDensityUnit.joule_per_meter_cubed,
        options={"enum_titles": ["J/m³", "MJ/m³"]},
        title="RadiantEnergyDensityUnit",
        x_enum_varnames=["joule_per_meter_cubed", "mega_joule_per_meter_cubed"],
    )


class EnergyPerSquareMagneticFluxDensityUnit(UnitEnum):
    joule_per_tesla_squared = "Item:OSW462714679d475b158c530d359d42de44"


class EnergyPerSquareMagneticFluxDensity(QuantityValue):
    """
    "Energy Per Square Magnetic Flux Density" is a measure of energy for a unit of magnetic flux density.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "e5b6e1c9-5287-515f-8cf9-255397d5848b",
            "title": "EnergyPerSquareMagneticFluxDensity",
            "title*": {"en": "Energy Per Square Magnetic Flux Density"},
            "description": '"Energy Per Square Magnetic Flux Density" is a measure of energy for a unit of magnetic flux density.',
            "description*": {
                "en": '"Energy Per Square Magnetic Flux Density" is a measure of energy for a unit of magnetic flux density.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnergyPerSquareMagneticFluxDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe5b6e1c95287515f8cf9255397d5848b"]
    unit: Optional[EnergyPerSquareMagneticFluxDensityUnit] = Field(
        EnergyPerSquareMagneticFluxDensityUnit.joule_per_tesla_squared,
        options={"enum_titles": ["J/T²"]},
        title="EnergyPerSquareMagneticFluxDensityUnit",
        x_enum_varnames=["joule_per_tesla_squared"],
    )


class AbsoluteHumidity(Density):
    """
    $\\textit{Absolute Humidity}$ is an amount of water vapor, usually discussed per unit volume.
      Absolute humidity in air ranges from zero to roughly 30 grams per cubic meter when the air is saturated at $30 ^\circ C$.
      The absolute humidity changes as air temperature or pressure changes.
      $$$$
      This is very inconvenient for chemical engineering calculations, e.g. for clothes dryers, where temperature can vary considerably.
      As a result, absolute humidity is generally defined in chemical engineering as mass of water vapor per unit mass of dry air,
       also known as the mass mixing ratio, which is much more rigorous for heat and mass balance calculations.
      $$$$
      Mass of water per unit volume as in the equation above would then be defined as volumetric humidity, because of the potential confusion.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "905e0bae-4046-5f95-ba62-564fdb8f1c47",
            "title": "AbsoluteHumidity",
            "title*": {"en": "Absolute Humidity"},
            "description": "$\\textit{Absolute Humidity}$ is an amount of water vapor, usually discussed per unit volume. \n  Absolute humidity in air ranges from zero to roughly 30 grams per cubic meter when the air is saturated at $30 ^\\circ C$. \n  The absolute humidity changes as air temperature or pressure changes. \n  $$$$\n  This is very inconvenient for chemical engineering calculations, e.g. for clothes dryers, where temperature can vary considerably. \n  As a result, absolute humidity is generally defined in chemical engineering as mass of water vapor per unit mass of dry air,\n   also known as the mass mixing ratio, which is much more rigorous for heat and mass balance calculations. \n  $$$$\n  Mass of water per unit volume as in the equation above would then be defined as volumetric humidity, because of the potential confusion.",
            "description*": {
                "en": "$\\textit{Absolute Humidity}$ is an amount of water vapor, usually discussed per unit volume. \n  Absolute humidity in air ranges from zero to roughly 30 grams per cubic meter when the air is saturated at $30 ^\\circ C$. \n  The absolute humidity changes as air temperature or pressure changes. \n  $$$$\n  This is very inconvenient for chemical engineering calculations, e.g. for clothes dryers, where temperature can vary considerably. \n  As a result, absolute humidity is generally defined in chemical engineering as mass of water vapor per unit mass of dry air,\n   also known as the mass mixing ratio, which is much more rigorous for heat and mass balance calculations. \n  $$$$\n  Mass of water per unit volume as in the equation above would then be defined as volumetric humidity, because of the potential confusion."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAbsoluteHumidityValue",
            "@context": [
                "/wiki/Category:OSW571f68d4b4715284b2dc5020ad51cf72?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW905e0bae40465f95ba62564fdb8f1c47"]


class PredictedMass(Mass):
    """
    Sum of the basic mass and the MGA. Current prediction of the final mass based on the current requirements and design.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "265b3829-c9da-5f26-bdf3-17a973c6ceca",
            "title": "PredictedMass",
            "title*": {"en": "Predicted Mass"},
            "description": "Sum of the basic mass and the MGA. Current prediction of the final mass based on the current requirements and design.",
            "description*": {
                "en": "Sum of the basic mass and the MGA. Current prediction of the final mass based on the current requirements and design."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPredictedMassValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW265b3829c9da5f26bdf317a973c6ceca"]


class PowerAreaUnit(UnitEnum):
    meter_squared_watt = "Item:OSWcd571060b6f15f6288ef0ea01ad2c692"


class PowerArea(QuantityValue):
    """
    This is an autogenerated partial class definition of 'PowerArea'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "ce3eefbd-aa42-5a1b-90bd-544840917d6a",
            "title": "PowerArea",
            "title*": {"en": "Power Area"},
            "description": "This is an autogenerated partial class definition of 'PowerArea'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPowerAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWce3eefbdaa425a1b90bd544840917d6a"]
    unit: Optional[PowerAreaUnit] = Field(
        PowerAreaUnit.meter_squared_watt,
        options={"enum_titles": ["W·m²"]},
        title="PowerAreaUnit",
        x_enum_varnames=["meter_squared_watt"],
    )


class CurvatureUnit(UnitEnum):
    per_meter = "Item:OSW28e75b089e145904998a54f1c4125bf3"
    per_centi_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW0dcebe41477056aba0e706c148970688"
    )
    per_nano_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWdc9edf9277ed57cdb7a6f218551afa8d"
    )
    per_milli_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWe77bc3c1bd7a566eadb55f3b68d351f2"
    )
    per_pico_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWd0475e49e0715ec488fba3fe0fdd9b02"
    )
    per_micro_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW45c24d8b68485accbdd684f05231c74c"
    )
    per_kilo_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW124eebfb89dc54bc9cc223fd49c40480"
    )


class Curvature(QuantityValue):
    """
    In mathematics "Curvature" is the amount by which a geometric object deviates from being flat, or straight in the case of a line, but this is defined in different ways depending on the context.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "878316f2-9355-549a-8eb6-6a25d812bd9e",
            "title": "Curvature",
            "title*": {"en": "Curvature"},
            "description": 'In mathematics "Curvature" is the amount by which a geometric object deviates from being flat, or straight in the case of a line, but this is defined in different ways depending on the context.',
            "description*": {
                "en": 'In mathematics "Curvature" is the amount by which a geometric object deviates from being flat, or straight in the case of a line, but this is defined in different ways depending on the context.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCurvatureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW878316f29355549a8eb66a25d812bd9e"]
    unit: Optional[CurvatureUnit] = Field(
        CurvatureUnit.per_meter,
        options={
            "enum_titles": ["1/m", "1/cm", "1/nm", "1/mm", "1/pm", "1/μm", "1/km"]
        },
        title="CurvatureUnit",
        x_enum_varnames=[
            "per_meter",
            "per_centi_meter",
            "per_nano_meter",
            "per_milli_meter",
            "per_pico_meter",
            "per_micro_meter",
            "per_kilo_meter",
        ],
    )


class TemperatureAmountOfSubstanceUnit(UnitEnum):
    Celsius_mole = "Item:OSW0e7c411abb9050609e99957558d70536"


class TemperatureAmountOfSubstance(QuantityValue):
    """
    This is an autogenerated partial class definition of 'TemperatureAmountOfSubstance'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "7d5feb99-6831-5612-a4cc-eccd238be582",
            "title": "TemperatureAmountOfSubstance",
            "title*": {"en": "Temperature Amount of Substance"},
            "description": "This is an autogenerated partial class definition of 'TemperatureAmountOfSubstance'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTemperatureAmountOfSubstanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7d5feb9968315612a4cceccd238be582"]
    unit: Optional[TemperatureAmountOfSubstanceUnit] = Field(
        TemperatureAmountOfSubstanceUnit.Celsius_mole,
        options={"enum_titles": ["mol·°C"]},
        title="TemperatureAmountOfSubstanceUnit",
        x_enum_varnames=["Celsius_mole"],
    )


class PayloadRatio(DimensionlessRatio):
    """
    The payload ratio is defined as the mass of the payload divided by the empty mass of the structure. Because of the extra cost involved in staging rockets, given the choice, it's often more economic to use few stages with a small payload ratio rather than more stages each with a high payload ratio.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "462f63d9-9aeb-52d5-b6ad-d6f57653ab66",
            "title": "PayloadRatio",
            "title*": {"en": "Payload Ratio"},
            "description": "The payload ratio is defined as the mass of the payload divided by the empty mass of the structure. Because of the extra cost involved in staging rockets, given the choice, it's often more economic to use few stages with a small payload ratio rather than more stages each with a high payload ratio.",
            "description*": {
                "en": "The payload ratio is defined as the mass of the payload divided by the empty mass of the structure. Because of the extra cost involved in staging rockets, given the choice, it's often more economic to use few stages with a small payload ratio rather than more stages each with a high payload ratio."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPayloadRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW462f63d99aeb52d5b6add6f57653ab66"]


class BurnTime(Time):
    """
    This is an autogenerated partial class definition of 'BurnTime'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "73108f4d-d6b1-5fe2-ad96-2094480cfc69",
            "title": "BurnTime",
            "title*": {"en": "Burn Time"},
            "description": "This is an autogenerated partial class definition of 'BurnTime'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasBurnTimeValue",
            "@context": [
                "/wiki/Category:OSW389cb87d31be515aa5d2f12e2b66e938?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW73108f4dd6b15fe2ad962094480cfc69"]


class ResonanceEscapeProbabilityForFission(Dimensionless):
    """
    Fraction of fission neutrons that manage to slow down from fission to thermal energies without being absorbed.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "fce9b748-bf85-5dbe-b74a-6b35a9d2062b",
            "title": "ResonanceEscapeProbabilityForFission",
            "title*": {"en": "Resonance Escape Probability For Fission"},
            "description": "Fraction of fission neutrons that manage to slow down from fission to thermal energies without being absorbed.",
            "description*": {
                "en": "Fraction of fission neutrons that manage to slow down from fission to thermal energies without being absorbed."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasResonanceEscapeProbabilityForFissionValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfce9b748bf855dbeb74a6b35a9d2062b"]


class FluxUnit(UnitEnum):
    per_meter_squared_per_second = "Item:OSW580b455ce69e57418303f409d43f373a"


class Flux(QuantityValue):
    """
    Flux describes any effect that appears to pass or travel (whether it actually moves or not) through a surface or substance. [Wikipedia]
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "676564fe-1a34-56cd-a95a-12cec7c2ce9e",
            "title": "Flux",
            "title*": {"en": "Flux"},
            "description": "Flux describes any effect that appears to pass or travel (whether it actually moves or not) through a surface or substance. [Wikipedia]",
            "description*": {
                "en": "Flux describes any effect that appears to pass or travel (whether it actually moves or not) through a surface or substance. [Wikipedia]"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFluxValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW676564fe1a3456cda95a12cec7c2ce9e"]
    unit: Optional[FluxUnit] = Field(
        FluxUnit.per_meter_squared_per_second,
        options={"enum_titles": ["1/(m²·s)"]},
        title="FluxUnit",
        x_enum_varnames=["per_meter_squared_per_second"],
    )


class SoundVolumeVelocityUnit(UnitEnum):
    meter_cubed_per_second = "Item:OSW4ed5503a56ab514ab3d925287da52a95"
    deci_meter_cubed_per_second = (
        "Item:OSW4ed5503a56ab514ab3d925287da52a95#OSW58c067fb208b5294899599809141c3ff"
    )
    centi_meter_cubed_per_second = (
        "Item:OSW4ed5503a56ab514ab3d925287da52a95#OSWacda1333cb6958069dc83172f3a047db"
    )


class SoundVolumeVelocity(QuantityValue):
    """
    Sound Volume Velocity is the product of particle velocity $v$ and the surface area $S$ through which an acoustic wave of frequency $f$ propagates. Also, the surface integral of the normal component of the sound particle velocity over the cross-section (through which the sound propagates). It is used to calculate acoustic impedance.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4fcfc4ad-b6be-5e7c-97a1-28565fb91932",
            "title": "SoundVolumeVelocity",
            "title*": {"en": "Sound volume velocity"},
            "description": "Sound Volume Velocity is the product of particle velocity $v$ and the surface area $S$ through which an acoustic wave of frequency $f$ propagates. Also, the surface integral of the normal component of the sound particle velocity over the cross-section (through which the sound propagates). It is used to calculate acoustic impedance.",
            "description*": {
                "en": "Sound Volume Velocity is the product of particle velocity $v$ and the surface area $S$ through which an acoustic wave of frequency $f$ propagates. Also, the surface integral of the normal component of the sound particle velocity over the cross-section (through which the sound propagates). It is used to calculate acoustic impedance."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSoundVolumeVelocityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4fcfc4adb6be5e7c97a128565fb91932"]
    unit: Optional[SoundVolumeVelocityUnit] = Field(
        SoundVolumeVelocityUnit.meter_cubed_per_second,
        options={"enum_titles": ["m³/s", "dm³/s", "cm³/s"]},
        title="SoundVolumeVelocityUnit",
        x_enum_varnames=[
            "meter_cubed_per_second",
            "deci_meter_cubed_per_second",
            "centi_meter_cubed_per_second",
        ],
    )


class BulkModulusUnit(UnitEnum):
    pascal = "Item:OSWb663e6bff3595e7b93b28fffce66c50c"
    milli_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW38b0e12539b05ce28cd126c8eea29f95"
    )
    deca_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW8d40059d9e3951bb97378fe3f119ba21"
    )
    kilo_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW264ebdc21f54568593a91bbd832b6fbf"
    )
    micro_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW5def4be309ce50ee933c99cf4b74e310"
    )
    hecto_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW482939f123595314beca39ad32d65a15"
    )
    mega_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW0ec5bf8132b25e58b7032766bd9b3225"
    )
    giga_pascal = (
        "Item:OSWb663e6bff3595e7b93b28fffce66c50c#OSW49bb4743a5735e189777f3c6bd422a52"
    )


class BulkModulus(QuantityValue):
    """
    The bulk modulus of a substance measures the substance's resistance to uniform compression. It is defined as the ratio of the infinitesimal pressure increase to the resulting relative decrease of the volume.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "1c930bb3-24ca-5e5b-84c2-5be2079b2d21",
            "title": "BulkModulus",
            "title*": {"en": "Bulk Modulus"},
            "description": "The bulk modulus of a substance measures the substance's resistance to uniform compression. It is defined as the ratio of the infinitesimal pressure increase to the resulting relative decrease of the volume.",
            "description*": {
                "en": "The bulk modulus of a substance measures the substance's resistance to uniform compression. It is defined as the ratio of the infinitesimal pressure increase to the resulting relative decrease of the volume."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasBulkModulusValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1c930bb324ca5e5b84c25be2079b2d21"]
    unit: Optional[BulkModulusUnit] = Field(
        BulkModulusUnit.pascal,
        options={
            "enum_titles": ["Pa", "mPa", "daPa", "kPa", "μPa", "hPa", "MPa", "GPa"]
        },
        title="BulkModulusUnit",
        x_enum_varnames=[
            "pascal",
            "milli_pascal",
            "deca_pascal",
            "kilo_pascal",
            "micro_pascal",
            "hecto_pascal",
            "mega_pascal",
            "giga_pascal",
        ],
    )


class IgnitionIntervalTime(Time):
    """
    This is an autogenerated partial class definition of 'IgnitionIntervalTime'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3323f81c-aeda-5c7f-b04f-c95cdc3e4f68",
            "title": "IgnitionIntervalTime",
            "title*": {"en": "Ignition interval time"},
            "description": "This is an autogenerated partial class definition of 'IgnitionIntervalTime'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasIgnitionIntervalTimeValue",
            "@context": [
                "/wiki/Category:OSW389cb87d31be515aa5d2f12e2b66e938?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3323f81caeda5c7fb04fc95cdc3e4f68"]


class ExhaustStreamPower(Power):
    """
    This is an autogenerated partial class definition of 'ExhaustStreamPower'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "dab6db78-5362-5c7e-a445-9c243af7cfbf",
            "title": "ExhaustStreamPower",
            "title*": {"en": "Exhaust Stream Power"},
            "description": "This is an autogenerated partial class definition of 'ExhaustStreamPower'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasExhaustStreamPowerValue",
            "@context": [
                "/wiki/Category:OSWa819b53101b854ad923f9f13dfb41794?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWdab6db7853625c7ea4459c243af7cfbf"]


class Spin(AngularMomentum):
    """
    In quantum mechanics and particle physics "Spin" is an intrinsic form of angular momentum carried by elementary particles, composite particles (hadrons), and atomic nuclei.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ff78da31-39af-553d-81d4-720b73d306ca",
            "title": "Spin",
            "title*": {"en": "Spin", "de": "Spin"},
            "description": 'In quantum mechanics and particle physics "Spin" is an intrinsic form of angular momentum carried by elementary particles, composite particles (hadrons), and atomic nuclei.',
            "description*": {
                "en": 'In quantum mechanics and particle physics "Spin" is an intrinsic form of angular momentum carried by elementary particles, composite particles (hadrons), and atomic nuclei.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpinValue",
            "@context": [
                "/wiki/Category:OSW11c230fdfd065eee822d39afdc9fba80?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWff78da3139af553d81d4720b73d306ca"]


class Weight(Force):
    """
    The force with which a body is attracted toward an astronomical body.  Or, the product of the mass of a body and the acceleration acting on a body.  In a dynamic situation, the weight can be a multiple of that under resting conditions. Weight also varies on other planets in accordance with their gravity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0ed75cfa-55dc-55ad-bbbe-cbf4e22744c0",
            "title": "Weight",
            "title*": {"en": "Weight", "de": "Gewicht"},
            "description": "The force with which a body is attracted toward an astronomical body.  Or, the product of the mass of a body and the acceleration acting on a body.  In a dynamic situation, the weight can be a multiple of that under resting conditions. Weight also varies on other planets in accordance with their gravity.",
            "description*": {
                "en": "The force with which a body is attracted toward an astronomical body.  Or, the product of the mass of a body and the acceleration acting on a body.  In a dynamic situation, the weight can be a multiple of that under resting conditions. Weight also varies on other planets in accordance with their gravity."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasWeightValue",
            "@context": [
                "/wiki/Category:OSW1b832c1a42c055eb9669bb0cdda18d7f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0ed75cfa55dc55adbbbecbf4e22744c0"]


class CoefficientOfHeatTransferUnit(UnitEnum):
    watt_per_kelvin_per_meter_squared = "Item:OSWdc31cad7e9225defbc08f6f79bf5c4ea"


class CoefficientOfHeatTransfer(QuantityValue):
    """
    "Coefficient of Heat Transfer", in thermodynamics and in mechanical and chemical engineering, is used in calculating the heat transfer, typically by convection or phase transition between a fluid and a solid. The heat transfer coefficient is the proportionality coefficient between the heat flux, that is heat flow per unit area, q/A, and the thermodynamic driving force for the flow of heat (that is, the temperature difference, (Delta T).  Areic heat flow rate divided by thermodynamic temperature difference. In building technology, the "Coefficient of Heat Transfer", is often called "thermal transmittance}" with the symbol "U". It has SI units in watts per squared meter kelvin.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "46cf5d4e-08e2-5909-a1bb-ad7563535a8e",
            "title": "CoefficientOfHeatTransfer",
            "title*": {"en": "Coefficient of heat transfer"},
            "description": '"Coefficient of Heat Transfer", in thermodynamics and in mechanical and chemical engineering, is used in calculating the heat transfer, typically by convection or phase transition between a fluid and a solid. The heat transfer coefficient is the proportionality coefficient between the heat flux, that is heat flow per unit area, q/A, and the thermodynamic driving force for the flow of heat (that is, the temperature difference, (Delta T).  Areic heat flow rate divided by thermodynamic temperature difference. In building technology, the "Coefficient of Heat Transfer", is often called "thermal transmittance}" with the symbol "U". It has SI units in watts per squared meter kelvin.',
            "description*": {
                "en": '"Coefficient of Heat Transfer", in thermodynamics and in mechanical and chemical engineering, is used in calculating the heat transfer, typically by convection or phase transition between a fluid and a solid. The heat transfer coefficient is the proportionality coefficient between the heat flux, that is heat flow per unit area, q/A, and the thermodynamic driving force for the flow of heat (that is, the temperature difference, (Delta T).  Areic heat flow rate divided by thermodynamic temperature difference. In building technology, the "Coefficient of Heat Transfer", is often called "thermal transmittance}" with the symbol "U". It has SI units in watts per squared meter kelvin.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCoefficientOfHeatTransferValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW46cf5d4e08e25909a1bbad7563535a8e"]
    unit: Optional[CoefficientOfHeatTransferUnit] = Field(
        CoefficientOfHeatTransferUnit.watt_per_kelvin_per_meter_squared,
        options={"enum_titles": ["W/(m²·K)"]},
        title="CoefficientOfHeatTransferUnit",
        x_enum_varnames=["watt_per_kelvin_per_meter_squared"],
    )


class ThermalTransmittance(CoefficientOfHeatTransfer):
    """
    Thermal transmittance is the rate of transfer of heat through matter. The thermal transmittance of a material (such as insulation or concrete) or an assembly (such as a wall or window) is expressed as a U-value. The concept of thermal transmittance is closely related to that of thermal resistance. The thermal resistance of a structure is the reciprocal of its thermal transmittance.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "72a50f12-12bd-568f-b1ac-ca74abad26e4",
            "title": "ThermalTransmittance",
            "title*": {"en": "Thermal Transmittance"},
            "description": "Thermal transmittance is the rate of transfer of heat through matter. The thermal transmittance of a material (such as insulation or concrete) or an assembly (such as a wall or window) is expressed as a U-value. The concept of thermal transmittance is closely related to that of thermal resistance. The thermal resistance of a structure is the reciprocal of its thermal transmittance.",
            "description*": {
                "en": "Thermal transmittance is the rate of transfer of heat through matter. The thermal transmittance of a material (such as insulation or concrete) or an assembly (such as a wall or window) is expressed as a U-value. The concept of thermal transmittance is closely related to that of thermal resistance. The thermal resistance of a structure is the reciprocal of its thermal transmittance."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThermalTransmittanceValue",
            "@context": [
                "/wiki/Category:OSW46cf5d4e08e25909a1bbad7563535a8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW72a50f1212bd568fb1acca74abad26e4"]


class DensityInCombustionChamber(MassDensity):
    """
    This is an autogenerated partial class definition of 'DensityInCombustionChamber'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "6837c50b-e0b8-5f76-835e-5fdd56bf054f",
            "title": "DensityInCombustionChamber",
            "title*": {"en": "Density In Combustion Chamber"},
            "description": "This is an autogenerated partial class definition of 'DensityInCombustionChamber'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDensityInCombustionChamberValue",
            "@context": [
                "/wiki/Category:OSW512cbc54b9a75f4abe8e66c48204ae0f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6837c50be0b85f76835e5fdd56bf054f"]


class RelativeMolecularMass(DimensionlessRatio):
    """
    "Relative Molecular Mass " is equivalent to the numerical value of the molecular mass expressed in unified atomic mass units. The molecular mass (m) is the mass of a molecule.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "41a31383-6403-5cff-84c0-64b3ab52e6a4",
            "title": "RelativeMolecularMass",
            "title*": {"en": "Relative Molecular Mass"},
            "description": '"Relative Molecular Mass " is equivalent to the numerical value of the molecular mass expressed in unified atomic mass units. The molecular mass (m) is the mass of a molecule.',
            "description*": {
                "en": '"Relative Molecular Mass " is equivalent to the numerical value of the molecular mass expressed in unified atomic mass units. The molecular mass (m) is the mass of a molecule.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRelativeMolecularMassValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW41a3138364035cff84c064b3ab52e6a4"]


class AngularVelocityUnit(UnitEnum):
    radian_per_second = "Item:OSWb0010d0f4c7a52e18edbfdc34e4c0653"


class AngularVelocity(QuantityValue):
    """
    The change of angle per unit time; specifically, in celestial mechanics, the change in angle of the radius vector per unit time.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "d76028b6-5910-5d13-9a01-faedd83fefbd",
            "title": "AngularVelocity",
            "title*": {"en": "Angular velocity", "de": "Winkelgeschwindigkeit"},
            "description": "The change of angle per unit time; specifically, in celestial mechanics, the change in angle of the radius vector per unit time.",
            "description*": {
                "en": "The change of angle per unit time; specifically, in celestial mechanics, the change in angle of the radius vector per unit time."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngularVelocityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd76028b659105d139a01faedd83fefbd"]
    unit: Optional[AngularVelocityUnit] = Field(
        AngularVelocityUnit.radian_per_second,
        options={"enum_titles": ["rad/s"]},
        title="AngularVelocityUnit",
        x_enum_varnames=["radian_per_second"],
    )


class Vorticity(AngularVelocity):
    """
    In the simplest sense, vorticity is the tendency for elements of a fluid to "spin." More formally, vorticity can be related to the amount of "circulation" or "rotation" (or more strictly, the local angular rate of rotation) in a fluid. The average vorticity in a small region of fluid flow is equal to the circulation C around the boundary of the small region, divided by the area A of the small region. Mathematically, vorticity is a vector field and is defined as the curl of the velocity field.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "55eac7b3-6313-581b-839d-0bd4957f7788",
            "title": "Vorticity",
            "title*": {"en": "Vorticity"},
            "description": 'In the simplest sense, vorticity is the tendency for elements of a fluid to "spin." More formally, vorticity can be related to the amount of "circulation" or "rotation" (or more strictly, the local angular rate of rotation) in a fluid. The average vorticity in a small region of fluid flow is equal to the circulation C around the boundary of the small region, divided by the area A of the small region. Mathematically, vorticity is a vector field and is defined as the curl of the velocity field.',
            "description*": {
                "en": 'In the simplest sense, vorticity is the tendency for elements of a fluid to "spin." More formally, vorticity can be related to the amount of "circulation" or "rotation" (or more strictly, the local angular rate of rotation) in a fluid. The average vorticity in a small region of fluid flow is equal to the circulation C around the boundary of the small region, divided by the area A of the small region. Mathematically, vorticity is a vector field and is defined as the curl of the velocity field.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVorticityValue",
            "@context": [
                "/wiki/Category:OSWd76028b659105d139a01faedd83fefbd?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW55eac7b36313581b839d0bd4957f7788"]


class MeasurementUnitOfSpectralRadianceUnit(UnitEnum):
    watt_per_meter_cubed_per_steradian = "Item:OSW124f92362f8859be8ab2fcbafb94c9de"
    watt_per_meter_squared_per_nano_meter_per_steradian = (
        "Item:OSW124f92362f8859be8ab2fcbafb94c9de#OSW74b4aedebe05596d827042f14930136b"
    )


class MeasurementUnitOfSpectralRadiance(QuantityValue):
    """
    Spectral Radiance is a radiometry term for the power per unit area of electromagnetic radiation per unit wavelength per unit solid angle emerging from a surface.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "2e6d9673-5635-5a20-b4f4-e7c677c15a54",
            "title": "MeasurementUnitOfSpectralRadiance",
            "title*": {"en": "Measurement Unit of Spectral Radiance"},
            "description": "Spectral Radiance is a radiometry term for the power per unit area of electromagnetic radiation per unit wavelength per unit solid angle emerging from a surface.",
            "description*": {
                "en": "Spectral Radiance is a radiometry term for the power per unit area of electromagnetic radiation per unit wavelength per unit solid angle emerging from a surface."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMeasurementUnitOfSpectralRadianceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2e6d967356355a20b4f4e7c677c15a54"]
    unit: Optional[MeasurementUnitOfSpectralRadianceUnit] = Field(
        MeasurementUnitOfSpectralRadianceUnit.watt_per_meter_cubed_per_steradian,
        options={"enum_titles": ["W/(m²·m·sr)", "W/(m²·nm·sr)"]},
        title="MeasurementUnitOfSpectralRadianceUnit",
        x_enum_varnames=[
            "watt_per_meter_cubed_per_steradian",
            "watt_per_meter_squared_per_nano_meter_per_steradian",
        ],
    )


class WorkFunction(Energy):
    """
    "Work Function" is the energy difference between an electron at rest at infinity and an electron at a certain energy level. The minimum energy (usually measured in electronvolts) needed to remove an electron from a solid to a point immediately outside the solid surface (or energy needed to move an electron from the Fermi level into vacuum).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "f9f89e87-7cfa-5aef-a59c-208b25b14754",
            "title": "WorkFunction",
            "title*": {"en": "Work Function"},
            "description": '"Work Function" is the energy difference between an electron at rest at infinity and an electron at a certain energy level. The minimum energy (usually measured in electronvolts) needed to remove an electron from a solid to a point immediately outside the solid surface (or energy needed to move an electron from the Fermi level into vacuum).',
            "description*": {
                "en": '"Work Function" is the energy difference between an electron at rest at infinity and an electron at a certain energy level. The minimum energy (usually measured in electronvolts) needed to remove an electron from a solid to a point immediately outside the solid surface (or energy needed to move an electron from the Fermi level into vacuum).'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasWorkFunctionValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf9f89e877cfa5aefa59c208b25b14754"]


class IonConcentration(Concentration):
    """
    "Ion Concentration" is the moles of ions per volume of solution.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c0f9f761-f30d-5a1b-af90-b44ed6eef37d",
            "title": "IonConcentration",
            "title*": {"en": "Ion Concentration"},
            "description": '"Ion Concentration" is the moles of ions per volume of solution.',
            "description*": {
                "en": '"Ion Concentration" is the moles of ions per volume of solution.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasIonConcentrationValue",
            "@context": [
                "/wiki/Category:OSW4ce5add385d2545ab8ab50e4b222dab4?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc0f9f761f30d5a1baf90b44ed6eef37d"]


class ActionUnit(UnitEnum):
    joule_second = "Item:OSWf045a04750e15ea2b152fb3bfebf162a"
    atto_joule_second = (
        "Item:OSWf045a04750e15ea2b152fb3bfebf162a#OSW3eaa66dd20f856fe9a5c4199bc0a1ea4"
    )


class Action(QuantityValue):
    """
    An action is usually an integral over time. But for action pertaining to fields, it may be integrated over spatial variables as well. In some cases, the action is integrated along the path followed by the physical system.  If the action is represented as an integral over time, taken a the path of the system between the initial time and the final time of the development of the system.
    The evolution of a physical system between two states is determined by requiring the action be minimized or, more generally, be stationary for small perturbations about the true evolution. This requirement leads to differential equations that describe the true evolution. Conversely, an action principle is a method for reformulating differential equations of motion for a physical system as an equivalent integral equation. Although several variants have been defined (see below), the most commonly used action principle is Hamilton's principle.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "6a2c83eb-8133-54ed-ace5-e2d9ead479b9",
            "title": "Action",
            "title*": {"en": "Action"},
            "description": "An action is usually an integral over time. But for action pertaining to fields, it may be integrated over spatial variables as well. In some cases, the action is integrated along the path followed by the physical system.  If the action is represented as an integral over time, taken a the path of the system between the initial time and the final time of the development of the system.\nThe evolution of a physical system between two states is determined by requiring the action be minimized or, more generally, be stationary for small perturbations about the true evolution. This requirement leads to differential equations that describe the true evolution. Conversely, an action principle is a method for reformulating differential equations of motion for a physical system as an equivalent integral equation. Although several variants have been defined (see below), the most commonly used action principle is Hamilton's principle.",
            "description*": {
                "en": "An action is usually an integral over time. But for action pertaining to fields, it may be integrated over spatial variables as well. In some cases, the action is integrated along the path followed by the physical system.  If the action is represented as an integral over time, taken a the path of the system between the initial time and the final time of the development of the system.\nThe evolution of a physical system between two states is determined by requiring the action be minimized or, more generally, be stationary for small perturbations about the true evolution. This requirement leads to differential equations that describe the true evolution. Conversely, an action principle is a method for reformulating differential equations of motion for a physical system as an equivalent integral equation. Although several variants have been defined (see below), the most commonly used action principle is Hamilton's principle."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasActionValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6a2c83eb813354edace5e2d9ead479b9"]
    unit: Optional[ActionUnit] = Field(
        ActionUnit.joule_second,
        options={"enum_titles": ["J·s", "aJ·s"]},
        title="ActionUnit",
        x_enum_varnames=["joule_second", "atto_joule_second"],
    )


class ForceMagnitude(Force):
    """
    The 'magnitude' of a force is its 'size' or 'strength', regardless of the direction in which it acts.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "4f80d474-3b2f-5971-bdcf-fe28391fa016",
            "title": "ForceMagnitude",
            "title*": {"en": "Force Magnitude"},
            "description": "The 'magnitude' of a force is its 'size' or 'strength', regardless of the direction in which it acts.",
            "description*": {
                "en": "The 'magnitude' of a force is its 'size' or 'strength', regardless of the direction in which it acts."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasForceMagnitudeValue",
            "@context": [
                "/wiki/Category:OSW1b832c1a42c055eb9669bb0cdda18d7f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4f80d4743b2f5971bdcffe28391fa016"]


class Tension(ForceMagnitude):
    """
    This is an autogenerated partial class definition of 'Tension'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "4874b6ee-8d7b-5f65-a7fe-5868c48fa956",
            "title": "Tension",
            "title*": {"en": "Tension"},
            "description": "This is an autogenerated partial class definition of 'Tension'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTensionValue",
            "@context": [
                "/wiki/Category:OSW4f80d4743b2f5971bdcffe28391fa016?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4874b6ee8d7b5f65a7fe5868c48fa956"]


class ForceMagnitude(Force):
    """
    The 'magnitude' of a force is its 'size' or 'strength', regardless of the direction in which it acts.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "4f80d474-3b2f-5971-bdcf-fe28391fa016",
            "title": "ForceMagnitude",
            "title*": {"en": "Force Magnitude"},
            "description": "The 'magnitude' of a force is its 'size' or 'strength', regardless of the direction in which it acts.",
            "description*": {
                "en": "The 'magnitude' of a force is its 'size' or 'strength', regardless of the direction in which it acts."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasForceMagnitudeValue",
            "@context": [
                "/wiki/Category:OSW1b832c1a42c055eb9669bb0cdda18d7f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4f80d4743b2f5971bdcffe28391fa016"]


class DiastolicBloodPressure(Pressure):
    """
    The pressure of blood in the arteries which rises to a maximum as blood is pumped out by the left ventricle (systole) and drops to a minimum in diastole. The systolic/diastolic pressure is normally ~120/80 mmHg in a young adult.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "9426aa0e-1345-513a-8a8e-e97bdd841800",
            "title": "DiastolicBloodPressure",
            "title*": {"en": "Diastolic Blood Pressure"},
            "description": "The pressure of blood in the arteries which rises to a maximum as blood is pumped out by the left ventricle (systole) and drops to a minimum in diastole. The systolic/diastolic pressure is normally ~120/80 mmHg in a young adult.",
            "description*": {
                "en": "The pressure of blood in the arteries which rises to a maximum as blood is pumped out by the left ventricle (systole) and drops to a minimum in diastole. The systolic/diastolic pressure is normally ~120/80 mmHg in a young adult."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDiastolicBloodPressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9426aa0e1345513a8a8ee97bdd841800"]


class PotentialEnergy(Energy):
    """
    Energy possessed by a body by virtue of its position in a gravity field in contrast with kinetic energy, that possessed by virtue of its motion.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0dbd1a69-0ea0-550c-b83b-ac795f460fa6",
            "title": "PotentialEnergy",
            "title*": {"en": "Potential energy", "de": "Potentielle Energie"},
            "description": "Energy possessed by a body by virtue of its position in a gravity field in contrast with kinetic energy, that possessed by virtue of its motion.",
            "description*": {
                "en": "Energy possessed by a body by virtue of its position in a gravity field in contrast with kinetic energy, that possessed by virtue of its motion."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPotentialEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0dbd1a690ea0550cb83bac795f460fa6"]


class FrequencyUnit(UnitEnum):
    hertz = "Item:OSW7496c09c41b154bdba82f6d09195cae5"
    mega_hertz = (
        "Item:OSW7496c09c41b154bdba82f6d09195cae5#OSWb5d0dd4f66285e15af5977a1b77d5daa"
    )
    kilo_hertz = (
        "Item:OSW7496c09c41b154bdba82f6d09195cae5#OSWfbbfa62ac8095c5bb37ea9f22ab121dd"
    )
    giga_hertz = (
        "Item:OSW7496c09c41b154bdba82f6d09195cae5#OSW37c66b2e350050d891107e427a1c0210"
    )
    tera_hertz = (
        "Item:OSW7496c09c41b154bdba82f6d09195cae5#OSW5860049cdfae5d64abcd7bb8ace55540"
    )


class Frequency(QuantityValue):
    """
    "Frequency" is the number of occurrences of a repeating event per unit time. The repetition of the events may be periodic (that is. the length of time between event repetitions is fixed) or aperiodic (i.e. the length of time between event repetitions varies). Therefore, we distinguish between periodic and aperiodic frequencies. In the SI system, periodic frequency is measured in hertz (Hz) or multiples of hertz, while aperiodic frequency is measured in becquerel (Bq).  In spectroscopy, $\nu$ is mostly used. Light passing through different media keeps its frequency, but not its wavelength or wavenumber.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "c543ebb8-5338-5a1a-9382-f57faad6170d",
            "title": "Frequency",
            "title*": {"en": "Frequency", "de": "Frequenz"},
            "description": '"Frequency" is the number of occurrences of a repeating event per unit time. The repetition of the events may be periodic (that is. the length of time between event repetitions is fixed) or aperiodic (i.e. the length of time between event repetitions varies). Therefore, we distinguish between periodic and aperiodic frequencies. In the SI system, periodic frequency is measured in hertz (Hz) or multiples of hertz, while aperiodic frequency is measured in becquerel (Bq).  In spectroscopy, $\\nu$ is mostly used. Light passing through different media keeps its frequency, but not its wavelength or wavenumber.',
            "description*": {
                "en": '"Frequency" is the number of occurrences of a repeating event per unit time. The repetition of the events may be periodic (that is. the length of time between event repetitions is fixed) or aperiodic (i.e. the length of time between event repetitions varies). Therefore, we distinguish between periodic and aperiodic frequencies. In the SI system, periodic frequency is measured in hertz (Hz) or multiples of hertz, while aperiodic frequency is measured in becquerel (Bq).  In spectroscopy, $\\nu$ is mostly used. Light passing through different media keeps its frequency, but not its wavelength or wavenumber.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFrequencyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc543ebb853385a1a9382f57faad6170d"]
    unit: Optional[FrequencyUnit] = Field(
        FrequencyUnit.hertz,
        options={"enum_titles": ["Hz", "MHz", "kHz", "GHz", "THz"]},
        title="FrequencyUnit",
        x_enum_varnames=[
            "hertz",
            "mega_hertz",
            "kilo_hertz",
            "giga_hertz",
            "tera_hertz",
        ],
    )


class MolarAbsorptionCoefficientUnit(UnitEnum):
    meter_squared_per_mole = "Item:OSWf4a7837882ed5a0b9b128b2d067fc97b"


class MolarAbsorptionCoefficient(QuantityValue):
    """
    "Molar Absorption Coefficient" is a spectrophotometric unit indicating the light a substance absorbs with respect to length, usually centimeters, and concentration, usually moles per liter.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "f7cbdd37-870f-51bf-b9f2-62d8bb177df7",
            "title": "MolarAbsorptionCoefficient",
            "title*": {"en": "Molar Absorption Coefficient"},
            "description": '"Molar Absorption Coefficient" is a spectrophotometric unit indicating the light a substance absorbs with respect to length, usually centimeters, and concentration, usually moles per liter.',
            "description*": {
                "en": '"Molar Absorption Coefficient" is a spectrophotometric unit indicating the light a substance absorbs with respect to length, usually centimeters, and concentration, usually moles per liter.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarAbsorptionCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf7cbdd37870f51bfb9f262d8bb177df7"]
    unit: Optional[MolarAbsorptionCoefficientUnit] = Field(
        MolarAbsorptionCoefficientUnit.meter_squared_per_mole,
        options={"enum_titles": ["m²/mol"]},
        title="MolarAbsorptionCoefficientUnit",
        x_enum_varnames=["meter_squared_per_mole"],
    )


class Volume1(QuantityValue):
    """
    The volume of a solid object is the three-dimensional concept of how much space it occupies, often quantified numerically. One-dimensional figures (such as lines) and two-dimensional shapes (such as squares) are assigned zero volume in the three-dimensional space.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "f5c54cd7-0ddf-5ff3-b1ef-1aee6ae8f0cb",
            "title": "Volume",
            "title*": {"en": "Volume"},
            "description": "The volume of a solid object is the three-dimensional concept of how much space it occupies, often quantified numerically. One-dimensional figures (such as lines) and two-dimensional shapes (such as squares) are assigned zero volume in the three-dimensional space.",
            "description*": {
                "en": "The volume of a solid object is the three-dimensional concept of how much space it occupies, often quantified numerically. One-dimensional figures (such as lines) and two-dimensional shapes (such as squares) are assigned zero volume in the three-dimensional space."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVolumeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf5c54cd70ddf5ff3b1ef1aee6ae8f0cb"]
    unit: Optional[VolumeUnit] = Field(
        VolumeUnit.meter_cubed,
        options={"enum_titles": ["m³", "mm³", "dm³", "μm³", "dam³", "cm³"]},
        title="VolumeUnit",
        x_enum_varnames=[
            "meter_cubed",
            "milli_meter_cubed",
            "deci_meter_cubed",
            "micro_meter_cubed",
            "deca_meter_cubed",
            "centi_meter_cubed",
        ],
    )


class Volume(Volume1):
    """
    "Volume" is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "fed64b81-0634-552b-b200-c195ab1017be",
            "title": "Volume",
            "title*": {"en": "Volume", "de": "Volumen"},
            "description": '"Volume" is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.',
            "description*": {
                "en": '"Volume" is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVolumeValue",
            "@context": [
                "/wiki/Category:OSWf5c54cd70ddf5ff3b1ef1aee6ae8f0cb?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfed64b810634552bb200c195ab1017be"]


class ElectricChargeDensityUnit(UnitEnum):
    coulomb_per_meter_cubed = "Item:OSW138cfd775f5f5791acb676b2e30a858b"
    mega_coulomb_per_meter_cubed = (
        "Item:OSW138cfd775f5f5791acb676b2e30a858b#OSW78239b85b3255c27b70c82b5d719f312"
    )
    kilo_coulomb_per_meter_cubed = (
        "Item:OSW138cfd775f5f5791acb676b2e30a858b#OSWabb39bf77e53590aafd85088c14233eb"
    )
    coulomb_per_milli_meter_cubed = (
        "Item:OSW138cfd775f5f5791acb676b2e30a858b#OSW6684ece78b035280a9997fd7e0946a64"
    )
    milli_coulomb_per_meter_cubed = (
        "Item:OSW138cfd775f5f5791acb676b2e30a858b#OSW0cf667e041bf5c70ad88948e99591fa7"
    )
    micro_coulomb_per_meter_cubed = (
        "Item:OSW138cfd775f5f5791acb676b2e30a858b#OSW7ff981494feb573893427df6c288c2c1"
    )
    giga_coulomb_per_meter_cubed = (
        "Item:OSW138cfd775f5f5791acb676b2e30a858b#OSWa2ef417cc76554ccbc1e21d3399b1d0f"
    )
    coulomb_per_centi_meter_cubed = (
        "Item:OSW138cfd775f5f5791acb676b2e30a858b#OSWf658e9170de757b99c1b492865347a7e"
    )


class ElectricChargeDensity(QuantityValue):
    """
    In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "d5b78fad-165c-5fae-8a85-6a349a1997e1",
            "title": "ElectricChargeDensity",
            "title*": {"en": "Electric Charge Density"},
            "description": "In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively.",
            "description*": {
                "en": "In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricChargeDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd5b78fad165c5fae8a856a349a1997e1"]
    unit: Optional[ElectricChargeDensityUnit] = Field(
        ElectricChargeDensityUnit.coulomb_per_meter_cubed,
        options={
            "enum_titles": [
                "C/m³",
                "MC/m³",
                "kC/m³",
                "C/mm³",
                "mC/m³",
                "μC/m³",
                "GC/m³",
                "C/cm³",
            ]
        },
        title="ElectricChargeDensityUnit",
        x_enum_varnames=[
            "coulomb_per_meter_cubed",
            "mega_coulomb_per_meter_cubed",
            "kilo_coulomb_per_meter_cubed",
            "coulomb_per_milli_meter_cubed",
            "milli_coulomb_per_meter_cubed",
            "micro_coulomb_per_meter_cubed",
            "giga_coulomb_per_meter_cubed",
            "coulomb_per_centi_meter_cubed",
        ],
    )


class MigrationArea(Area):
    """
    "Migration Area" is the sum of the slowing-down area from fission energy to thermal energy and the diffusion area for thermal neutrons.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1f5c6d48-545a-5639-8956-6d8b589612c2",
            "title": "MigrationArea",
            "title*": {"en": "Migration Area"},
            "description": '"Migration Area" is the sum of the slowing-down area from fission energy to thermal energy and the diffusion area for thermal neutrons.',
            "description*": {
                "en": '"Migration Area" is the sum of the slowing-down area from fission energy to thermal energy and the diffusion area for thermal neutrons.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMigrationAreaValue",
            "@context": [
                "/wiki/Category:OSW1fcf1694712e5684885071efdf775bd9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1f5c6d48545a563989566d8b589612c2"]


class PermeanceUnit(UnitEnum):
    henry = "Item:OSWfc7ffe7e6e00592a8b3f3f472fbef2a2"
    nano_henry = (
        "Item:OSWfc7ffe7e6e00592a8b3f3f472fbef2a2#OSW466788b3b91054088792f8efcf881b73"
    )
    pico_henry = (
        "Item:OSWfc7ffe7e6e00592a8b3f3f472fbef2a2#OSWc916910c94335ef4bfd4956fdb64d445"
    )
    milli_henry = (
        "Item:OSWfc7ffe7e6e00592a8b3f3f472fbef2a2#OSWf936212f93685b0a81e881b7b4cd691c"
    )
    micro_henry = (
        "Item:OSWfc7ffe7e6e00592a8b3f3f472fbef2a2#OSW0b6f22fdf4505cd1a14ced6ce63fd1c3"
    )


class Permeance(QuantityValue):
    """
    "Permeance" is the inverse of reluctance. Permeance is a measure of the quantity of flux for a number of current-turns in magnetic circuit. A magnetic circuit almost acts as though the flux is "conducted", therefore permeance is larger for large cross sections of a material and smaller for longer lengths. This concept is analogous to electrical conductance in the electric circuit.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "80e9cf75-5691-5b54-b832-6b588abc2531",
            "title": "Permeance",
            "title*": {"en": "Permeance"},
            "description": '"Permeance" is the inverse of reluctance. Permeance is a measure of the quantity of flux for a number of current-turns in magnetic circuit. A magnetic circuit almost acts as though the flux is "conducted", therefore permeance is larger for large cross sections of a material and smaller for longer lengths. This concept is analogous to electrical conductance in the electric circuit.',
            "description*": {
                "en": '"Permeance" is the inverse of reluctance. Permeance is a measure of the quantity of flux for a number of current-turns in magnetic circuit. A magnetic circuit almost acts as though the flux is "conducted", therefore permeance is larger for large cross sections of a material and smaller for longer lengths. This concept is analogous to electrical conductance in the electric circuit.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPermeanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW80e9cf7556915b54b8326b588abc2531"]
    unit: Optional[PermeanceUnit] = Field(
        PermeanceUnit.henry,
        options={"enum_titles": ["H", "nH", "pH", "mH", "μH"]},
        title="PermeanceUnit",
        x_enum_varnames=[
            "henry",
            "nano_henry",
            "pico_henry",
            "milli_henry",
            "micro_henry",
        ],
    )


class WetBulbTemperature(Temperature):
    """
    the temperature of a parcel of air cooled to saturation (100% relative humidity) by the evaporation of water into it, with the latent heat supplied by the parcel.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "343daa86-363c-5bda-9ac9-1f20c65eede0",
            "title": "WetBulbTemperature",
            "title*": {"en": "Wet Bulb Temperature"},
            "description": "the temperature of a parcel of air cooled to saturation (100% relative humidity) by the evaporation of water into it, with the latent heat supplied by the parcel.",
            "description*": {
                "en": "the temperature of a parcel of air cooled to saturation (100% relative humidity) by the evaporation of water into it, with the latent heat supplied by the parcel."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasWetBulbTemperatureValue",
            "@context": [
                "/wiki/Category:OSW20927e4900e95e93985698c92995f964?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW343daa86363c5bda9ac91f20c65eede0"]


class Length(QuantityValue):
    """
    In geometric measurements, length most commonly refers to the est dimension of an object. In some contexts, the term "length" is reserved for a certain dimension of an object along which the length is measured.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "ee9c7e5c-343e-542c-b5a8-b4648315902f",
            "title": "Length",
            "title*": {"en": "Length", "de": "Länge"},
            "description": 'In geometric measurements, length most commonly refers to the est dimension of an object. In some contexts, the term "length" is reserved for a certain dimension of an object along which the length is measured.',
            "description*": {
                "en": 'In geometric measurements, length most commonly refers to the est dimension of an object. In some contexts, the term "length" is reserved for a certain dimension of an object along which the length is measured.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLengthValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWee9c7e5c343e542cb5a8b4648315902f"]
    unit: Optional[LengthUnit] = Field(
        LengthUnit.meter,
        options={
            "enum_titles": [
                "m",
                "μm",
                "nm",
                "cm",
                "pm",
                "dam",
                "km",
                "dm",
                "hm",
                "mm",
                "fm",
            ]
        },
        title="LengthUnit",
        x_enum_varnames=[
            "meter",
            "micro_meter",
            "nano_meter",
            "centi_meter",
            "pico_meter",
            "deca_meter",
            "kilo_meter",
            "deci_meter",
            "hecto_meter",
            "milli_meter",
            "fermi",
        ],
    )


class LuminousEnergyUnit(UnitEnum):
    lumen_second = "Item:OSWc4c970d2dd145fbc883dfca4b380edff"


class LuminousEnergy(QuantityValue):
    """
    Luminous Energy is the perceived energy of light. This is sometimes also called the quantity of light.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "dcee8dd4-e722-58d5-abb8-28567c3e7a0c",
            "title": "LuminousEnergy",
            "title*": {"en": "Luminous Energy"},
            "description": "Luminous Energy is the perceived energy of light. This is sometimes also called the quantity of light.",
            "description*": {
                "en": "Luminous Energy is the perceived energy of light. This is sometimes also called the quantity of light."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLuminousEnergyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWdcee8dd4e72258d5abb828567c3e7a0c"]
    unit: Optional[LuminousEnergyUnit] = Field(
        LuminousEnergyUnit.lumen_second,
        options={"enum_titles": ["lm·s"]},
        title="LuminousEnergyUnit",
        x_enum_varnames=["lumen_second"],
    )


class ConductivityUnit(UnitEnum):
    siemens_per_meter = "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d"
    nano_siemens_per_meter = (
        "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d#OSW6cc3591d052d589cb271f6710f816486"
    )
    kilo_siemens_per_meter = (
        "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d#OSWe2d30b3b09325ef7819f6d51071e147e"
    )
    milli_siemens_per_meter = (
        "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d#OSWd609b57361b3560d8614f22a0031921f"
    )
    micro_siemens_per_meter = (
        "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d#OSWa26d6194b3be5f54a4665a01e3df9426"
    )
    deci_siemens_per_meter = (
        "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d#OSW7b2e1f125aa350409a4f5d467534727a"
    )
    pico_siemens_per_meter = (
        "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d#OSWc9f2986f0974565b904f1d0d756d5318"
    )
    mega_siemens_per_meter = (
        "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d#OSW27b6c423e529517ba2d3f466d2c822b4"
    )
    siemens_per_centi_meter = (
        "Item:OSWd3fc3766e5c05e0cb845b81a590bbd9d#OSW88703a966490546d89632c3336e28b2a"
    )


class Conductivity(QuantityValue):
    """
    "Conductivity" is a scalar or tensor quantity the product of which by the electric field strength in a medium is equal to the electric current density. For an isotropic medium the conductivity is a scalar quantity; for an anisotropic medium it is a tensor quantity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "44eec22e-65f7-59d9-9d9e-fa4c5dc5b54f",
            "title": "Conductivity",
            "title*": {"en": "Conductivity"},
            "description": '"Conductivity" is a scalar or tensor quantity the product of which by the electric field strength in a medium is equal to the electric current density. For an isotropic medium the conductivity is a scalar quantity; for an anisotropic medium it is a tensor quantity.',
            "description*": {
                "en": '"Conductivity" is a scalar or tensor quantity the product of which by the electric field strength in a medium is equal to the electric current density. For an isotropic medium the conductivity is a scalar quantity; for an anisotropic medium it is a tensor quantity.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasConductivityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW44eec22e65f759d99d9efa4c5dc5b54f"]
    unit: Optional[ConductivityUnit] = Field(
        ConductivityUnit.siemens_per_meter,
        options={
            "enum_titles": [
                "S/m",
                "nS/m",
                "kS/m",
                "mS/m",
                "μS/m",
                "dS/m",
                "pS/m",
                "MS/m",
                "S/cm",
            ]
        },
        title="ConductivityUnit",
        x_enum_varnames=[
            "siemens_per_meter",
            "nano_siemens_per_meter",
            "kilo_siemens_per_meter",
            "milli_siemens_per_meter",
            "micro_siemens_per_meter",
            "deci_siemens_per_meter",
            "pico_siemens_per_meter",
            "mega_siemens_per_meter",
            "siemens_per_centi_meter",
        ],
    )


class MagneticDipoleMomentUnit(UnitEnum):
    meter_squared_newton_per_ampere = "Item:OSW164f2a6f077a564c914320ff303d09e8"


class MagneticDipoleMoment(QuantityValue):
    """
    "Magnetic Dipole Moment" is the magnetic moment of a system is a measure of the magnitude and the direction of its magnetism. Magnetic moment usually refers to its Magnetic Dipole Moment, and quantifies the contribution of the system's internal magnetism to the external dipolar magnetic field produced by the system (that is, the component of the external magnetic field that is inversely proportional to the cube of the distance to the observer). The Magnetic Dipole Moment is a vector-valued quantity. For a particle or nucleus, vector quantity causing an increment $\Delta W = -\mu \cdot B$ to its energy $W$ in an external magnetic field with magnetic flux density $B$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "6d902d56-7a1a-5a89-bde7-cea878179186",
            "title": "MagneticDipoleMoment",
            "title*": {"en": "Magnetic Dipole Moment"},
            "description": '"Magnetic Dipole Moment" is the magnetic moment of a system is a measure of the magnitude and the direction of its magnetism. Magnetic moment usually refers to its Magnetic Dipole Moment, and quantifies the contribution of the system\'s internal magnetism to the external dipolar magnetic field produced by the system (that is, the component of the external magnetic field that is inversely proportional to the cube of the distance to the observer). The Magnetic Dipole Moment is a vector-valued quantity. For a particle or nucleus, vector quantity causing an increment $\\Delta W = -\\mu \\cdot B$ to its energy $W$ in an external magnetic field with magnetic flux density $B$.',
            "description*": {
                "en": '"Magnetic Dipole Moment" is the magnetic moment of a system is a measure of the magnitude and the direction of its magnetism. Magnetic moment usually refers to its Magnetic Dipole Moment, and quantifies the contribution of the system\'s internal magnetism to the external dipolar magnetic field produced by the system (that is, the component of the external magnetic field that is inversely proportional to the cube of the distance to the observer). The Magnetic Dipole Moment is a vector-valued quantity. For a particle or nucleus, vector quantity causing an increment $\\Delta W = -\\mu \\cdot B$ to its energy $W$ in an external magnetic field with magnetic flux density $B$.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMagneticDipoleMomentValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6d902d567a1a5a89bde7cea878179186"]
    unit: Optional[MagneticDipoleMomentUnit] = Field(
        MagneticDipoleMomentUnit.meter_squared_newton_per_ampere,
        options={"enum_titles": ["N·m²/A"]},
        title="MagneticDipoleMomentUnit",
        x_enum_varnames=["meter_squared_newton_per_ampere"],
    )


class MassMargin(Mass):
    """
    Requirement minus predicted value. Margin is used as a metric in risk management. Positive margin mitigates the risk of mass increases from requirements maturation and implementation, underestimated predicted system, or subsystem mass.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ab8bedd4-1632-574e-87e7-2ed839ad7893",
            "title": "MassMargin",
            "title*": {"en": "Mass Margin"},
            "description": "Requirement minus predicted value. Margin is used as a metric in risk management. Positive margin mitigates the risk of mass increases from requirements maturation and implementation, underestimated predicted system, or subsystem mass.",
            "description*": {
                "en": "Requirement minus predicted value. Margin is used as a metric in risk management. Positive margin mitigates the risk of mass increases from requirements maturation and implementation, underestimated predicted system, or subsystem mass."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassMarginValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWab8bedd41632574e87e72ed839ad7893"]


class ChemicalPotential(MolarEnergy):
    """
    "Chemical Potential", also known as partial molar free energy, is a form of potential energy that can be absorbed or released during a chemical reaction.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7119e1d7-6181-5d4f-acb1-dbee71829517",
            "title": "ChemicalPotential",
            "title*": {
                "en": "Chemical potential",
                "de": "Chemisches Potential des Stoffs B",
            },
            "description": '"Chemical Potential", also known as partial molar free energy, is a form of potential energy that can be absorbed or released during a chemical reaction.',
            "description*": {
                "en": '"Chemical Potential", also known as partial molar free energy, is a form of potential energy that can be absorbed or released during a chemical reaction.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasChemicalPotentialValue",
            "@context": [
                "/wiki/Category:OSW21ec5968e3c2533d98f20564838541fa?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7119e1d761815d4facb1dbee71829517"]


class StandardChemicalPotential(ChemicalPotential):
    """
    "Standard Chemical Potential" is the value of the chemical potential at standard conditions
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c4389e23-2bdd-57d9-82bf-c4bed783818e",
            "title": "StandardChemicalPotential",
            "title*": {"en": "Standard Chemical Potential"},
            "description": '"Standard Chemical Potential" is the value of the chemical potential at standard conditions',
            "description*": {
                "en": '"Standard Chemical Potential" is the value of the chemical potential at standard conditions'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasStandardChemicalPotentialValue",
            "@context": [
                "/wiki/Category:OSW7119e1d761815d4facb1dbee71829517?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc4389e232bdd57d982bfc4bed783818e"]


class ForcePerArea(QuantityValue):
    """
    The force applied to a unit area of surface; measured in pascals (SI unit) or in dynes (cgs unit)
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "2ff3a26d-af13-5634-81ac-c8b0ebc5b37f",
            "title": "ForcePerArea",
            "title*": {"en": "Force Per Area"},
            "description": "The force applied to a unit area of surface; measured in pascals (SI unit) or in dynes (cgs unit)",
            "description*": {
                "en": "The force applied to a unit area of surface; measured in pascals (SI unit) or in dynes (cgs unit)"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasForcePerAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2ff3a26daf13563481acc8b0ebc5b37f"]
    unit: Optional[ForcePerAreaUnit] = Field(
        ForcePerAreaUnit.pascal,
        options={
            "enum_titles": ["Pa", "mPa", "daPa", "kPa", "μPa", "hPa", "MPa", "GPa"]
        },
        title="ForcePerAreaUnit",
        x_enum_varnames=[
            "pascal",
            "milli_pascal",
            "deca_pascal",
            "kilo_pascal",
            "micro_pascal",
            "hecto_pascal",
            "mega_pascal",
            "giga_pascal",
        ],
    )


class SpecificHeatCapacityAtConstantVolumeUnit(UnitEnum):
    joule_per_Celsius_per_kilo_gram = (
        "Item:OSW93d8b6e516fd54f09d483dee1278e3a8#OSWa0cd208ccfa759388597f5f9ff5c69fc"
    )


class SpecificHeatCapacityAtConstantVolume(QuantityValue):
    """
    Specific heat per constant volume.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9cfbce99-c0f6-5684-a825-90ef1d71f111",
            "title": "SpecificHeatCapacityAtConstantVolume",
            "title*": {"en": "Specific heat capacity at constant volume"},
            "description": "Specific heat per constant volume.",
            "description*": {"en": "Specific heat per constant volume."},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificHeatCapacityAtConstantVolumeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9cfbce99c0f65684a82590ef1d71f111"]
    unit: Optional[SpecificHeatCapacityAtConstantVolumeUnit] = Field(
        SpecificHeatCapacityAtConstantVolumeUnit.joule_per_Celsius_per_kilo_gram,
        options={"enum_titles": ["J/(kg·°C)"]},
        title="SpecificHeatCapacityAtConstantVolumeUnit",
        x_enum_varnames=["joule_per_Celsius_per_kilo_gram"],
    )


class KineticOrThermalEnergy(Energy):
    """
    Energie, die in der Bewegung eines Körpers steckt und sich aus Translationsenergie und Rotationsenergie zusammen setzt, die durch die Bewegung dieses Körpers gegenüber einem anderen System und durch seine Masse (Massenverteilung) bestimmt wird oder Energie in Form von Wärme
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2c2ac8c2-97a2-545b-b8a0-d30f81bb6b8d",
            "title": "KineticOrThermalEnergy",
            "title*": {"en": "Kinetic or thermal energy"},
            "description": "Energie, die in der Bewegung eines Körpers steckt und sich aus Translationsenergie und Rotationsenergie zusammen setzt, die durch die Bewegung dieses Körpers gegenüber einem anderen System und durch seine Masse (Massenverteilung) bestimmt wird oder Energie in Form von Wärme",
            "description*": {
                "en": "Energie, die in der Bewegung eines Körpers steckt und sich aus Translationsenergie und Rotationsenergie zusammen setzt, die durch die Bewegung dieses Körpers gegenüber einem anderen System und durch seine Masse (Massenverteilung) bestimmt wird oder Energie in Form von Wärme"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasKineticOrThermalEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2c2ac8c297a2545bb8a0d30f81bb6b8d"]


class MassTemperatureUnit(UnitEnum):
    kelvin_kilo_gram = "Item:OSWfd24f9425d815d66beab746eecaf5926"


class MassTemperature(QuantityValue):
    """
    This is an autogenerated partial class definition of 'MassTemperature'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "6847f51b-03eb-5ed6-b4cd-a9e82af5e51a",
            "title": "MassTemperature",
            "title*": {"en": "Mass Temperature"},
            "description": "This is an autogenerated partial class definition of 'MassTemperature'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassTemperatureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6847f51b03eb5ed6b4cda9e82af5e51a"]
    unit: Optional[MassTemperatureUnit] = Field(
        MassTemperatureUnit.kelvin_kilo_gram,
        options={"enum_titles": ["K·kg"]},
        title="MassTemperatureUnit",
        x_enum_varnames=["kelvin_kilo_gram"],
    )


class ReactionRateConstantUnit(UnitEnum):
    meter_cubed_per_mole_per_second = "Item:OSW25bef56399fe5f7fa5d119aff09cfb30"
    centi_meter_cubed_per_mole_per_second = (
        "Item:OSW25bef56399fe5f7fa5d119aff09cfb30#OSWe3739db7a148562eb2f29ef963e3c001"
    )


class ReactionRateConstant(QuantityValue):
    """
    A quantity kind that is a proportionality constant that quantifies the relationship between the molar concentrations of the reactants and the rate of a second order chemical reaction.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "ec4a0bb9-cee1-55e3-a799-94b906fbd3a7",
            "title": "ReactionRateConstant",
            "title*": {"en": "Reaction Rate Constant"},
            "description": "A quantity kind that is a proportionality constant that quantifies the relationship between the molar concentrations of the reactants and the rate of a second order chemical reaction.",
            "description*": {
                "en": "A quantity kind that is a proportionality constant that quantifies the relationship between the molar concentrations of the reactants and the rate of a second order chemical reaction."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasReactionRateConstantValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWec4a0bb9cee155e3a79994b906fbd3a7"]
    unit: Optional[ReactionRateConstantUnit] = Field(
        ReactionRateConstantUnit.meter_cubed_per_mole_per_second,
        options={"enum_titles": ["m³/(mol·s)", "cm³/(mol·s)"]},
        title="ReactionRateConstantUnit",
        x_enum_varnames=[
            "meter_cubed_per_mole_per_second",
            "centi_meter_cubed_per_mole_per_second",
        ],
    )


class AtmosphericHydroxylationRate(ReactionRateConstant):
    """
    A second order reaction rate constant that is a specific second order reaction rate constant that governs the kinetics of an atmospheric, gas-phase reaction between hydroxyl radicals and an organic chemical.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1213d592-8a79-5674-9688-545e9526d6e3",
            "title": "AtmosphericHydroxylationRate",
            "title*": {"en": "Atmospheric Hydroxylation Rate"},
            "description": "A second order reaction rate constant that is a specific second order reaction rate constant that governs the kinetics of an atmospheric, gas-phase reaction between hydroxyl radicals and an organic chemical.",
            "description*": {
                "en": "A second order reaction rate constant that is a specific second order reaction rate constant that governs the kinetics of an atmospheric, gas-phase reaction between hydroxyl radicals and an organic chemical."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAtmosphericHydroxylationRateValue",
            "@context": [
                "/wiki/Category:OSWec4a0bb9cee155e3a79994b906fbd3a7?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1213d5928a7956749688545e9526d6e3"]


class ElectricFluxUnit(UnitEnum):
    meter_volt = "Item:OSW45282d4f758259de9032e1df3d80d870"


class ElectricFlux(QuantityValue):
    """
    "Electric Flux" through an area is defined as the electric field multiplied by the area of the surface projected in a plane perpendicular to the field. Electric Flux is a scalar-valued quantity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "cddea398-bde4-5403-a70a-db55b09c0053",
            "title": "ElectricFlux",
            "title*": {"en": "Electric Flux"},
            "description": '"Electric Flux" through an area is defined as the electric field multiplied by the area of the surface projected in a plane perpendicular to the field. Electric Flux is a scalar-valued quantity.',
            "description*": {
                "en": '"Electric Flux" through an area is defined as the electric field multiplied by the area of the surface projected in a plane perpendicular to the field. Electric Flux is a scalar-valued quantity.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricFluxValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcddea398bde45403a70adb55b09c0053"]
    unit: Optional[ElectricFluxUnit] = Field(
        ElectricFluxUnit.meter_volt,
        options={"enum_titles": ["V·m"]},
        title="ElectricFluxUnit",
        x_enum_varnames=["meter_volt"],
    )


class LiftCoefficient(Dimensionless):
    """
    The lift coefficient is a dimensionless coefficient that relates the lift generated by a lifting body, the dynamic pressure of the fluid flow around the body, and a reference area associated with the body.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2db5f26f-6315-54fa-840b-a5d0533ec86f",
            "title": "LiftCoefficient",
            "title*": {"en": "Lift Coefficient"},
            "description": "The lift coefficient is a dimensionless coefficient that relates the lift generated by a lifting body, the dynamic pressure of the fluid flow around the body, and a reference area associated with the body.",
            "description*": {
                "en": "The lift coefficient is a dimensionless coefficient that relates the lift generated by a lifting body, the dynamic pressure of the fluid flow around the body, and a reference area associated with the body."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLiftCoefficientValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2db5f26f631554fa840ba5d0533ec86f"]


class ThermalConductanceUnit(UnitEnum):
    watt_per_kelvin = "Item:OSWcd1c26954cdf5421b201b431b289ee94"


class ThermalConductance(QuantityValue):
    """
    This quantity is also called "Heat Transfer Coefficient".
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "da38a6d5-1c38-5b42-8998-b15f68bd787e",
            "title": "ThermalConductance",
            "title*": {"en": "Thermal Conductance"},
            "description": 'This quantity is also called "Heat Transfer Coefficient".',
            "description*": {
                "en": 'This quantity is also called "Heat Transfer Coefficient".'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThermalConductanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWda38a6d51c385b428998b15f68bd787e"]
    unit: Optional[ThermalConductanceUnit] = Field(
        ThermalConductanceUnit.watt_per_kelvin,
        options={"enum_titles": ["W/K"]},
        title="ThermalConductanceUnit",
        x_enum_varnames=["watt_per_kelvin"],
    )


class RelativePressureCoefficientUnit(UnitEnum):
    per_kelvin = "Item:OSW33dfda3d4dea57d192d02eecdbc09b86"


class RelativePressureCoefficient(QuantityValue):
    """
    This is an autogenerated partial class definition of 'RelativePressureCoefficient'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "7d5aaca5-0d5d-5e79-8ac2-9a9e209310cf",
            "title": "RelativePressureCoefficient",
            "title*": {"en": "Relative Pressure Coefficient"},
            "description": "This is an autogenerated partial class definition of 'RelativePressureCoefficient'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRelativePressureCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7d5aaca50d5d5e798ac29a9e209310cf"]
    unit: Optional[RelativePressureCoefficientUnit] = Field(
        RelativePressureCoefficientUnit.per_kelvin,
        options={"enum_titles": ["1/K"]},
        title="RelativePressureCoefficientUnit",
        x_enum_varnames=["per_kelvin"],
    )


class TotalCurrentDensityUnit(UnitEnum):
    ampere_per_meter_squared = "Item:OSW2b1e97f1edd650c088abbe8896fe0333"
    kilo_ampere_per_meter_squared = (
        "Item:OSW2b1e97f1edd650c088abbe8896fe0333#OSWa80d9ac2c0455902ab9531512c9b7667"
    )
    ampere_per_milli_meter_squared = (
        "Item:OSW2b1e97f1edd650c088abbe8896fe0333#OSW8d7d0b57aaba5f8a8f40e8bacc5cb2f6"
    )
    mega_ampere_per_meter_squared = (
        "Item:OSW2b1e97f1edd650c088abbe8896fe0333#OSWd0a4ce0cc105550b9bcbc416589a1b85"
    )
    ampere_per_centi_meter_squared = (
        "Item:OSW2b1e97f1edd650c088abbe8896fe0333#OSWec1a540d03745760af1d26077e9d762e"
    )


class TotalCurrentDensity(QuantityValue):
    """
    "Total Current Density" is the sum of the electric current density and the displacement current density.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "cdd31e6a-bf82-53a8-94c6-e44a4282924d",
            "title": "TotalCurrentDensity",
            "title*": {"en": "Total Current Density"},
            "description": '"Total Current Density" is the sum of the electric current density and the displacement current density.',
            "description*": {
                "en": '"Total Current Density" is the sum of the electric current density and the displacement current density.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTotalCurrentDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcdd31e6abf8253a894c6e44a4282924d"]
    unit: Optional[TotalCurrentDensityUnit] = Field(
        TotalCurrentDensityUnit.ampere_per_meter_squared,
        options={"enum_titles": ["A/m²", "kA/m²", "A/mm²", "MA/m²", "A/cm²"]},
        title="TotalCurrentDensityUnit",
        x_enum_varnames=[
            "ampere_per_meter_squared",
            "kilo_ampere_per_meter_squared",
            "ampere_per_milli_meter_squared",
            "mega_ampere_per_meter_squared",
            "ampere_per_centi_meter_squared",
        ],
    )


class SoundParticleVelocity(Velocity):
    """
    Sound Particle velocity is the velocity v of a particle (real or imagined) in a medium as it transmits a wave. In many cases this is a longitudinal wave of pressure as with sound, but it can also be a transverse wave as with the vibration of a taut string. When applied to a sound wave through a medium of a fluid like air, particle velocity would be the physical speed of a parcel of fluid as it moves back and forth in the direction the sound wave is travelling as it passes.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2105d9d7-0ddc-5d35-97da-e2c14da9e3e2",
            "title": "SoundParticleVelocity",
            "title*": {"en": "Sound particle velocity", "de": "Schallschnelle"},
            "description": "Sound Particle velocity is the velocity v of a particle (real or imagined) in a medium as it transmits a wave. In many cases this is a longitudinal wave of pressure as with sound, but it can also be a transverse wave as with the vibration of a taut string. When applied to a sound wave through a medium of a fluid like air, particle velocity would be the physical speed of a parcel of fluid as it moves back and forth in the direction the sound wave is travelling as it passes.",
            "description*": {
                "en": "Sound Particle velocity is the velocity v of a particle (real or imagined) in a medium as it transmits a wave. In many cases this is a longitudinal wave of pressure as with sound, but it can also be a transverse wave as with the vibration of a taut string. When applied to a sound wave through a medium of a fluid like air, particle velocity would be the physical speed of a parcel of fluid as it moves back and forth in the direction the sound wave is travelling as it passes."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSoundParticleVelocityValue",
            "@context": [
                "/wiki/Category:OSW397c67ece63a5a5c96bad9349f49f3d7?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2105d9d70ddc5d3597dae2c14da9e3e2"]


class GapEnergy(Energy):
    """
    "Gap Energy" is the difference in energy between the lowest level of conduction band and the highest level of valence band. It is an energy range in a solid where no electron states can exist.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "78b09fe4-74c8-5bf0-9529-d7eb3db0fe78",
            "title": "GapEnergy",
            "title*": {"en": "Gap Energy"},
            "description": '"Gap Energy" is the difference in energy between the lowest level of conduction band and the highest level of valence band. It is an energy range in a solid where no electron states can exist.',
            "description*": {
                "en": '"Gap Energy" is the difference in energy between the lowest level of conduction band and the highest level of valence band. It is an energy range in a solid where no electron states can exist.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasGapEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW78b09fe474c85bf09529d7eb3db0fe78"]


class MolarOpticalRotatoryPowerUnit(UnitEnum):
    meter_squared_radian_per_mole = "Item:OSW6e91dd70b9f75580bdb3d962228cb99b"


class MolarOpticalRotatoryPower(QuantityValue):
    """
    The "Molar Optical Rotatory Power" Angle of optical rotation divided by the optical path length through the medium and by the amount concentration giving the molar optical rotatory power.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "fd98416f-9f0b-5cb6-8157-6143d2d4ab05",
            "title": "MolarOpticalRotatoryPower",
            "title*": {"en": "Molar Optical Rotatory Power"},
            "description": 'The "Molar Optical Rotatory Power" Angle of optical rotation divided by the optical path length through the medium and by the amount concentration giving the molar optical rotatory power.',
            "description*": {
                "en": 'The "Molar Optical Rotatory Power" Angle of optical rotation divided by the optical path length through the medium and by the amount concentration giving the molar optical rotatory power.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarOpticalRotatoryPowerValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfd98416f9f0b5cb681576143d2d4ab05"]
    unit: Optional[MolarOpticalRotatoryPowerUnit] = Field(
        MolarOpticalRotatoryPowerUnit.meter_squared_radian_per_mole,
        options={"enum_titles": ["rad·m²/mol"]},
        title="MolarOpticalRotatoryPowerUnit",
        x_enum_varnames=["meter_squared_radian_per_mole"],
    )


class DensityOfStatesUnit(UnitEnum):
    second_per_meter_cubed_per_radian = "Item:OSW8d374d57d51f52fd9f4fae71895deb07"


class DensityOfStates(QuantityValue):
    """
    "Density of States" is the number of vibrational modes in an infinitesimal interval of angular frequency divided by the range of that interval and by volume.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a37f1067-68d4-575a-bdb5-67b17d904d2d",
            "title": "DensityOfStates",
            "title*": {"en": "Density of states"},
            "description": '"Density of States" is the number of vibrational modes in an infinitesimal interval of angular frequency divided by the range of that interval and by volume.',
            "description*": {
                "en": '"Density of States" is the number of vibrational modes in an infinitesimal interval of angular frequency divided by the range of that interval and by volume.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDensityOfStatesValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa37f106768d4575abdb567b17d904d2d"]
    unit: Optional[DensityOfStatesUnit] = Field(
        DensityOfStatesUnit.second_per_meter_cubed_per_radian,
        options={"enum_titles": ["s/(rad·m³)"]},
        title="DensityOfStatesUnit",
        x_enum_varnames=["second_per_meter_cubed_per_radian"],
    )


class SpecificHeatsRatio(DimensionlessRatio):
    """
    The ratio of specific heats, for the exhaust gases adiabatic gas constant, is the relative amount of compression/expansion energy that goes into temperature $T$ versus pressure $P$ can be characterized by the heat capacity ratio: $\gamma\frac{C_P}{C_V}$, where $C_P$ is the specific heat (also called heat capacity) at constant pressure, while $C_V$ is the specific heat at constant volume.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a2a96072-e46a-57b2-a36f-0510ac8a5fbb",
            "title": "SpecificHeatsRatio",
            "title*": {"en": "Specific Heats Ratio"},
            "description": "The ratio of specific heats, for the exhaust gases adiabatic gas constant, is the relative amount of compression/expansion energy that goes into temperature $T$ versus pressure $P$ can be characterized by the heat capacity ratio: $\\gamma\\frac{C_P}{C_V}$, where $C_P$ is the specific heat (also called heat capacity) at constant pressure, while $C_V$ is the specific heat at constant volume.",
            "description*": {
                "en": "The ratio of specific heats, for the exhaust gases adiabatic gas constant, is the relative amount of compression/expansion energy that goes into temperature $T$ versus pressure $P$ can be characterized by the heat capacity ratio: $\\gamma\\frac{C_P}{C_V}$, where $C_P$ is the specific heat (also called heat capacity) at constant pressure, while $C_V$ is the specific heat at constant volume."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificHeatsRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa2a96072e46a57b2a36f0510ac8a5fbb"]


class Count(Dimensionless):
    """
    "Count" is the value of a count of items.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b0250d36-77f6-592f-9d43-29c8b9d5f8d1",
            "title": "Count",
            "title*": {"en": "Count"},
            "description": '"Count" is the value of a count of items.',
            "description*": {"en": '"Count" is the value of a count of items.'},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCountValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb0250d3677f6592f9d4329c8b9d5f8d1"]


class NeutronNumber(Count):
    """
    "Neutron Number", symbol $N$, is the number of neutrons in a nuclide. Nuclides with the same value of $N$ but different values of $Z$ are called isotones. $N - Z$ is called the neutron excess number.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "6bbe0ce5-74cc-56d0-8a60-5c6011d82e6c",
            "title": "NeutronNumber",
            "title*": {"en": "Neutron number", "de": "Neutronenzahl"},
            "description": '"Neutron Number", symbol $N$, is the number of neutrons in a nuclide. Nuclides with the same value of $N$ but different values of $Z$ are called isotones. $N - Z$ is called the neutron excess number.',
            "description*": {
                "en": '"Neutron Number", symbol $N$, is the number of neutrons in a nuclide. Nuclides with the same value of $N$ but different values of $Z$ are called isotones. $N - Z$ is called the neutron excess number.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasNeutronNumberValue",
            "@context": [
                "/wiki/Category:OSWb0250d3677f6592f9d4329c8b9d5f8d1?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6bbe0ce574cc56d08a605c6011d82e6c"]


class Efficiency(DimensionlessRatio):
    """
    Efficiency is the ratio of output power to input power.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "8cccae8a-4509-5dcd-89a7-69a33373731a",
            "title": "Efficiency",
            "title*": {"en": "Efficiency", "de": "Wirkungsgrad"},
            "description": "Efficiency is the ratio of output power to input power.",
            "description*": {
                "en": "Efficiency is the ratio of output power to input power."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEfficiencyValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8cccae8a45095dcd89a769a33373731a"]


class CO2Equivalent(MassEquivalent):
    """
    The CO2 equivalent is a measure used to compare the emissions from various greenhouse gases
      on the basis of their global-warming potential (GWP), by converting amounts of other gases to the equivalent amount
      of carbon dioxide with the same global warming potential.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3ba3f32b-c079-55f3-a522-c8159c29a279",
            "title": "CO2Equivalent",
            "title*": {"en": "CO2Equivalent"},
            "description": "The CO2 equivalent is a measure used to compare the emissions from various greenhouse gases \n  on the basis of their global-warming potential (GWP), by converting amounts of other gases to the equivalent amount \n  of carbon dioxide with the same global warming potential.",
            "description*": {
                "en": "The CO2 equivalent is a measure used to compare the emissions from various greenhouse gases \n  on the basis of their global-warming potential (GWP), by converting amounts of other gases to the equivalent amount \n  of carbon dioxide with the same global warming potential."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCO2EquivalentValue",
            "@context": [
                "/wiki/Category:OSWea12214400965c818daf0b53062ccf4a?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3ba3f32bc07955f3a522c8159c29a279"]


class VacuumThrust(Thrust):
    """
    This is an autogenerated partial class definition of 'VacuumThrust'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c92f6543-cf0b-54d0-a508-2ef1e67267ad",
            "title": "VacuumThrust",
            "title*": {"en": "Vacuum Thrust"},
            "description": "This is an autogenerated partial class definition of 'VacuumThrust'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVacuumThrustValue",
            "@context": [
                "/wiki/Category:OSW7bf742d673495bb8bd77d1ea5295b2cd?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc92f6543cf0b54d0a5082ef1e67267ad"]


class StaticPressure(Pressure):
    """
    "Static Pressure" is the pressure at a nominated point in a fluid. Every point in a steadily flowing fluid, regardless of the fluid speed at that point, has its own static pressure $P$, dynamic pressure $q$, and total pressure $P_0$. The total pressure is the sum of the dynamic and static pressures, that is $P_0 = P + q$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "97308942-8594-5607-baf9-09d27f80638e",
            "title": "StaticPressure",
            "title*": {"en": "Static pressure"},
            "description": '"Static Pressure" is the pressure at a nominated point in a fluid. Every point in a steadily flowing fluid, regardless of the fluid speed at that point, has its own static pressure $P$, dynamic pressure $q$, and total pressure $P_0$. The total pressure is the sum of the dynamic and static pressures, that is $P_0 = P + q$.',
            "description*": {
                "en": '"Static Pressure" is the pressure at a nominated point in a fluid. Every point in a steadily flowing fluid, regardless of the fluid speed at that point, has its own static pressure $P$, dynamic pressure $q$, and total pressure $P_0$. The total pressure is the sum of the dynamic and static pressures, that is $P_0 = P + q$.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasStaticPressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9730894285945607baf909d27f80638e"]


class MagneticVectorPotentialUnit(UnitEnum):
    second_volt_per_meter = "Item:OSWf63c15f03855534fabdc39bb5403d1ff"


class MagneticVectorPotential(QuantityValue):
    """
    "Magnetic Vector Potential" is the vector potential of the magnetic flux density. The magnetic vector potential is not unique since any irrotational vector field quantity can be added to a given magnetic vector potential without changing its rotation. Under static conditions the magnetic vector potential is often chosen so that its divergence is zero.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4e658af1-bb26-5ba7-8eb7-2669e48708e2",
            "title": "MagneticVectorPotential",
            "title*": {
                "en": "Magnetic vector potential",
                "de": "Magnetisches Potenzial",
            },
            "description": '"Magnetic Vector Potential" is the vector potential of the magnetic flux density. The magnetic vector potential is not unique since any irrotational vector field quantity can be added to a given magnetic vector potential without changing its rotation. Under static conditions the magnetic vector potential is often chosen so that its divergence is zero.',
            "description*": {
                "en": '"Magnetic Vector Potential" is the vector potential of the magnetic flux density. The magnetic vector potential is not unique since any irrotational vector field quantity can be added to a given magnetic vector potential without changing its rotation. Under static conditions the magnetic vector potential is often chosen so that its divergence is zero.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMagneticVectorPotentialValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4e658af1bb265ba78eb72669e48708e2"]
    unit: Optional[MagneticVectorPotentialUnit] = Field(
        MagneticVectorPotentialUnit.second_volt_per_meter,
        options={"enum_titles": ["V·s/m"]},
        title="MagneticVectorPotentialUnit",
        x_enum_varnames=["second_volt_per_meter"],
    )


class EnergyDensityUnit(UnitEnum):
    joule_per_meter_cubed = "Item:OSW9ea4bf89c42b56728392f1c55639ac18"
    mega_joule_per_meter_cubed = (
        "Item:OSW9ea4bf89c42b56728392f1c55639ac18#OSW7044da5ba4b45554b3acc6c6f3fc3624"
    )


class EnergyDensity(QuantityValue):
    """
    Energy density is defined as energy per unit volume. The SI unit for energy density is the joule per cubic meter.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a7079f30-2242-50c9-b5d1-0367541f3c54",
            "title": "EnergyDensity",
            "title*": {"en": "Energy Density"},
            "description": "Energy density is defined as energy per unit volume. The SI unit for energy density is the joule per cubic meter.",
            "description*": {
                "en": "Energy density is defined as energy per unit volume. The SI unit for energy density is the joule per cubic meter."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnergyDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa7079f30224250c9b5d10367541f3c54"]
    unit: Optional[EnergyDensityUnit] = Field(
        EnergyDensityUnit.joule_per_meter_cubed,
        options={"enum_titles": ["J/m³", "MJ/m³"]},
        title="EnergyDensityUnit",
        x_enum_varnames=["joule_per_meter_cubed", "mega_joule_per_meter_cubed"],
    )


class StrainEnergyDensity(EnergyDensity):
    """
    Defined as the 'work done' for a given strain, that is the area under the stress-strain curve after a specified eation. Source(s): http://www.prepol.com/product-range/product-subpages/terminology
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "6e6fb826-447c-5248-813f-8cad28ef53d7",
            "title": "StrainEnergyDensity",
            "title*": {"en": "Strain Energy Density"},
            "description": "Defined as the 'work done' for a given strain, that is the area under the stress-strain curve after a specified eation. Source(s): http://www.prepol.com/product-range/product-subpages/terminology",
            "description*": {
                "en": "Defined as the 'work done' for a given strain, that is the area under the stress-strain curve after a specified eation. Source(s): http://www.prepol.com/product-range/product-subpages/terminology"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasStrainEnergyDensityValue",
            "@context": [
                "/wiki/Category:OSWa7079f30224250c9b5d10367541f3c54?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6e6fb826447c5248813f8cad28ef53d7"]


class LevelWidthUnit(UnitEnum):
    joule = "Item:OSW730568cd7ae65906abbbcef1d15cb074"
    atto_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSWa73c696efa58519aa07c265ea965ceda"
    )
    kilo_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSWad2518d42b685f569679c3599455c3d3"
    )
    peta_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW4e7003f5d7ff58a190167711dd63b0bd"
    )
    milli_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW6df751011258508e9d15967190c819f3"
    )
    giga_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSWc26bf1cf449d56ef8122745336585d2b"
    )
    femto_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW2d5cdc08b064506e8f9a5b0456b7a0b3"
    )
    exa_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW5ba80670b2945c08b35551442d3169d5"
    )
    tera_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW0ac3643d930d5c99936e5ece487a9634"
    )
    mega_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSWc1525b1f1fc05c40b9715328bf707805"
    )


class LevelWidth(QuantityValue):
    """
    The "Level Width" is the uncertainty in the energy of a quantum-mechanical system having discrete energy levels in a state that is not strictly stationary. The system may be an atom, a molecule, or an atomic nucleus.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "1a16494f-8612-5261-8604-afb4928a7256",
            "title": "LevelWidth",
            "title*": {"en": "Level Width"},
            "description": 'The "Level Width" is the uncertainty in the energy of a quantum-mechanical system having discrete energy levels in a state that is not strictly stationary. The system may be an atom, a molecule, or an atomic nucleus.',
            "description*": {
                "en": 'The "Level Width" is the uncertainty in the energy of a quantum-mechanical system having discrete energy levels in a state that is not strictly stationary. The system may be an atom, a molecule, or an atomic nucleus.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLevelWidthValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1a16494f861252618604afb4928a7256"]
    unit: Optional[LevelWidthUnit] = Field(
        LevelWidthUnit.joule,
        options={
            "enum_titles": ["J", "aJ", "kJ", "PJ", "mJ", "GJ", "fJ", "EJ", "TJ", "MJ"]
        },
        title="LevelWidthUnit",
        x_enum_varnames=[
            "joule",
            "atto_joule",
            "kilo_joule",
            "peta_joule",
            "milli_joule",
            "giga_joule",
            "femto_joule",
            "exa_joule",
            "tera_joule",
            "mega_joule",
        ],
    )


class LossAngle(Angle):
    """
    This is an autogenerated partial class definition of 'LossAngle'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3045ff94-60da-5f55-bdfb-935f7996e4b3",
            "title": "LossAngle",
            "title*": {"en": "Loss Angle"},
            "description": "This is an autogenerated partial class definition of 'LossAngle'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLossAngleValue",
            "@context": [
                "/wiki/Category:OSW2339256af71e5635a541ac7f5a437141?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3045ff9460da5f55bdfb935f7996e4b3"]


class AtomicAttenuationCoefficient(Area):
    """
    "Atomic Attenuation Coefficient" is a measurement of how strongly a chemical species or substance absorbs or scatters light at a given wavelength, per the number of atoms in the substance.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "81c5fd64-9054-5918-af3b-53f4d68eae2d",
            "title": "AtomicAttenuationCoefficient",
            "title*": {"en": "Atomic Attenuation Coefficient"},
            "description": '"Atomic Attenuation Coefficient" is a measurement of how strongly a chemical species or substance absorbs or scatters light at a given wavelength, per the number of atoms in the substance.',
            "description*": {
                "en": '"Atomic Attenuation Coefficient" is a measurement of how strongly a chemical species or substance absorbs or scatters light at a given wavelength, per the number of atoms in the substance.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAtomicAttenuationCoefficientValue",
            "@context": [
                "/wiki/Category:OSW1fcf1694712e5684885071efdf775bd9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW81c5fd6490545918af3b53f4d68eae2d"]


class Transmittance(DimensionlessRatio):
    """
    Transmittance is the fraction of incident light (electromagnetic radiation) at a specified wavelength that passes through a sample.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "908b79ae-c173-5ed1-b08f-b2947512ee6d",
            "title": "Transmittance",
            "title*": {"en": "Transmittance"},
            "description": "Transmittance is the fraction of incident light (electromagnetic radiation) at a specified wavelength that passes through a sample.",
            "description*": {
                "en": "Transmittance is the fraction of incident light (electromagnetic radiation) at a specified wavelength that passes through a sample."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTransmittanceValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW908b79aec1735ed1b08fb2947512ee6d"]


class ResistanceUnit(UnitEnum):
    ohm = "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1"
    milli_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSWa8d17cb3f4255320af6052cbd471d716"
    )
    mega_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSW14b14dd3c32d5ee199a67e3796734a4a"
    )
    kilo_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSW5e05beabf6935ae2b559c1cffc788110"
    )
    micro_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSWacd4090bd8335717b6eea6b8c1151b29"
    )
    giga_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSW66dbbd77c6ca5d5684b223fdfcc7b773"
    )
    tera_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSW5196e38637c752e58c2b5be5521e4234"
    )


class Resistance(QuantityValue):
    """
    The electrical resistance of an object is a measure of its opposition to the passage of a steady electric current.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "b3794dda-f0f5-51c1-bccb-9b12a0190888",
            "title": "Resistance",
            "title*": {"en": "Resistance"},
            "description": "The electrical resistance of an object is a measure of its opposition to the passage of a steady electric current.",
            "description*": {
                "en": "The electrical resistance of an object is a measure of its opposition to the passage of a steady electric current."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasResistanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb3794ddaf0f551c1bccb9b12a0190888"]
    unit: Optional[ResistanceUnit] = Field(
        ResistanceUnit.ohm,
        options={"enum_titles": ["Ω", "mΩ", "MΩ", "kΩ", "μΩ", "GΩ", "TΩ"]},
        title="ResistanceUnit",
        x_enum_varnames=[
            "ohm",
            "milli_ohm",
            "mega_ohm",
            "kilo_ohm",
            "micro_ohm",
            "giga_ohm",
            "tera_ohm",
        ],
    )


class InverseLengthUnit(UnitEnum):
    per_meter = "Item:OSW28e75b089e145904998a54f1c4125bf3"
    per_centi_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW0dcebe41477056aba0e706c148970688"
    )
    per_nano_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWdc9edf9277ed57cdb7a6f218551afa8d"
    )
    per_milli_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWe77bc3c1bd7a566eadb55f3b68d351f2"
    )
    per_pico_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWd0475e49e0715ec488fba3fe0fdd9b02"
    )
    per_micro_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW45c24d8b68485accbdd684f05231c74c"
    )
    per_kilo_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW124eebfb89dc54bc9cc223fd49c40480"
    )


class InverseLength(QuantityValue):
    """
    Reciprocal length or inverse length is a measurement used in several branches of science and mathematics. As the reciprocal of length, common units used for this measurement include the reciprocal metre or inverse metre ($m^{-1}$), the reciprocal centimetre or inverse centimetre ($cm^{-1}$), and, in optics, the dioptre.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "23837e2c-50f0-5ba8-8468-2b08465bf173",
            "title": "InverseLength",
            "title*": {"en": "Inverse Length"},
            "description": "Reciprocal length or inverse length is a measurement used in several branches of science and mathematics. As the reciprocal of length, common units used for this measurement include the reciprocal metre or inverse metre ($m^{-1}$), the reciprocal centimetre or inverse centimetre ($cm^{-1}$), and, in optics, the dioptre.",
            "description*": {
                "en": "Reciprocal length or inverse length is a measurement used in several branches of science and mathematics. As the reciprocal of length, common units used for this measurement include the reciprocal metre or inverse metre ($m^{-1}$), the reciprocal centimetre or inverse centimetre ($cm^{-1}$), and, in optics, the dioptre."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInverseLengthValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW23837e2c50f05ba884682b08465bf173"]
    unit: Optional[InverseLengthUnit] = Field(
        InverseLengthUnit.per_meter,
        options={
            "enum_titles": ["1/m", "1/cm", "1/nm", "1/mm", "1/pm", "1/μm", "1/km"]
        },
        title="InverseLengthUnit",
        x_enum_varnames=[
            "per_meter",
            "per_centi_meter",
            "per_nano_meter",
            "per_milli_meter",
            "per_pico_meter",
            "per_micro_meter",
            "per_kilo_meter",
        ],
    )


class FermiAngularWavenumber(InverseLength):
    """
    This is an autogenerated partial class definition of 'FermiAngularWavenumber'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7a5bf247-1b19-54db-a52a-ef0bf1a3fd28",
            "title": "FermiAngularWavenumber",
            "title*": {"en": "Fermi Angular Wavenumber"},
            "description": "This is an autogenerated partial class definition of 'FermiAngularWavenumber'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFermiAngularWavenumberValue",
            "@context": [
                "/wiki/Category:OSW23837e2c50f05ba884682b08465bf173?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7a5bf2471b1954dba52aef0bf1a3fd28"]


class PermeabilityUnit(UnitEnum):
    henry_per_meter = "Item:OSW12866a70d0a25caa932f30e99aceaf78"
    micro_henry_per_meter = (
        "Item:OSW12866a70d0a25caa932f30e99aceaf78#OSW4c3c9d5890b9500c91bb519b11dbdd34"
    )
    nano_henry_per_meter = (
        "Item:OSW12866a70d0a25caa932f30e99aceaf78#OSW4c9c95ef060e5f40a9169574264d38b1"
    )


class Permeability(QuantityValue):
    """
    $\\textit{Permeability}$ is the degree of magnetization of a material that responds linearly to an applied magnetic field.
      In general permeability is a tensor-valued quantity.
      The definition given applies to an isotropic medium.
      For an anisotropic medium permeability is a second order tensor.
      In electromagnetism, permeability is the measure of the ability of a material to support the formation of a magnetic field within itself.
      In other words, it is the degree of magnetization that a material obtains in response to an applied magnetic field.
      Magnetic permeability is typically represented by the Greek letter $\mu$.
      The term was coined in September, 1885 by Oliver Heaviside.
      The reciprocal of magnetic permeability is $\\textit{Magnetic Reluctivity}$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "3f643ed2-dc23-5d8a-b1c8-23dfa357c16b",
            "title": "Permeability",
            "title*": {"en": "Permeability"},
            "description": "$\\textit{Permeability}$ is the degree of magnetization of a material that responds linearly to an applied magnetic field. \n  In general permeability is a tensor-valued quantity. \n  The definition given applies to an isotropic medium. \n  For an anisotropic medium permeability is a second order tensor. \n  In electromagnetism, permeability is the measure of the ability of a material to support the formation of a magnetic field within itself. \n  In other words, it is the degree of magnetization that a material obtains in response to an applied magnetic field. \n  Magnetic permeability is typically represented by the Greek letter $\\mu$. \n  The term was coined in September, 1885 by Oliver Heaviside. \n  The reciprocal of magnetic permeability is $\\textit{Magnetic Reluctivity}$.",
            "description*": {
                "en": "$\\textit{Permeability}$ is the degree of magnetization of a material that responds linearly to an applied magnetic field. \n  In general permeability is a tensor-valued quantity. \n  The definition given applies to an isotropic medium. \n  For an anisotropic medium permeability is a second order tensor. \n  In electromagnetism, permeability is the measure of the ability of a material to support the formation of a magnetic field within itself. \n  In other words, it is the degree of magnetization that a material obtains in response to an applied magnetic field. \n  Magnetic permeability is typically represented by the Greek letter $\\mu$. \n  The term was coined in September, 1885 by Oliver Heaviside. \n  The reciprocal of magnetic permeability is $\\textit{Magnetic Reluctivity}$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPermeabilityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3f643ed2dc235d8ab1c823dfa357c16b"]
    unit: Optional[PermeabilityUnit] = Field(
        PermeabilityUnit.henry_per_meter,
        options={"enum_titles": ["H/m", "μH/m", "nH/m"]},
        title="PermeabilityUnit",
        x_enum_varnames=[
            "henry_per_meter",
            "micro_henry_per_meter",
            "nano_henry_per_meter",
        ],
    )


class AngularWavenumber(InverseLength):
    """
    "wavenumber" is the spatial frequency of a wave - the number of waves that exist over a specified distance. More formally, it is the reciprocal of the wavelength. It is also the magnitude of the wave vector.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "36722305-78c1-593c-91fd-69449f82fe93",
            "title": "AngularWavenumber",
            "title*": {"en": "Angular wavenumber", "de": "Kreisrepetenz"},
            "description": '"wavenumber" is the spatial frequency of a wave - the number of waves that exist over a specified distance. More formally, it is the reciprocal of the wavelength. It is also the magnitude of the wave vector.',
            "description*": {
                "en": '"wavenumber" is the spatial frequency of a wave - the number of waves that exist over a specified distance. More formally, it is the reciprocal of the wavelength. It is also the magnitude of the wave vector.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngularWavenumberValue",
            "@context": [
                "/wiki/Category:OSW23837e2c50f05ba884682b08465bf173?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3672230578c1593c91fd69449f82fe93"]


class LuminousFluxPerAreaUnit(UnitEnum):
    lux = "Item:OSWca14d08a41b65ac59d79d96be1351305"


class LuminousFluxPerArea(QuantityValue):
    """
    In photometry, illuminance is the total luminous flux incident on a surface, per unit area. It is a measure of how much the incident light illuminates the surface, wavelength-weighted by the luminosity function to correlate with human brightness perception. Similarly, luminous emittance is the luminous flux per unit area emitted from a surface. In SI derived units these are measured in $lux (lx)$ or $lumens per square metre$ ($cd \cdot m^{-2}$). In the CGS system, the unit of illuminance is the $phot$, which is equal to $10,000 lux$. The $foot-candle$ is a non-metric unit of illuminance that is used in photography.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "79225fde-5f80-59d1-802f-8181c06b4cfa",
            "title": "LuminousFluxPerArea",
            "title*": {"en": "Luminous Flux per Area"},
            "description": "In photometry, illuminance is the total luminous flux incident on a surface, per unit area. It is a measure of how much the incident light illuminates the surface, wavelength-weighted by the luminosity function to correlate with human brightness perception. Similarly, luminous emittance is the luminous flux per unit area emitted from a surface. In SI derived units these are measured in $lux (lx)$ or $lumens per square metre$ ($cd \\cdot m^{-2}$). In the CGS system, the unit of illuminance is the $phot$, which is equal to $10,000 lux$. The $foot-candle$ is a non-metric unit of illuminance that is used in photography.",
            "description*": {
                "en": "In photometry, illuminance is the total luminous flux incident on a surface, per unit area. It is a measure of how much the incident light illuminates the surface, wavelength-weighted by the luminosity function to correlate with human brightness perception. Similarly, luminous emittance is the luminous flux per unit area emitted from a surface. In SI derived units these are measured in $lux (lx)$ or $lumens per square metre$ ($cd \\cdot m^{-2}$). In the CGS system, the unit of illuminance is the $phot$, which is equal to $10,000 lux$. The $foot-candle$ is a non-metric unit of illuminance that is used in photography."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLuminousFluxPerAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW79225fde5f8059d1802f8181c06b4cfa"]
    unit: Optional[LuminousFluxPerAreaUnit] = Field(
        LuminousFluxPerAreaUnit.lux,
        options={"enum_titles": ["lx"]},
        title="LuminousFluxPerAreaUnit",
        x_enum_varnames=["lux"],
    )


class LuminousEmmitance(LuminousFluxPerArea):
    """
    "Luminous Emittance" is the luminous flux per unit area emitted from a surface.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c90b3cc0-8a04-5066-97ae-ca7645bc47dd",
            "title": "LuminousEmmitance",
            "title*": {"en": "Luminous Emmitance"},
            "description": '"Luminous Emittance" is the luminous flux per unit area emitted from a surface.',
            "description*": {
                "en": '"Luminous Emittance" is the luminous flux per unit area emitted from a surface.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLuminousEmmitanceValue",
            "@context": [
                "/wiki/Category:OSW79225fde5f8059d1802f8181c06b4cfa?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc90b3cc08a04506697aeca7645bc47dd"]


class StoichiometricNumber(Dimensionless):
    """
    Chemical reactions, as macroscopic unit operations, consist of simply a very large number of elementary reactions, where a single molecule reacts with another molecule. As the reacting molecules (or moieties) consist of a definite set of atoms in an integer ratio, the ratio between reactants in a complete reaction is also in integer ratio. A reaction may consume more than one molecule, and the "Stoichiometric Number" counts this number, defined as positive for products (added) and negative for reactants (removed).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2782ed29-d6ac-5a2c-9549-091f3159e20f",
            "title": "StoichiometricNumber",
            "title*": {"en": "Stoichiometric Number"},
            "description": 'Chemical reactions, as macroscopic unit operations, consist of simply a very large number of elementary reactions, where a single molecule reacts with another molecule. As the reacting molecules (or moieties) consist of a definite set of atoms in an integer ratio, the ratio between reactants in a complete reaction is also in integer ratio. A reaction may consume more than one molecule, and the "Stoichiometric Number" counts this number, defined as positive for products (added) and negative for reactants (removed).',
            "description*": {
                "en": 'Chemical reactions, as macroscopic unit operations, consist of simply a very large number of elementary reactions, where a single molecule reacts with another molecule. As the reacting molecules (or moieties) consist of a definite set of atoms in an integer ratio, the ratio between reactants in a complete reaction is also in integer ratio. A reaction may consume more than one molecule, and the "Stoichiometric Number" counts this number, defined as positive for products (added) and negative for reactants (removed).'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasStoichiometricNumberValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2782ed29d6ac5a2c9549091f3159e20f"]


class AreaAngleUnit(UnitEnum):
    meter_squared_steradian = "Item:OSW9f81b80e2dfd530c98579b65285d4f20"


class AreaAngle(QuantityValue):
    """
    This is an autogenerated partial class definition of 'AreaAngle'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "ada45563-0bff-528d-bbf6-5f20a630212b",
            "title": "AreaAngle",
            "title*": {"en": "Area Angle"},
            "description": "This is an autogenerated partial class definition of 'AreaAngle'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAreaAngleValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWada455630bff528dbbf65f20a630212b"]
    unit: Optional[AreaAngleUnit] = Field(
        AreaAngleUnit.meter_squared_steradian,
        options={"enum_titles": ["m²·sr"]},
        title="AreaAngleUnit",
        x_enum_varnames=["meter_squared_steradian"],
    )


class ExitPlaneCrossSectionalArea(Area):
    """
    Cross-sectional area at exit plane of nozzle
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2c615dd1-ae0c-5b73-b77a-aeb99c960a6e",
            "title": "ExitPlaneCrossSectionalArea",
            "title*": {"en": "Exit Plane Cross-sectional Area"},
            "description": "Cross-sectional area at exit plane of nozzle",
            "description*": {"en": "Cross-sectional area at exit plane of nozzle"},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasExitPlaneCrossSectionalAreaValue",
            "@context": [
                "/wiki/Category:OSW1fcf1694712e5684885071efdf775bd9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2c615dd1ae0c5b73b77aaeb99c960a6e"]


class RotationalFrequencyUnit(UnitEnum):
    hertz = "Item:OSW7496c09c41b154bdba82f6d09195cae5"
    mega_hertz = (
        "Item:OSW7496c09c41b154bdba82f6d09195cae5#OSWb5d0dd4f66285e15af5977a1b77d5daa"
    )
    kilo_hertz = (
        "Item:OSW7496c09c41b154bdba82f6d09195cae5#OSWfbbfa62ac8095c5bb37ea9f22ab121dd"
    )
    giga_hertz = (
        "Item:OSW7496c09c41b154bdba82f6d09195cae5#OSW37c66b2e350050d891107e427a1c0210"
    )
    tera_hertz = (
        "Item:OSW7496c09c41b154bdba82f6d09195cae5#OSW5860049cdfae5d64abcd7bb8ace55540"
    )


class RotationalFrequency(QuantityValue):
    """
    IfcRotationalFrequencyMeasure is a measure of the number of cycles that an item revolves in unit time. Usually measured in cycles/s.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "8a7f583f-be31-5d92-8de4-5968b0a3403b",
            "title": "RotationalFrequency",
            "title*": {"en": "RotationalFrequency"},
            "description": "IfcRotationalFrequencyMeasure is a measure of the number of cycles that an item revolves in unit time. Usually measured in cycles/s.",
            "description*": {
                "en": "IfcRotationalFrequencyMeasure is a measure of the number of cycles that an item revolves in unit time. Usually measured in cycles/s."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRotationalFrequencyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8a7f583fbe315d928de45968b0a3403b"]
    unit: Optional[RotationalFrequencyUnit] = Field(
        RotationalFrequencyUnit.hertz,
        options={"enum_titles": ["Hz", "MHz", "kHz", "GHz", "THz"]},
        title="RotationalFrequencyUnit",
        x_enum_varnames=[
            "hertz",
            "mega_hertz",
            "kilo_hertz",
            "giga_hertz",
            "tera_hertz",
        ],
    )


class LuminousExitance(LuminousFluxPerArea):
    """
    Luminous Exitance is the ratio of the luminous flux dΦ, leaving an element of the surface containing the point, by the area dA of that element. #,#Quotient aus dem Lichtstrom dΦ, der ein den Punkt enthaltendes Element der Oberfläche verlässt, und der Fläche dA dieses Elementes
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "fef30199-eb31-5ec2-ba3d-9c279251ea98",
            "title": "LuminousExitance",
            "title*": {"en": "Luminous exitance"},
            "description": "Luminous Exitance is the ratio of the luminous flux dΦ, leaving an element of the surface containing the point, by the area dA of that element. #,#Quotient aus dem Lichtstrom dΦ, der ein den Punkt enthaltendes Element der Oberfläche verlässt, und der Fläche dA dieses Elementes",
            "description*": {
                "en": "Luminous Exitance is the ratio of the luminous flux dΦ, leaving an element of the surface containing the point, by the area dA of that element. #,#Quotient aus dem Lichtstrom dΦ, der ein den Punkt enthaltendes Element der Oberfläche verlässt, und der Fläche dA dieses Elementes"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLuminousExitanceValue",
            "@context": [
                "/wiki/Category:OSW79225fde5f8059d1802f8181c06b4cfa?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfef30199eb315ec2ba3d9c279251ea98"]


class ForcePerLengthUnit(UnitEnum):
    newton_per_meter = "Item:OSW0d4e5e11d53f5018a0b965373b55510d"


class ForcePerLength(QuantityValue):
    """
    This is an autogenerated partial class definition of 'ForcePerLength'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4496d2b6-6d71-5453-92a8-1e9e05297338",
            "title": "ForcePerLength",
            "title*": {"en": "Force per Length"},
            "description": "This is an autogenerated partial class definition of 'ForcePerLength'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasForcePerLengthValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4496d2b66d71545392a81e9e05297338"]
    unit: Optional[ForcePerLengthUnit] = Field(
        ForcePerLengthUnit.newton_per_meter,
        options={"enum_titles": ["N·m/m²"]},
        title="ForcePerLengthUnit",
        x_enum_varnames=["newton_per_meter"],
    )


class BetaDisintegrationEnergy(Energy):
    """
    "Beta Disintegration Energy" is the  energy released by a beta particle radioactive decay. It is the sum of the maximum beta-particle kinetic energy and the recoil energy of the atom produced in the reference frame in which the emitting nucleus is at rest before its disintegration.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "532bab2a-81f4-51fb-9dc3-4122da50dca6",
            "title": "BetaDisintegrationEnergy",
            "title*": {"en": "Beta Disintegration Energy"},
            "description": '"Beta Disintegration Energy" is the  energy released by a beta particle radioactive decay. It is the sum of the maximum beta-particle kinetic energy and the recoil energy of the atom produced in the reference frame in which the emitting nucleus is at rest before its disintegration.',
            "description*": {
                "en": '"Beta Disintegration Energy" is the  energy released by a beta particle radioactive decay. It is the sum of the maximum beta-particle kinetic energy and the recoil energy of the atom produced in the reference frame in which the emitting nucleus is at rest before its disintegration.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasBetaDisintegrationEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW532bab2a81f451fb9dc34122da50dca6"]


class FirstStageMassRatio(MassRatio):
    """
    Mass ratio for the first stage of a multistage launcher.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "57cfdf82-10f9-50a4-9e21-eee105f0ebcf",
            "title": "FirstStageMassRatio",
            "title*": {"en": "First Stage Mass Ratio"},
            "description": "Mass ratio for the first stage of a multistage launcher.",
            "description*": {
                "en": "Mass ratio for the first stage of a multistage launcher."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFirstStageMassRatioValue",
            "@context": [
                "/wiki/Category:OSWfeea42441eab5f6598b36cda1157f75f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW57cfdf8210f950a49e21eee105f0ebcf"]


class FissionCoreRadiusToHeightRatio(DimensionlessRatio):
    """
    This is an autogenerated partial class definition of 'FissionCoreRadiusToHeightRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "58245ed6-bf6f-515d-b056-01290b82c811",
            "title": "FissionCoreRadiusToHeightRatio",
            "title*": {"en": "Fission Core Radius To Height Ratio"},
            "description": "This is an autogenerated partial class definition of 'FissionCoreRadiusToHeightRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFissionCoreRadiusToHeightRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW58245ed6bf6f515db05601290b82c811"]


class LengthMassUnit(UnitEnum):
    kilo_gram_meter = "Item:OSW4a5d124e14e45b8c95bebb544ce245b6"


class LengthMass(QuantityValue):
    """
    This is an autogenerated partial class definition of 'LengthMass'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4b7dde37-8745-5f5a-a84d-6783bda3971a",
            "title": "LengthMass",
            "title*": {"en": "Length Mass"},
            "description": "This is an autogenerated partial class definition of 'LengthMass'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLengthMassValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4b7dde3787455f5aa84d6783bda3971a"]
    unit: Optional[LengthMassUnit] = Field(
        LengthMassUnit.kilo_gram_meter,
        options={"enum_titles": ["m·kg"]},
        title="LengthMassUnit",
        x_enum_varnames=["kilo_gram_meter"],
    )


class SurfaceDensityUnit(UnitEnum):
    kilo_gram_per_meter_squared = (
        "Item:OSWb93e608c86fd5480a5de9cd1b3e9ea22#OSW86b6ab5f70aa5624be17645333d53d51"
    )


class SurfaceDensity(QuantityValue):
    """
    The area density (also known as areal density, surface density, or superficial density) of a two-dimensional object is calculated as the mass per unit area.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a1191d61-1612-5618-b9cb-06db9d0b49be",
            "title": "SurfaceDensity",
            "title*": {"en": "Surface Density"},
            "description": "The area density (also known as areal density, surface density, or superficial density) of a two-dimensional object is calculated as the mass per unit area.",
            "description*": {
                "en": "The area density (also known as areal density, surface density, or superficial density) of a two-dimensional object is calculated as the mass per unit area."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSurfaceDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa1191d6116125618b9cb06db9d0b49be"]
    unit: Optional[SurfaceDensityUnit] = Field(
        SurfaceDensityUnit.kilo_gram_per_meter_squared,
        options={"enum_titles": ["kg/m²"]},
        title="SurfaceDensityUnit",
        x_enum_varnames=["kilo_gram_per_meter_squared"],
    )


class AverageVacuumThrust(VacuumThrust):
    """
    This is an autogenerated partial class definition of 'AverageVacuumThrust'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b1a42fde-0247-5c6d-b7d2-b8121feed666",
            "title": "AverageVacuumThrust",
            "title*": {"en": "Average Vacuum Thrust"},
            "description": "This is an autogenerated partial class definition of 'AverageVacuumThrust'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAverageVacuumThrustValue",
            "@context": [
                "/wiki/Category:OSWc92f6543cf0b54d0a5082ef1e67267ad?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb1a42fde02475c6db7d2b8121feed666"]


class SuperconductorEnergyGap(GapEnergy):
    """
    "Superconductor Energy Gap" is the width of the forbidden energy band in a superconductor.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3914f80e-373d-5d1f-9a6d-f3a8643ce608",
            "title": "SuperconductorEnergyGap",
            "title*": {"en": "Superconductor Energy Gap"},
            "description": '"Superconductor Energy Gap" is the width of the forbidden energy band in a superconductor.',
            "description*": {
                "en": '"Superconductor Energy Gap" is the width of the forbidden energy band in a superconductor.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSuperconductorEnergyGapValue",
            "@context": [
                "/wiki/Category:OSW78b09fe474c85bf09529d7eb3db0fe78?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3914f80e373d5d1f9a6df3a8643ce608"]


class PressureRatio(DimensionlessRatio):
    """
    This is an autogenerated partial class definition of 'PressureRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7014422e-d349-57de-9d4c-a0fb6e3d74d3",
            "title": "PressureRatio",
            "title*": {"en": "Pressure Ratio"},
            "description": "This is an autogenerated partial class definition of 'PressureRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPressureRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7014422ed34957de9d4ca0fb6e3d74d3"]


class RelativePartialPressure(PressureRatio):
    """
    This is an autogenerated partial class definition of 'RelativePartialPressure'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "99edcb0b-ac12-560f-a33d-6af42aecad67",
            "title": "RelativePartialPressure",
            "title*": {"en": "Relative Partial Pressure"},
            "description": "This is an autogenerated partial class definition of 'RelativePartialPressure'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRelativePartialPressureValue",
            "@context": [
                "/wiki/Category:OSW7014422ed34957de9d4ca0fb6e3d74d3?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW99edcb0bac12560fa33d6af42aecad67"]


class RelativeHumidity(RelativePartialPressure):
    """
    $\\textit{Relative Humidity}$ is the ratio of the partial pressure of water vapor in an air-water mixture to the saturated vapor pressure of water at a prescribed temperature.
      The relative humidity of air depends not only on temperature but also on the pressure of the system of interest.
      $$$$
      $\\textit{Relative Humidity}$ is also referred to as $\\textit{Relative Partial Pressure}$.
      $$$$
      Relative partial pressure is often referred to as $RH$ and expressed in percent.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a07538ca-42b9-5d66-9752-f58ab5db755f",
            "title": "RelativeHumidity",
            "title*": {"en": "Relative Humidity"},
            "description": "$\\textit{Relative Humidity}$ is the ratio of the partial pressure of water vapor in an air-water mixture to the saturated vapor pressure of water at a prescribed temperature. \n  The relative humidity of air depends not only on temperature but also on the pressure of the system of interest. \n  $$$$\n  $\\textit{Relative Humidity}$ is also referred to as $\\textit{Relative Partial Pressure}$. \n  $$$$\n  Relative partial pressure is often referred to as $RH$ and expressed in percent.",
            "description*": {
                "en": "$\\textit{Relative Humidity}$ is the ratio of the partial pressure of water vapor in an air-water mixture to the saturated vapor pressure of water at a prescribed temperature. \n  The relative humidity of air depends not only on temperature but also on the pressure of the system of interest. \n  $$$$\n  $\\textit{Relative Humidity}$ is also referred to as $\\textit{Relative Partial Pressure}$. \n  $$$$\n  Relative partial pressure is often referred to as $RH$ and expressed in percent."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRelativeHumidityValue",
            "@context": [
                "/wiki/Category:OSW99edcb0bac12560fa33d6af42aecad67?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa07538ca42b95d669752f58ab5db755f"]


class LineicPowerUnit(UnitEnum):
    watt_per_meter = "Item:OSW4cf53c813d36501db82ba5b6ac1a48bf"


class LineicPower(QuantityValue):
    """
    Leistung dividiert durch die zugehörige Länge
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "eb347cbb-d41e-5a9a-a876-a7024a75a33b",
            "title": "LineicPower",
            "title*": {"en": "Lineic power"},
            "description": "Leistung dividiert durch die zugehörige Länge",
            "description*": {"en": "Leistung dividiert durch die zugehörige Länge"},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLineicPowerValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWeb347cbbd41e5a9aa876a7024a75a33b"]
    unit: Optional[LineicPowerUnit] = Field(
        LineicPowerUnit.watt_per_meter,
        options={"enum_titles": ["W/m"]},
        title="LineicPowerUnit",
        x_enum_varnames=["watt_per_meter"],
    )


class AreaTemperatureUnit(UnitEnum):
    kelvin_meter_squared = "Item:OSWe74a789a7a8c5e499c23e49bd2a6b220"


class AreaTemperature(QuantityValue):
    """
    This is an autogenerated partial class definition of 'AreaTemperature'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "2c27b4cb-42c8-5429-9931-e28ebd6a601b",
            "title": "AreaTemperature",
            "title*": {"en": "Area Temperature"},
            "description": "This is an autogenerated partial class definition of 'AreaTemperature'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAreaTemperatureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2c27b4cb42c854299931e28ebd6a601b"]
    unit: Optional[AreaTemperatureUnit] = Field(
        AreaTemperatureUnit.kelvin_meter_squared,
        options={"enum_titles": ["m²·K"]},
        title="AreaTemperatureUnit",
        x_enum_varnames=["kelvin_meter_squared"],
    )


class LinearDensityUnit(UnitEnum):
    kilo_gram_per_meter = (
        "Item:OSW0429f89d17e6572fac6630caa443c336#OSW1e1793e6b72454f1a81b08eabc8272b7"
    )


class LinearDensity(QuantityValue):
    """
    The Linear density, linear mass density or linear mass is a measure of mass per unit of length, and it is a characteristic of strings or other one-dimensional objects.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "fd1bbc69-7842-5fe9-8695-74ec4a5976a6",
            "title": "LinearDensity",
            "title*": {"en": "Linear Density"},
            "description": "The Linear density, linear mass density or linear mass is a measure of mass per unit of length, and it is a characteristic of strings or other one-dimensional objects.",
            "description*": {
                "en": "The Linear density, linear mass density or linear mass is a measure of mass per unit of length, and it is a characteristic of strings or other one-dimensional objects."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLinearDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfd1bbc6978425fe9869574ec4a5976a6"]
    unit: Optional[LinearDensityUnit] = Field(
        LinearDensityUnit.kilo_gram_per_meter,
        options={"enum_titles": ["kg/m"]},
        title="LinearDensityUnit",
        x_enum_varnames=["kilo_gram_per_meter"],
    )


class SpecificSurfaceAreaUnit(UnitEnum):
    meter_squared_per_kilo_gram = (
        "Item:OSWd7015166d39d5cae866a40eac3d51896#OSWc811db362efa5d33a49b56ffdd77e54d"
    )


class SpecificSurfaceArea(QuantityValue):
    """
    Specific surface area (SSA) is a property of solids defined as the total surface area (SA) of a material per unit mass, (with units of m²/kg or m²/g). It is a physical value that can be used to determine the type and properties of a material (e.g. soil or snow). It has a particular importance for adsorption, heterogeneous catalysis, and reactions on surfaces.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "64f92421-7a41-523d-9fc5-e51c4be68e08",
            "title": "SpecificSurfaceArea",
            "title*": {"en": "Specific Surface Area"},
            "description": "Specific surface area (SSA) is a property of solids defined as the total surface area (SA) of a material per unit mass, (with units of m²/kg or m²/g). It is a physical value that can be used to determine the type and properties of a material (e.g. soil or snow). It has a particular importance for adsorption, heterogeneous catalysis, and reactions on surfaces.",
            "description*": {
                "en": "Specific surface area (SSA) is a property of solids defined as the total surface area (SA) of a material per unit mass, (with units of m²/kg or m²/g). It is a physical value that can be used to determine the type and properties of a material (e.g. soil or snow). It has a particular importance for adsorption, heterogeneous catalysis, and reactions on surfaces."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificSurfaceAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW64f924217a41523d9fc5e51c4be68e08"]
    unit: Optional[SpecificSurfaceAreaUnit] = Field(
        SpecificSurfaceAreaUnit.meter_squared_per_kilo_gram,
        options={"enum_titles": ["m²/kg"]},
        title="SpecificSurfaceAreaUnit",
        x_enum_varnames=["meter_squared_per_kilo_gram"],
    )


class CombustionChamberTemperature(ThermodynamicTemperature):
    """
    This is an autogenerated partial class definition of 'CombustionChamberTemperature'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "61a93711-a8ed-5cf8-9974-2f6750b3b13c",
            "title": "CombustionChamberTemperature",
            "title*": {"en": "Combustion Chamber Temperature"},
            "description": "This is an autogenerated partial class definition of 'CombustionChamberTemperature'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCombustionChamberTemperatureValue",
            "@context": [
                "/wiki/Category:OSW69b648b4fe1a5607b167a699f899be87?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW61a93711a8ed5cf899742f6750b3b13c"]


class SpecificHelmholtzEnergy(SpecificEnergy):
    """
    $\\textit{Specific Helmholtz Energy}$ is a "corresponding intensive property",
        which is $\\textit{Helmholz Energy}$ per mass of substance involved.
      Energy has corresponding intensive (size-independent) properties for pure materials.
      $\\textit{Specific Helmholz Energy}$ is denoted by a lower case $u$,
       with dimension of energy per mass (SI unit: $joule/kg$).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c9afe669-10a3-5665-b674-df1fa788f6c0",
            "title": "SpecificHelmholtzEnergy",
            "title*": {"en": "Specific Helmholtz Energy"},
            "description": '$\\textit{Specific Helmholtz Energy}$ is a "corresponding intensive property",\n    which is $\\textit{Helmholz Energy}$ per mass of substance involved.\n  Energy has corresponding intensive (size-independent) properties for pure materials. \n  $\\textit{Specific Helmholz Energy}$ is denoted by a lower case $u$,\n   with dimension of energy per mass (SI unit: $joule/kg$).',
            "description*": {
                "en": '$\\textit{Specific Helmholtz Energy}$ is a "corresponding intensive property",\n    which is $\\textit{Helmholz Energy}$ per mass of substance involved.\n  Energy has corresponding intensive (size-independent) properties for pure materials. \n  $\\textit{Specific Helmholz Energy}$ is denoted by a lower case $u$,\n   with dimension of energy per mass (SI unit: $joule/kg$).'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificHelmholtzEnergyValue",
            "@context": [
                "/wiki/Category:OSW9a32b5a84f235a0cb0a9e9fba9bd252e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc9afe66910a35665b674df1fa788f6c0"]


class Irradiance(PowerPerArea):
    """
    Irradiance and Radiant Emittance are radiometry terms for the power per unit area of electromagnetic radiation at a surface. "Irradiance" is used when the electromagnetic radiation is incident on the surface. "Radiant emmitance" (or "radiant exitance") is used when the radiation is emerging from the surface.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "4f181df1-bf2d-5e88-a36f-e5585cb10b8b",
            "title": "Irradiance",
            "title*": {"en": "Irradiance", "de": "Bestrahlungsstärke"},
            "description": 'Irradiance and Radiant Emittance are radiometry terms for the power per unit area of electromagnetic radiation at a surface. "Irradiance" is used when the electromagnetic radiation is incident on the surface. "Radiant emmitance" (or "radiant exitance") is used when the radiation is emerging from the surface.',
            "description*": {
                "en": 'Irradiance and Radiant Emittance are radiometry terms for the power per unit area of electromagnetic radiation at a surface. "Irradiance" is used when the electromagnetic radiation is incident on the surface. "Radiant emmitance" (or "radiant exitance") is used when the radiation is emerging from the surface.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasIrradianceValue",
            "@context": [
                "/wiki/Category:OSW40c46aba16f45962a7330b7f8b88681e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4f181df1bf2d5e88a36fe5585cb10b8b"]


class AreaPerLengthUnit(UnitEnum):
    meter = "Item:OSWf63766f7c83852d7a1d8e12deeee90c7"


class AreaPerLength(QuantityValue):
    """
    Measure used to indicate the surface area of structural steel per unit length of the steel part.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "c579ba41-d140-59ce-8527-252f610fd8bf",
            "title": "AreaPerLength",
            "title*": {"en": "Area per length", "de": "Fläche pro Längeneinheit"},
            "description": "Measure used to indicate the surface area of structural steel per unit length of the steel part.",
            "description*": {
                "en": "Measure used to indicate the surface area of structural steel per unit length of the steel part."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAreaPerLengthValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc579ba41d14059ce8527252f610fd8bf"]
    unit: Optional[AreaPerLengthUnit] = Field(
        AreaPerLengthUnit.meter,
        options={"enum_titles": ["m²/m"]},
        title="AreaPerLengthUnit",
        x_enum_varnames=["meter"],
    )


class IsentropicCompressibilityUnit(UnitEnum):
    per_pascal = "Item:OSWf030abd4441d52a7a8c5f84950985ea4"


class IsentropicCompressibility(QuantityValue):
    """
    Isentropic compressibility is the extent to which a material reduces its volume when it is subjected to compressive stresses at a constant value of entropy.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "cb348455-e271-512e-9daf-d64590f71d78",
            "title": "IsentropicCompressibility",
            "title*": {"en": "Isentropic Compressibility"},
            "description": "Isentropic compressibility is the extent to which a material reduces its volume when it is subjected to compressive stresses at a constant value of entropy.",
            "description*": {
                "en": "Isentropic compressibility is the extent to which a material reduces its volume when it is subjected to compressive stresses at a constant value of entropy."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasIsentropicCompressibilityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcb348455e271512e9dafd64590f71d78"]
    unit: Optional[IsentropicCompressibilityUnit] = Field(
        IsentropicCompressibilityUnit.per_pascal,
        options={"enum_titles": ["1/Pa"]},
        title="IsentropicCompressibilityUnit",
        x_enum_varnames=["per_pascal"],
    )


class CubicElectricDipoleMomentPerSquareEnergyUnit(UnitEnum):
    coulomb_cubed_meter_per_joule_squared = "Item:OSWbf685bb28c9b5d15ab98238af18f1f74"


class CubicElectricDipoleMomentPerSquareEnergy(QuantityValue):
    """
    This is an autogenerated partial class definition of 'CubicElectricDipoleMomentPerSquareEnergy'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "d39e5791-31ea-5e82-9bcd-150c6cf0a86c",
            "title": "CubicElectricDipoleMomentPerSquareEnergy",
            "title*": {"en": "Cubic Electric Dipole Moment per Square Energy"},
            "description": "This is an autogenerated partial class definition of 'CubicElectricDipoleMomentPerSquareEnergy'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCubicElectricDipoleMomentPerSquareEnergyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd39e579131ea5e829bcd150c6cf0a86c"]
    unit: Optional[CubicElectricDipoleMomentPerSquareEnergyUnit] = Field(
        CubicElectricDipoleMomentPerSquareEnergyUnit.coulomb_cubed_meter_per_joule_squared,
        options={"enum_titles": ["C³·m/J²"]},
        title="CubicElectricDipoleMomentPerSquareEnergyUnit",
        x_enum_varnames=["coulomb_cubed_meter_per_joule_squared"],
    )


class PressureInRelationToVolumeFlowRateUnit(UnitEnum):
    pascal_second_per_meter_cubed = "Item:OSW975f79935c9f543caaec4538d778a2f5"


class PressureInRelationToVolumeFlowRate(QuantityValue):
    """
    This is an autogenerated partial class definition of 'PressureInRelationToVolumeFlowRate'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "b56d7016-32ee-5ee3-afe3-ef624ae41753",
            "title": "PressureInRelationToVolumeFlowRate",
            "title*": {"en": "Pressure in relation to volume flow rate"},
            "description": "This is an autogenerated partial class definition of 'PressureInRelationToVolumeFlowRate'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPressureInRelationToVolumeFlowRateValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb56d701632ee5ee3afe3ef624ae41753"]
    unit: Optional[PressureInRelationToVolumeFlowRateUnit] = Field(
        PressureInRelationToVolumeFlowRateUnit.pascal_second_per_meter_cubed,
        options={"enum_titles": ["Pa·s/m³"]},
        title="PressureInRelationToVolumeFlowRateUnit",
        x_enum_varnames=["pascal_second_per_meter_cubed"],
    )


class NucleonNumber(Count):
    """
    Number of nucleons in an atomic nucleus.A = Z+N. Nuclides with the same value of A are called isobars.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "5644ec02-a843-5f74-946c-883721c162c0",
            "title": "NucleonNumber",
            "title*": {"en": "Nucleon number", "de": "Nukleonenzahl"},
            "description": "Number of nucleons in an atomic nucleus.A = Z+N. Nuclides with the same value of A are called isobars.",
            "description*": {
                "en": "Number of nucleons in an atomic nucleus.A = Z+N. Nuclides with the same value of A are called isobars."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasNucleonNumberValue",
            "@context": [
                "/wiki/Category:OSWb0250d3677f6592f9d4329c8b9d5f8d1?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW5644ec02a8435f74946c883721c162c0"]


class SpecificPowerUnit(UnitEnum):
    gray_per_second = "Item:OSW4cbc32faa6945fea85c32ee675aff008"


class SpecificPower(QuantityValue):
    """
    Specific power, also known as power-to-weight ratio, is the amount of power output per unit mass of the power source. It is generally used to measure the performance of that power source. The higher the ratio, the more power a system produces relative to its weight. It's commonly used in the automotive and aerospace industries to compare the performance of different engines. It's generally measured in watts per kilogram (W/kg) or horsepower per pound (hp/lb).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "592625bd-38e7-5a4e-87d8-66ef370b8a6c",
            "title": "SpecificPower",
            "title*": {"en": "Specific Power"},
            "description": "Specific power, also known as power-to-weight ratio, is the amount of power output per unit mass of the power source. It is generally used to measure the performance of that power source. The higher the ratio, the more power a system produces relative to its weight. It's commonly used in the automotive and aerospace industries to compare the performance of different engines. It's generally measured in watts per kilogram (W/kg) or horsepower per pound (hp/lb).",
            "description*": {
                "en": "Specific power, also known as power-to-weight ratio, is the amount of power output per unit mass of the power source. It is generally used to measure the performance of that power source. The higher the ratio, the more power a system produces relative to its weight. It's commonly used in the automotive and aerospace industries to compare the performance of different engines. It's generally measured in watts per kilogram (W/kg) or horsepower per pound (hp/lb)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificPowerValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW592625bd38e75a4e87d866ef370b8a6c"]
    unit: Optional[SpecificPowerUnit] = Field(
        SpecificPowerUnit.gray_per_second,
        options={"enum_titles": ["Gy/s"]},
        title="SpecificPowerUnit",
        x_enum_varnames=["gray_per_second"],
    )


class ElectricalPowerToMassRatio(SpecificPower):
    """
    This is an autogenerated partial class definition of 'ElectricalPowerToMassRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "888d4417-94f3-5e2c-a121-9afab29d38d4",
            "title": "ElectricalPowerToMassRatio",
            "title*": {"en": "Electrical Power To Mass Ratio"},
            "description": "This is an autogenerated partial class definition of 'ElectricalPowerToMassRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricalPowerToMassRatioValue",
            "@context": [
                "/wiki/Category:OSW592625bd38e75a4e87d866ef370b8a6c?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW888d441794f35e2ca1219afab29d38d4"]


class MeanFreePath(Length):
    """
    "Mean Free Path" is the average distance travelled by a moving particle (such as an atom, a molecule, a photon) between successive impacts (collisions) which modify its direction or energy or other particle properties.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "79e48880-4697-561c-90bd-9fe6081b7747",
            "title": "MeanFreePath",
            "title*": {"en": "Mean Free Path"},
            "description": '"Mean Free Path" is the average distance travelled by a moving particle (such as an atom, a molecule, a photon) between successive impacts (collisions) which modify its direction or energy or other particle properties.',
            "description*": {
                "en": '"Mean Free Path" is the average distance travelled by a moving particle (such as an atom, a molecule, a photon) between successive impacts (collisions) which modify its direction or energy or other particle properties.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMeanFreePathValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW79e488804697561c90bd9fe6081b7747"]


class TemperaturePerMagneticFluxDensityUnit(UnitEnum):
    kelvin_per_tesla = "Item:OSW5b9ccf8109b457aca03dbd2a487500ed"


class TemperaturePerMagneticFluxDensity(QuantityValue):
    """
    This is an autogenerated partial class definition of 'TemperaturePerMagneticFluxDensity'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "844bb46f-ae87-52d2-b8e7-f59939d7e47d",
            "title": "TemperaturePerMagneticFluxDensity",
            "title*": {"en": "Temperature per Magnetic Flux Density"},
            "description": "This is an autogenerated partial class definition of 'TemperaturePerMagneticFluxDensity'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTemperaturePerMagneticFluxDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW844bb46fae8752d2b8e7f59939d7e47d"]
    unit: Optional[TemperaturePerMagneticFluxDensityUnit] = Field(
        TemperaturePerMagneticFluxDensityUnit.kelvin_per_tesla,
        options={"enum_titles": ["K/T"]},
        title="TemperaturePerMagneticFluxDensityUnit",
        x_enum_varnames=["kelvin_per_tesla"],
    )


class ElectricFieldStrengthUnit(UnitEnum):
    volt_per_meter = "Item:OSWd855ce693a6d5d3d8bdf5846093ae4fb"
    kilo_volt_per_meter = (
        "Item:OSWd855ce693a6d5d3d8bdf5846093ae4fb#OSW9315a6f234fa567497c5344f4360ac89"
    )
    milli_volt_per_meter = (
        "Item:OSWd855ce693a6d5d3d8bdf5846093ae4fb#OSWed56aa34d47a55a5bb40bc28cd4b1533"
    )
    volt_per_milli_meter = (
        "Item:OSWd855ce693a6d5d3d8bdf5846093ae4fb#OSW5503cb893f635d3a955c6be99f588596"
    )
    micro_volt_per_meter = (
        "Item:OSWd855ce693a6d5d3d8bdf5846093ae4fb#OSWe9e5b5d155c95fc9b3bc6f1ef6a63fa0"
    )
    mega_volt_per_meter = (
        "Item:OSWd855ce693a6d5d3d8bdf5846093ae4fb#OSWac4536de9cb25c1db8f0eb9f66e3fa25"
    )
    volt_per_centi_meter = (
        "Item:OSWd855ce693a6d5d3d8bdf5846093ae4fb#OSW68aa46316f8b5bfc83102870e2c9c5b4"
    )


class ElectricFieldStrength(QuantityValue):
    """
    $\\textit{Electric Field Strength}$ is the magnitude and direction of an electric field, expressed by the value of $E$, also referred to as $\color{indigo} {\textit{electric field intensity}}$ or simply the electric field.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "c66c35bc-f6bd-5b08-a2e9-763d78a082cb",
            "title": "ElectricFieldStrength",
            "title*": {"en": "Electric field strength", "de": "Elektrische Feldstärke"},
            "description": "$\\textit{Electric Field Strength}$ is the magnitude and direction of an electric field, expressed by the value of $E$, also referred to as $\\color{indigo} {\\textit{electric field intensity}}$ or simply the electric field.",
            "description*": {
                "en": "$\\textit{Electric Field Strength}$ is the magnitude and direction of an electric field, expressed by the value of $E$, also referred to as $\\color{indigo} {\\textit{electric field intensity}}$ or simply the electric field."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricFieldStrengthValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc66c35bcf6bd5b08a2e9763d78a082cb"]
    unit: Optional[ElectricFieldStrengthUnit] = Field(
        ElectricFieldStrengthUnit.volt_per_meter,
        options={
            "enum_titles": ["V/m", "kV/m", "mV/m", "V/mm", "µV/m", "MV/m", "V/cm"]
        },
        title="ElectricFieldStrengthUnit",
        x_enum_varnames=[
            "volt_per_meter",
            "kilo_volt_per_meter",
            "milli_volt_per_meter",
            "volt_per_milli_meter",
            "micro_volt_per_meter",
            "mega_volt_per_meter",
            "volt_per_centi_meter",
        ],
    )


class SignalStrength(ElectricFieldStrength):
    """
    In telecommunications, particularly in radio, signal strength refers to the magnitude of the electric field at a reference point that is a significant distance from the transmitting antenna. It may also be referred to as received signal level or field strength. Typically, it is expressed in voltage per length or signal power received by a reference antenna. High-powered transmissions, such as those used in broadcasting, are expressed in dB-millivolts per metre (dBmV/m).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2b4e65f2-6005-5114-87ca-6d47b859e932",
            "title": "SignalStrength",
            "title*": {"en": "Signal Strength"},
            "description": "In telecommunications, particularly in radio, signal strength refers to the magnitude of the electric field at a reference point that is a significant distance from the transmitting antenna. It may also be referred to as received signal level or field strength. Typically, it is expressed in voltage per length or signal power received by a reference antenna. High-powered transmissions, such as those used in broadcasting, are expressed in dB-millivolts per metre (dBmV/m).",
            "description*": {
                "en": "In telecommunications, particularly in radio, signal strength refers to the magnitude of the electric field at a reference point that is a significant distance from the transmitting antenna. It may also be referred to as received signal level or field strength. Typically, it is expressed in voltage per length or signal power received by a reference antenna. High-powered transmissions, such as those used in broadcasting, are expressed in dB-millivolts per metre (dBmV/m)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSignalStrengthValue",
            "@context": [
                "/wiki/Category:OSWc66c35bcf6bd5b08a2e9763d78a082cb?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2b4e65f26005511487ca6d47b859e932"]


class VolumetricFluxUnit(UnitEnum):
    milli_liter_per_centi_meter_squared_per_minute = (
        "Item:OSW832931cbeded5692a611f7752ee6cf4c"
    )


class VolumetricFlux(QuantityValue):
    """
    In fluid dynamics, the volumetric flux is the rate of volume flow across a unit area (m3·s−1·m−2).[Wikipedia]
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "5df3876a-5923-5801-acdf-9ee4970f8324",
            "title": "VolumetricFlux",
            "title*": {"en": "Volumetric Flux"},
            "description": "In fluid dynamics, the volumetric flux is the rate of volume flow across a unit area (m3·s−1·m−2).[Wikipedia]",
            "description*": {
                "en": "In fluid dynamics, the volumetric flux is the rate of volume flow across a unit area (m3·s−1·m−2).[Wikipedia]"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVolumetricFluxValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW5df3876a59235801acdf9ee4970f8324"]
    unit: Optional[VolumetricFluxUnit] = Field(
        VolumetricFluxUnit.milli_liter_per_centi_meter_squared_per_minute,
        options={"enum_titles": ["mL/(cm²·min)"]},
        title="VolumetricFluxUnit",
        x_enum_varnames=["milli_liter_per_centi_meter_squared_per_minute"],
    )


class CurieTemperature(Temperature):
    """
    "Curie Temperature" is the critical thermodynamic temperature of a ferromagnet.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0b0a3633-0fb3-5c46-b179-79e278ed3242",
            "title": "CurieTemperature",
            "title*": {"en": "Curie temperature", "de": "Curie-Temperatur"},
            "description": '"Curie Temperature" is the critical thermodynamic temperature of a ferromagnet.',
            "description*": {
                "en": '"Curie Temperature" is the critical thermodynamic temperature of a ferromagnet.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCurieTemperatureValue",
            "@context": [
                "/wiki/Category:OSW20927e4900e95e93985698c92995f964?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0b0a36330fb35c46b17979e278ed3242"]


class GaugePressure(Pressure):
    """
    Gauge Pressure is the pressure of a system relative to the pressure of the surrounding atmosphere.
    It is the difference between the absolute pressure and the atmospheric pressure. Gauge pressure is positive for pressures
    above atmospheric pressure and negative for pressures below it. A Quantity in QUDT having a QuantityKind of GaugePressure
    would typically also assert the value of qudt:isDeltaQuantity to be true, indicating that the value is a difference between
    two pressures.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "9807945e-f51e-5e71-af33-9c5b6984f693",
            "title": "GaugePressure",
            "title*": {"en": "Gauge Pressure"},
            "description": "Gauge Pressure is the pressure of a system relative to the pressure of the surrounding atmosphere. \nIt is the difference between the absolute pressure and the atmospheric pressure. Gauge pressure is positive for pressures \nabove atmospheric pressure and negative for pressures below it. A Quantity in QUDT having a QuantityKind of GaugePressure\nwould typically also assert the value of qudt:isDeltaQuantity to be true, indicating that the value is a difference between\ntwo pressures.",
            "description*": {
                "en": "Gauge Pressure is the pressure of a system relative to the pressure of the surrounding atmosphere. \nIt is the difference between the absolute pressure and the atmospheric pressure. Gauge pressure is positive for pressures \nabove atmospheric pressure and negative for pressures below it. A Quantity in QUDT having a QuantityKind of GaugePressure\nwould typically also assert the value of qudt:isDeltaQuantity to be true, indicating that the value is a difference between\ntwo pressures."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasGaugePressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9807945ef51e5e71af339c5b6984f693"]


class EnergyDensity(QuantityValue):
    """
    Energy density is defined as energy per unit volume. The SI unit for energy density is the joule per cubic meter.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a7079f30-2242-50c9-b5d1-0367541f3c54",
            "title": "EnergyDensity",
            "title*": {"en": "Energy Density"},
            "description": "Energy density is defined as energy per unit volume. The SI unit for energy density is the joule per cubic meter.",
            "description*": {
                "en": "Energy density is defined as energy per unit volume. The SI unit for energy density is the joule per cubic meter."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnergyDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa7079f30224250c9b5d10367541f3c54"]
    unit: Optional[EnergyDensityUnit] = Field(
        EnergyDensityUnit.joule_per_meter_cubed,
        options={"enum_titles": ["J/m³", "MJ/m³"]},
        title="EnergyDensityUnit",
        x_enum_varnames=["joule_per_meter_cubed", "mega_joule_per_meter_cubed"],
    )


class Area(QuantityValue):
    """
    Area is a quantity expressing the two-dimensional size of a defined part of a surface, typically a region bounded by a closed curve.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "1fcf1694-712e-5684-8850-71efdf775bd9",
            "title": "Area",
            "title*": {"en": "Area", "de": "Fläche"},
            "description": "Area is a quantity expressing the two-dimensional size of a defined part of a surface, typically a region bounded by a closed curve.",
            "description*": {
                "en": "Area is a quantity expressing the two-dimensional size of a defined part of a surface, typically a region bounded by a closed curve."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1fcf1694712e5684885071efdf775bd9"]
    unit: Optional[AreaUnit] = Field(
        AreaUnit.meter_squared,
        options={"enum_titles": ["m²", "dm²", "mm²", "nm²", "cm²", "μm²"]},
        title="AreaUnit",
        x_enum_varnames=[
            "meter_squared",
            "deci_meter_squared",
            "milli_meter_squared",
            "nano_meter_squared",
            "centi_meter_squared",
            "micro_meter_squared",
        ],
    )


class AreicMass(MassPerArea):
    """
    This is an autogenerated partial class definition of 'AreicMass'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "801c5206-7ff2-5e99-b4c8-96d99f25aa06",
            "title": "AreicMass",
            "title*": {"en": "Areic mass"},
            "description": "This is an autogenerated partial class definition of 'AreicMass'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAreicMassValue",
            "@context": [
                "/wiki/Category:OSWb9612bfb909c5eab9e57e8d8a6c86082?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW801c52067ff25e99b4c896d99f25aa06"]


class Force(QuantityValue):
    """
    "Force" is an influence that causes mass to accelerate. It may be experienced as a lift, a push, or a pull. Force is defined by Newton's Second Law as $F = m \times a $, where $F$ is force, $m$ is mass and $a$ is acceleration. Net force is mathematically equal to the time rate of change of the momentum of the body on which it acts. Since momentum is a vector quantity (has both a magnitude and direction), force also is a vector quantity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "1b832c1a-42c0-55eb-9669-bb0cdda18d7f",
            "title": "Force",
            "title*": {"en": "Force", "de": "Kraft"},
            "description": '"Force" is an influence that causes mass to accelerate. It may be experienced as a lift, a push, or a pull. Force is defined by Newton\'s Second Law as $F = m \\times a $, where $F$ is force, $m$ is mass and $a$ is acceleration. Net force is mathematically equal to the time rate of change of the momentum of the body on which it acts. Since momentum is a vector quantity (has both a magnitude and direction), force also is a vector quantity.',
            "description*": {
                "en": '"Force" is an influence that causes mass to accelerate. It may be experienced as a lift, a push, or a pull. Force is defined by Newton\'s Second Law as $F = m \\times a $, where $F$ is force, $m$ is mass and $a$ is acceleration. Net force is mathematically equal to the time rate of change of the momentum of the body on which it acts. Since momentum is a vector quantity (has both a magnitude and direction), force also is a vector quantity.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasForceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1b832c1a42c055eb9669bb0cdda18d7f"]
    unit: Optional[ForceUnit] = Field(
        ForceUnit.newton,
        options={"enum_titles": ["N", "mN", "MN", "kN", "μN"]},
        title="ForceUnit",
        x_enum_varnames=[
            "newton",
            "milli_newton",
            "mega_newton",
            "kilo_newton",
            "micro_newton",
        ],
    )


class LiquidVolume(Volume):
    """
    Liquid volume is the volume of a given amount of liquid, that is, the amount of space a liquid takes up. There are a number of different units used to measure liquid volume, but most of them fall under either the metric system of measurement or the Imperial system of measurement.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "d4fab903-0165-5967-a4fd-a944db63c694",
            "title": "LiquidVolume",
            "title*": {"en": "Liquid Volume"},
            "description": "Liquid volume is the volume of a given amount of liquid, that is, the amount of space a liquid takes up. There are a number of different units used to measure liquid volume, but most of them fall under either the metric system of measurement or the Imperial system of measurement.",
            "description*": {
                "en": "Liquid volume is the volume of a given amount of liquid, that is, the amount of space a liquid takes up. There are a number of different units used to measure liquid volume, but most of them fall under either the metric system of measurement or the Imperial system of measurement."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLiquidVolumeValue",
            "@context": [
                "/wiki/Category:OSWf5c54cd70ddf5ff3b1ef1aee6ae8f0cb?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd4fab90301655967a4fda944db63c694"]


class LengthRatio(DimensionlessRatio):
    """
    This is an autogenerated partial class definition of 'LengthRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "031793bb-135f-5bab-91e4-6bbf96621f93",
            "title": "LengthRatio",
            "title*": {"en": "Length Ratio"},
            "description": "This is an autogenerated partial class definition of 'LengthRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLengthRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW031793bb135f5bab91e46bbf96621f93"]


class LinearStrain(LengthRatio):
    """
    A strain is a normalized measure of deformation representing the displacement between particles in the body relative to a reference length.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0c6e03c0-1296-556a-ba2d-7ac65750357e",
            "title": "LinearStrain",
            "title*": {"en": "Linear Strain"},
            "description": "A strain is a normalized measure of deformation representing the displacement between particles in the body relative to a reference length.",
            "description*": {
                "en": "A strain is a normalized measure of deformation representing the displacement between particles in the body relative to a reference length."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLinearStrainValue",
            "@context": [
                "/wiki/Category:OSW031793bb135f5bab91e46bbf96621f93?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0c6e03c01296556aba2d7ac65750357e"]


class MagneticAreaMomentUnit(UnitEnum):
    ampere_meter_squared = "Item:OSWa0a0662b7e5b53f79c6d8bef841dd415"


class MagneticAreaMoment(QuantityValue):
    """
    "Magnetic Area Moment", for a magnetic dipole, is a vector quantity equal to the product of the current, the loop area, and the unit vector normal to the loop plane, the direction of which corresponds to the loop orientation. "Magnetic Area Moment" is also referred to as "Magnetic Moment".
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "25caa895-8ec0-5221-a2bd-22dbef7b9074",
            "title": "MagneticAreaMoment",
            "title*": {"en": "Magnetic Area Moment"},
            "description": '"Magnetic Area Moment", for a magnetic dipole, is a vector quantity equal to the product of the current, the loop area, and the unit vector normal to the loop plane, the direction of which corresponds to the loop orientation. "Magnetic Area Moment" is also referred to as "Magnetic Moment".',
            "description*": {
                "en": '"Magnetic Area Moment", for a magnetic dipole, is a vector quantity equal to the product of the current, the loop area, and the unit vector normal to the loop plane, the direction of which corresponds to the loop orientation. "Magnetic Area Moment" is also referred to as "Magnetic Moment".'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMagneticAreaMomentValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW25caa8958ec05221a2bd22dbef7b9074"]
    unit: Optional[MagneticAreaMomentUnit] = Field(
        MagneticAreaMomentUnit.ampere_meter_squared,
        options={"enum_titles": ["A·m²"]},
        title="MagneticAreaMomentUnit",
        x_enum_varnames=["ampere_meter_squared"],
    )


class ElectricChargePerArea(QuantityValue):
    """
    In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively. The respective SI units are $C \cdot m^{-1}$, $C \cdot m^{-2}$ or $C \cdot m^{-3}$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4f0b36ae-dcac-5f4d-afcc-0eaec8eb86dd",
            "title": "ElectricChargePerArea",
            "title*": {"en": "Electric charge per area"},
            "description": "In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively. The respective SI units are $C \\cdot m^{-1}$, $C \\cdot m^{-2}$ or $C \\cdot m^{-3}$.",
            "description*": {
                "en": "In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively. The respective SI units are $C \\cdot m^{-1}$, $C \\cdot m^{-2}$ or $C \\cdot m^{-3}$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricChargePerAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4f0b36aedcac5f4dafcc0eaec8eb86dd"]
    unit: Optional[ElectricChargePerAreaUnit] = Field(
        ElectricChargePerAreaUnit.coulomb_per_meter_squared,
        options={
            "enum_titles": [
                "C/m²",
                "μC/m²",
                "mC/m²",
                "C/mm²",
                "C/cm²",
                "MC/m²",
                "kC/m²",
            ]
        },
        title="ElectricChargePerAreaUnit",
        x_enum_varnames=[
            "coulomb_per_meter_squared",
            "micro_coulomb_per_meter_squared",
            "milli_coulomb_per_meter_squared",
            "coulomb_per_milli_meter_squared",
            "coulomb_per_centi_meter_squared",
            "mega_coulomb_per_meter_squared",
            "kilo_coulomb_per_meter_squared",
        ],
    )


class BurnRate(Velocity):
    """
    This is an autogenerated partial class definition of 'BurnRate'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b48038c5-3db8-52e4-adb4-dabd954c764c",
            "title": "BurnRate",
            "title*": {"en": "Burn Rate"},
            "description": "This is an autogenerated partial class definition of 'BurnRate'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasBurnRateValue",
            "@context": [
                "/wiki/Category:OSW397c67ece63a5a5c96bad9349f49f3d7?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb48038c53db852e4adb4dabd954c764c"]


class MagnetizationField(ElectricCurrentPerLength):
    """
    The Magnetization Field is defined as the ratio of magnetic moment per unit volume. It is a vector-valued quantity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "656dd9cc-2233-59e3-bc88-b114c9e4c231",
            "title": "MagnetizationField",
            "title*": {"en": "Magnetization Field"},
            "description": "The Magnetization Field is defined as the ratio of magnetic moment per unit volume. It is a vector-valued quantity.",
            "description*": {
                "en": "The Magnetization Field is defined as the ratio of magnetic moment per unit volume. It is a vector-valued quantity."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMagnetizationFieldValue",
            "@context": [
                "/wiki/Category:OSW8ba7ac8b06c453e2885cc41c9d9ee0bb?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW656dd9cc223359e3bc88b114c9e4c231"]


class SoundPressureLevelUnit(UnitEnum):
    byte = "Item:OSW20ac6724f1a05ee884222d546955e78f"


class SoundPressureLevel(QuantityValue):
    """
    Sound pressure level ($SPL$) or sound level is a logarithmic measure of the effective sound pressure of a sound relative to a reference value. It is measured in decibels (dB) above a standard reference level.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "002d1585-49e9-55be-a02a-7c957b139a60",
            "title": "SoundPressureLevel",
            "title*": {"en": "Sound pressure level", "de": "Schalldruckpegel"},
            "description": "Sound pressure level ($SPL$) or sound level is a logarithmic measure of the effective sound pressure of a sound relative to a reference value. It is measured in decibels (dB) above a standard reference level.",
            "description*": {
                "en": "Sound pressure level ($SPL$) or sound level is a logarithmic measure of the effective sound pressure of a sound relative to a reference value. It is measured in decibels (dB) above a standard reference level."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSoundPressureLevelValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW002d158549e955bea02a7c957b139a60"]
    unit: Optional[SoundPressureLevelUnit] = Field(
        SoundPressureLevelUnit.byte,
        options={"enum_titles": ["B"]},
        title="SoundPressureLevelUnit",
        x_enum_varnames=["byte"],
    )


class RotationalMassUnit(UnitEnum):
    kilo_gram_meter_squared = "Item:OSWd211fc61709b5e48a4c96473c86a8d13"


class RotationalMass(QuantityValue):
    """
    "Rotational Mass" denotes the inertia of a body with respect to angular acceleration. It is usually measured in kg*m^2.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "e1ce3c92-78dd-5766-b37e-01a7c94e5445",
            "title": "RotationalMass",
            "title*": {"en": "Rotational Mass"},
            "description": '"Rotational Mass" denotes the inertia of a body with respect to angular acceleration. It is usually measured in kg*m^2.',
            "description*": {
                "en": '"Rotational Mass" denotes the inertia of a body with respect to angular acceleration. It is usually measured in kg*m^2.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRotationalMassValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe1ce3c9278dd5766b37e01a7c94e5445"]
    unit: Optional[RotationalMassUnit] = Field(
        RotationalMassUnit.kilo_gram_meter_squared,
        options={"enum_titles": ["kg·m²"]},
        title="RotationalMassUnit",
        x_enum_varnames=["kilo_gram_meter_squared"],
    )


class QuantumNumber(Dimensionless):
    """
    The "Quantum Number" describes values of conserved quantities in the dynamics of the quantum system. Perhaps the most peculiar aspect of quantum mechanics is the quantization of observable quantities, since quantum numbers are discrete sets of integers or half-integers.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a35c06b3-0b77-50c4-9dd5-3768ffd9e756",
            "title": "QuantumNumber",
            "title*": {"en": "Quantum Number"},
            "description": 'The "Quantum Number" describes values of conserved quantities in the dynamics of the quantum system. Perhaps the most peculiar aspect of quantum mechanics is the quantization of observable quantities, since quantum numbers are discrete sets of integers or half-integers.',
            "description*": {
                "en": 'The "Quantum Number" describes values of conserved quantities in the dynamics of the quantum system. Perhaps the most peculiar aspect of quantum mechanics is the quantization of observable quantities, since quantum numbers are discrete sets of integers or half-integers.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasQuantumNumberValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa35c06b30b7750c49dd53768ffd9e756"]


class ExhaustGasesSpecificHeat(SpecificHeatCapacity):
    """
    Specific heat of exhaust gases at constant pressure.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2435e3d4-17be-5441-8892-bf902cfc939a",
            "title": "ExhaustGasesSpecificHeat",
            "title*": {"en": "Exhaust Gases Specific Heat"},
            "description": "Specific heat of exhaust gases at constant pressure.",
            "description*": {
                "en": "Specific heat of exhaust gases at constant pressure."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasExhaustGasesSpecificHeatValue",
            "@context": [
                "/wiki/Category:OSW8fa2469531415841b65412f705d138d6?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2435e3d417be54418892bf902cfc939a"]


class ElectricCurrentPhasorUnit(UnitEnum):
    ampere = "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec"
    milli_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSW614e3543b8aa55a5b4aa87c9cd179703"
    )
    mega_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSWc611b97c5c4354059113fb8f17a26f2f"
    )
    pico_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSWb59bf21962f75857965df77a55549178"
    )
    kilo_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSW49e59ce46e35588193327425fa1d89ab"
    )
    micro_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSW771bd899c7045f84b282cc653efe6d28"
    )


class ElectricCurrentPhasor(QuantityValue):
    """
    "Electric Current Phasor" is a representation of current as a sinusoidal integral quantity using a complex quantity whose argument is equal to the initial phase and whose modulus is equal to the root-mean-square value. A phasor is a constant complex number, usually expressed in exponential form, representing the complex amplitude (magnitude and phase) of a sinusoidal function of time. Phasors are used by electrical engineers to simplify computations involving sinusoids, where they can often reduce a differential equation problem to an algebraic one.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "01c55f7e-a3ee-516a-8b46-9146bd45b3b6",
            "title": "ElectricCurrentPhasor",
            "title*": {"en": "Electric Current Phasor"},
            "description": '"Electric Current Phasor" is a representation of current as a sinusoidal integral quantity using a complex quantity whose argument is equal to the initial phase and whose modulus is equal to the root-mean-square value. A phasor is a constant complex number, usually expressed in exponential form, representing the complex amplitude (magnitude and phase) of a sinusoidal function of time. Phasors are used by electrical engineers to simplify computations involving sinusoids, where they can often reduce a differential equation problem to an algebraic one.',
            "description*": {
                "en": '"Electric Current Phasor" is a representation of current as a sinusoidal integral quantity using a complex quantity whose argument is equal to the initial phase and whose modulus is equal to the root-mean-square value. A phasor is a constant complex number, usually expressed in exponential form, representing the complex amplitude (magnitude and phase) of a sinusoidal function of time. Phasors are used by electrical engineers to simplify computations involving sinusoids, where they can often reduce a differential equation problem to an algebraic one.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricCurrentPhasorValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW01c55f7ea3ee516a8b469146bd45b3b6"]
    unit: Optional[ElectricCurrentPhasorUnit] = Field(
        ElectricCurrentPhasorUnit.ampere,
        options={"enum_titles": ["A", "mA", "MA", "pA", "kA", "μA"]},
        title="ElectricCurrentPhasorUnit",
        x_enum_varnames=[
            "ampere",
            "milli_ampere",
            "mega_ampere",
            "pico_ampere",
            "kilo_ampere",
            "micro_ampere",
        ],
    )


class SpinQuantumNumber(QuantumNumber):
    """
    The "Spin Quantum Number"  describes the spin (intrinsic angular momentum) of the electron within that orbital, and gives the projection of the spin angular momentum S along the specified axis
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "da012dbe-9144-56a0-9af4-429dce5dcc49",
            "title": "SpinQuantumNumber",
            "title*": {"en": "Spin Quantum Number"},
            "description": 'The "Spin Quantum Number"  describes the spin (intrinsic angular momentum) of the electron within that orbital, and gives the projection of the spin angular momentum S along the specified axis',
            "description*": {
                "en": 'The "Spin Quantum Number"  describes the spin (intrinsic angular momentum) of the electron within that orbital, and gives the projection of the spin angular momentum S along the specified axis'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpinQuantumNumberValue",
            "@context": [
                "/wiki/Category:OSWa35c06b30b7750c49dd53768ffd9e756?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWda012dbe914456a09af4429dce5dcc49"]


class MagneticFieldUnit(UnitEnum):
    tesla = "Item:OSW1d9ac7ec48cc5b7da90e8c2d529d6df0"
    milli_tesla = (
        "Item:OSW1d9ac7ec48cc5b7da90e8c2d529d6df0#OSW490afd74306a568c858e46dd393110fe"
    )
    micro_tesla = (
        "Item:OSW1d9ac7ec48cc5b7da90e8c2d529d6df0#OSW30a0158af5445fbc8b08c843d0a84d5a"
    )
    nano_tesla = (
        "Item:OSW1d9ac7ec48cc5b7da90e8c2d529d6df0#OSW7b67d49640c75e54b4906f4bd72b494b"
    )


class MagneticField(QuantityValue):
    """
    The Magnetic Field, denoted $B$, is a fundamental field in electrodynamics which characterizes the magnetic force exerted by electric currents.  It is closely related to the auxillary magnetic field H (see quantitykind:AuxillaryMagneticField).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "71dc7977-cd3a-5398-89a4-af664c2e02da",
            "title": "MagneticField",
            "title*": {"en": "Magnetic Field"},
            "description": "The Magnetic Field, denoted $B$, is a fundamental field in electrodynamics which characterizes the magnetic force exerted by electric currents.  It is closely related to the auxillary magnetic field H (see quantitykind:AuxillaryMagneticField).",
            "description*": {
                "en": "The Magnetic Field, denoted $B$, is a fundamental field in electrodynamics which characterizes the magnetic force exerted by electric currents.  It is closely related to the auxillary magnetic field H (see quantitykind:AuxillaryMagneticField)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMagneticFieldValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW71dc7977cd3a539889a4af664c2e02da"]
    unit: Optional[MagneticFieldUnit] = Field(
        MagneticFieldUnit.tesla,
        options={"enum_titles": ["T", "mT", "µT", "nT"]},
        title="MagneticFieldUnit",
        x_enum_varnames=["tesla", "milli_tesla", "micro_tesla", "nano_tesla"],
    )


class MaxOperatingThrust(Thrust):
    """
    This is an autogenerated partial class definition of 'MaxOperatingThrust'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b9eb9b07-0fb3-584c-b6df-0d0dda581fb6",
            "title": "MaxOperatingThrust",
            "title*": {"en": "Max Operating Thrust"},
            "description": "This is an autogenerated partial class definition of 'MaxOperatingThrust'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMaxOperatingThrustValue",
            "@context": [
                "/wiki/Category:OSW7bf742d673495bb8bd77d1ea5295b2cd?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb9eb9b070fb3584cb6df0d0dda581fb6"]


class MaximumExpectedOperatingThrust(MaxOperatingThrust):
    """
    This is an autogenerated partial class definition of 'MaximumExpectedOperatingThrust'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3a1dd757-be6a-5b38-a816-2d302f407238",
            "title": "MaximumExpectedOperatingThrust",
            "title*": {"en": "Maximum Expected Operating Thrust"},
            "description": "This is an autogenerated partial class definition of 'MaximumExpectedOperatingThrust'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMaximumExpectedOperatingThrustValue",
            "@context": [
                "/wiki/Category:OSWb9eb9b070fb3584cb6df0d0dda581fb6?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3a1dd757be6a5b38a8162d302f407238"]


class Diameter(Length):
    """
    In classical geometry, the "Diameter" of a circle is any straight line segment that passes through the center of the circle and whose endpoints lie on the circle.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "24275b1c-56ea-58dc-ae38-c44409251a64",
            "title": "Diameter",
            "title*": {"en": "Diameter", "de": "Durchmesser"},
            "description": 'In classical geometry, the "Diameter" of a circle is any straight line segment that passes through the center of the circle and whose endpoints lie on the circle.',
            "description*": {
                "en": 'In classical geometry, the "Diameter" of a circle is any straight line segment that passes through the center of the circle and whose endpoints lie on the circle.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDiameterValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW24275b1c56ea58dcae38c44409251a64"]


class Incidence(Frequency):
    """
    In epidemiology, incidence is a measure of the probability of occurrence of a given medical condition in a population within a specified period of time.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "e8d1194a-eb2e-5b9f-8778-67eab5c9cae9",
            "title": "Incidence",
            "title*": {"en": "Incidence"},
            "description": "In epidemiology, incidence is a measure of the probability of occurrence of a given medical condition in a population within a specified period of time.",
            "description*": {
                "en": "In epidemiology, incidence is a measure of the probability of occurrence of a given medical condition in a population within a specified period of time."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasIncidenceValue",
            "@context": [
                "/wiki/Category:OSWc543ebb853385a1a9382f57faad6170d?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe8d1194aeb2e5b9f877867eab5c9cae9"]


class CapacitanceUnit(UnitEnum):
    farad = "Item:OSWa1b4f9da4183543a8161e3fe99751be2"
    pico_farad = (
        "Item:OSWa1b4f9da4183543a8161e3fe99751be2#OSWea22beb7c14350cfb4a8029430e0a9e3"
    )
    nano_farad = (
        "Item:OSWa1b4f9da4183543a8161e3fe99751be2#OSW2c99e79b872e50d7a3cdb3b0614bbb1d"
    )
    milli_farad = (
        "Item:OSWa1b4f9da4183543a8161e3fe99751be2#OSW233c7ca125dc5092bdc69b05723ba75b"
    )
    micro_farad = (
        "Item:OSWa1b4f9da4183543a8161e3fe99751be2#OSW3690c26e937c55f1aeb3dcba3c5d79f4"
    )
    atto_farad = (
        "Item:OSWa1b4f9da4183543a8161e3fe99751be2#OSW328bea7c368659c0ab2729ace2604ebc"
    )


class Capacitance(QuantityValue):
    """
    "Capacitance" is the ability of a body to hold an electrical charge; it is quantified as the amount of electric charge stored for a given electric potential. Capacitance is a scalar-valued quantity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "6bad72aa-8283-5ea4-9eea-9bb061beae80",
            "title": "Capacitance",
            "title*": {"en": "Capacitance"},
            "description": '"Capacitance" is the ability of a body to hold an electrical charge; it is quantified as the amount of electric charge stored for a given electric potential. Capacitance is a scalar-valued quantity.',
            "description*": {
                "en": '"Capacitance" is the ability of a body to hold an electrical charge; it is quantified as the amount of electric charge stored for a given electric potential. Capacitance is a scalar-valued quantity.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCapacitanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6bad72aa82835ea49eea9bb061beae80"]
    unit: Optional[CapacitanceUnit] = Field(
        CapacitanceUnit.farad,
        options={"enum_titles": ["F", "pF", "nF", "mF", "μF", "aF"]},
        title="CapacitanceUnit",
        x_enum_varnames=[
            "farad",
            "pico_farad",
            "nano_farad",
            "milli_farad",
            "micro_farad",
            "atto_farad",
        ],
    )


class VaporPressure(Pressure):
    """
    A pressure that is the one exerted by a substance vapor in thermodynamic equilibrium with either its solid or liquid phase at a given temperature in a closed system.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0a5491ac-7e59-5f04-b5c7-efd96b101eb2",
            "title": "VaporPressure",
            "title*": {"en": "Vapor Pressure"},
            "description": "A pressure that is the one exerted by a substance vapor in thermodynamic equilibrium with either its solid or liquid phase at a given temperature in a closed system.",
            "description*": {
                "en": "A pressure that is the one exerted by a substance vapor in thermodynamic equilibrium with either its solid or liquid phase at a given temperature in a closed system."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVaporPressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0a5491ac7e595f04b5c7efd96b101eb2"]


class CorrelatedColourTemperature(ThermodynamicTemperature):
    """
    Correlated color temperature (CCT) is a measure of light source color appearance defined by the proximity of the light source's chromaticity coordinates to the blackbody locus, as a single number rather than the two required to specify a chromaticity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "aebde3cc-25da-54f7-868f-8c09f8c22336",
            "title": "CorrelatedColourTemperature",
            "title*": {"en": "Correlated Colour Temperature"},
            "description": "Correlated color temperature (CCT) is a measure of light source color appearance defined by the proximity of the light source's chromaticity coordinates to the blackbody locus, as a single number rather than the two required to specify a chromaticity.",
            "description*": {
                "en": "Correlated color temperature (CCT) is a measure of light source color appearance defined by the proximity of the light source's chromaticity coordinates to the blackbody locus, as a single number rather than the two required to specify a chromaticity."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCorrelatedColourTemperatureValue",
            "@context": [
                "/wiki/Category:OSW69b648b4fe1a5607b167a699f899be87?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWaebde3cc25da54f7868f8c09f8c22336"]


class ElectricChargeUnit(UnitEnum):
    ampere_second = "Item:OSW5705fe1e62ee57b3b67f335a31bc8e6e"


class ElectricCharge(QuantityValue):
    """
    "Electric Charge" is a fundamental conserved property of some subatomic particles, which determines their electromagnetic interaction. Electrically charged matter is influenced by, and produces, electromagnetic fields. The electric charge on a body may be positive or negative. Two positively charged bodies experience a mutual repulsive force, as do two negatively charged bodies. A positively charged body and a negatively charged body experience an attractive force. Electric charge is carried by discrete particles and can be positive or negative. The sign convention is such that the elementary electric charge $e$, that is, the charge of the proton, is positive. The SI derived unit of electric charge is the coulomb.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "b7248b1f-0445-5ec9-9e6f-f6e6b472d8de",
            "title": "ElectricCharge",
            "title*": {"en": "Electric charge", "de": "Elektrische Ladung"},
            "description": '"Electric Charge" is a fundamental conserved property of some subatomic particles, which determines their electromagnetic interaction. Electrically charged matter is influenced by, and produces, electromagnetic fields. The electric charge on a body may be positive or negative. Two positively charged bodies experience a mutual repulsive force, as do two negatively charged bodies. A positively charged body and a negatively charged body experience an attractive force. Electric charge is carried by discrete particles and can be positive or negative. The sign convention is such that the elementary electric charge $e$, that is, the charge of the proton, is positive. The SI derived unit of electric charge is the coulomb.',
            "description*": {
                "en": '"Electric Charge" is a fundamental conserved property of some subatomic particles, which determines their electromagnetic interaction. Electrically charged matter is influenced by, and produces, electromagnetic fields. The electric charge on a body may be positive or negative. Two positively charged bodies experience a mutual repulsive force, as do two negatively charged bodies. A positively charged body and a negatively charged body experience an attractive force. Electric charge is carried by discrete particles and can be positive or negative. The sign convention is such that the elementary electric charge $e$, that is, the charge of the proton, is positive. The SI derived unit of electric charge is the coulomb.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricChargeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb7248b1f04455ec99e6ff6e6b472d8de"]
    unit: Optional[ElectricChargeUnit] = Field(
        ElectricChargeUnit.ampere_second,
        options={"enum_titles": ["A·s"]},
        title="ElectricChargeUnit",
        x_enum_varnames=["ampere_second"],
    )


class AtomicCharge(ElectricCharge):
    """
    The electric charge of an ion, equal to the number of electrons the atom has gained or lost in its ionization multiplied by the charge on one electron.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b3de57b2-dac6-51aa-a2f7-2a50ded04fb2",
            "title": "AtomicCharge",
            "title*": {"en": "Atomic Charge"},
            "description": "The electric charge of an ion, equal to the number of electrons the atom has gained or lost in its ionization multiplied by the charge on one electron.",
            "description*": {
                "en": "The electric charge of an ion, equal to the number of electrons the atom has gained or lost in its ionization multiplied by the charge on one electron."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAtomicChargeValue",
            "@context": [
                "/wiki/Category:OSWb7248b1f04455ec99e6ff6e6b472d8de?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb3de57b2dac651aaa2f72a50ded04fb2"]


class NormalStress(Stress):
    """
    Normal stress is defined as the stress resulting from a force acting normal to a body surface. Normal stress can be caused by several loading methods, the most common being axial tension and compression, bending, and hoop stress.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a8a9a478-0dcd-56db-a67a-f825f452aaad",
            "title": "NormalStress",
            "title*": {"en": "Normal Stress"},
            "description": "Normal stress is defined as the stress resulting from a force acting normal to a body surface. Normal stress can be caused by several loading methods, the most common being axial tension and compression, bending, and hoop stress.",
            "description*": {
                "en": "Normal stress is defined as the stress resulting from a force acting normal to a body surface. Normal stress can be caused by several loading methods, the most common being axial tension and compression, bending, and hoop stress."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasNormalStressValue",
            "@context": [
                "/wiki/Category:OSW74ae1de66beb525ea52eedabf09ab228?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa8a9a4780dcd56dba67af825f452aaad"]


class MeanEnergyImparted(Energy):
    """
    The "Mean Energy Imparted", is the average energy imparted to irradiated matter.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "e10431f5-aa91-5640-a353-fadcefc0f3c2",
            "title": "MeanEnergyImparted",
            "title*": {"en": "Mean Energy Imparted"},
            "description": 'The "Mean Energy Imparted", is the average energy imparted to irradiated matter.',
            "description*": {
                "en": 'The "Mean Energy Imparted", is the average energy imparted to irradiated matter.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMeanEnergyImpartedValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe10431f5aa915640a353fadcefc0f3c2"]


class StagePropellantMass(Mass):
    """
    This is an autogenerated partial class definition of 'StagePropellantMass'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "f4657206-4b58-5f95-9008-296d2c0d7bda",
            "title": "StagePropellantMass",
            "title*": {"en": "Stage Propellant Mass"},
            "description": "This is an autogenerated partial class definition of 'StagePropellantMass'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasStagePropellantMassValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf46572064b585f959008296d2c0d7bda"]


class CelsiusTemperature(ThermodynamicTemperature):
    """
    "Celsius Temperature", the thermodynamic temperature T_0, is exactly 0.01 kelvin below the thermodynamic temperature of the triple point of water.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7f41c3f8-71b9-551c-bd40-32f756f3fc0d",
            "title": "CelsiusTemperature",
            "title*": {"en": "Celsius temperature", "de": "Celsius-Temperatur"},
            "description": '"Celsius Temperature", the thermodynamic temperature T_0, is exactly 0.01 kelvin below the thermodynamic temperature of the triple point of water.',
            "description*": {
                "en": '"Celsius Temperature", the thermodynamic temperature T_0, is exactly 0.01 kelvin below the thermodynamic temperature of the triple point of water.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCelsiusTemperatureValue",
            "@context": [
                "/wiki/Category:OSW69b648b4fe1a5607b167a699f899be87?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7f41c3f871b9551cbd4032f756f3fc0d"]


class TimeSquaredUnit(UnitEnum):
    second_squared = "Item:OSW00ec6531e2fb5ba8aee8cf8852860aed"


class TimeSquared(QuantityValue):
    """
    This is an autogenerated partial class definition of 'TimeSquared'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "c676d112-73eb-5903-ac59-330fbbdfee18",
            "title": "TimeSquared",
            "title*": {"en": "Time Squared"},
            "description": "This is an autogenerated partial class definition of 'TimeSquared'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTimeSquaredValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc676d11273eb5903ac59330fbbdfee18"]
    unit: Optional[TimeSquaredUnit] = Field(
        TimeSquaredUnit.second_squared,
        options={"enum_titles": ["s²"]},
        title="TimeSquaredUnit",
        x_enum_varnames=["second_squared"],
    )


class ElectricCurrentPerLength(LinearElectricCurrentDensity):
    """
    This is an autogenerated partial class definition of 'ElectricCurrentPerLength'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "8ba7ac8b-06c4-53e2-885c-c41c9d9ee0bb",
            "title": "ElectricCurrentPerLength",
            "title*": {"en": "Electric Current per Length"},
            "description": "This is an autogenerated partial class definition of 'ElectricCurrentPerLength'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricCurrentPerLengthValue",
            "@context": [
                "/wiki/Category:OSW6ce762ef103d5b15976dcfa13914bef4?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8ba7ac8b06c453e2885cc41c9d9ee0bb"]


class OlfactoryThreshold(Concentration):
    """
    "Olfactory Threshold" are thresholds for the concentrations of various classes of smell that can be detected.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c666cb2a-4a36-56f1-91ca-980983cfe6a8",
            "title": "OlfactoryThreshold",
            "title*": {"en": "Olfactory Threshold"},
            "description": '"Olfactory Threshold" are thresholds for the concentrations of various classes of smell that can be detected.',
            "description*": {
                "en": '"Olfactory Threshold" are thresholds for the concentrations of various classes of smell that can be detected.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasOlfactoryThresholdValue",
            "@context": [
                "/wiki/Category:OSW4ce5add385d2545ab8ab50e4b222dab4?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc666cb2a4a3656f191ca980983cfe6a8"]


class UpperCriticalMagneticFluxDensity(MagneticFluxDensity):
    """
    "Upper Critical Magnetic Flux Density" for type II superconductors, is the threshold magnetic flux density for disappearance of bulk superconductivity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b7c21109-2f5a-57a2-978f-297e390675e1",
            "title": "UpperCriticalMagneticFluxDensity",
            "title*": {"en": "Upper Critical Magnetic Flux Density"},
            "description": '"Upper Critical Magnetic Flux Density" for type II superconductors, is the threshold magnetic flux density for disappearance of bulk superconductivity.',
            "description*": {
                "en": '"Upper Critical Magnetic Flux Density" for type II superconductors, is the threshold magnetic flux density for disappearance of bulk superconductivity.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasUpperCriticalMagneticFluxDensityValue",
            "@context": [
                "/wiki/Category:OSW91fc2f110c7f52628dce39bc0278562b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb7c211092f5a57a2978f297e390675e1"]


class Radius(Length):
    """
    In classical geometry, the "Radius" of a circle or sphere is any line segment from its center to its perimeter the radius of a circle or sphere is the length of any such segment.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "57a45884-de60-5269-8141-a5cbe4aaa4ac",
            "title": "Radius",
            "title*": {"en": "Radius"},
            "description": 'In classical geometry, the "Radius" of a circle or sphere is any line segment from its center to its perimeter the radius of a circle or sphere is the length of any such segment.',
            "description*": {
                "en": 'In classical geometry, the "Radius" of a circle or sphere is any line segment from its center to its perimeter the radius of a circle or sphere is the length of any such segment.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRadiusValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW57a45884de6052698141a5cbe4aaa4ac"]


class LarmorAngularFrequency(AngularFrequency):
    """
    The "Cyclotron Angular Frequency" describes angular momentum vector precession about the external field axis with an angular frequency.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "5ff27cfd-df43-5372-a70b-e4040f61d68b",
            "title": "LarmorAngularFrequency",
            "title*": {"en": "Larmor Angular Frequency"},
            "description": 'The "Cyclotron Angular Frequency" describes angular momentum vector precession about the external field axis with an angular frequency.',
            "description*": {
                "en": 'The "Cyclotron Angular Frequency" describes angular momentum vector precession about the external field axis with an angular frequency.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLarmorAngularFrequencyValue",
            "@context": [
                "/wiki/Category:OSW9534c898b7d45510adfa6673507a4e10?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW5ff27cfddf435372a70be4040f61d68b"]


class BloodGlucoseLevelUnit(UnitEnum):
    milli_mole_per_liter = (
        "Item:OSW58a109c7b24256769e6f6716407aff58#OSW42ad2b521cac599c9a5f08e3edd7d88a"
    )


class BloodGlucoseLevel(QuantityValue):
    """
    Blood sugar level, blood sugar concentration, or blood glucose level is the amount of glucose present in the blood of humans and animals.
      Glucose is a simple sugar and approximately 4 grams of glucose are present in the blood of humans at all times.
      Stored in skeletal muscle and liver cells in the form of glycogen, the body tightly regulates blood glucose levels as a part of metabolic homeostasis.
      During fasting blood glucose is maintained at a constant level at the expense of the glycogen stores in the liver and skeletal muscle.
      There are two main methods of describing concentrations: by weight, and by molecular count.
      Weights are in grams and molecular counts in moles.
      A mole is $6.022\times 10^{23}$ molecules.
      In both cases, the unit is usually modified by $milli-$ or $micro-$ or other prefix,
       and is always $per$ some volume, often a litre.
      Conversion factors depend on the molecular weight of the substance in question.
      $mmol/L$ is millimoles/liter, and is the world standard unit for measuring glucose in blood.
      Specifically, it is the designated SI (Systeme International) unit.
      Some countries use $mg/dl$.
      A mole is about $6\times 10^{23}$ molecules.
      $mg/dL$ (milligrams/deciliter) is the traditional unit for measuring $bG$ (blood glucose).
      There is a trend toward using $mmol/L$ however $mg/dL$ is much in practice.
      Some use is made of $mmol/L$ as the primary unit with $mg/dL$ quoted in parentheses.
      This acknowledges the large base of health care providers, researchers and patients who are already familiar with $mg/dL$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "0f23b91f-a360-5c65-a1e0-02e9a2fa0f10",
            "title": "BloodGlucoseLevel",
            "title*": {"en": "Blood Glucose Level"},
            "description": "Blood sugar level, blood sugar concentration, or blood glucose level is the amount of glucose present in the blood of humans and animals. \n  Glucose is a simple sugar and approximately 4 grams of glucose are present in the blood of humans at all times.  \n  Stored in skeletal muscle and liver cells in the form of glycogen, the body tightly regulates blood glucose levels as a part of metabolic homeostasis.\n  During fasting blood glucose is maintained at a constant level at the expense of the glycogen stores in the liver and skeletal muscle. \n  There are two main methods of describing concentrations: by weight, and by molecular count. \n  Weights are in grams and molecular counts in moles. \n  A mole is $6.022\\times 10^{23}$ molecules.\n  In both cases, the unit is usually modified by $milli-$ or $micro-$ or other prefix,\n   and is always $per$ some volume, often a litre. \n  Conversion factors depend on the molecular weight of the substance in question. \n  $mmol/L$ is millimoles/liter, and is the world standard unit for measuring glucose in blood. \n  Specifically, it is the designated SI (Systeme International) unit. \n  Some countries use $mg/dl$. \n  A mole is about $6\\times 10^{23}$ molecules.\n  $mg/dL$ (milligrams/deciliter) is the traditional unit for measuring $bG$ (blood glucose). \n  There is a trend toward using $mmol/L$ however $mg/dL$ is much in practice. \n  Some use is made of $mmol/L$ as the primary unit with $mg/dL$ quoted in parentheses. \n  This acknowledges the large base of health care providers, researchers and patients who are already familiar with $mg/dL$.",
            "description*": {
                "en": "Blood sugar level, blood sugar concentration, or blood glucose level is the amount of glucose present in the blood of humans and animals. \n  Glucose is a simple sugar and approximately 4 grams of glucose are present in the blood of humans at all times.  \n  Stored in skeletal muscle and liver cells in the form of glycogen, the body tightly regulates blood glucose levels as a part of metabolic homeostasis.\n  During fasting blood glucose is maintained at a constant level at the expense of the glycogen stores in the liver and skeletal muscle. \n  There are two main methods of describing concentrations: by weight, and by molecular count. \n  Weights are in grams and molecular counts in moles. \n  A mole is $6.022\\times 10^{23}$ molecules.\n  In both cases, the unit is usually modified by $milli-$ or $micro-$ or other prefix,\n   and is always $per$ some volume, often a litre. \n  Conversion factors depend on the molecular weight of the substance in question. \n  $mmol/L$ is millimoles/liter, and is the world standard unit for measuring glucose in blood. \n  Specifically, it is the designated SI (Systeme International) unit. \n  Some countries use $mg/dl$. \n  A mole is about $6\\times 10^{23}$ molecules.\n  $mg/dL$ (milligrams/deciliter) is the traditional unit for measuring $bG$ (blood glucose). \n  There is a trend toward using $mmol/L$ however $mg/dL$ is much in practice. \n  Some use is made of $mmol/L$ as the primary unit with $mg/dL$ quoted in parentheses. \n  This acknowledges the large base of health care providers, researchers and patients who are already familiar with $mg/dL$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasBloodGlucoseLevelValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0f23b91fa3605c65a1e002e9a2fa0f10"]
    unit: Optional[BloodGlucoseLevelUnit] = Field(
        BloodGlucoseLevelUnit.milli_mole_per_liter,
        options={"enum_titles": ["mmol/L"]},
        title="BloodGlucoseLevelUnit",
        x_enum_varnames=["milli_mole_per_liter"],
    )


class MagneticTensionUnit(UnitEnum):
    ampere = "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec"
    milli_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSW614e3543b8aa55a5b4aa87c9cd179703"
    )
    mega_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSWc611b97c5c4354059113fb8f17a26f2f"
    )
    pico_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSWb59bf21962f75857965df77a55549178"
    )
    kilo_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSW49e59ce46e35588193327425fa1d89ab"
    )
    micro_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSW771bd899c7045f84b282cc653efe6d28"
    )


class MagneticTension(QuantityValue):
    """
    Magnetic Tension is a scalar quantity equal to the line integral of the magnetic field strength H along a specified path linking two points a and b.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "b08c5155-6901-5c02-ba88-9380cb0808ff",
            "title": "MagneticTension",
            "title*": {"en": "Magnetic Tension"},
            "description": "Magnetic Tension is a scalar quantity equal to the line integral of the magnetic field strength H along a specified path linking two points a and b.",
            "description*": {
                "en": "Magnetic Tension is a scalar quantity equal to the line integral of the magnetic field strength H along a specified path linking two points a and b."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMagneticTensionValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb08c515569015c02ba889380cb0808ff"]
    unit: Optional[MagneticTensionUnit] = Field(
        MagneticTensionUnit.ampere,
        options={"enum_titles": ["A", "mA", "MA", "pA", "kA", "μA"]},
        title="MagneticTensionUnit",
        x_enum_varnames=[
            "ampere",
            "milli_ampere",
            "mega_ampere",
            "pico_ampere",
            "kilo_ampere",
            "micro_ampere",
        ],
    )


class ThermalEfficiency(DimensionlessRatio):
    """
    Thermal efficiency is a dimensionless performance measure of a thermal device such as an internal combustion engine, a boiler, or a furnace. The input to the device is heat, or the heat-content of a fuel that is consumed. The desired output is mechanical work, or heat, or possibly both.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "809975f9-70ac-5bb7-98bd-97804233445e",
            "title": "ThermalEfficiency",
            "title*": {"en": "Thermal Efficiency"},
            "description": "Thermal efficiency is a dimensionless performance measure of a thermal device such as an internal combustion engine, a boiler, or a furnace. The input to the device is heat, or the heat-content of a fuel that is consumed. The desired output is mechanical work, or heat, or possibly both.",
            "description*": {
                "en": "Thermal efficiency is a dimensionless performance measure of a thermal device such as an internal combustion engine, a boiler, or a furnace. The input to the device is heat, or the heat-content of a fuel that is consumed. The desired output is mechanical work, or heat, or possibly both."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThermalEfficiencyValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW809975f970ac5bb798bd97804233445e"]


class ActiveEnergy(Energy):
    """
    "Active Energy" is the electrical energy transformable into some other form of energy.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "153b6d9b-79ec-5894-9fbe-97d2058d995c",
            "title": "ActiveEnergy",
            "title*": {"en": "Active Energy"},
            "description": '"Active Energy" is the electrical energy transformable into some other form of energy.',
            "description*": {
                "en": '"Active Energy" is the electrical energy transformable into some other form of energy.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasActiveEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW153b6d9b79ec58949fbe97d2058d995c"]


class MeasurementUnitForAQuantityApproximatelyProportionalToThermalInertiaUnit(
    UnitEnum
):
    per_kelvin = "Item:OSW33dfda3d4dea57d192d02eecdbc09b86"


class MeasurementUnitForAQuantityApproximatelyProportionalToThermalInertia(
    QuantityValue
):
    """
    Thermal inertia is a term used to describe the observed delays in a body's temperature response during heat transfers
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "76c12a2c-ef85-509f-ba12-bf965efaef2f",
            "title": "MeasurementUnitForAQuantityApproximatelyProportionalToThermalInertia",
            "title*": {
                "en": "Measurement Unit for a quantity approximately proportional to Thermal Inertia"
            },
            "description": "Thermal inertia is a term used to describe the observed delays in a body's temperature response during heat transfers",
            "description*": {
                "en": "Thermal inertia is a term used to describe the observed delays in a body's temperature response during heat transfers"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMeasurementUnitForAQuantityApproximatelyProportionalToThermalInertiaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW76c12a2cef85509fba12bf965efaef2f"]
    unit: Optional[
        MeasurementUnitForAQuantityApproximatelyProportionalToThermalInertiaUnit
    ] = Field(
        MeasurementUnitForAQuantityApproximatelyProportionalToThermalInertiaUnit.per_kelvin,
        options={"enum_titles": ["1/K"]},
        title="MeasurementUnitForAQuantityApproximatelyProportionalToThermalInertiaUnit",
        x_enum_varnames=["per_kelvin"],
    )


class ClosestApproachRadius(Radius):
    """
    This is an autogenerated partial class definition of 'ClosestApproachRadius'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "cef8c92a-98b1-5f3a-b49b-e706ef200090",
            "title": "ClosestApproachRadius",
            "title*": {"en": "Closest Approach Radius"},
            "description": "This is an autogenerated partial class definition of 'ClosestApproachRadius'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasClosestApproachRadiusValue",
            "@context": [
                "/wiki/Category:OSW57a45884de6052698141a5cbe4aaa4ac?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcef8c92a98b15f3ab49be706ef200090"]


class PositionVector(Length):
    """
    A "Position Vector", also known as location vector or radius vector, is a Euclidean vector which represents the position of a point P in space in relation to an arbitrary reference origin O.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "d60aaf9b-746a-594a-8380-5f0f0ae921ff",
            "title": "PositionVector",
            "title*": {"en": "Position Vector"},
            "description": 'A "Position Vector", also known as location vector or radius vector, is a Euclidean vector which represents the position of a point P in space in relation to an arbitrary reference origin O.',
            "description*": {
                "en": 'A "Position Vector", also known as location vector or radius vector, is a Euclidean vector which represents the position of a point P in space in relation to an arbitrary reference origin O.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPositionVectorValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd60aaf9b746a594a83805f0f0ae921ff"]


class SpecificWeightUnit(UnitEnum):
    newton_per_meter_cubed = "Item:OSWf3f9733d84285a338b5b7306145c9b6d"
    kilo_newton_per_meter_cubed = (
        "Item:OSWf3f9733d84285a338b5b7306145c9b6d#OSWfe42a11de5995fa380fbde579c89484c"
    )


class SpecificWeight(QuantityValue):
    """
    The specific weight, also known as the unit weight is a volume-specific quantity defined as the weight per unit volume of a material. Note that weight is defined as a force, distinct from mass.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "3b186dbd-80f7-5c3a-82cd-7418d4d3ea53",
            "title": "SpecificWeight",
            "title*": {"en": "Specific weight"},
            "description": "The specific weight, also known as the unit weight is a volume-specific quantity defined as the weight per unit volume of a material. Note that weight is defined as a force, distinct from mass.",
            "description*": {
                "en": "The specific weight, also known as the unit weight is a volume-specific quantity defined as the weight per unit volume of a material. Note that weight is defined as a force, distinct from mass."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificWeightValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3b186dbd80f75c3a82cd7418d4d3ea53"]
    unit: Optional[SpecificWeightUnit] = Field(
        SpecificWeightUnit.newton_per_meter_cubed,
        options={"enum_titles": ["N/m³", "kN/m³"]},
        title="SpecificWeightUnit",
        x_enum_varnames=["newton_per_meter_cubed", "kilo_newton_per_meter_cubed"],
    )


class InverseSquareTimeUnit(UnitEnum):
    per_second_squared = "Item:OSWbefab75c6042567c84545b5fab456055"


class InverseSquareTime(QuantityValue):
    """
    This is an autogenerated partial class definition of 'InverseSquareTime'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "3484a41e-5b0e-57f7-998a-5033177ab080",
            "title": "InverseSquareTime",
            "title*": {"en": "Inverse Square Time"},
            "description": "This is an autogenerated partial class definition of 'InverseSquareTime'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInverseSquareTimeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3484a41e5b0e57f7998a5033177ab080"]
    unit: Optional[InverseSquareTimeUnit] = Field(
        InverseSquareTimeUnit.per_second_squared,
        options={"enum_titles": ["1/s²"]},
        title="InverseSquareTimeUnit",
        x_enum_varnames=["per_second_squared"],
    )


class PlanarForce(ForcePerArea):
    """
    Another name for Force Per Area, used by the Industry Foundation Classes (IFC) standard.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b2e45bfd-826e-56a8-a0fa-4b10962cb733",
            "title": "PlanarForce",
            "title*": {"en": "Planar Force", "de": "Flächenlast"},
            "description": "Another name for Force Per Area, used by the Industry Foundation Classes (IFC) standard.",
            "description*": {
                "en": "Another name for Force Per Area, used by the Industry Foundation Classes (IFC) standard."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPlanarForceValue",
            "@context": [
                "/wiki/Category:OSW2ff3a26daf13563481acc8b0ebc5b37f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb2e45bfd826e56a8a0fa4b10962cb733"]


class TotalAngularMomentum(AngularMomentum):
    """
    "Total Angular Momentum" combines both the spin and orbital angular momentum of all particles and fields. In atomic and nuclear physics, orbital angular momentum is usually denoted by $l$ or $L$ instead of $\Lambda$. The magnitude of $J$ is quantized so that $J^2 = \hbar^2 j(j + 1)$, where $j$ is the total angular momentum quantum number.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "d0b4541d-5a41-557d-b575-cdca502f1973",
            "title": "TotalAngularMomentum",
            "title*": {"en": "Total Angular Momentum"},
            "description": '"Total Angular Momentum" combines both the spin and orbital angular momentum of all particles and fields. In atomic and nuclear physics, orbital angular momentum is usually denoted by $l$ or $L$ instead of $\\Lambda$. The magnitude of $J$ is quantized so that $J^2 = \\hbar^2 j(j + 1)$, where $j$ is the total angular momentum quantum number.',
            "description*": {
                "en": '"Total Angular Momentum" combines both the spin and orbital angular momentum of all particles and fields. In atomic and nuclear physics, orbital angular momentum is usually denoted by $l$ or $L$ instead of $\\Lambda$. The magnitude of $J$ is quantized so that $J^2 = \\hbar^2 j(j + 1)$, where $j$ is the total angular momentum quantum number.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTotalAngularMomentumValue",
            "@context": [
                "/wiki/Category:OSW11c230fdfd065eee822d39afdc9fba80?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd0b4541d5a41557db575cdca502f1973"]


class CoherenceLength(Length):
    """
    "Coherence Length" characterizes the distance in a superconductor over which the effect of a perturbation is appreciable.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "4fdc07e1-0e35-54b4-a1bf-ec197dab94ba",
            "title": "CoherenceLength",
            "title*": {"en": "Coherence Length"},
            "description": '"Coherence Length" characterizes the distance in a superconductor over which the effect of a perturbation is appreciable.',
            "description*": {
                "en": '"Coherence Length" characterizes the distance in a superconductor over which the effect of a perturbation is appreciable.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCoherenceLengthValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4fdc07e10e3554b4a1bfec197dab94ba"]


class CarrierLifetime(Time):
    """
    "Carrier LifetIme" is a time constant for recombination or trapping of minority charge carriers in semiconductors.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "d4dba64e-4ce9-5ba4-9505-900a3b92d2d2",
            "title": "CarrierLifetime",
            "title*": {"en": "Carrier LifetIme"},
            "description": '"Carrier LifetIme" is a time constant for recombination or trapping of minority charge carriers in semiconductors.',
            "description*": {
                "en": '"Carrier LifetIme" is a time constant for recombination or trapping of minority charge carriers in semiconductors.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCarrierLifetimeValue",
            "@context": [
                "/wiki/Category:OSW389cb87d31be515aa5d2f12e2b66e938?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd4dba64e4ce95ba49505900a3b92d2d2"]


class MolarMassUnit(UnitEnum):
    kilo_gram_per_mole = (
        "Item:OSW968a3fd57529500f9eb03f4efc083e36#OSW31a2c5ae09d1578a843267fef44c2cdb"
    )


class MolarMass(QuantityValue):
    """
    In chemistry, the molar mass M is defined as the mass of a given substance (chemical element or chemical compound) divided by its amount of substance. It is a physical property of a given substance. The base SI unit for molar mass is $kg/mol$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "57dc5920-ca59-5bc5-b7c1-f41b0a79bad3",
            "title": "MolarMass",
            "title*": {"en": "Molar mass", "de": "Molmasse"},
            "description": "In chemistry, the molar mass M is defined as the mass of a given substance (chemical element or chemical compound) divided by its amount of substance. It is a physical property of a given substance. The base SI unit for molar mass is $kg/mol$.",
            "description*": {
                "en": "In chemistry, the molar mass M is defined as the mass of a given substance (chemical element or chemical compound) divided by its amount of substance. It is a physical property of a given substance. The base SI unit for molar mass is $kg/mol$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarMassValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW57dc5920ca595bc5b7c1f41b0a79bad3"]
    unit: Optional[MolarMassUnit] = Field(
        MolarMassUnit.kilo_gram_per_mole,
        options={"enum_titles": ["kg/mol"]},
        title="MolarMassUnit",
        x_enum_varnames=["kilo_gram_per_mole"],
    )


class InertMass(Mass):
    """
    The sum of the vehicle dry mass, residual fluids and gasses, personnel and personnel provisions, and cargo.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a142144f-1fb3-5491-91b5-0f624bdcbb94",
            "title": "InertMass",
            "title*": {"en": "Inert Mass"},
            "description": "The sum of the vehicle dry mass, residual fluids and gasses, personnel and personnel provisions, and cargo.",
            "description*": {
                "en": "The sum of the vehicle dry mass, residual fluids and gasses, personnel and personnel provisions, and cargo."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInertMassValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa142144f1fb3549191b50f624bdcbb94"]


class MomentOfInertiaInTheZAxis(MomentOfInertia):
    """
    The rotational inertia or resistance to change in direction or speed of rotation about a defined axis.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "4a37b652-a910-5d73-a07f-de7077482acb",
            "title": "MomentOfInertiaInTheZAxis",
            "title*": {"en": "Moment of Inertia in the Z axis"},
            "description": "The rotational inertia or resistance to change in direction or speed of rotation about a defined axis.",
            "description*": {
                "en": "The rotational inertia or resistance to change in direction or speed of rotation about a defined axis."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMomentOfInertiaInTheZAxisValue",
            "@context": [
                "/wiki/Category:OSW2e958a0e653558a8abf2bd1fa3c6dd59?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4a37b652a9105d73a07fde7077482acb"]


class AccelerationUnit(UnitEnum):
    meter_per_second_squared = "Item:OSWb91fd68d93375855a57c795180c429a3"
    centi_meter_per_second_squared = (
        "Item:OSWb91fd68d93375855a57c795180c429a3#OSW014676a1d72e5f16a59a8d966253ab6f"
    )


class Acceleration(QuantityValue):
    """
    $\\textit{Acceleration}$ is the (instantaneous) rate of change of velocity.
      Acceleration may be either linear acceleration, or angular acceleration.
      It is a vector quantity with dimension $length/time^{2}$ for linear acceleration,
       or in the case of angular acceleration, with dimension $angle/time^{2}$.
      $$$$
      In SI units, linear acceleration is measured in $meters/second^{2}$ ($m \cdot s^{-2}$),
       and angular acceleration is measured in $radians/second^{2}$.
      $$$$
      In physics, any increase or decrease in speed is referred to as acceleration and similarly,
       motion in a circle at constant speed is also an acceleration, since the direction component of the velocity is changing.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "347462e6-7d90-5995-af16-f97dc7c9ef48",
            "title": "Acceleration",
            "title*": {"en": "Acceleration", "de": "Beschleunigung"},
            "description": "$\\textit{Acceleration}$ is the (instantaneous) rate of change of velocity. \n  Acceleration may be either linear acceleration, or angular acceleration. \n  It is a vector quantity with dimension $length/time^{2}$ for linear acceleration,\n   or in the case of angular acceleration, with dimension $angle/time^{2}$. \n  $$$$\n  In SI units, linear acceleration is measured in $meters/second^{2}$ ($m \\cdot s^{-2}$),\n   and angular acceleration is measured in $radians/second^{2}$. \n  $$$$\n  In physics, any increase or decrease in speed is referred to as acceleration and similarly,\n   motion in a circle at constant speed is also an acceleration, since the direction component of the velocity is changing.",
            "description*": {
                "en": "$\\textit{Acceleration}$ is the (instantaneous) rate of change of velocity. \n  Acceleration may be either linear acceleration, or angular acceleration. \n  It is a vector quantity with dimension $length/time^{2}$ for linear acceleration,\n   or in the case of angular acceleration, with dimension $angle/time^{2}$. \n  $$$$\n  In SI units, linear acceleration is measured in $meters/second^{2}$ ($m \\cdot s^{-2}$),\n   and angular acceleration is measured in $radians/second^{2}$. \n  $$$$\n  In physics, any increase or decrease in speed is referred to as acceleration and similarly,\n   motion in a circle at constant speed is also an acceleration, since the direction component of the velocity is changing."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAccelerationValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW347462e67d905995af16f97dc7c9ef48"]
    unit: Optional[AccelerationUnit] = Field(
        AccelerationUnit.meter_per_second_squared,
        options={"enum_titles": ["m/s²", "cm/s²"]},
        title="AccelerationUnit",
        x_enum_varnames=["meter_per_second_squared", "centi_meter_per_second_squared"],
    )


class AccelerationOfGravity(Acceleration):
    """
    The acceleration of freely falling bodies under the influence of terrestrial gravity, equal to approximately 9.81 meters (32 feet) per second per second.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ef97c736-e77c-56a2-8084-70c2bfd808dc",
            "title": "AccelerationOfGravity",
            "title*": {"en": "Acceleration Of Gravity"},
            "description": "The acceleration of freely falling bodies under the influence of terrestrial gravity, equal to approximately 9.81 meters (32 feet) per second per second.",
            "description*": {
                "en": "The acceleration of freely falling bodies under the influence of terrestrial gravity, equal to approximately 9.81 meters (32 feet) per second per second."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAccelerationOfGravityValue",
            "@context": [
                "/wiki/Category:OSW347462e67d905995af16f97dc7c9ef48?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWef97c736e77c56a2808470c2bfd808dc"]


class PropagationCoefficientUnit(UnitEnum):
    per_meter = "Item:OSW28e75b089e145904998a54f1c4125bf3"
    per_centi_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW0dcebe41477056aba0e706c148970688"
    )
    per_nano_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWdc9edf9277ed57cdb7a6f218551afa8d"
    )
    per_milli_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWe77bc3c1bd7a566eadb55f3b68d351f2"
    )
    per_pico_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWd0475e49e0715ec488fba3fe0fdd9b02"
    )
    per_micro_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW45c24d8b68485accbdd684f05231c74c"
    )
    per_kilo_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW124eebfb89dc54bc9cc223fd49c40480"
    )


class PropagationCoefficient(QuantityValue):
    """
    The propagation constant, symbol $\gamma$, for a given system is defined by the ratio of the amplitude at the source of the wave to the amplitude at some distance x.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "eee790c2-3e77-5ec2-a852-845b671532df",
            "title": "PropagationCoefficient",
            "title*": {"en": "Propagation coefficient"},
            "description": "The propagation constant, symbol $\\gamma$, for a given system is defined by the ratio of the amplitude at the source of the wave to the amplitude at some distance x.",
            "description*": {
                "en": "The propagation constant, symbol $\\gamma$, for a given system is defined by the ratio of the amplitude at the source of the wave to the amplitude at some distance x."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPropagationCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWeee790c23e775ec2a852845b671532df"]
    unit: Optional[PropagationCoefficientUnit] = Field(
        PropagationCoefficientUnit.per_meter,
        options={
            "enum_titles": ["1/m", "1/cm", "1/nm", "1/mm", "1/pm", "1/μm", "1/km"]
        },
        title="PropagationCoefficientUnit",
        x_enum_varnames=[
            "per_meter",
            "per_centi_meter",
            "per_nano_meter",
            "per_milli_meter",
            "per_pico_meter",
            "per_micro_meter",
            "per_kilo_meter",
        ],
    )


class RotationalStiffness(TorquePerAngle):
    """
    Rotational Stiffness is the extent to which an object resists deformation in response to an applied torque.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "9d1ede2d-2379-5fb1-b69d-f7704250740e",
            "title": "RotationalStiffness",
            "title*": {"en": "Rotational Stiffness"},
            "description": "Rotational Stiffness is the extent to which an object resists deformation in response to an applied torque.",
            "description*": {
                "en": "Rotational Stiffness is the extent to which an object resists deformation in response to an applied torque."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRotationalStiffnessValue",
            "@context": [
                "/wiki/Category:OSW38077176ba8a52f7a9f401d782b4ffa8?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9d1ede2d23795fb1b69df7704250740e"]


class ElectricCharge(QuantityValue):
    """
    "Electric Charge" is a fundamental conserved property of some subatomic particles, which determines their electromagnetic interaction. Electrically charged matter is influenced by, and produces, electromagnetic fields. The electric charge on a body may be positive or negative. Two positively charged bodies experience a mutual repulsive force, as do two negatively charged bodies. A positively charged body and a negatively charged body experience an attractive force. Electric charge is carried by discrete particles and can be positive or negative. The sign convention is such that the elementary electric charge $e$, that is, the charge of the proton, is positive. The SI derived unit of electric charge is the coulomb.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "b7248b1f-0445-5ec9-9e6f-f6e6b472d8de",
            "title": "ElectricCharge",
            "title*": {"en": "Electric charge", "de": "Elektrische Ladung"},
            "description": '"Electric Charge" is a fundamental conserved property of some subatomic particles, which determines their electromagnetic interaction. Electrically charged matter is influenced by, and produces, electromagnetic fields. The electric charge on a body may be positive or negative. Two positively charged bodies experience a mutual repulsive force, as do two negatively charged bodies. A positively charged body and a negatively charged body experience an attractive force. Electric charge is carried by discrete particles and can be positive or negative. The sign convention is such that the elementary electric charge $e$, that is, the charge of the proton, is positive. The SI derived unit of electric charge is the coulomb.',
            "description*": {
                "en": '"Electric Charge" is a fundamental conserved property of some subatomic particles, which determines their electromagnetic interaction. Electrically charged matter is influenced by, and produces, electromagnetic fields. The electric charge on a body may be positive or negative. Two positively charged bodies experience a mutual repulsive force, as do two negatively charged bodies. A positively charged body and a negatively charged body experience an attractive force. Electric charge is carried by discrete particles and can be positive or negative. The sign convention is such that the elementary electric charge $e$, that is, the charge of the proton, is positive. The SI derived unit of electric charge is the coulomb.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricChargeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb7248b1f04455ec99e6ff6e6b472d8de"]
    unit: Optional[ElectricChargeUnit] = Field(
        ElectricChargeUnit.ampere_second,
        options={"enum_titles": ["A·s"]},
        title="ElectricChargeUnit",
        x_enum_varnames=["ampere_second"],
    )


class ReserveMass(Mass):
    """
    A quantity of mass held by Program/project management to mitigate the risk of over-predicted performance estimates, under predicted mass estimates, and future operational and mission specific requirements (program mass reserve, manager's mass reserve, launch window reserve, performance reserve, etc.).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "af4250ba-95c2-516c-96ee-bc62f2ecfdc6",
            "title": "ReserveMass",
            "title*": {"en": "Reserve Mass"},
            "description": "A quantity of mass held by Program/project management to mitigate the risk of over-predicted performance estimates, under predicted mass estimates, and future operational and mission specific requirements (program mass reserve, manager's mass reserve, launch window reserve, performance reserve, etc.).",
            "description*": {
                "en": "A quantity of mass held by Program/project management to mitigate the risk of over-predicted performance estimates, under predicted mass estimates, and future operational and mission specific requirements (program mass reserve, manager's mass reserve, launch window reserve, performance reserve, etc.)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasReserveMassValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWaf4250ba95c2516c96eebc62f2ecfdc6"]


class PowerPerAreaQuarticTemperatureUnit(UnitEnum):
    field_4_per_meter_squared = "Item:OSW88f406fb6a1250eab2d89590d6488f19"


class PowerPerAreaQuarticTemperature(QuantityValue):
    """
    This is an autogenerated partial class definition of 'PowerPerAreaQuarticTemperature'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "2455e65d-a409-51d1-9c35-70531c3e3bf1",
            "title": "PowerPerAreaQuarticTemperature",
            "title*": {"en": "Power per area quartic temperature"},
            "description": "This is an autogenerated partial class definition of 'PowerPerAreaQuarticTemperature'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPowerPerAreaQuarticTemperatureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2455e65da40951d19c3570531c3e3bf1"]
    unit: Optional[PowerPerAreaQuarticTemperatureUnit] = Field(
        PowerPerAreaQuarticTemperatureUnit.field_4_per_meter_squared,
        options={"enum_titles": ["W/(m²·K⁴)"]},
        title="PowerPerAreaQuarticTemperatureUnit",
        x_enum_varnames=["4_per_meter_squared"],
    )


class WebTime(Time):
    """
    This is an autogenerated partial class definition of 'WebTime'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "02ed3a47-8531-578b-90f1-1bcaefa3f86c",
            "title": "WebTime",
            "title*": {"en": "Web Time"},
            "description": "This is an autogenerated partial class definition of 'WebTime'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasWebTimeValue",
            "@context": [
                "/wiki/Category:OSW389cb87d31be515aa5d2f12e2b66e938?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW02ed3a478531578b90f11bcaefa3f86c"]


class EnergyPerAreaUnit(UnitEnum):
    joule_per_meter_squared = "Item:OSW0747b5382b955ef2adef0e4c4b1efa81"
    giga_joule_per_meter_squared = (
        "Item:OSW0747b5382b955ef2adef0e4c4b1efa81#OSW48c62f71ae5a512ca24dcb6059999b8d"
    )
    milli_joule_per_meter_squared = (
        "Item:OSW0747b5382b955ef2adef0e4c4b1efa81#OSW3b9b7dca35ec5f7995ba76de650fcadf"
    )
    mega_joule_per_meter_squared = (
        "Item:OSW0747b5382b955ef2adef0e4c4b1efa81#OSWf9cdbd6556545d55a9bde1a0915a9545"
    )
    joule_per_centi_meter_squared = (
        "Item:OSW0747b5382b955ef2adef0e4c4b1efa81#OSW16b24f4ffe12585aa114fbefbf3dbd5b"
    )


class EnergyPerArea(QuantityValue):
    """
    Energy per unit area is a measure of the energy either impinging upon or generated from a given unit of area. This can be a measure of the "toughness" of a material, being the amount of energy that needs to be applied per unit area of a crack to cause it to fracture. This is a constant for a given material..
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "46d8ae43-3dda-5e36-8d8e-76800d85ee12",
            "title": "EnergyPerArea",
            "title*": {"en": "Energy per Area"},
            "description": 'Energy per unit area is a measure of the energy either impinging upon or generated from a given unit of area. This can be a measure of the "toughness" of a material, being the amount of energy that needs to be applied per unit area of a crack to cause it to fracture. This is a constant for a given material..',
            "description*": {
                "en": 'Energy per unit area is a measure of the energy either impinging upon or generated from a given unit of area. This can be a measure of the "toughness" of a material, being the amount of energy that needs to be applied per unit area of a crack to cause it to fracture. This is a constant for a given material..'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnergyPerAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW46d8ae433dda5e368d8e76800d85ee12"]
    unit: Optional[EnergyPerAreaUnit] = Field(
        EnergyPerAreaUnit.joule_per_meter_squared,
        options={"enum_titles": ["J/m²", "GJ/m²", "mJ/m²", "MJ/m²", "J/cm²"]},
        title="EnergyPerAreaUnit",
        x_enum_varnames=[
            "joule_per_meter_squared",
            "giga_joule_per_meter_squared",
            "milli_joule_per_meter_squared",
            "mega_joule_per_meter_squared",
            "joule_per_centi_meter_squared",
        ],
    )


class AbsorbedDoseRateUnit(UnitEnum):
    gray_per_second = "Item:OSW4cbc32faa6945fea85c32ee675aff008"


class AbsorbedDoseRate(QuantityValue):
    """
    "Absorbed Dose Rate" is the absorbed dose of ionizing radiation imparted at a given location per unit of time (second, minute, hour, or day).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "2a24ce5e-8c58-5426-b905-fe16c38b632b",
            "title": "AbsorbedDoseRate",
            "title*": {"en": "Absorbed Dose Rate"},
            "description": '"Absorbed Dose Rate" is the absorbed dose of ionizing radiation imparted at a given location per unit of time (second, minute, hour, or day).',
            "description*": {
                "en": '"Absorbed Dose Rate" is the absorbed dose of ionizing radiation imparted at a given location per unit of time (second, minute, hour, or day).'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAbsorbedDoseRateValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2a24ce5e8c585426b905fe16c38b632b"]
    unit: Optional[AbsorbedDoseRateUnit] = Field(
        AbsorbedDoseRateUnit.gray_per_second,
        options={"enum_titles": ["Gy/s"]},
        title="AbsorbedDoseRateUnit",
        x_enum_varnames=["gray_per_second"],
    )


class VentilationRatePerFloorAreaUnit(UnitEnum):
    liter_per_meter_squared_per_second = "Item:OSW3248fcac4b1b514b81d2b9f7bf05e180"


class VentilationRatePerFloorArea(QuantityValue):
    """
    Ventilation Rate is often expressed by the volumetric flowrate of outdoor air introduced to a building. However, ASHRAE now recommends ventilation rates dependent upon floor area.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "8cf0ce0f-6ab8-5ec7-b70b-73d8f79577cd",
            "title": "VentilationRatePerFloorArea",
            "title*": {"en": "Ventilation Rate per Floor Area"},
            "description": "Ventilation Rate is often expressed by the volumetric flowrate of outdoor air introduced to a building. However, ASHRAE now recommends ventilation rates dependent upon floor area.",
            "description*": {
                "en": "Ventilation Rate is often expressed by the volumetric flowrate of outdoor air introduced to a building. However, ASHRAE now recommends ventilation rates dependent upon floor area."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVentilationRatePerFloorAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8cf0ce0f6ab85ec7b70b73d8f79577cd"]
    unit: Optional[VentilationRatePerFloorAreaUnit] = Field(
        VentilationRatePerFloorAreaUnit.liter_per_meter_squared_per_second,
        options={"enum_titles": ["L/(s·m²)"]},
        title="VentilationRatePerFloorAreaUnit",
        x_enum_varnames=["liter_per_meter_squared_per_second"],
    )


class SourceVoltageBetweenSubstances(Voltage):
    """
    "Source Voltage Between Substances" is the source voltage between substance a and b.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "d7b24106-d1b4-5f85-ba41-2191d65d7c1d",
            "title": "SourceVoltageBetweenSubstances",
            "title*": {"en": "Source Voltage Between Substances"},
            "description": '"Source Voltage Between Substances" is the source voltage between substance a and b.',
            "description*": {
                "en": '"Source Voltage Between Substances" is the source voltage between substance a and b.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSourceVoltageBetweenSubstancesValue",
            "@context": [
                "/wiki/Category:OSW19bdaead0e9852b68da79f45423f2b58?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd7b24106d1b45f85ba412191d65d7c1d"]


class AverageEnergyLossPerElementaryChargeProduced(Energy):
    """
    "Average Energy Loss per Elementary Charge Produced" is also referred to as average energy loss per ion pair formed.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "297cbb81-c60a-534a-8852-18aaa3caeb0f",
            "title": "AverageEnergyLossPerElementaryChargeProduced",
            "title*": {"en": "Average Energy Loss per Elementary Charge Produced"},
            "description": '"Average Energy Loss per Elementary Charge Produced" is also referred to as average energy loss per ion pair formed.',
            "description*": {
                "en": '"Average Energy Loss per Elementary Charge Produced" is also referred to as average energy loss per ion pair formed.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAverageEnergyLossPerElementaryChargeProducedValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW297cbb81c60a534a885218aaa3caeb0f"]


class ReynoldsNumber(DimensionlessRatio):
    """
    The "Reynolds Number" (Re) is a dimensionless number that gives a measure of the ratio of inertial forces to viscous forces and consequently quantifies the relative importance of these two types of forces for given flow conditions.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "21be91e0-703b-56c6-a6d9-96756c8e23a8",
            "title": "ReynoldsNumber",
            "title*": {"en": "Reynolds Number"},
            "description": 'The "Reynolds Number" (Re) is a dimensionless number that gives a measure of the ratio of inertial forces to viscous forces and consequently quantifies the relative importance of these two types of forces for given flow conditions.',
            "description*": {
                "en": 'The "Reynolds Number" (Re) is a dimensionless number that gives a measure of the ratio of inertial forces to viscous forces and consequently quantifies the relative importance of these two types of forces for given flow conditions.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasReynoldsNumberValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW21be91e0703b56c6a6d996756c8e23a8"]


class Strain(DimensionlessRatio):
    """
    In any branch of science dealing with materials and their behaviour, strain is the geometrical expression of deformation caused by the action of stress on a physical body. Strain is calculated by first assuming a change between two body states: the beginning state and the final state. Then the difference in placement of two points in this body in those two states expresses the numerical value of strain. Strain therefore expresses itself as a change in size and/or shape. [Wikipedia]
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "877f6c0b-1134-5264-9d1a-4ac5ea3a6710",
            "title": "Strain",
            "title*": {"en": "Strain"},
            "description": "In any branch of science dealing with materials and their behaviour, strain is the geometrical expression of deformation caused by the action of stress on a physical body. Strain is calculated by first assuming a change between two body states: the beginning state and the final state. Then the difference in placement of two points in this body in those two states expresses the numerical value of strain. Strain therefore expresses itself as a change in size and/or shape. [Wikipedia]",
            "description*": {
                "en": "In any branch of science dealing with materials and their behaviour, strain is the geometrical expression of deformation caused by the action of stress on a physical body. Strain is calculated by first assuming a change between two body states: the beginning state and the final state. Then the difference in placement of two points in this body in those two states expresses the numerical value of strain. Strain therefore expresses itself as a change in size and/or shape. [Wikipedia]"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasStrainValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW877f6c0b113452649d1a4ac5ea3a6710"]


class EntropyUnit(UnitEnum):
    joule_per_kelvin = "Item:OSW501738b1f645568c9c4fb6da844439c7"
    mega_joule_per_kelvin = (
        "Item:OSW501738b1f645568c9c4fb6da844439c7#OSWf8925d2e60865f589809095c9e172dbe"
    )
    kilo_joule_per_kelvin = (
        "Item:OSW501738b1f645568c9c4fb6da844439c7#OSW7b31ddba89fc5359972c09eda7f30683"
    )


class Entropy(QuantityValue):
    """
    When a small amount of heat $dQ$ is received by a system whose thermodynamic temperature is $T$, the entropy of the system increases by $dQ/T$, provided that no irreversible change takes place in the system.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "cb71f0cf-941a-5870-9eac-e6b2c98ebeda",
            "title": "Entropy",
            "title*": {"en": "Entropy", "de": "Entropie"},
            "description": "When a small amount of heat $dQ$ is received by a system whose thermodynamic temperature is $T$, the entropy of the system increases by $dQ/T$, provided that no irreversible change takes place in the system.",
            "description*": {
                "en": "When a small amount of heat $dQ$ is received by a system whose thermodynamic temperature is $T$, the entropy of the system increases by $dQ/T$, provided that no irreversible change takes place in the system."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEntropyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcb71f0cf941a58709eace6b2c98ebeda"]
    unit: Optional[EntropyUnit] = Field(
        EntropyUnit.joule_per_kelvin,
        options={"enum_titles": ["J/K", "MJ/K", "kJ/K"]},
        title="EntropyUnit",
        x_enum_varnames=[
            "joule_per_kelvin",
            "mega_joule_per_kelvin",
            "kilo_joule_per_kelvin",
        ],
    )


class ResistanceRatio(DimensionlessRatio):
    """
    This is an autogenerated partial class definition of 'ResistanceRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1a4104b1-0700-5ab9-973f-79ac86392bdd",
            "title": "ResistanceRatio",
            "title*": {"en": "Resistance Ratio"},
            "description": "This is an autogenerated partial class definition of 'ResistanceRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasResistanceRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1a4104b107005ab9973f79ac86392bdd"]


class VehicleVelocity(Velocity):
    """
    This is an autogenerated partial class definition of 'VehicleVelocity'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "42543b13-af4c-5af8-8462-e7ac8ff8707d",
            "title": "VehicleVelocity",
            "title*": {"en": "Vehicle Velocity"},
            "description": "This is an autogenerated partial class definition of 'VehicleVelocity'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVehicleVelocityValue",
            "@context": [
                "/wiki/Category:OSW397c67ece63a5a5c96bad9349f49f3d7?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW42543b13af4c5af88462e7ac8ff8707d"]


class EllipticalOrbitApogeeVelocity(VehicleVelocity):
    """
    Velocity at apogee for an elliptical orbit velocity
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "21ffdd97-a09d-5fa5-aec4-91d06ece05e8",
            "title": "EllipticalOrbitApogeeVelocity",
            "title*": {"en": "Elliptical Orbit Apogee Velocity"},
            "description": "Velocity at apogee for an elliptical orbit velocity",
            "description*": {
                "en": "Velocity at apogee for an elliptical orbit velocity"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEllipticalOrbitApogeeVelocityValue",
            "@context": [
                "/wiki/Category:OSW42543b13af4c5af88462e7ac8ff8707d?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW21ffdd97a09d5fa5aec491d06ece05e8"]


class Circulation(AreaPerTime):
    """
    In fluid dynamics, circulation is the line integral around a closed curve of the fluid velocity. It has dimensions of length squared over time.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ec3279eb-a6a0-57f4-9cd2-b5b384701930",
            "title": "Circulation",
            "title*": {"en": "Circulation"},
            "description": "In fluid dynamics, circulation is the line integral around a closed curve of the fluid velocity. It has dimensions of length squared over time.",
            "description*": {
                "en": "In fluid dynamics, circulation is the line integral around a closed curve of the fluid velocity. It has dimensions of length squared over time."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCirculationValue",
            "@context": [
                "/wiki/Category:OSW64892b4f11e852b1873975a66e851abe?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWec3279eba6a057f49cd2b5b384701930"]


class OrbitalAngularMomentumQuantumNumber(QuantumNumber):
    """
    The "Principal Quantum Number" describes the electron shell, or energy level, of an atom. The value of $n$ ranges from 1 to the shell containing the outermost electron of that atom.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "5c36ed49-914c-5294-ab82-9feb052f5cdb",
            "title": "OrbitalAngularMomentumQuantumNumber",
            "title*": {"en": "Orbital Angular Momentum Quantum Number"},
            "description": 'The "Principal Quantum Number" describes the electron shell, or energy level, of an atom. The value of $n$ ranges from 1 to the shell containing the outermost electron of that atom.',
            "description*": {
                "en": 'The "Principal Quantum Number" describes the electron shell, or energy level, of an atom. The value of $n$ ranges from 1 to the shell containing the outermost electron of that atom.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasOrbitalAngularMomentumQuantumNumberValue",
            "@context": [
                "/wiki/Category:OSWa35c06b30b7750c49dd53768ffd9e756?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW5c36ed49914c5294ab829feb052f5cdb"]


class MassPerEnergyUnit(UnitEnum):
    kilo_gram_per_joule = "Item:OSW0ab2af45d05c527d8fe20509629f9ae3"


class MassPerEnergy(QuantityValue):
    """
    Mass per Energy is a physical quantity that can be used to relate the energy of a system to its mass.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "dbee78c7-1c25-5e02-babd-2e594e503815",
            "title": "MassPerEnergy",
            "title*": {"en": "Mass per Energy"},
            "description": "Mass per Energy is a physical quantity that can be used to relate the energy of a system to its mass.",
            "description*": {
                "en": "Mass per Energy is a physical quantity that can be used to relate the energy of a system to its mass."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassPerEnergyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWdbee78c71c255e02babd2e594e503815"]
    unit: Optional[MassPerEnergyUnit] = Field(
        MassPerEnergyUnit.kilo_gram_per_joule,
        options={"enum_titles": ["kg/J"]},
        title="MassPerEnergyUnit",
        x_enum_varnames=["kilo_gram_per_joule"],
    )


class LinearAccelerationUnit(UnitEnum):
    meter_per_second_squared = "Item:OSWb91fd68d93375855a57c795180c429a3"
    centi_meter_per_second_squared = (
        "Item:OSWb91fd68d93375855a57c795180c429a3#OSW014676a1d72e5f16a59a8d966253ab6f"
    )


class LinearAcceleration(QuantityValue):
    """
    This is an autogenerated partial class definition of 'LinearAcceleration'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a2a2e32d-40b6-5c90-b0cd-1b4af5e0c6d2",
            "title": "LinearAcceleration",
            "title*": {"en": "Linear Acceleration"},
            "description": "This is an autogenerated partial class definition of 'LinearAcceleration'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLinearAccelerationValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa2a2e32d40b65c90b0cd1b4af5e0c6d2"]
    unit: Optional[LinearAccelerationUnit] = Field(
        LinearAccelerationUnit.meter_per_second_squared,
        options={"enum_titles": ["m/s²", "cm/s²"]},
        title="LinearAccelerationUnit",
        x_enum_varnames=["meter_per_second_squared", "centi_meter_per_second_squared"],
    )


class EffectiveExhaustvelocity(Velocity):
    """
    The velocity of an exhaust stream after reduction by effects such as friction, non-axially directed flow, and pressure differences between the inside of the rocket and its surroundings. The effective exhaust velocity is one of two factors determining the thrust, or accelerating force, that a rocket can develop, the other factor being the quantity of reaction mass expelled from the rocket in unit time. In most cases, the effective exhaust velocity is close to the actual exhaust velocity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ee6fb4bb-bb50-537c-9b1c-cd0e9f7d826a",
            "title": "EffectiveExhaustvelocity",
            "title*": {"en": "Effective Exhaustvelocity"},
            "description": "The velocity of an exhaust stream after reduction by effects such as friction, non-axially directed flow, and pressure differences between the inside of the rocket and its surroundings. The effective exhaust velocity is one of two factors determining the thrust, or accelerating force, that a rocket can develop, the other factor being the quantity of reaction mass expelled from the rocket in unit time. In most cases, the effective exhaust velocity is close to the actual exhaust velocity.",
            "description*": {
                "en": "The velocity of an exhaust stream after reduction by effects such as friction, non-axially directed flow, and pressure differences between the inside of the rocket and its surroundings. The effective exhaust velocity is one of two factors determining the thrust, or accelerating force, that a rocket can develop, the other factor being the quantity of reaction mass expelled from the rocket in unit time. In most cases, the effective exhaust velocity is close to the actual exhaust velocity."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEffectiveExhaustvelocityValue",
            "@context": [
                "/wiki/Category:OSW397c67ece63a5a5c96bad9349f49f3d7?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWee6fb4bbbb50537c9b1ccd0e9f7d826a"]


class Piece(Count):
    """
    This is an autogenerated partial class definition of 'Piece'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "dc14ddb7-0b10-5a98-bfa6-afc265622908",
            "title": "Piece",
            "title*": {"en": "Piece"},
            "description": "This is an autogenerated partial class definition of 'Piece'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPieceValue",
            "@context": [
                "/wiki/Category:OSWb0250d3677f6592f9d4329c8b9d5f8d1?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWdc14ddb70b105a98bfa6afc265622908"]


class ExposureRateUnit(UnitEnum):
    coulomb_per_kilo_gram_per_second = "Item:OSW7c9817a1145157e8b2803464c641e6cf"


class ExposureRate(QuantityValue):
    """
    "Exposure Rate" expresses the rate of charge production per unit mass of air and is commonly expressed in roentgens per hour (R/h) or milliroentgens per hour (mR/h).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "759cf8e1-6f60-5988-8729-2ea131ad71c2",
            "title": "ExposureRate",
            "title*": {"en": "Exposure Rate"},
            "description": '"Exposure Rate" expresses the rate of charge production per unit mass of air and is commonly expressed in roentgens per hour (R/h) or milliroentgens per hour (mR/h).',
            "description*": {
                "en": '"Exposure Rate" expresses the rate of charge production per unit mass of air and is commonly expressed in roentgens per hour (R/h) or milliroentgens per hour (mR/h).'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasExposureRateValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW759cf8e16f60598887292ea131ad71c2"]
    unit: Optional[ExposureRateUnit] = Field(
        ExposureRateUnit.coulomb_per_kilo_gram_per_second,
        options={"enum_titles": ["C/(kg·s)"]},
        title="ExposureRateUnit",
        x_enum_varnames=["coulomb_per_kilo_gram_per_second"],
    )


class InverseAmountOfSubstanceUnit(UnitEnum):
    per_mole = "Item:OSW7b8304e9935651c7a91b9d5b8f6594e3"


class InverseAmountOfSubstance(QuantityValue):
    """
    This is an autogenerated partial class definition of 'InverseAmountOfSubstance'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "03376cde-4b36-580a-9a9f-6290fb6340af",
            "title": "InverseAmountOfSubstance",
            "title*": {"en": "Inverse amount of substance"},
            "description": "This is an autogenerated partial class definition of 'InverseAmountOfSubstance'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInverseAmountOfSubstanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW03376cde4b36580a9a9f6290fb6340af"]
    unit: Optional[InverseAmountOfSubstanceUnit] = Field(
        InverseAmountOfSubstanceUnit.per_mole,
        options={"enum_titles": ["1/mol"]},
        title="InverseAmountOfSubstanceUnit",
        x_enum_varnames=["per_mole"],
    )


class MagneticFluxDensity(QuantityValue):
    """
    "Magnetic Flux Density" is a vector quantity and is the magnetic flux per unit area of a magnetic field at right angles to the magnetic force. It can be defined in terms of the effects the field has, for example by $B = F/q v \sin \theta$, where $F$ is the force a moving charge $q$ would experience if it was travelling at a velocity $v$ in a direction making an angle θ with that of the field. The magnetic field strength is also a vector quantity and is related to $B$ by: $H = B/\mu$, where $\mu$ is the permeability of the medium.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "91fc2f11-0c7f-5262-8dce-39bc0278562b",
            "title": "MagneticFluxDensity",
            "title*": {"en": "Magnetic flux density", "de": "Magnetische Flussdichte"},
            "description": '"Magnetic Flux Density" is a vector quantity and is the magnetic flux per unit area of a magnetic field at right angles to the magnetic force. It can be defined in terms of the effects the field has, for example by $B = F/q v \\sin \\theta$, where $F$ is the force a moving charge $q$ would experience if it was travelling at a velocity $v$ in a direction making an angle θ with that of the field. The magnetic field strength is also a vector quantity and is related to $B$ by: $H = B/\\mu$, where $\\mu$ is the permeability of the medium.',
            "description*": {
                "en": '"Magnetic Flux Density" is a vector quantity and is the magnetic flux per unit area of a magnetic field at right angles to the magnetic force. It can be defined in terms of the effects the field has, for example by $B = F/q v \\sin \\theta$, where $F$ is the force a moving charge $q$ would experience if it was travelling at a velocity $v$ in a direction making an angle θ with that of the field. The magnetic field strength is also a vector quantity and is related to $B$ by: $H = B/\\mu$, where $\\mu$ is the permeability of the medium.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMagneticFluxDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW91fc2f110c7f52628dce39bc0278562b"]
    unit: Optional[MagneticFluxDensityUnit] = Field(
        MagneticFluxDensityUnit.tesla,
        options={"enum_titles": ["T", "mT", "µT", "nT"]},
        title="MagneticFluxDensityUnit",
        x_enum_varnames=["tesla", "milli_tesla", "micro_tesla", "nano_tesla"],
    )


class MeanLifetime(Time):
    """
    The "Mean Lifetime" is the average length of time that an element remains in the set of discrete elements in a decaying quantity, $N(t)$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "463ab2ae-4248-5ddc-a80f-31dca59d3113",
            "title": "MeanLifetime",
            "title*": {"en": "Mean Lifetime"},
            "description": 'The "Mean Lifetime" is the average length of time that an element remains in the set of discrete elements in a decaying quantity, $N(t)$.',
            "description*": {
                "en": 'The "Mean Lifetime" is the average length of time that an element remains in the set of discrete elements in a decaying quantity, $N(t)$.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMeanLifetimeValue",
            "@context": [
                "/wiki/Category:OSW389cb87d31be515aa5d2f12e2b66e938?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW463ab2ae42485ddca80f31dca59d3113"]


class ForcePerAreaTimeUnit(UnitEnum):
    pascal_per_second = "Item:OSWda81752da4a7532fb7d5790cd2e41a1c"


class ForcePerAreaTime(QuantityValue):
    """
    This is an autogenerated partial class definition of 'ForcePerAreaTime'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "5ffdbf4d-b0e9-5c7e-8ce0-298e48ee3197",
            "title": "ForcePerAreaTime",
            "title*": {"en": "Force Per Area Time"},
            "description": "This is an autogenerated partial class definition of 'ForcePerAreaTime'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasForcePerAreaTimeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW5ffdbf4db0e95c7e8ce0298e48ee3197"]
    unit: Optional[ForcePerAreaTimeUnit] = Field(
        ForcePerAreaTimeUnit.pascal_per_second,
        options={"enum_titles": ["Pa/s"]},
        title="ForcePerAreaTimeUnit",
        x_enum_varnames=["pascal_per_second"],
    )


class ExpansionRatioUnit(UnitEnum):
    per_kelvin = "Item:OSW33dfda3d4dea57d192d02eecdbc09b86"


class ExpansionRatio(QuantityValue):
    """
    This is an autogenerated partial class definition of 'ExpansionRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a3a8179b-b49f-5faf-a9ff-680f4d7f9f34",
            "title": "ExpansionRatio",
            "title*": {"en": "Expansion Ratio"},
            "description": "This is an autogenerated partial class definition of 'ExpansionRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasExpansionRatioValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa3a8179bb49f5fafa9ff680f4d7f9f34"]
    unit: Optional[ExpansionRatioUnit] = Field(
        ExpansionRatioUnit.per_kelvin,
        options={"enum_titles": ["1/K"]},
        title="ExpansionRatioUnit",
        x_enum_varnames=["per_kelvin"],
    )


class LinearExpansionCoefficient(ExpansionRatio):
    """
    This is an autogenerated partial class definition of 'LinearExpansionCoefficient'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1f35ae04-9903-5b23-a508-c8017306a1a8",
            "title": "LinearExpansionCoefficient",
            "title*": {
                "en": "Linear expansion coefficient",
                "de": "Linearer Ausdehnungskoeffizient",
            },
            "description": "This is an autogenerated partial class definition of 'LinearExpansionCoefficient'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLinearExpansionCoefficientValue",
            "@context": [
                "/wiki/Category:OSWa3a8179bb49f5fafa9ff680f4d7f9f34?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1f35ae0499035b23a508c8017306a1a8"]


class SectionAreaIntegralUnit(UnitEnum):
    field_5 = "Item:OSWe03debd3c6025a95b236f88c61ba0bac"


class SectionAreaIntegral(QuantityValue):
    """
    The sectional area integral measure is typically used in torsional analysis. It is usually measured in M⁵.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "e6d85f03-e75c-5740-a25a-00bc1ebb03a8",
            "title": "SectionAreaIntegral",
            "title*": {"en": "Section Area Integral"},
            "description": "The sectional area integral measure is typically used in torsional analysis. It is usually measured in M⁵.",
            "description*": {
                "en": "The sectional area integral measure is typically used in torsional analysis. It is usually measured in M⁵."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSectionAreaIntegralValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe6d85f03e75c5740a25a00bc1ebb03a8"]
    unit: Optional[SectionAreaIntegralUnit] = Field(
        SectionAreaIntegralUnit.field_5,
        options={"enum_titles": ["m⁵"]},
        title="SectionAreaIntegralUnit",
        x_enum_varnames=["5"],
    )


class InitialVelocity(Velocity):
    """
    The velocity of a moving body at starting; especially, the velocity of a projectile as it leaves the mouth of a firearm from which it is discharged.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "10412bab-ccf8-564e-8480-aa8965f19f56",
            "title": "InitialVelocity",
            "title*": {"en": "Initial Velocity"},
            "description": "The velocity of a moving body at starting; especially, the velocity of a projectile as it leaves the mouth of a firearm from which it is discharged.",
            "description*": {
                "en": "The velocity of a moving body at starting; especially, the velocity of a projectile as it leaves the mouth of a firearm from which it is discharged."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInitialVelocityValue",
            "@context": [
                "/wiki/Category:OSW397c67ece63a5a5c96bad9349f49f3d7?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW10412babccf8564e8480aa8965f19f56"]


class EnergyLevel(Energy):
    """
    "Energy Level" is the ionization energy for an electron at the Fermi energy in the interior of a substance.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "58b43062-3bde-5ec8-b77d-2f701f145fc8",
            "title": "EnergyLevel",
            "title*": {"en": "Energy Level"},
            "description": '"Energy Level" is the ionization energy for an electron at the Fermi energy in the interior of a substance.',
            "description*": {
                "en": '"Energy Level" is the ionization energy for an electron at the Fermi energy in the interior of a substance.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnergyLevelValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW58b430623bde5ec8b77d2f701f145fc8"]


class MomentOfForceUnit(UnitEnum):
    meter_newton = "Item:OSW599c5384bf7a5de7b8cee8b2e94c39e3"
    kilo_newton_meter = (
        "Item:OSW599c5384bf7a5de7b8cee8b2e94c39e3#OSWba8c33e36b605a5083b4d9f87e89d04a"
    )
    mega_newton_meter = (
        "Item:OSW599c5384bf7a5de7b8cee8b2e94c39e3#OSW48e50fcb919e57d99158eb2308baed11"
    )
    centi_newton_meter = (
        "Item:OSW599c5384bf7a5de7b8cee8b2e94c39e3#OSWb7de5ae5a2f05221be05e0bf2aa74cb9"
    )
    meter_milli_newton = (
        "Item:OSW599c5384bf7a5de7b8cee8b2e94c39e3#OSW62f7907222b855ffb1920944af234145"
    )
    meter_micro_newton = (
        "Item:OSW599c5384bf7a5de7b8cee8b2e94c39e3#OSWcc1060f0faed597fbef0006b2c6de73d"
    )
    deci_newton_meter = (
        "Item:OSW599c5384bf7a5de7b8cee8b2e94c39e3#OSW83f4a238c5875e3587f45071e11aaaa3"
    )
    centi_meter_newton = (
        "Item:OSW599c5384bf7a5de7b8cee8b2e94c39e3#OSW4a6a4e3488695755a9b81d0947b0f85a"
    )


class MomentOfForce(QuantityValue):
    """
    Moment of force (often just moment) is the tendency of a force to twist or rotate an object.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "305a18e4-16d6-519e-8683-eaf9dfce1dec",
            "title": "MomentOfForce",
            "title*": {"en": "Moment of Force"},
            "description": "Moment of force (often just moment) is the tendency of a force to twist or rotate an object.",
            "description*": {
                "en": "Moment of force (often just moment) is the tendency of a force to twist or rotate an object."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMomentOfForceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW305a18e416d6519e8683eaf9dfce1dec"]
    unit: Optional[MomentOfForceUnit] = Field(
        MomentOfForceUnit.meter_newton,
        options={
            "enum_titles": [
                "N·m",
                "kN·m",
                "m·MN",
                "cN·m",
                "m·mN",
                "m·μN",
                "dN·m",
                "N·cm",
            ]
        },
        title="MomentOfForceUnit",
        x_enum_varnames=[
            "meter_newton",
            "kilo_newton_meter",
            "mega_newton_meter",
            "centi_newton_meter",
            "meter_milli_newton",
            "meter_micro_newton",
            "deci_newton_meter",
            "centi_meter_newton",
        ],
    )


class RelativeMassDefect(DimensionlessRatio):
    """
    The "Relative Mass Defect" is the mass defect between the monoisotopic mass of an element and the mass of its A + 1 or its A + 2 isotopic cluster.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "d648b91c-c358-5f4c-b129-9ebb6b148dc4",
            "title": "RelativeMassDefect",
            "title*": {"en": "Relative Mass Defect"},
            "description": 'The "Relative Mass Defect" is the mass defect between the monoisotopic mass of an element and the mass of its A + 1 or its A + 2 isotopic cluster.',
            "description*": {
                "en": 'The "Relative Mass Defect" is the mass defect between the monoisotopic mass of an element and the mass of its A + 1 or its A + 2 isotopic cluster.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRelativeMassDefectValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd648b91cc3585f4cb1299ebb6b148dc4"]


class MaxOperatingThrust(Thrust):
    """
    This is an autogenerated partial class definition of 'MaxOperatingThrust'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b9eb9b07-0fb3-584c-b6df-0d0dda581fb6",
            "title": "MaxOperatingThrust",
            "title*": {"en": "Max Operating Thrust"},
            "description": "This is an autogenerated partial class definition of 'MaxOperatingThrust'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMaxOperatingThrustValue",
            "@context": [
                "/wiki/Category:OSW7bf742d673495bb8bd77d1ea5295b2cd?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb9eb9b070fb3584cb6df0d0dda581fb6"]


class SolidAngle(AreaRatio):
    """
    The solid angle subtended by a surface S is defined as the surface area of a unit sphere covered by the surface S's projection onto the sphere. A solid angle is related to the surface of a sphere in the same way an ordinary angle is related to the circumference of a circle. Since the total surface area of the unit sphere is 4*pi, the measure of solid angle will always be between 0 and 4*pi.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "180b2bc6-09d1-5ed7-a4e6-b95a952dfb05",
            "title": "SolidAngle",
            "title*": {"en": "Solid angle", "de": "Raumwinkel"},
            "description": "The solid angle subtended by a surface S is defined as the surface area of a unit sphere covered by the surface S's projection onto the sphere. A solid angle is related to the surface of a sphere in the same way an ordinary angle is related to the circumference of a circle. Since the total surface area of the unit sphere is 4*pi, the measure of solid angle will always be between 0 and 4*pi.",
            "description*": {
                "en": "The solid angle subtended by a surface S is defined as the surface area of a unit sphere covered by the surface S's projection onto the sphere. A solid angle is related to the surface of a sphere in the same way an ordinary angle is related to the circumference of a circle. Since the total surface area of the unit sphere is 4*pi, the measure of solid angle will always be between 0 and 4*pi."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSolidAngleValue",
            "@context": [
                "/wiki/Category:OSW1e2d83c5660e50828bd14194ea5d5717?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW180b2bc609d15ed7a4e6b95a952dfb05"]


class InverseLength(QuantityValue):
    """
    Reciprocal length or inverse length is a measurement used in several branches of science and mathematics. As the reciprocal of length, common units used for this measurement include the reciprocal metre or inverse metre ($m^{-1}$), the reciprocal centimetre or inverse centimetre ($cm^{-1}$), and, in optics, the dioptre.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "23837e2c-50f0-5ba8-8468-2b08465bf173",
            "title": "InverseLength",
            "title*": {"en": "Inverse Length"},
            "description": "Reciprocal length or inverse length is a measurement used in several branches of science and mathematics. As the reciprocal of length, common units used for this measurement include the reciprocal metre or inverse metre ($m^{-1}$), the reciprocal centimetre or inverse centimetre ($cm^{-1}$), and, in optics, the dioptre.",
            "description*": {
                "en": "Reciprocal length or inverse length is a measurement used in several branches of science and mathematics. As the reciprocal of length, common units used for this measurement include the reciprocal metre or inverse metre ($m^{-1}$), the reciprocal centimetre or inverse centimetre ($cm^{-1}$), and, in optics, the dioptre."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInverseLengthValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW23837e2c50f05ba884682b08465bf173"]
    unit: Optional[InverseLengthUnit] = Field(
        InverseLengthUnit.per_meter,
        options={
            "enum_titles": ["1/m", "1/cm", "1/nm", "1/mm", "1/pm", "1/μm", "1/km"]
        },
        title="InverseLengthUnit",
        x_enum_varnames=[
            "per_meter",
            "per_centi_meter",
            "per_nano_meter",
            "per_milli_meter",
            "per_pico_meter",
            "per_micro_meter",
            "per_kilo_meter",
        ],
    )


class TorqueUnit(UnitEnum):
    meter_newton = "Item:OSW599c5384bf7a5de7b8cee8b2e94c39e3"
    kilo_newton_meter = (
        "Item:OSW599c5384bf7a5de7b8cee8b2e94c39e3#OSWba8c33e36b605a5083b4d9f87e89d04a"
    )
    mega_newton_meter = (
        "Item:OSW599c5384bf7a5de7b8cee8b2e94c39e3#OSW48e50fcb919e57d99158eb2308baed11"
    )
    centi_newton_meter = (
        "Item:OSW599c5384bf7a5de7b8cee8b2e94c39e3#OSWb7de5ae5a2f05221be05e0bf2aa74cb9"
    )
    meter_milli_newton = (
        "Item:OSW599c5384bf7a5de7b8cee8b2e94c39e3#OSW62f7907222b855ffb1920944af234145"
    )
    meter_micro_newton = (
        "Item:OSW599c5384bf7a5de7b8cee8b2e94c39e3#OSWcc1060f0faed597fbef0006b2c6de73d"
    )
    deci_newton_meter = (
        "Item:OSW599c5384bf7a5de7b8cee8b2e94c39e3#OSW83f4a238c5875e3587f45071e11aaaa3"
    )
    centi_meter_newton = (
        "Item:OSW599c5384bf7a5de7b8cee8b2e94c39e3#OSW4a6a4e3488695755a9b81d0947b0f85a"
    )


class Torque(QuantityValue):
    """
    In physics, a torque ($\tau$) is a vector that measures the tendency of a force to rotate an object about some axis. The magnitude of a torque is defined as force times its lever arm. Just as a force is a push or a pull, a torque can be thought of as a twist. The SI unit for torque is newton meters ($N m$). In U.S. customary units, it is measured in foot pounds (ft lbf) (also known as "pounds feet").
    Mathematically, the torque on a particle (which has the position r in some reference frame) can be defined as the cross product: $τ = r x F$
    where,
    r is the particle's position vector relative to the fulcrum
    F is the force acting on the particles,
    or, more generally, torque can be defined as the rate of change of angular momentum: $τ = dL/dt$
    where,
    L is the angular momentum vector
    t stands for time.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "77f25284-632d-50b0-ae2b-e064592412ce",
            "title": "Torque",
            "title*": {"en": "Torque", "de": "Torsionmoment"},
            "description": 'In physics, a torque ($\\tau$) is a vector that measures the tendency of a force to rotate an object about some axis. The magnitude of a torque is defined as force times its lever arm. Just as a force is a push or a pull, a torque can be thought of as a twist. The SI unit for torque is newton meters ($N m$). In U.S. customary units, it is measured in foot pounds (ft lbf) (also known as "pounds feet").\nMathematically, the torque on a particle (which has the position r in some reference frame) can be defined as the cross product: $τ = r x F$\nwhere,\nr is the particle\'s position vector relative to the fulcrum\nF is the force acting on the particles,\nor, more generally, torque can be defined as the rate of change of angular momentum: $τ = dL/dt$\nwhere,\nL is the angular momentum vector\nt stands for time.',
            "description*": {
                "en": 'In physics, a torque ($\\tau$) is a vector that measures the tendency of a force to rotate an object about some axis. The magnitude of a torque is defined as force times its lever arm. Just as a force is a push or a pull, a torque can be thought of as a twist. The SI unit for torque is newton meters ($N m$). In U.S. customary units, it is measured in foot pounds (ft lbf) (also known as "pounds feet").\nMathematically, the torque on a particle (which has the position r in some reference frame) can be defined as the cross product: $τ = r x F$\nwhere,\nr is the particle\'s position vector relative to the fulcrum\nF is the force acting on the particles,\nor, more generally, torque can be defined as the rate of change of angular momentum: $τ = dL/dt$\nwhere,\nL is the angular momentum vector\nt stands for time.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTorqueValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW77f25284632d50b0ae2be064592412ce"]
    unit: Optional[TorqueUnit] = Field(
        TorqueUnit.meter_newton,
        options={
            "enum_titles": [
                "N·m",
                "kN·m",
                "m·MN",
                "cN·m",
                "m·mN",
                "m·μN",
                "dN·m",
                "N·cm",
            ]
        },
        title="TorqueUnit",
        x_enum_varnames=[
            "meter_newton",
            "kilo_newton_meter",
            "mega_newton_meter",
            "centi_newton_meter",
            "meter_milli_newton",
            "meter_micro_newton",
            "deci_newton_meter",
            "centi_meter_newton",
        ],
    )


class ElevationRelativeToNap(Altitude):
    """
    Height measurement relative to the Normaal Amsterdams Peil (NAP) (en: Amsterdam Ordnance System). Being a form of gravity related height
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ca3e2877-dac8-5f00-baef-b338479a3c44",
            "title": "ElevationRelativeToNap",
            "title*": {"en": "Elevation relative to NAP"},
            "description": "Height measurement relative to the Normaal Amsterdams Peil (NAP) (en: Amsterdam Ordnance System). Being a form of gravity related height",
            "description*": {
                "en": "Height measurement relative to the Normaal Amsterdams Peil (NAP) (en: Amsterdam Ordnance System). Being a form of gravity related height"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElevationRelativeToNapValue",
            "@context": [
                "/wiki/Category:OSW2423ce4a8e5c5a2782492fd72d06ee04?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWca3e2877dac85f00baefb338479a3c44"]


class DeltaV(Velocity):
    """
    The change in translational velocity including all losses for a propulsive system or module. Delta-V losses include, but are not limited to, gravity losses and steering losses.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c6e4b85a-cce1-53fd-85a0-b7babd166131",
            "title": "DeltaV",
            "title*": {"en": "Delta-V"},
            "description": "The change in translational velocity including all losses for a propulsive system or module. Delta-V losses include, but are not limited to, gravity losses and steering losses.",
            "description*": {
                "en": "The change in translational velocity including all losses for a propulsive system or module. Delta-V losses include, but are not limited to, gravity losses and steering losses."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDeltaVValue",
            "@context": [
                "/wiki/Category:OSW397c67ece63a5a5c96bad9349f49f3d7?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc6e4b85acce153fd85a0b7babd166131"]


class ElectricChargeLinearDensityUnit(UnitEnum):
    coulomb_per_meter = "Item:OSW375890764ffa5a5cb84e1cbbe16a7315"


class ElectricChargeLinearDensity(QuantityValue):
    """
    In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4631a0c8-2e5a-5333-b3a8-9b76ff2d0b54",
            "title": "ElectricChargeLinearDensity",
            "title*": {"en": "Electric Charge Linear Density"},
            "description": "In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively.",
            "description*": {
                "en": "In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricChargeLinearDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4631a0c82e5a5333b3a89b76ff2d0b54"]
    unit: Optional[ElectricChargeLinearDensityUnit] = Field(
        ElectricChargeLinearDensityUnit.coulomb_per_meter,
        options={"enum_titles": ["C/m"]},
        title="ElectricChargeLinearDensityUnit",
        x_enum_varnames=["coulomb_per_meter"],
    )


class NozzleThroatPressure(Pressure):
    """
    This is an autogenerated partial class definition of 'NozzleThroatPressure'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "6ea9da91-7989-54da-a6d0-059bfba4ddbe",
            "title": "NozzleThroatPressure",
            "title*": {"en": "Nozzle Throat Pressure"},
            "description": "This is an autogenerated partial class definition of 'NozzleThroatPressure'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasNozzleThroatPressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6ea9da91798954daa6d0059bfba4ddbe"]


class TemperaturePerTimeUnit(UnitEnum):
    Celsius_per_second = "Item:OSW90e277e1e16052a49c728adea4b95d64"


class TemperaturePerTime(QuantityValue):
    """
    This is an autogenerated partial class definition of 'TemperaturePerTime'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "b124402a-1c76-538b-81dd-41babc0cd7e2",
            "title": "TemperaturePerTime",
            "title*": {"en": "Temperature per Time"},
            "description": "This is an autogenerated partial class definition of 'TemperaturePerTime'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTemperaturePerTimeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb124402a1c76538b81dd41babc0cd7e2"]
    unit: Optional[TemperaturePerTimeUnit] = Field(
        TemperaturePerTimeUnit.Celsius_per_second,
        options={"enum_titles": ["°C/s"]},
        title="TemperaturePerTimeUnit",
        x_enum_varnames=["Celsius_per_second"],
    )


class TemperatureRateOfChange(TemperaturePerTime):
    """
    The "Temperature Rate of Change" measures the difference of a temperature per time (positive: rise, negative: fall), as for instance used with heat sensors. It is for example measured in K/s.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a04307c2-ccbf-57d0-b162-81a3be595f60",
            "title": "TemperatureRateOfChange",
            "title*": {"en": "Temperature Rate of Change"},
            "description": 'The "Temperature Rate of Change" measures the difference of a temperature per time (positive: rise, negative: fall), as for instance used with heat sensors. It is for example measured in K/s.',
            "description*": {
                "en": 'The "Temperature Rate of Change" measures the difference of a temperature per time (positive: rise, negative: fall), as for instance used with heat sensors. It is for example measured in K/s.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTemperatureRateOfChangeValue",
            "@context": [
                "/wiki/Category:OSWb124402a1c76538b81dd41babc0cd7e2?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa04307c2ccbf57d0b16281a3be595f60"]


class CombinedNonEvaporativeHeatTransferCoefficientUnit(UnitEnum):
    watt_per_kelvin_per_meter_squared = "Item:OSWdc31cad7e9225defbc08f6f79bf5c4ea"


class CombinedNonEvaporativeHeatTransferCoefficient(QuantityValue):
    """
    "Combined Non Evaporative Heat Transfer Coefficient" is the
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a4e5b512-56a6-5c60-be79-3f4224e41487",
            "title": "CombinedNonEvaporativeHeatTransferCoefficient",
            "title*": {"en": "Combined Non Evaporative Heat Transfer Coefficient"},
            "description": '"Combined Non Evaporative Heat Transfer Coefficient" is the',
            "description*": {
                "en": '"Combined Non Evaporative Heat Transfer Coefficient" is the'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCombinedNonEvaporativeHeatTransferCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa4e5b51256a65c60be793f4224e41487"]
    unit: Optional[CombinedNonEvaporativeHeatTransferCoefficientUnit] = Field(
        CombinedNonEvaporativeHeatTransferCoefficientUnit.watt_per_kelvin_per_meter_squared,
        options={"enum_titles": ["W/(m²·K)"]},
        title="CombinedNonEvaporativeHeatTransferCoefficientUnit",
        x_enum_varnames=["watt_per_kelvin_per_meter_squared"],
    )


class ElectromagneticWavePhaseSpeedUnit(UnitEnum):
    meter_per_second = "Item:OSW78331234e1a15aeebd8b0caa71201939"
    kilo_meter_per_second = (
        "Item:OSW78331234e1a15aeebd8b0caa71201939#OSW9f12ce12bc725cd59791265e2e480fd2"
    )
    micro_meter_per_second = (
        "Item:OSW78331234e1a15aeebd8b0caa71201939#OSWfc9fca27ba5b543c8780521b4af39189"
    )
    centi_meter_per_second = (
        "Item:OSW78331234e1a15aeebd8b0caa71201939#OSWd094e4cfd62c52248aad5ef87c19fb7d"
    )
    milli_meter_per_second = (
        "Item:OSW78331234e1a15aeebd8b0caa71201939#OSW4937ac85021f506cb7ba3958f2216bd1"
    )


class ElectromagneticWavePhaseSpeed(QuantityValue):
    """
    "Electromagnetic Wave Phase Speed" is the ratio of angular velocity and wavenumber.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "0e2b889b-d54e-5b7d-a3c2-e14c3c4b39ab",
            "title": "ElectromagneticWavePhaseSpeed",
            "title*": {"en": "Electromagnetic Wave Phase Speed"},
            "description": '"Electromagnetic Wave Phase Speed" is the ratio of angular velocity and wavenumber.',
            "description*": {
                "en": '"Electromagnetic Wave Phase Speed" is the ratio of angular velocity and wavenumber.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectromagneticWavePhaseSpeedValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0e2b889bd54e5b7da3c2e14c3c4b39ab"]
    unit: Optional[ElectromagneticWavePhaseSpeedUnit] = Field(
        ElectromagneticWavePhaseSpeedUnit.meter_per_second,
        options={"enum_titles": ["m/s", "km/s", "μm/s", "cm/s", "mm/s"]},
        title="ElectromagneticWavePhaseSpeedUnit",
        x_enum_varnames=[
            "meter_per_second",
            "kilo_meter_per_second",
            "micro_meter_per_second",
            "centi_meter_per_second",
            "milli_meter_per_second",
        ],
    )


class EnergyFluenceUnit(UnitEnum):
    joule_per_meter_squared = "Item:OSW0747b5382b955ef2adef0e4c4b1efa81"
    giga_joule_per_meter_squared = (
        "Item:OSW0747b5382b955ef2adef0e4c4b1efa81#OSW48c62f71ae5a512ca24dcb6059999b8d"
    )
    milli_joule_per_meter_squared = (
        "Item:OSW0747b5382b955ef2adef0e4c4b1efa81#OSW3b9b7dca35ec5f7995ba76de650fcadf"
    )
    mega_joule_per_meter_squared = (
        "Item:OSW0747b5382b955ef2adef0e4c4b1efa81#OSWf9cdbd6556545d55a9bde1a0915a9545"
    )
    joule_per_centi_meter_squared = (
        "Item:OSW0747b5382b955ef2adef0e4c4b1efa81#OSW16b24f4ffe12585aa114fbefbf3dbd5b"
    )


class EnergyFluence(QuantityValue):
    """
    "Energy Fluence" can be used to describe the energy delivered per unit area
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "f1825729-3695-5b6e-9f54-d4d9bb89daf1",
            "title": "EnergyFluence",
            "title*": {"en": "Energy Fluence"},
            "description": '"Energy Fluence" can be used to describe the energy delivered per unit area',
            "description*": {
                "en": '"Energy Fluence" can be used to describe the energy delivered per unit area'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnergyFluenceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf182572936955b6e9f54d4d9bb89daf1"]
    unit: Optional[EnergyFluenceUnit] = Field(
        EnergyFluenceUnit.joule_per_meter_squared,
        options={"enum_titles": ["J/m²", "GJ/m²", "mJ/m²", "MJ/m²", "J/cm²"]},
        title="EnergyFluenceUnit",
        x_enum_varnames=[
            "joule_per_meter_squared",
            "giga_joule_per_meter_squared",
            "milli_joule_per_meter_squared",
            "mega_joule_per_meter_squared",
            "joule_per_centi_meter_squared",
        ],
    )


class Velocity(QuantityValue):
    """
    In kinematics, velocity is the speed of an object and a specification of its direction of motion. Speed describes only how fast an object is moving, whereas velocity gives both how fast and in what direction the object is moving.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "397c67ec-e63a-5a5c-96ba-d9349f49f3d7",
            "title": "Velocity",
            "title*": {"en": "Velocity", "de": "Geschwindigkeit"},
            "description": "In kinematics, velocity is the speed of an object and a specification of its direction of motion. Speed describes only how fast an object is moving, whereas velocity gives both how fast and in what direction the object is moving.",
            "description*": {
                "en": "In kinematics, velocity is the speed of an object and a specification of its direction of motion. Speed describes only how fast an object is moving, whereas velocity gives both how fast and in what direction the object is moving."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVelocityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW397c67ece63a5a5c96bad9349f49f3d7"]
    unit: Optional[VelocityUnit] = Field(
        VelocityUnit.meter_per_second,
        options={"enum_titles": ["m/s", "km/s", "μm/s", "cm/s", "mm/s"]},
        title="VelocityUnit",
        x_enum_varnames=[
            "meter_per_second",
            "kilo_meter_per_second",
            "micro_meter_per_second",
            "centi_meter_per_second",
            "milli_meter_per_second",
        ],
    )


class CoefficientOfPerformance(DimensionlessRatio):
    """
    ""Coefficient of Performance",is a measure of the efficiency of a heating or cooling system, defined as the ratio of useful heating or cooling output to the energy input required to achieve it.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "9756d434-8537-51d8-aea8-8dfddd696a49",
            "title": "CoefficientOfPerformance",
            "title*": {"en": "CoefficientOfPerformance"},
            "description": '""Coefficient of Performance",is a measure of the efficiency of a heating or cooling system, defined as the ratio of useful heating or cooling output to the energy input required to achieve it.',
            "description*": {
                "en": '""Coefficient of Performance",is a measure of the efficiency of a heating or cooling system, defined as the ratio of useful heating or cooling output to the energy input required to achieve it.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCoefficientOfPerformanceValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9756d434853751d8aea88dfddd696a49"]


class LuminousFluxUnit(UnitEnum):
    lumen = "Item:OSW24fcc1bb84db5b3b951db598cddc1319"
    kilo_lumen = (
        "Item:OSW24fcc1bb84db5b3b951db598cddc1319#OSW15cb09d631d65ecbb0d1b54df9f2475e"
    )


class LuminousFlux(QuantityValue):
    """
    Luminous Flux or Luminous Power is the measure of the perceived power of light. It differs from radiant flux, the measure of the total power of light emitted, in that luminous flux is adjusted to reflect the varying sensitivity of the human eye to different wavelengths of light.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "aee74c2e-34ed-5893-9c1a-b03d0f115a0f",
            "title": "LuminousFlux",
            "title*": {"en": "Luminous flux", "de": "Lichtstrom"},
            "description": "Luminous Flux or Luminous Power is the measure of the perceived power of light. It differs from radiant flux, the measure of the total power of light emitted, in that luminous flux is adjusted to reflect the varying sensitivity of the human eye to different wavelengths of light.",
            "description*": {
                "en": "Luminous Flux or Luminous Power is the measure of the perceived power of light. It differs from radiant flux, the measure of the total power of light emitted, in that luminous flux is adjusted to reflect the varying sensitivity of the human eye to different wavelengths of light."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLuminousFluxValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWaee74c2e34ed58939c1ab03d0f115a0f"]
    unit: Optional[LuminousFluxUnit] = Field(
        LuminousFluxUnit.lumen,
        options={"enum_titles": ["lm", "klm"]},
        title="LuminousFluxUnit",
        x_enum_varnames=["lumen", "kilo_lumen"],
    )


class FissionMultiplicationFactor(Dimensionless):
    """
    The number of fission neutrons produced per absorption in the fuel.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "394653a1-d5f6-545f-8ea7-babe10182f37",
            "title": "FissionMultiplicationFactor",
            "title*": {"en": "Fission Multiplication Factor"},
            "description": "The number of fission neutrons produced per absorption in the fuel.",
            "description*": {
                "en": "The number of fission neutrons produced per absorption in the fuel."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFissionMultiplicationFactorValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW394653a1d5f6545f8ea7babe10182f37"]


class InductanceUnit(UnitEnum):
    henry = "Item:OSWfc7ffe7e6e00592a8b3f3f472fbef2a2"
    nano_henry = (
        "Item:OSWfc7ffe7e6e00592a8b3f3f472fbef2a2#OSW466788b3b91054088792f8efcf881b73"
    )
    pico_henry = (
        "Item:OSWfc7ffe7e6e00592a8b3f3f472fbef2a2#OSWc916910c94335ef4bfd4956fdb64d445"
    )
    milli_henry = (
        "Item:OSWfc7ffe7e6e00592a8b3f3f472fbef2a2#OSWf936212f93685b0a81e881b7b4cd691c"
    )
    micro_henry = (
        "Item:OSWfc7ffe7e6e00592a8b3f3f472fbef2a2#OSW0b6f22fdf4505cd1a14ced6ce63fd1c3"
    )


class Inductance(QuantityValue):
    """
    "Inductance" is an electromagentic quantity that characterizes a circuit's resistance to any change of electric current; a change in the electric current through induces an opposing electromotive force (EMF). Quantitatively, inductance is proportional to the magnetic flux per unit of electric current.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "70429034-4ec4-5e1b-b91d-2b2736233473",
            "title": "Inductance",
            "title*": {"en": "Inductance", "de": "Induktivität"},
            "description": '"Inductance" is an electromagentic quantity that characterizes a circuit\'s resistance to any change of electric current; a change in the electric current through induces an opposing electromotive force (EMF). Quantitatively, inductance is proportional to the magnetic flux per unit of electric current.',
            "description*": {
                "en": '"Inductance" is an electromagentic quantity that characterizes a circuit\'s resistance to any change of electric current; a change in the electric current through induces an opposing electromotive force (EMF). Quantitatively, inductance is proportional to the magnetic flux per unit of electric current.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInductanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW704290344ec45e1bb91d2b2736233473"]
    unit: Optional[InductanceUnit] = Field(
        InductanceUnit.henry,
        options={"enum_titles": ["H", "nH", "pH", "mH", "μH"]},
        title="InductanceUnit",
        x_enum_varnames=[
            "henry",
            "nano_henry",
            "pico_henry",
            "milli_henry",
            "micro_henry",
        ],
    )


class MutualInductance(Inductance):
    """
    $\\textit{Mutual Inductance}$ is the non-diagonal term of the inductance matrix. For two loops, the symbol $M$ is used for $L_{12}$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "51cb2a05-6574-5eee-958c-6ede005561d8",
            "title": "MutualInductance",
            "title*": {"en": "Mutual Inductance"},
            "description": "$\\textit{Mutual Inductance}$ is the non-diagonal term of the inductance matrix. For two loops, the symbol $M$ is used for $L_{12}$.",
            "description*": {
                "en": "$\\textit{Mutual Inductance}$ is the non-diagonal term of the inductance matrix. For two loops, the symbol $M$ is used for $L_{12}$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMutualInductanceValue",
            "@context": [
                "/wiki/Category:OSW704290344ec45e1bb91d2b2736233473?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW51cb2a0565745eee958c6ede005561d8"]


class MassConcentrationUnit(UnitEnum):
    gram_per_liter = "Item:OSW754b1a3564725113ac583f91ae2ea959"
    milli_gram_per_milli_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW99bbcff947e1508bad38d748ad6ff8e2"
    )
    gram_per_milli_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSWe905ceb23b3b550489bed5baa6c9b466"
    )
    femto_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW449dc7494f3f5c0bbd9aff1d1fd2f591"
    )
    pico_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW84ec459d4d135bf28a610cd00061d18c"
    )
    kilo_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW40c933269ec45fc1aeef04aefce2b374"
    )
    micro_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW457d0485a44c57cda788a583bf9ab4ff"
    )
    nano_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW42fdef27c8ae5c8fbf1876c400f27101"
    )
    gram_per_deci_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSW1a48aea5dca45c34bbde02b0df02f6f8"
    )
    milli_gram_per_liter = (
        "Item:OSW754b1a3564725113ac583f91ae2ea959#OSWca4043a385f25aa3a98122f2aefd0d2e"
    )


class MassConcentration(QuantityValue):
    """
    The "Mass Concentration" of substance B  is defined as the mass of a constituent  divided by the volume of the mixture .
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "8276dacc-03f0-51d9-a492-5398eff293b0",
            "title": "MassConcentration",
            "title*": {"en": "Mass Concentration"},
            "description": 'The "Mass Concentration" of substance B  is defined as the mass of a constituent  divided by the volume of the mixture .',
            "description*": {
                "en": 'The "Mass Concentration" of substance B  is defined as the mass of a constituent  divided by the volume of the mixture .'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassConcentrationValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8276dacc03f051d9a4925398eff293b0"]
    unit: Optional[MassConcentrationUnit] = Field(
        MassConcentrationUnit.gram_per_liter,
        options={
            "enum_titles": [
                "g/L",
                "mg/mL",
                "g/mL",
                "fg/L",
                "pg/L",
                "kg/L",
                "μg/L",
                "ng/L",
                "g/dL",
                "mg/L",
            ]
        },
        title="MassConcentrationUnit",
        x_enum_varnames=[
            "gram_per_liter",
            "milli_gram_per_milli_liter",
            "gram_per_milli_liter",
            "femto_gram_per_liter",
            "pico_gram_per_liter",
            "kilo_gram_per_liter",
            "micro_gram_per_liter",
            "nano_gram_per_liter",
            "gram_per_deci_liter",
            "milli_gram_per_liter",
        ],
    )


class PressureBurningRateConstant(Dimensionless):
    """
    This is an autogenerated partial class definition of 'PressureBurningRateConstant'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "83830804-25d3-579e-ade2-a3ffc9db4d21",
            "title": "PressureBurningRateConstant",
            "title*": {"en": "Pressure Burning Rate Constant"},
            "description": "This is an autogenerated partial class definition of 'PressureBurningRateConstant'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPressureBurningRateConstantValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8383080425d3579eade2a3ffc9db4d21"]


class RadiantFluenceRate(PowerPerArea):
    """
    Radiant fluence rate, or spherical irradiance, is equal to the total radiant flux incident on a small sphere divided by the area of the diametrical cross-section of the sphere.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "629f7856-58c2-54b1-a8c6-9f548916443b",
            "title": "RadiantFluenceRate",
            "title*": {"en": "Radiant Fluence Rate"},
            "description": "Radiant fluence rate, or spherical irradiance, is equal to the total radiant flux incident on a small sphere divided by the area of the diametrical cross-section of the sphere.",
            "description*": {
                "en": "Radiant fluence rate, or spherical irradiance, is equal to the total radiant flux incident on a small sphere divided by the area of the diametrical cross-section of the sphere."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRadiantFluenceRateValue",
            "@context": [
                "/wiki/Category:OSW40c46aba16f45962a7330b7f8b88681e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW629f785658c254b1a8c69f548916443b"]


class StructuralEfficiency(Dimensionless):
    """
    Structural efficiency is a function of the weight of structure to the afforded vehicle's strength.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "5ba1cba5-d900-5434-a6f2-80a50b462591",
            "title": "StructuralEfficiency",
            "title*": {"en": "Structural Efficiency"},
            "description": "Structural efficiency is a function of the weight of structure to the afforded vehicle's strength.",
            "description*": {
                "en": "Structural efficiency is a function of the weight of structure to the afforded vehicle's strength."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasStructuralEfficiencyValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW5ba1cba5d9005434a6f280a50b462591"]


class AcidityUnit(UnitEnum):
    pico_henry = "Item:OSW50e9172c55045cb3b1460b1345303ed2"


class Acidity(QuantityValue):
    """
    Chemicals or substances having a pH less than 7 are said to be acidic; lower pH means higher acidity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "d74bd57b-722d-57c0-bd13-16fb700b8043",
            "title": "Acidity",
            "title*": {"en": "Acidity"},
            "description": "Chemicals or substances having a pH less than 7 are said to be acidic; lower pH means higher acidity.",
            "description*": {
                "en": "Chemicals or substances having a pH less than 7 are said to be acidic; lower pH means higher acidity."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAcidityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd74bd57b722d57c0bd1316fb700b8043"]
    unit: Optional[AcidityUnit] = Field(
        AcidityUnit.pico_henry,
        options={"enum_titles": ["pH"]},
        title="AcidityUnit",
        x_enum_varnames=["pico_henry"],
    )


class ElectronRadius(Length):
    """
    "Electron Radius", also known as the Lorentz radius or the Thomson scattering length, is based on a classical (i.e., non-quantum) relativistic model of the electron.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7e89dce6-62b3-53ee-aa53-eb5ae4ca4eb4",
            "title": "ElectronRadius",
            "title*": {"en": "Electron Radius"},
            "description": '"Electron Radius", also known as the Lorentz radius or the Thomson scattering length, is based on a classical (i.e., non-quantum) relativistic model of the electron.',
            "description*": {
                "en": '"Electron Radius", also known as the Lorentz radius or the Thomson scattering length, is based on a classical (i.e., non-quantum) relativistic model of the electron.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectronRadiusValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7e89dce662b353eeaa53eb5ae4ca4eb4"]


class KineticEnergy(Energy):
    """
    The kinetic energy of an object is the energy which it possesses due to its motion. It is defined as the work needed to accelerate a body of a given mass from rest to its stated velocity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a572282d-c5c4-5103-99ee-afa0ce8e8519",
            "title": "KineticEnergy",
            "title*": {"en": "Kinetic energy", "de": "Kinetische Energie"},
            "description": "The kinetic energy of an object is the energy which it possesses due to its motion. It is defined as the work needed to accelerate a body of a given mass from rest to its stated velocity.",
            "description*": {
                "en": "The kinetic energy of an object is the energy which it possesses due to its motion. It is defined as the work needed to accelerate a body of a given mass from rest to its stated velocity."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasKineticEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa572282dc5c4510399eeafa0ce8e8519"]


class ServiceFactor(DimensionlessRatio):
    """
    The value indicates the multiplier of the rated power that equipment can handle for some period of time when operating according to a manufacturer's specified conditions; typically applicable to motors.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "878ac43a-f7e0-5aa7-8650-88cb0b79caeb",
            "title": "ServiceFactor",
            "title*": {"en": "Service Factor"},
            "description": "The value indicates the multiplier of the rated power that equipment can handle for some period of time when operating according to a manufacturer's specified conditions; typically applicable to motors.",
            "description*": {
                "en": "The value indicates the multiplier of the rated power that equipment can handle for some period of time when operating according to a manufacturer's specified conditions; typically applicable to motors."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasServiceFactorValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW878ac43af7e05aa7865088cb0b79caeb"]


class WebTimeAveragePressure(Pressure):
    """
    This is an autogenerated partial class definition of 'WebTimeAveragePressure'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "fed564d1-c284-5f0b-9b46-cc40d3edc56c",
            "title": "WebTimeAveragePressure",
            "title*": {"en": "Web Time Average Pressure"},
            "description": "This is an autogenerated partial class definition of 'WebTimeAveragePressure'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasWebTimeAveragePressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfed564d1c2845f0b9b46cc40d3edc56c"]


class AdmittanceUnit(UnitEnum):
    siemens = "Item:OSW46249e4c237d546198d98bff0b9d5e93"
    milli_siemens = (
        "Item:OSW46249e4c237d546198d98bff0b9d5e93#OSW8253047fc4835d79b0f31baf3b96182d"
    )
    kilo_siemens = (
        "Item:OSW46249e4c237d546198d98bff0b9d5e93#OSW35746906e9d051c39bdeebdf5736c2ba"
    )
    micro_siemens = (
        "Item:OSW46249e4c237d546198d98bff0b9d5e93#OSWfd5a12b202d2534c9cb0844fb6c4f15e"
    )


class Admittance(QuantityValue):
    """
    "Admittance" is a measure of how easily a circuit or device will allow a current to flow. It is defined as the inverse of the impedance ($Z$).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "6dd896b0-8fd5-5c6a-9ea1-a7270bb59d48",
            "title": "Admittance",
            "title*": {"en": "Admittance"},
            "description": '"Admittance" is a measure of how easily a circuit or device will allow a current to flow. It is defined as the inverse of the impedance ($Z$).',
            "description*": {
                "en": '"Admittance" is a measure of how easily a circuit or device will allow a current to flow. It is defined as the inverse of the impedance ($Z$).'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAdmittanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6dd896b08fd55c6a9ea1a7270bb59d48"]
    unit: Optional[AdmittanceUnit] = Field(
        AdmittanceUnit.siemens,
        options={"enum_titles": ["S", "mS", "kS", "μS"]},
        title="AdmittanceUnit",
        x_enum_varnames=["siemens", "milli_siemens", "kilo_siemens", "micro_siemens"],
    )


class Friction(Force):
    """
    "Friction" is the force of two surfaces In contact, or the force of a medium acting on a moving object (that is air on an aircraft). When contacting surfaces move relative to each other, the friction between the two objects converts kinetic energy into thermal energy.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "92473183-e458-54a8-bd13-de8f0aefff19",
            "title": "Friction",
            "title*": {"en": "Friction"},
            "description": '"Friction" is the force of two surfaces In contact, or the force of a medium acting on a moving object (that is air on an aircraft). When contacting surfaces move relative to each other, the friction between the two objects converts kinetic energy into thermal energy.',
            "description*": {
                "en": '"Friction" is the force of two surfaces In contact, or the force of a medium acting on a moving object (that is air on an aircraft). When contacting surfaces move relative to each other, the friction between the two objects converts kinetic energy into thermal energy.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFrictionValue",
            "@context": [
                "/wiki/Category:OSW1b832c1a42c055eb9669bb0cdda18d7f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW92473183e45854a8bd13de8f0aefff19"]


class DynamicPressure(Pressure):
    """
    Dynamic Pressure (indicated with q, or Q, and sometimes called velocity pressure) is the quantity defined by: $q = 1/2 * \rho v^{2}$, where (using SI units),  $q$ is dynamic pressure in $pascals$, $\rho$ is fluid density in $kg/m^{3}$ (for example, density of air) and $v $ is fluid velocity in $m/s$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1c2803e1-4f66-58d7-a452-4335a0310023",
            "title": "DynamicPressure",
            "title*": {"en": "Dynamic Pressure"},
            "description": "Dynamic Pressure (indicated with q, or Q, and sometimes called velocity pressure) is the quantity defined by: $q = 1/2 * \\rho v^{2}$, where (using SI units),  $q$ is dynamic pressure in $pascals$, $\\rho$ is fluid density in $kg/m^{3}$ (for example, density of air) and $v $ is fluid velocity in $m/s$.",
            "description*": {
                "en": "Dynamic Pressure (indicated with q, or Q, and sometimes called velocity pressure) is the quantity defined by: $q = 1/2 * \\rho v^{2}$, where (using SI units),  $q$ is dynamic pressure in $pascals$, $\\rho$ is fluid density in $kg/m^{3}$ (for example, density of air) and $v $ is fluid velocity in $m/s$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDynamicPressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1c2803e14f6658d7a4524335a0310023"]


class SpecificAcousticImpedanceUnit(UnitEnum):
    newton_second_per_meter_cubed = "Item:OSW4ba64f5b6daa583389742dfca1776afe"


class SpecificAcousticImpedance(QuantityValue):
    """
    This is an autogenerated partial class definition of 'SpecificAcousticImpedance'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "c00b3d7a-bb40-5127-b2b4-92f5bda88d14",
            "title": "SpecificAcousticImpedance",
            "title*": {"en": "Specific Acoustic Impedance"},
            "description": "This is an autogenerated partial class definition of 'SpecificAcousticImpedance'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificAcousticImpedanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc00b3d7abb405127b2b492f5bda88d14"]
    unit: Optional[SpecificAcousticImpedanceUnit] = Field(
        SpecificAcousticImpedanceUnit.newton_second_per_meter_cubed,
        options={"enum_titles": ["N·s/m³"]},
        title="SpecificAcousticImpedanceUnit",
        x_enum_varnames=["newton_second_per_meter_cubed"],
    )


class Enthalpy(Energy):
    """
    In thermodynamics, $\\textit{enthalpy}$ is the sum of the internal energy $U$ and the product of pressure $p$ and volume $V$ of a system. The characteristic function (also known as thermodynamic potential) $\\textit{enthalpy}$ used to be called $\\textit{heat content}$, which is why it is conventionally indicated by $H$. The specific enthalpy of a working mass is a property of that mass used in thermodynamics, defined as $h=u+p \cdot v$,  where $u$ is the specific internal energy, $p$ is the pressure, and $v$ is specific volume. In other words, $h = H / m$ where $m$ is the mass of the system. The SI unit for $\\textit{Specific Enthalpy}$ is $\\textit{joules per kilogram}$
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "877daca6-abe5-5171-adc9-c6f0ae1ac011",
            "title": "Enthalpy",
            "title*": {"en": "Enthalpy", "de": "Enthalpie"},
            "description": "In thermodynamics, $\\textit{enthalpy}$ is the sum of the internal energy $U$ and the product of pressure $p$ and volume $V$ of a system. The characteristic function (also known as thermodynamic potential) $\\textit{enthalpy}$ used to be called $\\textit{heat content}$, which is why it is conventionally indicated by $H$. The specific enthalpy of a working mass is a property of that mass used in thermodynamics, defined as $h=u+p \\cdot v$,  where $u$ is the specific internal energy, $p$ is the pressure, and $v$ is specific volume. In other words, $h = H / m$ where $m$ is the mass of the system. The SI unit for $\\textit{Specific Enthalpy}$ is $\\textit{joules per kilogram}$",
            "description*": {
                "en": "In thermodynamics, $\\textit{enthalpy}$ is the sum of the internal energy $U$ and the product of pressure $p$ and volume $V$ of a system. The characteristic function (also known as thermodynamic potential) $\\textit{enthalpy}$ used to be called $\\textit{heat content}$, which is why it is conventionally indicated by $H$. The specific enthalpy of a working mass is a property of that mass used in thermodynamics, defined as $h=u+p \\cdot v$,  where $u$ is the specific internal energy, $p$ is the pressure, and $v$ is specific volume. In other words, $h = H / m$ where $m$ is the mass of the system. The SI unit for $\\textit{Specific Enthalpy}$ is $\\textit{joules per kilogram}$"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnthalpyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW877daca6abe55171adc9c6f0ae1ac011"]


class Loudness(Dimensionless):
    """
    Maß für die Stärke der subjektiven Hörempfindung, welche auf einer Skala "leise-laut" in sone skaliert wird; einer frei fortschreitenden monofrequenten Welle mit der Frequenz 1 kHz und dem Schalldruckpegel 40 dB, die frontal auf die Zuhörer trifft, ist die Lautheit 1 sone zugeordnet und ein Laut, welcher von den Zuhörern als n-mal so laut wie derjenige mit 1 sone bezeichnet wird, erhält die Lautheit n sone zugeordnet
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7deca0ab-21f7-51e3-b59b-71d86b890f0d",
            "title": "Loudness",
            "title*": {"en": "Loudness"},
            "description": 'Maß für die Stärke der subjektiven Hörempfindung, welche auf einer Skala "leise-laut" in sone skaliert wird; einer frei fortschreitenden monofrequenten Welle mit der Frequenz 1 kHz und dem Schalldruckpegel 40 dB, die frontal auf die Zuhörer trifft, ist die Lautheit 1 sone zugeordnet und ein Laut, welcher von den Zuhörern als n-mal so laut wie derjenige mit 1 sone bezeichnet wird, erhält die Lautheit n sone zugeordnet',
            "description*": {
                "en": 'Maß für die Stärke der subjektiven Hörempfindung, welche auf einer Skala "leise-laut" in sone skaliert wird; einer frei fortschreitenden monofrequenten Welle mit der Frequenz 1 kHz und dem Schalldruckpegel 40 dB, die frontal auf die Zuhörer trifft, ist die Lautheit 1 sone zugeordnet und ein Laut, welcher von den Zuhörern als n-mal so laut wie derjenige mit 1 sone bezeichnet wird, erhält die Lautheit n sone zugeordnet'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLoudnessValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7deca0ab21f751e3b59b71d86b890f0d"]


class DragForce(Force):
    """
    In fluid dynamics, drag refers to forces which act on a solid object in the direction of the relative fluid flow velocity. Unlike other resistive forces such as dry friction, which is nearly independent of velocity, drag forces depend on velocity.
    Drag forces always decrease fluid velocity relative to the solid object in the fluid's path.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c0379073-3d68-5432-85b9-0a8affe46b72",
            "title": "DragForce",
            "title*": {"en": "Drag Force"},
            "description": "In fluid dynamics, drag refers to forces which act on a solid object in the direction of the relative fluid flow velocity. Unlike other resistive forces such as dry friction, which is nearly independent of velocity, drag forces depend on velocity.\nDrag forces always decrease fluid velocity relative to the solid object in the fluid's path.",
            "description*": {
                "en": "In fluid dynamics, drag refers to forces which act on a solid object in the direction of the relative fluid flow velocity. Unlike other resistive forces such as dry friction, which is nearly independent of velocity, drag forces depend on velocity.\nDrag forces always decrease fluid velocity relative to the solid object in the fluid's path."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDragForceValue",
            "@context": [
                "/wiki/Category:OSW1b832c1a42c055eb9669bb0cdda18d7f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc03790733d68543285b90a8affe46b72"]


class Mass(QuantityValue):
    """
    In physics, mass, more specifically inertial mass, can be defined as a quantitative measure of an object's resistance to acceleration. The SI unit of mass is the kilogram ($kg$)
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "e9be062d-e2d1-5d10-8913-97a18212f920",
            "title": "Mass",
            "title*": {"en": "Mass", "de": "Masse"},
            "description": "In physics, mass, more specifically inertial mass, can be defined as a quantitative measure of an object's resistance to acceleration. The SI unit of mass is the kilogram ($kg$)",
            "description*": {
                "en": "In physics, mass, more specifically inertial mass, can be defined as a quantitative measure of an object's resistance to acceleration. The SI unit of mass is the kilogram ($kg$)"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe9be062de2d15d10891397a18212f920"]
    unit: Optional[MassUnit] = Field(
        MassUnit.kilo_gram,
        options={"enum_titles": ["kg"]},
        title="MassUnit",
        x_enum_varnames=["kilo_gram"],
    )


class OrbitalRadialDistance(Length):
    """
    This is an autogenerated partial class definition of 'OrbitalRadialDistance'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "bc45768e-b166-5c18-975f-ae4c802c6e63",
            "title": "OrbitalRadialDistance",
            "title*": {"en": "Orbital Radial Distance"},
            "description": "This is an autogenerated partial class definition of 'OrbitalRadialDistance'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasOrbitalRadialDistanceValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWbc45768eb1665c18975fae4c802c6e63"]


class EnergyPerTemperatureUnit(UnitEnum):
    joule_per_kelvin = "Item:OSW501738b1f645568c9c4fb6da844439c7"
    mega_joule_per_kelvin = (
        "Item:OSW501738b1f645568c9c4fb6da844439c7#OSWf8925d2e60865f589809095c9e172dbe"
    )
    kilo_joule_per_kelvin = (
        "Item:OSW501738b1f645568c9c4fb6da844439c7#OSW7b31ddba89fc5359972c09eda7f30683"
    )


class EnergyPerTemperature(QuantityValue):
    """
    This is an autogenerated partial class definition of 'EnergyPerTemperature'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "c16b766e-af3e-547d-a640-7e8eee408e7c",
            "title": "EnergyPerTemperature",
            "title*": {"en": "Energy per temperature"},
            "description": "This is an autogenerated partial class definition of 'EnergyPerTemperature'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnergyPerTemperatureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc16b766eaf3e547da6407e8eee408e7c"]
    unit: Optional[EnergyPerTemperatureUnit] = Field(
        EnergyPerTemperatureUnit.joule_per_kelvin,
        options={"enum_titles": ["J/K", "MJ/K", "kJ/K"]},
        title="EnergyPerTemperatureUnit",
        x_enum_varnames=[
            "joule_per_kelvin",
            "mega_joule_per_kelvin",
            "kilo_joule_per_kelvin",
        ],
    )


class ThermodynamicEntropy(EnergyPerTemperature):
    """
    Thermodynamic Entropy is a measure of the unavailability of a system’s energy to do work. It is a measure of the randomness of molecules in a system and is central to the second law of thermodynamics and the fundamental thermodynamic relation, which deal with physical processes and whether they occur spontaneously. The dimensions of entropy are energy divided by temperature, which is the same as the dimensions of Boltzmann's constant ($kB$) and heat capacity. The SI unit of entropy is $joule\ per\ kelvin$. [Wikipedia]
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "4ad1f3c1-a959-5522-94ad-362006061b37",
            "title": "ThermodynamicEntropy",
            "title*": {"en": "Thermodynamic Entropy"},
            "description": "Thermodynamic Entropy is a measure of the unavailability of a system’s energy to do work. It is a measure of the randomness of molecules in a system and is central to the second law of thermodynamics and the fundamental thermodynamic relation, which deal with physical processes and whether they occur spontaneously. The dimensions of entropy are energy divided by temperature, which is the same as the dimensions of Boltzmann's constant ($kB$) and heat capacity. The SI unit of entropy is $joule\\ per\\ kelvin$. [Wikipedia]",
            "description*": {
                "en": "Thermodynamic Entropy is a measure of the unavailability of a system’s energy to do work. It is a measure of the randomness of molecules in a system and is central to the second law of thermodynamics and the fundamental thermodynamic relation, which deal with physical processes and whether they occur spontaneously. The dimensions of entropy are energy divided by temperature, which is the same as the dimensions of Boltzmann's constant ($kB$) and heat capacity. The SI unit of entropy is $joule\\ per\\ kelvin$. [Wikipedia]"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThermodynamicEntropyValue",
            "@context": [
                "/wiki/Category:OSWc16b766eaf3e547da6407e8eee408e7c?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4ad1f3c1a959552294ad362006061b37"]


class ThrustToWeightRatio(DimensionlessRatio):
    """
    Thrust-to-weight ratio is a ratio of thrust to weight of a rocket, jet engine, propeller engine, or a vehicle propelled by such an engine. It is a dimensionless quantity and is an indicator of the performance of the engine or vehicle.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "4ca14f3c-a53f-5418-9c9a-11f750f429e7",
            "title": "ThrustToWeightRatio",
            "title*": {"en": "Thrust To Weight Ratio"},
            "description": "Thrust-to-weight ratio is a ratio of thrust to weight of a rocket, jet engine, propeller engine, or a vehicle propelled by such an engine. It is a dimensionless quantity and is an indicator of the performance of the engine or vehicle.",
            "description*": {
                "en": "Thrust-to-weight ratio is a ratio of thrust to weight of a rocket, jet engine, propeller engine, or a vehicle propelled by such an engine. It is a dimensionless quantity and is an indicator of the performance of the engine or vehicle."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThrustToWeightRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4ca14f3ca53f54189c9a11f750f429e7"]


class AmbientPressure(Pressure):
    """
    The ambient pressure on an object is the pressure of the surrounding medium, such as a gas or liquid, which comes into contact with the object.
    The SI unit of pressure is the pascal (Pa), which is a very small unit relative to atmospheric pressure on Earth, so kilopascals ($kPa$) are more commonly used in this context.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2db9d2e2-4c98-5062-b5f7-64ebc6e146fb",
            "title": "AmbientPressure",
            "title*": {"en": "Ambient Pressure"},
            "description": "The ambient pressure on an object is the pressure of the surrounding medium, such as a gas or liquid, which comes into contact with the object.\nThe SI unit of pressure is the pascal (Pa), which is a very small unit relative to atmospheric pressure on Earth, so kilopascals ($kPa$) are more commonly used in this context.",
            "description*": {
                "en": "The ambient pressure on an object is the pressure of the surrounding medium, such as a gas or liquid, which comes into contact with the object.\nThe SI unit of pressure is the pascal (Pa), which is a very small unit relative to atmospheric pressure on Earth, so kilopascals ($kPa$) are more commonly used in this context."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAmbientPressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2db9d2e24c985062b5f764ebc6e146fb"]


class MolarAttenuationCoefficientUnit(UnitEnum):
    meter_squared_per_mole = "Item:OSWf4a7837882ed5a0b9b128b2d067fc97b"


class MolarAttenuationCoefficient(QuantityValue):
    """
    "Molar Attenuation Coefficient" is a measurement of how strongly a chemical species or substance absorbs or scatters light at a given wavelength, per amount of substance.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "56a827e5-3330-5207-9e10-f02eecf577ad",
            "title": "MolarAttenuationCoefficient",
            "title*": {"en": "Molar Attenuation Coefficient"},
            "description": '"Molar Attenuation Coefficient" is a measurement of how strongly a chemical species or substance absorbs or scatters light at a given wavelength, per amount of substance.',
            "description*": {
                "en": '"Molar Attenuation Coefficient" is a measurement of how strongly a chemical species or substance absorbs or scatters light at a given wavelength, per amount of substance.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarAttenuationCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW56a827e5333052079e10f02eecf577ad"]
    unit: Optional[MolarAttenuationCoefficientUnit] = Field(
        MolarAttenuationCoefficientUnit.meter_squared_per_mole,
        options={"enum_titles": ["m²/mol"]},
        title="MolarAttenuationCoefficientUnit",
        x_enum_varnames=["meter_squared_per_mole"],
    )


class SpecificHeatPressureUnit(UnitEnum):
    joule_per_kelvin_per_kilo_gram_per_pascal = (
        "Item:OSW85f51fc6962e5c5ea5e541ad1bdce849"
    )


class SpecificHeatPressure(QuantityValue):
    """
    Specific heat at a constant pressure.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "f27c1fdb-1295-5ad2-b624-50acb52f702f",
            "title": "SpecificHeatPressure",
            "title*": {"en": "Specific Heat Pressure"},
            "description": "Specific heat at a constant pressure.",
            "description*": {"en": "Specific heat at a constant pressure."},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificHeatPressureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf27c1fdb12955ad2b62450acb52f702f"]
    unit: Optional[SpecificHeatPressureUnit] = Field(
        SpecificHeatPressureUnit.joule_per_kelvin_per_kilo_gram_per_pascal,
        options={"enum_titles": ["J/(K·kg·Pa)"]},
        title="SpecificHeatPressureUnit",
        x_enum_varnames=["joule_per_kelvin_per_kilo_gram_per_pascal"],
    )


class TotalPressure(Pressure):
    """
    The total pressure is the sum of the dynamic and static pressures, that is $P_0 = P + q$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0301595d-3ef3-5fcb-98b6-3e87d8b3d34c",
            "title": "TotalPressure",
            "title*": {"en": "Total Pressure"},
            "description": "The total pressure is the sum of the dynamic and static pressures, that is $P_0 = P + q$.",
            "description*": {
                "en": "The total pressure is the sum of the dynamic and static pressures, that is $P_0 = P + q$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTotalPressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0301595d3ef35fcb98b63e87d8b3d34c"]


class FissionFuelUtilizationFactor(Dimensionless):
    """
    This is an autogenerated partial class definition of 'FissionFuelUtilizationFactor'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c11d565a-6b49-50c9-be08-c3ba7b9a106c",
            "title": "FissionFuelUtilizationFactor",
            "title*": {"en": "Fission Fuel Utilization Factor"},
            "description": "This is an autogenerated partial class definition of 'FissionFuelUtilizationFactor'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFissionFuelUtilizationFactorValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc11d565a6b4950c9be08c3ba7b9a106c"]


class Angle(DimensionlessRatio):
    """
    The abstract notion of angle. Narrow concepts include plane angle and solid angle. While both plane angle and solid angle are dimensionless, they are actually length/length and area/area respectively.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2339256a-f71e-5635-a541-ac7f5a437141",
            "title": "Angle",
            "title*": {"en": "Angle"},
            "description": "The abstract notion of angle. Narrow concepts include plane angle and solid angle. While both plane angle and solid angle are dimensionless, they are actually length/length and area/area respectively.",
            "description*": {
                "en": "The abstract notion of angle. Narrow concepts include plane angle and solid angle. While both plane angle and solid angle are dimensionless, they are actually length/length and area/area respectively."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngleValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2339256af71e5635a541ac7f5a437141"]


class MolarAngularMomentumUnit(UnitEnum):
    joule_second_per_mole = "Item:OSW82c440beaf0d5f4980a8f525e5313fe5"


class MolarAngularMomentum(QuantityValue):
    """
    This is an autogenerated partial class definition of 'MolarAngularMomentum'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "692fa5ea-3a11-56a8-b7a6-332c9b1b1dce",
            "title": "MolarAngularMomentum",
            "title*": {"en": "Molar Angular Momentum"},
            "description": "This is an autogenerated partial class definition of 'MolarAngularMomentum'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarAngularMomentumValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW692fa5ea3a1156a8b7a6332c9b1b1dce"]
    unit: Optional[MolarAngularMomentumUnit] = Field(
        MolarAngularMomentumUnit.joule_second_per_mole,
        options={"enum_titles": ["J·s/mol"]},
        title="MolarAngularMomentumUnit",
        x_enum_varnames=["joule_second_per_mole"],
    )


class MassGrowthAllowance(Mass):
    """
    A factor applied to basic mass at the lowest level of design detail available based on type and maturity of hardware according to an approved MGA depletion schedule.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "61e1f096-ca89-5a01-b3f5-40bd78a0c78c",
            "title": "MassGrowthAllowance",
            "title*": {"en": "Mass Growth Allowance"},
            "description": "A factor applied to basic mass at the lowest level of design detail available based on type and maturity of hardware according to an approved MGA depletion schedule.",
            "description*": {
                "en": "A factor applied to basic mass at the lowest level of design detail available based on type and maturity of hardware according to an approved MGA depletion schedule."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassGrowthAllowanceValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW61e1f096ca895a01b3f540bd78a0c78c"]


class Thickness(Length):
    """
    "Thickness" is the the smallest of three dimensions: length, width, thickness.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "d34599c9-8028-5400-b402-962f7a36cc44",
            "title": "Thickness",
            "title*": {"en": "Thickness"},
            "description": '"Thickness" is the the smallest of three dimensions: length, width, thickness.',
            "description*": {
                "en": '"Thickness" is the the smallest of three dimensions: length, width, thickness.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThicknessValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd34599c980285400b402962f7a36cc44"]


class RestEnergy(Energy):
    """
    "Rest Energy" is the energy equivalent of the rest mass of a body, equal to the rest mass multiplied by the speed of light squared.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "4390b219-9b2b-5c6e-aaad-67c7eb19a89a",
            "title": "RestEnergy",
            "title*": {"en": "Rest Energy"},
            "description": '"Rest Energy" is the energy equivalent of the rest mass of a body, equal to the rest mass multiplied by the speed of light squared.',
            "description*": {
                "en": '"Rest Energy" is the energy equivalent of the rest mass of a body, equal to the rest mass multiplied by the speed of light squared.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRestEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4390b2199b2b5c6eaaad67c7eb19a89a"]


class HeatCapacity(EnergyPerTemperature):
    """
    "Heat Capacity" (usually denoted by a capital $C$, often with subscripts), or thermal capacity, is the measurable physical quantity that characterizes the amount of heat required to change a substance's temperature by a given amount. In the International System of Units (SI), heat capacity is expressed in units of joule(s) (J) per kelvin (K).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3601c7ff-f2f7-5532-a538-c5b82165a134",
            "title": "HeatCapacity",
            "title*": {"en": "Heat capacity", "de": "Wärmekapazität"},
            "description": '"Heat Capacity" (usually denoted by a capital $C$, often with subscripts), or thermal capacity, is the measurable physical quantity that characterizes the amount of heat required to change a substance\'s temperature by a given amount. In the International System of Units (SI), heat capacity is expressed in units of joule(s) (J) per kelvin (K).',
            "description*": {
                "en": '"Heat Capacity" (usually denoted by a capital $C$, often with subscripts), or thermal capacity, is the measurable physical quantity that characterizes the amount of heat required to change a substance\'s temperature by a given amount. In the International System of Units (SI), heat capacity is expressed in units of joule(s) (J) per kelvin (K).'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasHeatCapacityValue",
            "@context": [
                "/wiki/Category:OSWc16b766eaf3e547da6407e8eee408e7c?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3601c7fff2f75532a538c5b82165a134"]


class UnknownUnit(UnitEnum):
    Celsius_squared_per_second = "Item:OSWf619f81d86235c0c8ec35b106174a40b"


class Unknown(QuantityValue):
    """
    Placeholder value used for reference from units where it is not clear what a given unit is a measure of.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9c2f3029-e3d4-5f76-a070-dbc43f58ccee",
            "title": "Unknown",
            "title*": {"en": "Unknown"},
            "description": "Placeholder value used for reference from units where it is not clear what a given unit is a measure of.",
            "description*": {
                "en": "Placeholder value used for reference from units where it is not clear what a given unit is a measure of."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasUnknownValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9c2f3029e3d45f76a070dbc43f58ccee"]
    unit: Optional[UnknownUnit] = Field(
        UnknownUnit.Celsius_squared_per_second,
        options={"enum_titles": ["°C²/s"]},
        title="UnknownUnit",
        x_enum_varnames=["Celsius_squared_per_second"],
    )


class SpeedUnit(UnitEnum):
    hertz_meter = "Item:OSW63503515821858d6a2c9d64b94e54ace"
    mega_hertz_meter = (
        "Item:OSW63503515821858d6a2c9d64b94e54ace#OSW1a4d9f24164c50ba81439e8a85b8f6b8"
    )
    kilo_hertz_meter = (
        "Item:OSW63503515821858d6a2c9d64b94e54ace#OSWae889a06480a5a0ba336966fb1f19724"
    )
    giga_hertz_meter = (
        "Item:OSW63503515821858d6a2c9d64b94e54ace#OSW0a03c1787bd75930855f22d98c7bd4cb"
    )


class Speed(QuantityValue):
    """
    Speed is the magnitude of velocity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "29b1dc01-984d-568f-84c0-3e03ed2ed731",
            "title": "Speed",
            "title*": {"en": "Speed"},
            "description": "Speed is the magnitude of velocity.",
            "description*": {"en": "Speed is the magnitude of velocity."},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpeedValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW29b1dc01984d568f84c03e03ed2ed731"]
    unit: Optional[SpeedUnit] = Field(
        SpeedUnit.hertz_meter,
        options={"enum_titles": ["Hz·m", "m·MHz", "kHz·m", "GHz·m"]},
        title="SpeedUnit",
        x_enum_varnames=[
            "hertz_meter",
            "mega_hertz_meter",
            "kilo_hertz_meter",
            "giga_hertz_meter",
        ],
    )


class SpeedOfSound(Speed):
    """
    The speed of sound is the distance travelled during a unit of time by a sound wave propagating through an elastic medium.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2fa92a29-59c4-56ac-831a-219705ad4288",
            "title": "SpeedOfSound",
            "title*": {"en": "Speed of sound", "de": "Schallgeschwindigkeit"},
            "description": "The speed of sound is the distance travelled during a unit of time by a sound wave propagating through an elastic medium.",
            "description*": {
                "en": "The speed of sound is the distance travelled during a unit of time by a sound wave propagating through an elastic medium."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpeedOfSoundValue",
            "@context": [
                "/wiki/Category:OSW29b1dc01984d568f84c03e03ed2ed731?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2fa92a2959c456ac831a219705ad4288"]


class GroupSpeedOfSound(SpeedOfSound):
    """
    In a dispersive medium sound speed is a function of sound frequency, through the dispersion relation. The spatial and temporal distribution of a propagating disturbance will continually change. The group speed of sound describes the propagation of the disturbance.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "5dc3dc74-fcb8-51e4-9e95-b82204c2f2dd",
            "title": "GroupSpeedOfSound",
            "title*": {"en": "Group Speed of Sound"},
            "description": "In a dispersive medium sound speed is a function of sound frequency, through the dispersion relation. The spatial and temporal distribution of a propagating disturbance will continually change. The group speed of sound describes the propagation of the disturbance.",
            "description*": {
                "en": "In a dispersive medium sound speed is a function of sound frequency, through the dispersion relation. The spatial and temporal distribution of a propagating disturbance will continually change. The group speed of sound describes the propagation of the disturbance."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasGroupSpeedOfSoundValue",
            "@context": [
                "/wiki/Category:OSW2fa92a2959c456ac831a219705ad4288?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW5dc3dc74fcb851e49e95b82204c2f2dd"]


class Concentration(QuantityValue):
    """
    In chemistry, concentration is defined as the abundance of a constituent divided by the total volume of a mixture. Furthermore, in chemistry, four types of mathematical description can be distinguished: mass concentration, molar concentration, number concentration, and volume concentration. The term concentration can be applied to any kind of chemical mixture, but most frequently it refers to solutes in solutions.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4ce5add3-85d2-545a-b8ab-50e4b222dab4",
            "title": "Concentration",
            "title*": {"en": "Concentration"},
            "description": "In chemistry, concentration is defined as the abundance of a constituent divided by the total volume of a mixture. Furthermore, in chemistry, four types of mathematical description can be distinguished: mass concentration, molar concentration, number concentration, and volume concentration. The term concentration can be applied to any kind of chemical mixture, but most frequently it refers to solutes in solutions.",
            "description*": {
                "en": "In chemistry, concentration is defined as the abundance of a constituent divided by the total volume of a mixture. Furthermore, in chemistry, four types of mathematical description can be distinguished: mass concentration, molar concentration, number concentration, and volume concentration. The term concentration can be applied to any kind of chemical mixture, but most frequently it refers to solutes in solutions."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasConcentrationValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4ce5add385d2545ab8ab50e4b222dab4"]
    unit: Optional[ConcentrationUnit] = Field(
        ConcentrationUnit.mole_per_meter_cubed,
        options={"enum_titles": ["mol/m³", "mmol/m³", "mol/dm³", "kmol/m³", "pmol/m³"]},
        title="ConcentrationUnit",
        x_enum_varnames=[
            "mole_per_meter_cubed",
            "milli_mole_per_meter_cubed",
            "mole_per_deci_meter_cubed",
            "kilo_mole_per_meter_cubed",
            "pico_mole_per_meter_cubed",
        ],
    )


class Reflectance(DimensionlessRatio):
    """
    Reflectance generally refers to the fraction of incident power that is reflected at an interface, while the term "reflection coefficient" is used for the fraction of electric field reflected. Reflectance is always a real number between zero and 1.0.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "e5e3a7fe-15ab-5bea-a32d-b082ed17e1d5",
            "title": "Reflectance",
            "title*": {"en": "Reflectance"},
            "description": 'Reflectance generally refers to the fraction of incident power that is reflected at an interface, while the term "reflection coefficient" is used for the fraction of electric field reflected. Reflectance is always a real number between zero and 1.0.',
            "description*": {
                "en": 'Reflectance generally refers to the fraction of incident power that is reflected at an interface, while the term "reflection coefficient" is used for the fraction of electric field reflected. Reflectance is always a real number between zero and 1.0.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasReflectanceValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe5e3a7fe15ab5beaa32db082ed17e1d5"]


class DryMass(Mass):
    """
    Mass of a system without the propellants, pressurants, reserve or residual fluids, personnel and personnel provisions, and cargo.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "40c53544-9288-505c-b9bd-50a76307e6fb",
            "title": "DryMass",
            "title*": {"en": "Dry Mass"},
            "description": "Mass of a system without the propellants, pressurants, reserve or residual fluids, personnel and personnel provisions, and cargo.",
            "description*": {
                "en": "Mass of a system without the propellants, pressurants, reserve or residual fluids, personnel and personnel provisions, and cargo."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDryMassValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW40c535449288505cb9bd50a76307e6fb"]


class TorsionalSpringConstantUnit(UnitEnum):
    meter_newton_per_radian = "Item:OSWcf35571886b95c2c889f076d7dab41dd"


class TorsionalSpringConstant(QuantityValue):
    """
    A torsional spring constant is a measure of the stiffness of a torsional spring, which is a type of spring that experiences twisting or torque rather than compression or extension. It is typically measured in newton-meters per radian (N·m/rad) and is used to calculate the amount of torque required to twist a spring a certain amount. It is related to the spring's geometry, material properties, and manufacturing process. #,#Quotient Drehmoment zur elastischen Verformung einer Drehfeder durch den zugehörigen Drehwinkel
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "ca883370-7e3c-5a77-8696-fa2c53877a28",
            "title": "TorsionalSpringConstant",
            "title*": {
                "en": "Torsional spring constant",
                "de": "Federkonstante Drehfeder",
            },
            "description": "A torsional spring constant is a measure of the stiffness of a torsional spring, which is a type of spring that experiences twisting or torque rather than compression or extension. It is typically measured in newton-meters per radian (N·m/rad) and is used to calculate the amount of torque required to twist a spring a certain amount. It is related to the spring's geometry, material properties, and manufacturing process. #,#Quotient Drehmoment zur elastischen Verformung einer Drehfeder durch den zugehörigen Drehwinkel",
            "description*": {
                "en": "A torsional spring constant is a measure of the stiffness of a torsional spring, which is a type of spring that experiences twisting or torque rather than compression or extension. It is typically measured in newton-meters per radian (N·m/rad) and is used to calculate the amount of torque required to twist a spring a certain amount. It is related to the spring's geometry, material properties, and manufacturing process. #,#Quotient Drehmoment zur elastischen Verformung einer Drehfeder durch den zugehörigen Drehwinkel"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTorsionalSpringConstantValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWca8833707e3c5a778696fa2c53877a28"]
    unit: Optional[TorsionalSpringConstantUnit] = Field(
        TorsionalSpringConstantUnit.meter_newton_per_radian,
        options={"enum_titles": ["N·m/rad"]},
        title="TorsionalSpringConstantUnit",
        x_enum_varnames=["meter_newton_per_radian"],
    )


class SuperconductionTransitionTemperature(Temperature):
    """
    "Superconduction Transition Temperature" is the critical thermodynamic temperature of a superconductor.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "416ee5dc-68e5-5357-9a81-e352df2a0641",
            "title": "SuperconductionTransitionTemperature",
            "title*": {"en": "Superconduction Transition Temperature"},
            "description": '"Superconduction Transition Temperature" is the critical thermodynamic temperature of a superconductor.',
            "description*": {
                "en": '"Superconduction Transition Temperature" is the critical thermodynamic temperature of a superconductor.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSuperconductionTransitionTemperatureValue",
            "@context": [
                "/wiki/Category:OSW20927e4900e95e93985698c92995f964?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW416ee5dc68e553579a81e352df2a0641"]


class ScalarMagneticPotentialUnit(UnitEnum):
    second_volt_per_meter = "Item:OSWf63c15f03855534fabdc39bb5403d1ff"


class ScalarMagneticPotential(QuantityValue):
    """
    "Scalar Magnetic Potential" is the scalar potential of an irrotational magnetic field strength. The negative of the gradient of the scalar magnetic potential is the irrotational magnetic field strength. The magnetic scalar potential is not unique since any constant scalar field can be added to it without changing its gradient.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "fc761e5f-ae69-51f2-a4f5-63e06b6cfc85",
            "title": "ScalarMagneticPotential",
            "title*": {"en": "Scalar Magnetic Potential"},
            "description": '"Scalar Magnetic Potential" is the scalar potential of an irrotational magnetic field strength. The negative of the gradient of the scalar magnetic potential is the irrotational magnetic field strength. The magnetic scalar potential is not unique since any constant scalar field can be added to it without changing its gradient.',
            "description*": {
                "en": '"Scalar Magnetic Potential" is the scalar potential of an irrotational magnetic field strength. The negative of the gradient of the scalar magnetic potential is the irrotational magnetic field strength. The magnetic scalar potential is not unique since any constant scalar field can be added to it without changing its gradient.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasScalarMagneticPotentialValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfc761e5fae6951f2a4f563e06b6cfc85"]
    unit: Optional[ScalarMagneticPotentialUnit] = Field(
        ScalarMagneticPotentialUnit.second_volt_per_meter,
        options={"enum_titles": ["V·s/m"]},
        title="ScalarMagneticPotentialUnit",
        x_enum_varnames=["second_volt_per_meter"],
    )


class VolumicElectromagneticEnergyUnit(UnitEnum):
    joule_per_meter_cubed = "Item:OSW9ea4bf89c42b56728392f1c55639ac18"
    mega_joule_per_meter_cubed = (
        "Item:OSW9ea4bf89c42b56728392f1c55639ac18#OSW7044da5ba4b45554b3acc6c6f3fc3624"
    )


class VolumicElectromagneticEnergy(QuantityValue):
    """
    $\\textit{Volumic Electromagnetic Energy}$, also known as the $\\textit{Electromagnetic Energy Density}$, is the energy associated with an electromagnetic field, per unit volume of the field.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "cfe6332c-b593-5e5c-b596-02e245a610cd",
            "title": "VolumicElectromagneticEnergy",
            "title*": {"en": "Volumic Electromagnetic Energy"},
            "description": "$\\textit{Volumic Electromagnetic Energy}$, also known as the $\\textit{Electromagnetic Energy Density}$, is the energy associated with an electromagnetic field, per unit volume of the field.",
            "description*": {
                "en": "$\\textit{Volumic Electromagnetic Energy}$, also known as the $\\textit{Electromagnetic Energy Density}$, is the energy associated with an electromagnetic field, per unit volume of the field."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVolumicElectromagneticEnergyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcfe6332cb5935e5cb59602e245a610cd"]
    unit: Optional[VolumicElectromagneticEnergyUnit] = Field(
        VolumicElectromagneticEnergyUnit.joule_per_meter_cubed,
        options={"enum_titles": ["J/m³", "MJ/m³"]},
        title="VolumicElectromagneticEnergyUnit",
        x_enum_varnames=["joule_per_meter_cubed", "mega_joule_per_meter_cubed"],
    )


class SpecificEntropyUnit(UnitEnum):
    joule_per_Celsius_per_kilo_gram = (
        "Item:OSW93d8b6e516fd54f09d483dee1278e3a8#OSWa0cd208ccfa759388597f5f9ff5c69fc"
    )


class SpecificEntropy(QuantityValue):
    """
    "Specific Entropy" is entropy per unit of mass.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "96b8069e-a0bd-5888-92e7-efe11651bcf1",
            "title": "SpecificEntropy",
            "title*": {"en": "Specific Entropy"},
            "description": '"Specific Entropy" is entropy per unit of mass.',
            "description*": {"en": '"Specific Entropy" is entropy per unit of mass.'},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificEntropyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW96b8069ea0bd588892e7efe11651bcf1"]
    unit: Optional[SpecificEntropyUnit] = Field(
        SpecificEntropyUnit.joule_per_Celsius_per_kilo_gram,
        options={"enum_titles": ["J/(kg·°C)"]},
        title="SpecificEntropyUnit",
        x_enum_varnames=["joule_per_Celsius_per_kilo_gram"],
    )


class SpinQuantumNumber1(QuantumNumber):
    """
    The "Spin Quantum Number"  describes the spin (intrinsic angular momentum) of the electron within that orbital, and gives the projection of the spin angular momentum S along the specified axis
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "da012dbe-9144-56a0-9af4-429dce5dcc49",
            "title": "SpinQuantumNumber",
            "title*": {"en": "Spin Quantum Number"},
            "description": 'The "Spin Quantum Number"  describes the spin (intrinsic angular momentum) of the electron within that orbital, and gives the projection of the spin angular momentum S along the specified axis',
            "description*": {
                "en": 'The "Spin Quantum Number"  describes the spin (intrinsic angular momentum) of the electron within that orbital, and gives the projection of the spin angular momentum S along the specified axis'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpinQuantumNumberValue",
            "@context": [
                "/wiki/Category:OSWa35c06b30b7750c49dd53768ffd9e756?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWda012dbe914456a09af4429dce5dcc49"]


class SpinQuantumNumber(SpinQuantumNumber1):
    """
    The "Spin Quantum Number"  describes the spin (intrinsic angular momentum) of the electron within that orbital, and gives the projection of the spin angular momentum S along the specified axis
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a2849571-97dc-5db1-a46e-9efca2d2a645",
            "title": "SpinQuantumNumber",
            "title*": {"en": "Spin Quantum Number"},
            "description": 'The "Spin Quantum Number"  describes the spin (intrinsic angular momentum) of the electron within that orbital, and gives the projection of the spin angular momentum S along the specified axis',
            "description*": {
                "en": 'The "Spin Quantum Number"  describes the spin (intrinsic angular momentum) of the electron within that orbital, and gives the projection of the spin angular momentum S along the specified axis'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpinQuantumNumberValue",
            "@context": [
                "/wiki/Category:OSWda012dbe914456a09af4429dce5dcc49?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa284957197dc5db1a46e9efca2d2a645"]


class MassEnergyTransferCoefficientUnit(UnitEnum):
    meter_squared_per_kilo_gram = (
        "Item:OSWd7015166d39d5cae866a40eac3d51896#OSWc811db362efa5d33a49b56ffdd77e54d"
    )


class MassEnergyTransferCoefficient(QuantityValue):
    """
    "Mass Energy Transfer Coefficient" is that fraction of the mass attenuation coefficient which contributes to the production of kinetic energy in charged particles.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "62d08281-552e-55ad-acdc-5be6123ac375",
            "title": "MassEnergyTransferCoefficient",
            "title*": {"en": "Mass Energy Transfer Coefficient"},
            "description": '"Mass Energy Transfer Coefficient" is that fraction of the mass attenuation coefficient which contributes to the production of kinetic energy in charged particles.',
            "description*": {
                "en": '"Mass Energy Transfer Coefficient" is that fraction of the mass attenuation coefficient which contributes to the production of kinetic energy in charged particles.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassEnergyTransferCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW62d08281552e55adacdc5be6123ac375"]
    unit: Optional[MassEnergyTransferCoefficientUnit] = Field(
        MassEnergyTransferCoefficientUnit.meter_squared_per_kilo_gram,
        options={"enum_titles": ["m²/kg"]},
        title="MassEnergyTransferCoefficientUnit",
        x_enum_varnames=["meter_squared_per_kilo_gram"],
    )


class SpecificEnthalpy(SpecificEnergy):
    """
    $\\textit{Specific Enthalpy}$ is enthalpy per mass of substance involved. Specific enthalpy is denoted by a lower case h, with dimension of energy per mass (SI unit: joule/kg). In thermodynamics, $\\textit{enthalpy}$ is the sum of the internal energy U and the product of pressure p and volume V of a system: $H = U + pV$.  The internal energy U and the work term pV have dimension of energy, in SI units this is joule; the extensive (linear in size) quantity H has the same dimension.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "405e3d0a-77f5-50a7-bf63-2bb907ae9c47",
            "title": "SpecificEnthalpy",
            "title*": {"en": "Specific Enthalpy"},
            "description": "$\\textit{Specific Enthalpy}$ is enthalpy per mass of substance involved. Specific enthalpy is denoted by a lower case h, with dimension of energy per mass (SI unit: joule/kg). In thermodynamics, $\\textit{enthalpy}$ is the sum of the internal energy U and the product of pressure p and volume V of a system: $H = U + pV$.  The internal energy U and the work term pV have dimension of energy, in SI units this is joule; the extensive (linear in size) quantity H has the same dimension.",
            "description*": {
                "en": "$\\textit{Specific Enthalpy}$ is enthalpy per mass of substance involved. Specific enthalpy is denoted by a lower case h, with dimension of energy per mass (SI unit: joule/kg). In thermodynamics, $\\textit{enthalpy}$ is the sum of the internal energy U and the product of pressure p and volume V of a system: $H = U + pV$.  The internal energy U and the work term pV have dimension of energy, in SI units this is joule; the extensive (linear in size) quantity H has the same dimension."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificEnthalpyValue",
            "@context": [
                "/wiki/Category:OSW9a32b5a84f235a0cb0a9e9fba9bd252e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW405e3d0a77f550a7bf632bb907ae9c47"]


class ElectronMeanFreePath(Length):
    """
    "Electron Mean Free Path" is the mean free path of electrons.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "bbae37b2-b2db-5367-89ac-d5fc581286b9",
            "title": "ElectronMeanFreePath",
            "title*": {"en": "Electron Mean Free Path"},
            "description": '"Electron Mean Free Path" is the mean free path of electrons.',
            "description*": {
                "en": '"Electron Mean Free Path" is the mean free path of electrons.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectronMeanFreePathValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWbbae37b2b2db536789acd5fc581286b9"]


class ElectricPolarizationUnit(UnitEnum):
    coulomb_per_meter_squared = "Item:OSW1f38c1c62b2850deb24c1c3afccfc239"
    micro_coulomb_per_meter_squared = (
        "Item:OSW1f38c1c62b2850deb24c1c3afccfc239#OSWea3f16aa263f52dc941e62b9c510ade5"
    )
    milli_coulomb_per_meter_squared = (
        "Item:OSW1f38c1c62b2850deb24c1c3afccfc239#OSWaace10bd10b5537299ad0548738e0b5e"
    )
    coulomb_per_milli_meter_squared = (
        "Item:OSW1f38c1c62b2850deb24c1c3afccfc239#OSW596e6e9224085a35b395fc84aa4edde8"
    )
    coulomb_per_centi_meter_squared = (
        "Item:OSW1f38c1c62b2850deb24c1c3afccfc239#OSWf6450e8adb145e3a8cc3104122cdc667"
    )
    mega_coulomb_per_meter_squared = (
        "Item:OSW1f38c1c62b2850deb24c1c3afccfc239#OSW344d47f96cd55fe89e73f85cb1054450"
    )
    kilo_coulomb_per_meter_squared = (
        "Item:OSW1f38c1c62b2850deb24c1c3afccfc239#OSW6314b9832a355b7cab3616f5d08c4165"
    )


class ElectricPolarization(QuantityValue):
    """
    "Electric Polarization" is the relative shift of positive and negative electric charge in opposite directions within an insulator, or dielectric, induced by an external electric field. Polarization occurs when an electric field distorts the negative cloud of electrons around positive atomic nuclei in a direction opposite the field. This slight separation of charge makes one side of the atom somewhat positive and the opposite side somewhat negative. In some materials whose molecules are permanently polarized by chemical forces, such as water molecules, some of the polarization is caused by molecules rotating into the same alignment under the influence of the electric field. One of the measures of polarization is electric dipole moment, which equals the distance between the slightly shifted centres of positive and negative charge multiplied by the amount of one of the charges. Polarization P in its quantitative meaning is the amount of dipole moment p per unit volume V of a polarized material, P = p/V.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "b2f047e5-e8fe-5cc8-bc80-399216214caa",
            "title": "ElectricPolarization",
            "title*": {"en": "Electric polarization", "de": "Elektrische Polarisation"},
            "description": '"Electric Polarization" is the relative shift of positive and negative electric charge in opposite directions within an insulator, or dielectric, induced by an external electric field. Polarization occurs when an electric field distorts the negative cloud of electrons around positive atomic nuclei in a direction opposite the field. This slight separation of charge makes one side of the atom somewhat positive and the opposite side somewhat negative. In some materials whose molecules are permanently polarized by chemical forces, such as water molecules, some of the polarization is caused by molecules rotating into the same alignment under the influence of the electric field. One of the measures of polarization is electric dipole moment, which equals the distance between the slightly shifted centres of positive and negative charge multiplied by the amount of one of the charges. Polarization P in its quantitative meaning is the amount of dipole moment p per unit volume V of a polarized material, P = p/V.',
            "description*": {
                "en": '"Electric Polarization" is the relative shift of positive and negative electric charge in opposite directions within an insulator, or dielectric, induced by an external electric field. Polarization occurs when an electric field distorts the negative cloud of electrons around positive atomic nuclei in a direction opposite the field. This slight separation of charge makes one side of the atom somewhat positive and the opposite side somewhat negative. In some materials whose molecules are permanently polarized by chemical forces, such as water molecules, some of the polarization is caused by molecules rotating into the same alignment under the influence of the electric field. One of the measures of polarization is electric dipole moment, which equals the distance between the slightly shifted centres of positive and negative charge multiplied by the amount of one of the charges. Polarization P in its quantitative meaning is the amount of dipole moment p per unit volume V of a polarized material, P = p/V.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricPolarizationValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb2f047e5e8fe5cc8bc80399216214caa"]
    unit: Optional[ElectricPolarizationUnit] = Field(
        ElectricPolarizationUnit.coulomb_per_meter_squared,
        options={
            "enum_titles": [
                "C/m²",
                "μC/m²",
                "mC/m²",
                "C/mm²",
                "C/cm²",
                "MC/m²",
                "kC/m²",
            ]
        },
        title="ElectricPolarizationUnit",
        x_enum_varnames=[
            "coulomb_per_meter_squared",
            "micro_coulomb_per_meter_squared",
            "milli_coulomb_per_meter_squared",
            "coulomb_per_milli_meter_squared",
            "coulomb_per_centi_meter_squared",
            "mega_coulomb_per_meter_squared",
            "kilo_coulomb_per_meter_squared",
        ],
    )


class ApparentPower(ElectricPower):
    """
    "Apparent Power" is the product of the rms voltage $U$ between the terminals of a two-terminal element or two-terminal circuit and the rms electric current I in the element or circuit. Under sinusoidal conditions, the apparent power is the modulus of the complex power.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "9a9b930a-8a17-5c13-925e-18bea1363e3a",
            "title": "ApparentPower",
            "title*": {"en": "Apparent power", "de": "Scheinleistung"},
            "description": '"Apparent Power" is the product of the rms voltage $U$ between the terminals of a two-terminal element or two-terminal circuit and the rms electric current I in the element or circuit. Under sinusoidal conditions, the apparent power is the modulus of the complex power.',
            "description*": {
                "en": '"Apparent Power" is the product of the rms voltage $U$ between the terminals of a two-terminal element or two-terminal circuit and the rms electric current I in the element or circuit. Under sinusoidal conditions, the apparent power is the modulus of the complex power.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasApparentPowerValue",
            "@context": [
                "/wiki/Category:OSW06164d3febb95a42add7826696cc5387?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9a9b930a8a175c13925e18bea1363e3a"]


class PressureRatio(DimensionlessRatio):
    """
    This is an autogenerated partial class definition of 'PressureRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7014422e-d349-57de-9d4c-a0fb6e3d74d3",
            "title": "PressureRatio",
            "title*": {"en": "Pressure Ratio"},
            "description": "This is an autogenerated partial class definition of 'PressureRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPressureRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7014422ed34957de9d4ca0fb6e3d74d3"]


class RadiantFluenceUnit(UnitEnum):
    joule_per_meter_squared = "Item:OSW0747b5382b955ef2adef0e4c4b1efa81"
    giga_joule_per_meter_squared = (
        "Item:OSW0747b5382b955ef2adef0e4c4b1efa81#OSW48c62f71ae5a512ca24dcb6059999b8d"
    )
    milli_joule_per_meter_squared = (
        "Item:OSW0747b5382b955ef2adef0e4c4b1efa81#OSW3b9b7dca35ec5f7995ba76de650fcadf"
    )
    mega_joule_per_meter_squared = (
        "Item:OSW0747b5382b955ef2adef0e4c4b1efa81#OSWf9cdbd6556545d55a9bde1a0915a9545"
    )
    joule_per_centi_meter_squared = (
        "Item:OSW0747b5382b955ef2adef0e4c4b1efa81#OSW16b24f4ffe12585aa114fbefbf3dbd5b"
    )


class RadiantFluence(QuantityValue):
    """
    Radiant fluence rate, or spherical irradiance, is equal to the total radiant flux incident on a small sphere divided by the area of the diametrical cross-section of the sphere.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "94e4c35a-2f77-5b81-bdf2-cd9d259082ba",
            "title": "RadiantFluence",
            "title*": {"en": "Radiant Fluence"},
            "description": "Radiant fluence rate, or spherical irradiance, is equal to the total radiant flux incident on a small sphere divided by the area of the diametrical cross-section of the sphere.",
            "description*": {
                "en": "Radiant fluence rate, or spherical irradiance, is equal to the total radiant flux incident on a small sphere divided by the area of the diametrical cross-section of the sphere."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRadiantFluenceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW94e4c35a2f775b81bdf2cd9d259082ba"]
    unit: Optional[RadiantFluenceUnit] = Field(
        RadiantFluenceUnit.joule_per_meter_squared,
        options={"enum_titles": ["J/m²", "GJ/m²", "mJ/m²", "MJ/m²", "J/cm²"]},
        title="RadiantFluenceUnit",
        x_enum_varnames=[
            "joule_per_meter_squared",
            "giga_joule_per_meter_squared",
            "milli_joule_per_meter_squared",
            "mega_joule_per_meter_squared",
            "joule_per_centi_meter_squared",
        ],
    )


class MolarEnergy(QuantityValue):
    """
    "Molar Energy" is the total energy contained by a thermodynamic system. The unit is $$J/mol$$, also expressed as $$joule/mole$$,  or $$joules per mole$$. This unit is commonly used in the SI unit system. The quantity has the dimension of $$M \cdot L^2 \cdot  T^{-2} \cdot N^{-1}$$ where $$M$$ is mass, $$L$$ is length, $$T$$ is time, and $$N$$ is amount of substance.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "21ec5968-e3c2-533d-98f2-0564838541fa",
            "title": "MolarEnergy",
            "title*": {"en": "Molar Energy"},
            "description": '"Molar Energy" is the total energy contained by a thermodynamic system. The unit is $$J/mol$$, also expressed as $$joule/mole$$,  or $$joules per mole$$. This unit is commonly used in the SI unit system. The quantity has the dimension of $$M \\cdot L^2 \\cdot  T^{-2} \\cdot N^{-1}$$ where $$M$$ is mass, $$L$$ is length, $$T$$ is time, and $$N$$ is amount of substance.',
            "description*": {
                "en": '"Molar Energy" is the total energy contained by a thermodynamic system. The unit is $$J/mol$$, also expressed as $$joule/mole$$,  or $$joules per mole$$. This unit is commonly used in the SI unit system. The quantity has the dimension of $$M \\cdot L^2 \\cdot  T^{-2} \\cdot N^{-1}$$ where $$M$$ is mass, $$L$$ is length, $$T$$ is time, and $$N$$ is amount of substance.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarEnergyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW21ec5968e3c2533d98f20564838541fa"]
    unit: Optional[MolarEnergyUnit] = Field(
        MolarEnergyUnit.joule_per_mole,
        options={"enum_titles": ["J/mol", "kJ/mol"]},
        title="MolarEnergyUnit",
        x_enum_varnames=["joule_per_mole", "kilo_joule_per_mole"],
    )


class CenterOfGravityInTheXAxis(Length):
    """
    This is an autogenerated partial class definition of 'CenterOfGravityInTheXAxis'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "89d1a9df-9ae2-56df-9c0f-df46b74cb96b",
            "title": "CenterOfGravityInTheXAxis",
            "title*": {"en": "Center of Gravity in the X axis"},
            "description": "This is an autogenerated partial class definition of 'CenterOfGravityInTheXAxis'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCenterOfGravityInTheXAxisValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW89d1a9df9ae256df9c0fdf46b74cb96b"]


class CrossSectionalArea(Area):
    """
    This is an autogenerated partial class definition of 'CrossSectionalArea'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "fcfbe2c7-9889-50da-a7b9-97215ad2bd60",
            "title": "CrossSectionalArea",
            "title*": {"en": "Cross-sectional Area"},
            "description": "This is an autogenerated partial class definition of 'CrossSectionalArea'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCrossSectionalAreaValue",
            "@context": [
                "/wiki/Category:OSW1fcf1694712e5684885071efdf775bd9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfcfbe2c7988950daa7b997215ad2bd60"]


class LinearIonizationUnit(UnitEnum):
    per_meter = "Item:OSW28e75b089e145904998a54f1c4125bf3"
    per_centi_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW0dcebe41477056aba0e706c148970688"
    )
    per_nano_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWdc9edf9277ed57cdb7a6f218551afa8d"
    )
    per_milli_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWe77bc3c1bd7a566eadb55f3b68d351f2"
    )
    per_pico_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWd0475e49e0715ec488fba3fe0fdd9b02"
    )
    per_micro_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW45c24d8b68485accbdd684f05231c74c"
    )
    per_kilo_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW124eebfb89dc54bc9cc223fd49c40480"
    )


class LinearIonization(QuantityValue):
    """
    "Linear Ionization"  is a description of how the ionization of an atom or molecule takes place. For example, an ion with a +2 charge can be created only from an ion with a +1 charge or a +3 charge. That is, the numerical charge of an atom or molecule must change sequentially, always moving from one number to an adjacent, or sequential, number. Using sequential ionization definition.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "1199859d-9699-59cf-9609-fefc5c904183",
            "title": "LinearIonization",
            "title*": {"en": "Linear Ionization"},
            "description": '"Linear Ionization"  is a description of how the ionization of an atom or molecule takes place. For example, an ion with a +2 charge can be created only from an ion with a +1 charge or a +3 charge. That is, the numerical charge of an atom or molecule must change sequentially, always moving from one number to an adjacent, or sequential, number. Using sequential ionization definition.',
            "description*": {
                "en": '"Linear Ionization"  is a description of how the ionization of an atom or molecule takes place. For example, an ion with a +2 charge can be created only from an ion with a +1 charge or a +3 charge. That is, the numerical charge of an atom or molecule must change sequentially, always moving from one number to an adjacent, or sequential, number. Using sequential ionization definition.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLinearIonizationValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1199859d969959cf9609fefc5c904183"]
    unit: Optional[LinearIonizationUnit] = Field(
        LinearIonizationUnit.per_meter,
        options={
            "enum_titles": ["1/m", "1/cm", "1/nm", "1/mm", "1/pm", "1/μm", "1/km"]
        },
        title="LinearIonizationUnit",
        x_enum_varnames=[
            "per_meter",
            "per_centi_meter",
            "per_nano_meter",
            "per_milli_meter",
            "per_pico_meter",
            "per_micro_meter",
            "per_kilo_meter",
        ],
    )


class VolumeStrain(Strain):
    """
    Volume, or volumetric, Strain, or dilatation (the relative variation of the volume) is the trace of the tensor $\vartheta$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "14e89dba-d13a-5ae0-81bf-fbd4dc8641a6",
            "title": "VolumeStrain",
            "title*": {"en": "Volume Strain"},
            "description": "Volume, or volumetric, Strain, or dilatation (the relative variation of the volume) is the trace of the tensor $\\vartheta$.",
            "description*": {
                "en": "Volume, or volumetric, Strain, or dilatation (the relative variation of the volume) is the trace of the tensor $\\vartheta$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVolumeStrainValue",
            "@context": [
                "/wiki/Category:OSW877f6c0b113452649d1a4ac5ea3a6710?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW14e89dbad13a5ae081bffbd4dc8641a6"]


class WarpingConstantUnit(UnitEnum):
    field_6 = "Item:OSWc5904c8a783d5e8da5f6a24745774a6b"
    field_6_1 = (
        "Item:OSWc5904c8a783d5e8da5f6a24745774a6b#OSWffc057592b945f8aaad8ef5e3e1903a4"
    )


class WarpingConstant(QuantityValue):
    """
    The "Warping Constant" is a measure for the warping constant or warping resistance of a cross section under torsional loading. It is usually measured in m⁶.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "298b2f8a-4a01-55aa-951a-e75231e4343f",
            "title": "WarpingConstant",
            "title*": {"en": "Warping Constant"},
            "description": 'The "Warping Constant" is a measure for the warping constant or warping resistance of a cross section under torsional loading. It is usually measured in m⁶.',
            "description*": {
                "en": 'The "Warping Constant" is a measure for the warping constant or warping resistance of a cross section under torsional loading. It is usually measured in m⁶.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasWarpingConstantValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW298b2f8a4a0155aa951ae75231e4343f"]
    unit: Optional[WarpingConstantUnit] = Field(
        WarpingConstantUnit.field_6,
        options={"enum_titles": ["m⁶", "cm⁶"]},
        title="WarpingConstantUnit",
        x_enum_varnames=["6", "6"],
    )


class PositiveLength1(Length):
    """
    "NonNegativeLength" is a measure of length greater than or equal to zero.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "04772b79-15d6-597f-adf5-b7d44f4e90a5",
            "title": "PositiveLength",
            "title*": {"en": "Positive Length"},
            "description": '"NonNegativeLength" is a measure of length greater than or equal to zero.',
            "description*": {
                "en": '"NonNegativeLength" is a measure of length greater than or equal to zero.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPositiveLengthValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW04772b7915d6597fadf5b7d44f4e90a5"]


class PositiveLength(PositiveLength1):
    """
    "PositiveLength" is a measure of length strictly greater than zero.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "238bf8ec-20d0-5670-bba3-2c1b44182138",
            "title": "PositiveLength",
            "title*": {"en": "Positive Length"},
            "description": '"PositiveLength" is a measure of length strictly greater than zero.',
            "description*": {
                "en": '"PositiveLength" is a measure of length strictly greater than zero.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPositiveLengthValue",
            "@context": [
                "/wiki/Category:OSW04772b7915d6597fadf5b7d44f4e90a5?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW238bf8ec20d05670bba32c1b44182138"]


class DebyeAngularFrequency(AngularFrequency):
    """
    "Debye Angular Frequency" is the cut-off angular frequency in the Debye model of the vibrational spectrum of a solid.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a284f00a-432c-5ca0-9e8b-1c61eb0d30ed",
            "title": "DebyeAngularFrequency",
            "title*": {"en": "Debye Angular Frequency"},
            "description": '"Debye Angular Frequency" is the cut-off angular frequency in the Debye model of the vibrational spectrum of a solid.',
            "description*": {
                "en": '"Debye Angular Frequency" is the cut-off angular frequency in the Debye model of the vibrational spectrum of a solid.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDebyeAngularFrequencyValue",
            "@context": [
                "/wiki/Category:OSW9534c898b7d45510adfa6673507a4e10?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa284f00a432c5ca09e8b1c61eb0d30ed"]


class MolarConductivityUnit(UnitEnum):
    meter_squared_siemens_per_mole = "Item:OSW646be3968f185e0ab1832d987570b812"


class MolarConductivity(QuantityValue):
    """
    "Molar Conductivity" is the conductivity of an electrolyte solution divided by the molar concentration of the electrolyte, and so measures the efficiency with which a given electrolyte conducts electricity in solution.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "5ea67a27-968a-5832-bd98-c38020c4bd6e",
            "title": "MolarConductivity",
            "title*": {"en": "Molar Conductivity"},
            "description": '"Molar Conductivity" is the conductivity of an electrolyte solution divided by the molar concentration of the electrolyte, and so measures the efficiency with which a given electrolyte conducts electricity in solution.',
            "description*": {
                "en": '"Molar Conductivity" is the conductivity of an electrolyte solution divided by the molar concentration of the electrolyte, and so measures the efficiency with which a given electrolyte conducts electricity in solution.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarConductivityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW5ea67a27968a5832bd98c38020c4bd6e"]
    unit: Optional[MolarConductivityUnit] = Field(
        MolarConductivityUnit.meter_squared_siemens_per_mole,
        options={"enum_titles": ["S·m²/mol"]},
        title="MolarConductivityUnit",
        x_enum_varnames=["meter_squared_siemens_per_mole"],
    )


class Temperature(QuantityValue):
    """
    Temperature is a physical property of matter that quantitatively expresses the common notions of hot and cold. Objects of low temperature are cold, while various degrees of higher temperatures are referred to as warm or hot. Heat spontaneously flows from bodies of a higher temperature to bodies of lower temperature, at a rate that increases with the temperature difference and the thermal conductivity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "20927e49-00e9-5e93-9856-98c92995f964",
            "title": "Temperature",
            "title*": {"en": "Temperature"},
            "description": "Temperature is a physical property of matter that quantitatively expresses the common notions of hot and cold. Objects of low temperature are cold, while various degrees of higher temperatures are referred to as warm or hot. Heat spontaneously flows from bodies of a higher temperature to bodies of lower temperature, at a rate that increases with the temperature difference and the thermal conductivity.",
            "description*": {
                "en": "Temperature is a physical property of matter that quantitatively expresses the common notions of hot and cold. Objects of low temperature are cold, while various degrees of higher temperatures are referred to as warm or hot. Heat spontaneously flows from bodies of a higher temperature to bodies of lower temperature, at a rate that increases with the temperature difference and the thermal conductivity."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTemperatureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW20927e4900e95e93985698c92995f964"]
    unit: Optional[TemperatureUnit] = Field(
        TemperatureUnit.Celsius,
        options={"enum_titles": ["°C", "m°C"]},
        title="TemperatureUnit",
        x_enum_varnames=["Celsius", "milli_Celsius"],
    )


class ElectricCurrentDensityUnit(UnitEnum):
    ampere_per_meter_squared = "Item:OSW2b1e97f1edd650c088abbe8896fe0333"
    kilo_ampere_per_meter_squared = (
        "Item:OSW2b1e97f1edd650c088abbe8896fe0333#OSWa80d9ac2c0455902ab9531512c9b7667"
    )
    ampere_per_milli_meter_squared = (
        "Item:OSW2b1e97f1edd650c088abbe8896fe0333#OSW8d7d0b57aaba5f8a8f40e8bacc5cb2f6"
    )
    mega_ampere_per_meter_squared = (
        "Item:OSW2b1e97f1edd650c088abbe8896fe0333#OSWd0a4ce0cc105550b9bcbc416589a1b85"
    )
    ampere_per_centi_meter_squared = (
        "Item:OSW2b1e97f1edd650c088abbe8896fe0333#OSWec1a540d03745760af1d26077e9d762e"
    )


class ElectricCurrentDensity(QuantityValue):
    """
    "Electric Current Density" is a measure of the density of flow of electric charge; it is the electric current per unit area of cross section. Electric current density is a vector-valued quantity. Electric current, $I$, through a surface $S$ is defined as $I = \int_S J \cdot e_n dA$, where $e_ndA$ is the vector surface element.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "b43cba22-fb1d-5124-bd56-9a3e18826b1f",
            "title": "ElectricCurrentDensity",
            "title*": {
                "en": "Electric current density",
                "de": "Elektrische Stromdichte",
            },
            "description": '"Electric Current Density" is a measure of the density of flow of electric charge; it is the electric current per unit area of cross section. Electric current density is a vector-valued quantity. Electric current, $I$, through a surface $S$ is defined as $I = \\int_S J \\cdot e_n dA$, where $e_ndA$ is the vector surface element.',
            "description*": {
                "en": '"Electric Current Density" is a measure of the density of flow of electric charge; it is the electric current per unit area of cross section. Electric current density is a vector-valued quantity. Electric current, $I$, through a surface $S$ is defined as $I = \\int_S J \\cdot e_n dA$, where $e_ndA$ is the vector surface element.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricCurrentDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb43cba22fb1d5124bd569a3e18826b1f"]
    unit: Optional[ElectricCurrentDensityUnit] = Field(
        ElectricCurrentDensityUnit.ampere_per_meter_squared,
        options={"enum_titles": ["A/m²", "kA/m²", "A/mm²", "MA/m²", "A/cm²"]},
        title="ElectricCurrentDensityUnit",
        x_enum_varnames=[
            "ampere_per_meter_squared",
            "kilo_ampere_per_meter_squared",
            "ampere_per_milli_meter_squared",
            "mega_ampere_per_meter_squared",
            "ampere_per_centi_meter_squared",
        ],
    )


class LuminousEfficacyUnit(UnitEnum):
    lumen_per_watt = "Item:OSW1df25fb7ecc057a7a5e4de01e46158b8"


class LuminousEfficacy(QuantityValue):
    """
    Luminous Efficacy is the ratio of luminous flux (in lumens) to power (usually measured in watts). Depending on context, the power can be either the radiant flux of the source's output, or it can be the total electric power consumed by the source.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "64253eb9-2383-544f-9b75-71c7e07cff76",
            "title": "LuminousEfficacy",
            "title*": {"en": "Luminous Efficacy"},
            "description": "Luminous Efficacy is the ratio of luminous flux (in lumens) to power (usually measured in watts). Depending on context, the power can be either the radiant flux of the source's output, or it can be the total electric power consumed by the source.",
            "description*": {
                "en": "Luminous Efficacy is the ratio of luminous flux (in lumens) to power (usually measured in watts). Depending on context, the power can be either the radiant flux of the source's output, or it can be the total electric power consumed by the source."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLuminousEfficacyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW64253eb92383544f9b7571c7e07cff76"]
    unit: Optional[LuminousEfficacyUnit] = Field(
        LuminousEfficacyUnit.lumen_per_watt,
        options={"enum_titles": ["lm/W"]},
        title="LuminousEfficacyUnit",
        x_enum_varnames=["lumen_per_watt"],
    )


class EarthClosestApproachVehicleVelocity(VehicleVelocity):
    """
    This is an autogenerated partial class definition of 'EarthClosestApproachVehicleVelocity'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a4fc82b5-131a-5f54-85b1-cee34bb708ab",
            "title": "EarthClosestApproachVehicleVelocity",
            "title*": {"en": "Earth Closest Approach Vehicle Velocity"},
            "description": "This is an autogenerated partial class definition of 'EarthClosestApproachVehicleVelocity'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEarthClosestApproachVehicleVelocityValue",
            "@context": [
                "/wiki/Category:OSW42543b13af4c5af88462e7ac8ff8707d?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa4fc82b5131a5f5485b1cee34bb708ab"]


class AngleOfAttack(Angle):
    """
    Angle of attack  is the angle between the oncoming air or relative wind and a reference line on the airplane or wing.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1d2dc894-4376-5cf8-935b-61016cbe5bd1",
            "title": "AngleOfAttack",
            "title*": {"en": "Angle Of Attack"},
            "description": "Angle of attack  is the angle between the oncoming air or relative wind and a reference line on the airplane or wing.",
            "description*": {
                "en": "Angle of attack  is the angle between the oncoming air or relative wind and a reference line on the airplane or wing."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngleOfAttackValue",
            "@context": [
                "/wiki/Category:OSW2339256af71e5635a541ac7f5a437141?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1d2dc89443765cf8935b61016cbe5bd1"]


class TotalAtomicStoppingPowerUnit(UnitEnum):
    joule_meter_squared = "Item:OSW56a0d2c5894a539dab6c6581082cf5ae"


class TotalAtomicStoppingPower(QuantityValue):
    """
    The "Total Atomic Stopping Power" for an ionizing particle passing through an element, is the particle's energy loss per atom within a unit area normal to the particle's path; equal to the linear energy transfer (energy loss per unit path length) divided by the number of atoms per unit volume.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "261c913d-a725-5923-92a6-03767e4f9c32",
            "title": "TotalAtomicStoppingPower",
            "title*": {"en": "Total Atomic Stopping Power"},
            "description": "The \"Total Atomic Stopping Power\" for an ionizing particle passing through an element, is the particle's energy loss per atom within a unit area normal to the particle's path; equal to the linear energy transfer (energy loss per unit path length) divided by the number of atoms per unit volume.",
            "description*": {
                "en": "The \"Total Atomic Stopping Power\" for an ionizing particle passing through an element, is the particle's energy loss per atom within a unit area normal to the particle's path; equal to the linear energy transfer (energy loss per unit path length) divided by the number of atoms per unit volume."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTotalAtomicStoppingPowerValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW261c913da725592392a603767e4f9c32"]
    unit: Optional[TotalAtomicStoppingPowerUnit] = Field(
        TotalAtomicStoppingPowerUnit.joule_meter_squared,
        options={"enum_titles": ["J·m²"]},
        title="TotalAtomicStoppingPowerUnit",
        x_enum_varnames=["joule_meter_squared"],
    )


class AtomicEnergy(Energy):
    """
    skalare Größe von Elementarteilchen, die bei beliebiger Umwandlung innerhalb eines Systems erhalten bleibt und als gespeichertes Arbeitsvermögen die Fähigkeit eines physikalischen Systems darstellt, Arbeit zu verrichten
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "8d4a387a-6b1d-5ed7-8494-85215602a553",
            "title": "AtomicEnergy",
            "title*": {"en": "Atomic energy"},
            "description": "skalare Größe von Elementarteilchen, die bei beliebiger Umwandlung innerhalb eines Systems erhalten bleibt und als gespeichertes Arbeitsvermögen die Fähigkeit eines physikalischen Systems darstellt, Arbeit zu verrichten",
            "description*": {
                "en": "skalare Größe von Elementarteilchen, die bei beliebiger Umwandlung innerhalb eines Systems erhalten bleibt und als gespeichertes Arbeitsvermögen die Fähigkeit eines physikalischen Systems darstellt, Arbeit zu verrichten"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAtomicEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8d4a387a6b1d5ed7849485215602a553"]


class SpecificActivityUnit(UnitEnum):
    becquerel_per_kilo_gram = "Item:OSW03b25e9a7cef5adeb7f3d5f82115dfc3"
    milli_becquerel_per_kilo_gram = (
        "Item:OSW03b25e9a7cef5adeb7f3d5f82115dfc3#OSWc896c96c6de8521181daee0118de2c5b"
    )
    micro_becquerel_per_kilo_gram = (
        "Item:OSW03b25e9a7cef5adeb7f3d5f82115dfc3#OSW23b3668ed7d3501da40aaa0a4e9f765e"
    )


class SpecificActivity(QuantityValue):
    """
    The "Specific Activity" is the number of decays per unit time of a radioactive sample. The SI unit of radioactive activity is the becquerel (Bq), in honor of the scientist Henri Becquerel.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "eb633138-f315-5fd0-9a5f-a2b6ac5b5bc2",
            "title": "SpecificActivity",
            "title*": {"en": "Specific Activity"},
            "description": 'The "Specific Activity" is the number of decays per unit time of a radioactive sample. The SI unit of radioactive activity is the becquerel (Bq), in honor of the scientist Henri Becquerel.',
            "description*": {
                "en": 'The "Specific Activity" is the number of decays per unit time of a radioactive sample. The SI unit of radioactive activity is the becquerel (Bq), in honor of the scientist Henri Becquerel.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificActivityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWeb633138f3155fd09a5fa2b6ac5b5bc2"]
    unit: Optional[SpecificActivityUnit] = Field(
        SpecificActivityUnit.becquerel_per_kilo_gram,
        options={"enum_titles": ["Bq/kg", "mBq/kg", "μBq/kg"]},
        title="SpecificActivityUnit",
        x_enum_varnames=[
            "becquerel_per_kilo_gram",
            "milli_becquerel_per_kilo_gram",
            "micro_becquerel_per_kilo_gram",
        ],
    )


class HeadEndPressure(Pressure):
    """
    This is an autogenerated partial class definition of 'HeadEndPressure'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "31cf0c81-2f33-5d06-a0fa-b1a15b46d6e5",
            "title": "HeadEndPressure",
            "title*": {"en": "Head End Pressure"},
            "description": "This is an autogenerated partial class definition of 'HeadEndPressure'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasHeadEndPressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW31cf0c812f335d06a0fab1a15b46d6e5"]


class ExitPlanePressure(Pressure):
    """
    This is an autogenerated partial class definition of 'ExitPlanePressure'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "d42f78f4-03bd-5873-b1ba-3409d0816d39",
            "title": "ExitPlanePressure",
            "title*": {"en": "Exit Plane Pressure"},
            "description": "This is an autogenerated partial class definition of 'ExitPlanePressure'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasExitPlanePressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd42f78f403bd5873b1ba3409d0816d39"]


class TargetBogieMass(Mass):
    """
    An informal mass limit established by a Project Office (at the Element Integrated Product Team (IPT) level or below) to control mass.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a76d2f3b-5b21-5031-a315-e3ab651e5c32",
            "title": "TargetBogieMass",
            "title*": {"en": "Target Bogie Mass"},
            "description": "An informal mass limit established by a Project Office (at the Element Integrated Product Team (IPT) level or below) to control mass.",
            "description*": {
                "en": "An informal mass limit established by a Project Office (at the Element Integrated Product Team (IPT) level or below) to control mass."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTargetBogieMassValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa76d2f3b5b215031a315e3ab651e5c32"]


class LuminousFluxPerArea(QuantityValue):
    """
    In photometry, illuminance is the total luminous flux incident on a surface, per unit area. It is a measure of how much the incident light illuminates the surface, wavelength-weighted by the luminosity function to correlate with human brightness perception. Similarly, luminous emittance is the luminous flux per unit area emitted from a surface. In SI derived units these are measured in $lux (lx)$ or $lumens per square metre$ ($cd \cdot m^{-2}$). In the CGS system, the unit of illuminance is the $phot$, which is equal to $10,000 lux$. The $foot-candle$ is a non-metric unit of illuminance that is used in photography.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "79225fde-5f80-59d1-802f-8181c06b4cfa",
            "title": "LuminousFluxPerArea",
            "title*": {"en": "Luminous Flux per Area"},
            "description": "In photometry, illuminance is the total luminous flux incident on a surface, per unit area. It is a measure of how much the incident light illuminates the surface, wavelength-weighted by the luminosity function to correlate with human brightness perception. Similarly, luminous emittance is the luminous flux per unit area emitted from a surface. In SI derived units these are measured in $lux (lx)$ or $lumens per square metre$ ($cd \\cdot m^{-2}$). In the CGS system, the unit of illuminance is the $phot$, which is equal to $10,000 lux$. The $foot-candle$ is a non-metric unit of illuminance that is used in photography.",
            "description*": {
                "en": "In photometry, illuminance is the total luminous flux incident on a surface, per unit area. It is a measure of how much the incident light illuminates the surface, wavelength-weighted by the luminosity function to correlate with human brightness perception. Similarly, luminous emittance is the luminous flux per unit area emitted from a surface. In SI derived units these are measured in $lux (lx)$ or $lumens per square metre$ ($cd \\cdot m^{-2}$). In the CGS system, the unit of illuminance is the $phot$, which is equal to $10,000 lux$. The $foot-candle$ is a non-metric unit of illuminance that is used in photography."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLuminousFluxPerAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW79225fde5f8059d1802f8181c06b4cfa"]
    unit: Optional[LuminousFluxPerAreaUnit] = Field(
        LuminousFluxPerAreaUnit.lux,
        options={"enum_titles": ["lx"]},
        title="LuminousFluxPerAreaUnit",
        x_enum_varnames=["lux"],
    )


class SlowingDownDensityUnit(UnitEnum):
    per_meter_cubed_per_second = "Item:OSW804e40f82f4955ab8f1bd0c1e9e77d28"


class SlowingDownDensity(QuantityValue):
    """
    "Slowing-Down Density" is a measure of the rate at which neutrons lose energy in a nuclear reactor through collisions; equal to the number of neutrons that fall below a given energy per unit volume per unit time.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "72e926f2-d87e-540c-84ff-1fa039adef5e",
            "title": "SlowingDownDensity",
            "title*": {"en": "Slowing-Down Density"},
            "description": '"Slowing-Down Density" is a measure of the rate at which neutrons lose energy in a nuclear reactor through collisions; equal to the number of neutrons that fall below a given energy per unit volume per unit time.',
            "description*": {
                "en": '"Slowing-Down Density" is a measure of the rate at which neutrons lose energy in a nuclear reactor through collisions; equal to the number of neutrons that fall below a given energy per unit volume per unit time.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSlowingDownDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW72e926f2d87e540c84ff1fa039adef5e"]
    unit: Optional[SlowingDownDensityUnit] = Field(
        SlowingDownDensityUnit.per_meter_cubed_per_second,
        options={"enum_titles": ["1/(m³·s)"]},
        title="SlowingDownDensityUnit",
        x_enum_varnames=["per_meter_cubed_per_second"],
    )


class ParticleCurrent(Frequency):
    """
    "Particle Current" can be used to describe the net number of particles passing through a surface in an infinitesimal time interval.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "696c218a-30c3-5d4d-8c07-a1ecf9f185c7",
            "title": "ParticleCurrent",
            "title*": {"en": "Particle Current"},
            "description": '"Particle Current" can be used to describe the net number of particles passing through a surface in an infinitesimal time interval.',
            "description*": {
                "en": '"Particle Current" can be used to describe the net number of particles passing through a surface in an infinitesimal time interval.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasParticleCurrentValue",
            "@context": [
                "/wiki/Category:OSWc543ebb853385a1a9382f57faad6170d?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW696c218a30c35d4d8c07a1ecf9f185c7"]


class MechanicalTension(ForcePerArea):
    """
    an einem Punkt eines Körpers, an dem eine Kraft angreift, welche die Form des Körpers zu verändern sucht, der Grenzwert des Quotienten Kraft durch Fläche einer ebenen Oberfläche um diesen Punkt, wenn deren Abmessungen gegen null gehen
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3643fe8c-f7fa-5c55-88bd-6c68b73fc480",
            "title": "MechanicalTension",
            "title*": {"en": "Mechanical tension"},
            "description": "an einem Punkt eines Körpers, an dem eine Kraft angreift, welche die Form des Körpers zu verändern sucht, der Grenzwert des Quotienten Kraft durch Fläche einer ebenen Oberfläche um diesen Punkt, wenn deren Abmessungen gegen null gehen",
            "description*": {
                "en": "an einem Punkt eines Körpers, an dem eine Kraft angreift, welche die Form des Körpers zu verändern sucht, der Grenzwert des Quotienten Kraft durch Fläche einer ebenen Oberfläche um diesen Punkt, wenn deren Abmessungen gegen null gehen"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMechanicalTensionValue",
            "@context": [
                "/wiki/Category:OSW2ff3a26daf13563481acc8b0ebc5b37f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3643fe8cf7fa5c5588bd6c68b73fc480"]


class EnergyPerTemperature(QuantityValue):
    """
    This is an autogenerated partial class definition of 'EnergyPerTemperature'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "c16b766e-af3e-547d-a640-7e8eee408e7c",
            "title": "EnergyPerTemperature",
            "title*": {"en": "Energy per temperature"},
            "description": "This is an autogenerated partial class definition of 'EnergyPerTemperature'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnergyPerTemperatureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc16b766eaf3e547da6407e8eee408e7c"]
    unit: Optional[EnergyPerTemperatureUnit] = Field(
        EnergyPerTemperatureUnit.joule_per_kelvin,
        options={"enum_titles": ["J/K", "MJ/K", "kJ/K"]},
        title="EnergyPerTemperatureUnit",
        x_enum_varnames=[
            "joule_per_kelvin",
            "mega_joule_per_kelvin",
            "kilo_joule_per_kelvin",
        ],
    )


class ApogeeRadius(Radius):
    """
    Apogee radius of an elliptical orbit
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "abce00a0-1967-5e0d-98ef-7b6a5bb573b0",
            "title": "ApogeeRadius",
            "title*": {"en": "Apogee Radius"},
            "description": "Apogee radius of an elliptical orbit",
            "description*": {"en": "Apogee radius of an elliptical orbit"},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasApogeeRadiusValue",
            "@context": [
                "/wiki/Category:OSW57a45884de6052698141a5cbe4aaa4ac?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWabce00a019675e0d98ef7b6a5bb573b0"]


class ElectricFieldUnit(UnitEnum):
    volt_per_meter = "Item:OSWd855ce693a6d5d3d8bdf5846093ae4fb"
    kilo_volt_per_meter = (
        "Item:OSWd855ce693a6d5d3d8bdf5846093ae4fb#OSW9315a6f234fa567497c5344f4360ac89"
    )
    milli_volt_per_meter = (
        "Item:OSWd855ce693a6d5d3d8bdf5846093ae4fb#OSWed56aa34d47a55a5bb40bc28cd4b1533"
    )
    volt_per_milli_meter = (
        "Item:OSWd855ce693a6d5d3d8bdf5846093ae4fb#OSW5503cb893f635d3a955c6be99f588596"
    )
    micro_volt_per_meter = (
        "Item:OSWd855ce693a6d5d3d8bdf5846093ae4fb#OSWe9e5b5d155c95fc9b3bc6f1ef6a63fa0"
    )
    mega_volt_per_meter = (
        "Item:OSWd855ce693a6d5d3d8bdf5846093ae4fb#OSWac4536de9cb25c1db8f0eb9f66e3fa25"
    )
    volt_per_centi_meter = (
        "Item:OSWd855ce693a6d5d3d8bdf5846093ae4fb#OSW68aa46316f8b5bfc83102870e2c9c5b4"
    )


class ElectricField(QuantityValue):
    """
    The space surrounding an electric charge or in the presence of a time-varying magnetic field has a property called an electric field. This electric field exerts a force on other electrically charged objects. In the idealized case, the force exerted between two point charges is inversely proportional to the square of the distance between them. (Coulomb's Law).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4f0b3f4a-40ad-5ffb-b492-a000abe2b30d",
            "title": "ElectricField",
            "title*": {"en": "Electric Field"},
            "description": "The space surrounding an electric charge or in the presence of a time-varying magnetic field has a property called an electric field. This electric field exerts a force on other electrically charged objects. In the idealized case, the force exerted between two point charges is inversely proportional to the square of the distance between them. (Coulomb's Law).",
            "description*": {
                "en": "The space surrounding an electric charge or in the presence of a time-varying magnetic field has a property called an electric field. This electric field exerts a force on other electrically charged objects. In the idealized case, the force exerted between two point charges is inversely proportional to the square of the distance between them. (Coulomb's Law)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricFieldValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4f0b3f4a40ad5ffbb492a000abe2b30d"]
    unit: Optional[ElectricFieldUnit] = Field(
        ElectricFieldUnit.volt_per_meter,
        options={
            "enum_titles": ["V/m", "kV/m", "mV/m", "V/mm", "µV/m", "MV/m", "V/cm"]
        },
        title="ElectricFieldUnit",
        x_enum_varnames=[
            "volt_per_meter",
            "kilo_volt_per_meter",
            "milli_volt_per_meter",
            "volt_per_milli_meter",
            "micro_volt_per_meter",
            "mega_volt_per_meter",
            "volt_per_centi_meter",
        ],
    )


class MaximumBetaParticleEnergy(Energy):
    """
    "Maximum Beta-Particle Energy" is the maximum energy of the energy spectrum in a beta-particle disintegration process.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "69b54fc6-5f1d-506e-b150-53de18dc035e",
            "title": "MaximumBetaParticleEnergy",
            "title*": {"en": "Maximum Beta-Particle Energy"},
            "description": '"Maximum Beta-Particle Energy" is the maximum energy of the energy spectrum in a beta-particle disintegration process.',
            "description*": {
                "en": '"Maximum Beta-Particle Energy" is the maximum energy of the energy spectrum in a beta-particle disintegration process.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMaximumBetaParticleEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW69b54fc65f1d506eb15053de18dc035e"]


class LinearAbsorptionCoefficientUnit(UnitEnum):
    per_meter = "Item:OSW28e75b089e145904998a54f1c4125bf3"
    per_centi_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW0dcebe41477056aba0e706c148970688"
    )
    per_nano_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWdc9edf9277ed57cdb7a6f218551afa8d"
    )
    per_milli_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWe77bc3c1bd7a566eadb55f3b68d351f2"
    )
    per_pico_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSWd0475e49e0715ec488fba3fe0fdd9b02"
    )
    per_micro_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW45c24d8b68485accbdd684f05231c74c"
    )
    per_kilo_meter = (
        "Item:OSW28e75b089e145904998a54f1c4125bf3#OSW124eebfb89dc54bc9cc223fd49c40480"
    )


class LinearAbsorptionCoefficient(QuantityValue):
    """
    The Linear Absorption Coefficient is a quantity that characterizes how easily a material or medium can be penetrated by a beam of light, sound, particles, or other energy or matter.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "5c809cc8-4648-5949-a513-c8bc406e7e70",
            "title": "LinearAbsorptionCoefficient",
            "title*": {"en": "Linear Absorption Coefficient"},
            "description": "The Linear Absorption Coefficient is a quantity that characterizes how easily a material or medium can be penetrated by a beam of light, sound, particles, or other energy or matter.",
            "description*": {
                "en": "The Linear Absorption Coefficient is a quantity that characterizes how easily a material or medium can be penetrated by a beam of light, sound, particles, or other energy or matter."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLinearAbsorptionCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW5c809cc846485949a513c8bc406e7e70"]
    unit: Optional[LinearAbsorptionCoefficientUnit] = Field(
        LinearAbsorptionCoefficientUnit.per_meter,
        options={
            "enum_titles": ["1/m", "1/cm", "1/nm", "1/mm", "1/pm", "1/μm", "1/km"]
        },
        title="LinearAbsorptionCoefficientUnit",
        x_enum_varnames=[
            "per_meter",
            "per_centi_meter",
            "per_nano_meter",
            "per_milli_meter",
            "per_pico_meter",
            "per_micro_meter",
            "per_kilo_meter",
        ],
    )


class SurfaceTension(EnergyPerArea):
    """
    "Surface Tension" is a contractive tendency of the surface of a liquid that allows it to resist an external force.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "15f7a614-1937-572f-97ea-c08557b488ce",
            "title": "SurfaceTension",
            "title*": {"en": "Surface tension", "de": "Oberflächenspannung"},
            "description": '"Surface Tension" is a contractive tendency of the surface of a liquid that allows it to resist an external force.',
            "description*": {
                "en": '"Surface Tension" is a contractive tendency of the surface of a liquid that allows it to resist an external force.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSurfaceTensionValue",
            "@context": [
                "/wiki/Category:OSW46d8ae433dda5e368d8e76800d85ee12?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW15f7a6141937572f97eac08557b488ce"]


class PowerPerElectricChargeUnit(UnitEnum):
    volt_per_second = "Item:OSW7d0144647c655cbeac604178c20df9c8"
    volt_per_micro_second = (
        "Item:OSW7d0144647c655cbeac604178c20df9c8#OSWa89d207ffc6f502a9f742482fb84c1ad"
    )


class PowerPerElectricCharge(QuantityValue):
    """
    "Power Per Electric Charge" is the amount of energy generated by a unit of electric charge.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "2341adcf-1a54-557f-8861-37e4180398d9",
            "title": "PowerPerElectricCharge",
            "title*": {"en": "Power Per Electric Charge"},
            "description": '"Power Per Electric Charge" is the amount of energy generated by a unit of electric charge.',
            "description*": {
                "en": '"Power Per Electric Charge" is the amount of energy generated by a unit of electric charge.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPowerPerElectricChargeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2341adcf1a54557f886137e4180398d9"]
    unit: Optional[PowerPerElectricChargeUnit] = Field(
        PowerPerElectricChargeUnit.volt_per_second,
        options={"enum_titles": ["V/s", "V/µs"]},
        title="PowerPerElectricChargeUnit",
        x_enum_varnames=["volt_per_second", "volt_per_micro_second"],
    )


class ElectricFluxDensity(ElectricChargePerArea):
    """
    $\\textit{Electric Flux Density}$, also referred to as $\\textit{Electric Displacement}$, is related to electric charge density by the following equation: $\text{div} \; D = \rho$, where $\text{div}$ denotes the divergence.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "554c1d1b-9453-5a17-9366-575d25dc4c6b",
            "title": "ElectricFluxDensity",
            "title*": {"en": "Electric flux density", "de": "Elektrische Flussdichte"},
            "description": "$\\textit{Electric Flux Density}$, also referred to as $\\textit{Electric Displacement}$, is related to electric charge density by the following equation: $\\text{div} \\; D = \\rho$, where $\\text{div}$ denotes the divergence.",
            "description*": {
                "en": "$\\textit{Electric Flux Density}$, also referred to as $\\textit{Electric Displacement}$, is related to electric charge density by the following equation: $\\text{div} \\; D = \\rho$, where $\\text{div}$ denotes the divergence."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricFluxDensityValue",
            "@context": [
                "/wiki/Category:OSW4f0b36aedcac5f4dafcc0eaec8eb86dd?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW554c1d1b94535a179366575d25dc4c6b"]


class ElectricPotentialDifferenceUnit(UnitEnum):
    volt = "Item:OSW85efe1428cb75363a75aab6435e2d98d"
    micro_volt = (
        "Item:OSW85efe1428cb75363a75aab6435e2d98d#OSWc0cb09a94aa553589a59ea70bfccfc96"
    )
    mega_volt = (
        "Item:OSW85efe1428cb75363a75aab6435e2d98d#OSW78798aa1bdcb57f0aea8d4eb86ff3355"
    )
    milli_volt = (
        "Item:OSW85efe1428cb75363a75aab6435e2d98d#OSW82d25d00b1485cc18c204f95de4536a9"
    )
    kilo_volt = (
        "Item:OSW85efe1428cb75363a75aab6435e2d98d#OSW4deed980237a5360b48e0dd1331d4199"
    )


class ElectricPotentialDifference(QuantityValue):
    """
    "Electric Potential Difference" is a scalar valued quantity associated with an electric field.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "6d9120b2-8813-50c0-8cd4-8854acbf1180",
            "title": "ElectricPotentialDifference",
            "title*": {
                "en": "Electric potential difference",
                "de": "Elektrische Spannung",
            },
            "description": '"Electric Potential Difference" is a scalar valued quantity associated with an electric field.',
            "description*": {
                "en": '"Electric Potential Difference" is a scalar valued quantity associated with an electric field.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricPotentialDifferenceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6d9120b2881350c08cd48854acbf1180"]
    unit: Optional[ElectricPotentialDifferenceUnit] = Field(
        ElectricPotentialDifferenceUnit.volt,
        options={"enum_titles": ["V", "µV", "MV", "mV", "kV"]},
        title="ElectricPotentialDifferenceUnit",
        x_enum_varnames=["volt", "micro_volt", "mega_volt", "milli_volt", "kilo_volt"],
    )


class CenterOfGravityInTheZAxis(Length):
    """
    This is an autogenerated partial class definition of 'CenterOfGravityInTheZAxis'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0b3702d2-568e-5a7c-8c44-0028bf9a7a10",
            "title": "CenterOfGravityInTheZAxis",
            "title*": {"en": "Center of Gravity in the Z axis"},
            "description": "This is an autogenerated partial class definition of 'CenterOfGravityInTheZAxis'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCenterOfGravityInTheZAxisValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0b3702d2568e5a7c8c440028bf9a7a10"]


class AngleOfOpticalRotation(Angle):
    """
    The "Angle of Optical Rotation" is the angle through which plane-polarized light is rotated clockwise, as seen when facing the light source, in passing through an optically active medium.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "63d076aa-990f-55ac-bc4b-36a07dbd99e9",
            "title": "AngleOfOpticalRotation",
            "title*": {"en": "Angle of Optical Rotation"},
            "description": 'The "Angle of Optical Rotation" is the angle through which plane-polarized light is rotated clockwise, as seen when facing the light source, in passing through an optically active medium.',
            "description*": {
                "en": 'The "Angle of Optical Rotation" is the angle through which plane-polarized light is rotated clockwise, as seen when facing the light source, in passing through an optically active medium.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngleOfOpticalRotationValue",
            "@context": [
                "/wiki/Category:OSW2339256af71e5635a541ac7f5a437141?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW63d076aa990f55acbc4b36a07dbd99e9"]


class RelativePartialPressure(PressureRatio):
    """
    This is an autogenerated partial class definition of 'RelativePartialPressure'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "99edcb0b-ac12-560f-a33d-6af42aecad67",
            "title": "RelativePartialPressure",
            "title*": {"en": "Relative Partial Pressure"},
            "description": "This is an autogenerated partial class definition of 'RelativePartialPressure'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRelativePartialPressureValue",
            "@context": [
                "/wiki/Category:OSW7014422ed34957de9d4ca0fb6e3d74d3?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW99edcb0bac12560fa33d6af42aecad67"]


class ChemicalConsumptionPerMass(SpecificVolume):
    """
    In the context of a chemical durability test, this is measure of how much of a solution (often a corrosive or reactive one) is consumed or used up per unit mass of a material being tested. In other words, this the volume of solution needed to cause a certain level of chemical reaction or damage to a given mass of the material.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "fecf99a9-e5eb-5ab3-8412-9063e12e07e7",
            "title": "ChemicalConsumptionPerMass",
            "title*": {"en": "Chemical Consumption per Mass"},
            "description": "In the context of a chemical durability test, this is measure of how much of a solution (often a corrosive or reactive one) is consumed or used up per unit mass of a material being tested. In other words, this the volume of solution needed to cause a certain level of chemical reaction or damage to a given mass of the material.",
            "description*": {
                "en": "In the context of a chemical durability test, this is measure of how much of a solution (often a corrosive or reactive one) is consumed or used up per unit mass of a material being tested. In other words, this the volume of solution needed to cause a certain level of chemical reaction or damage to a given mass of the material."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasChemicalConsumptionPerMassValue",
            "@context": [
                "/wiki/Category:OSW26ae18e11ed158dc9ea7e62d1d5ce92e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfecf99a9e5eb5ab384129063e12e07e7"]


class InverseTemperatureUnit(UnitEnum):
    per_kelvin = "Item:OSW33dfda3d4dea57d192d02eecdbc09b86"


class InverseTemperature(QuantityValue):
    """
    This is an autogenerated partial class definition of 'InverseTemperature'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "06018a46-bc2e-5b34-bab4-cc7e8d71bf87",
            "title": "InverseTemperature",
            "title*": {"en": "Inverse Temperature"},
            "description": "This is an autogenerated partial class definition of 'InverseTemperature'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInverseTemperatureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW06018a46bc2e5b34bab4cc7e8d71bf87"]
    unit: Optional[InverseTemperatureUnit] = Field(
        InverseTemperatureUnit.per_kelvin,
        options={"enum_titles": ["1/K"]},
        title="InverseTemperatureUnit",
        x_enum_varnames=["per_kelvin"],
    )


class PositiveDimensionlessRatio(DimensionlessRatio):
    """
    A "Positive Dimensionless Ratio" is a dimensionless ratio that is greater than zero
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "49b7ea6a-747e-5732-84e9-925d1d3b3b0f",
            "title": "PositiveDimensionlessRatio",
            "title*": {"en": "Positive Dimensionless Ratio"},
            "description": 'A "Positive Dimensionless Ratio" is a dimensionless ratio that is greater than zero',
            "description*": {
                "en": 'A "Positive Dimensionless Ratio" is a dimensionless ratio that is greater than zero'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPositiveDimensionlessRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW49b7ea6a747e573284e9925d1d3b3b0f"]


class SecondAxialMomentOfAreaUnit(UnitEnum):
    field_4 = "Item:OSWe4f01fe00389574e905718a14481ed36"
    field_4_1 = (
        "Item:OSWe4f01fe00389574e905718a14481ed36#OSW568d0d17db6551c1993de3d51c6051cc"
    )
    field_4_2 = (
        "Item:OSWe4f01fe00389574e905718a14481ed36#OSW73b630d93619585bbc7f4a3a4a3be104"
    )


class SecondAxialMomentOfArea(QuantityValue):
    """
    The moment of inertia, also called mass moment of inertia, rotational inertia, polar moment of inertia of mass, or the angular mass is a property of a distribution of mass in space that measures its resistance to rotational acceleration about an axis.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "607a4c4f-2b48-5589-9168-d36755af9152",
            "title": "SecondAxialMomentOfArea",
            "title*": {"en": "Second Axial Moment of Area"},
            "description": "The moment of inertia, also called mass moment of inertia, rotational inertia, polar moment of inertia of mass, or the angular mass is a property of a distribution of mass in space that measures its resistance to rotational acceleration about an axis.",
            "description*": {
                "en": "The moment of inertia, also called mass moment of inertia, rotational inertia, polar moment of inertia of mass, or the angular mass is a property of a distribution of mass in space that measures its resistance to rotational acceleration about an axis."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSecondAxialMomentOfAreaValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW607a4c4f2b4855899168d36755af9152"]
    unit: Optional[SecondAxialMomentOfAreaUnit] = Field(
        SecondAxialMomentOfAreaUnit.field_4,
        options={"enum_titles": ["m⁴", "mm⁴", "cm⁴"]},
        title="SecondAxialMomentOfAreaUnit",
        x_enum_varnames=["4", "4", "4"],
    )


class AreicEnergyFlow(PowerPerArea):
    """
    Leistung in festgelegter Ausbreitungsrichtung durch ein dazu senkrechtes Oberflächenelement, dividiert durch dessen Fläche
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "268c0467-204b-54ea-a630-6808bdc97f6d",
            "title": "AreicEnergyFlow",
            "title*": {"en": "Areic energy flow"},
            "description": "Leistung in festgelegter Ausbreitungsrichtung durch ein dazu senkrechtes Oberflächenelement, dividiert durch dessen Fläche",
            "description*": {
                "en": "Leistung in festgelegter Ausbreitungsrichtung durch ein dazu senkrechtes Oberflächenelement, dividiert durch dessen Fläche"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAreicEnergyFlowValue",
            "@context": [
                "/wiki/Category:OSW40c46aba16f45962a7330b7f8b88681e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW268c0467204b54eaa6306808bdc97f6d"]


class MolarEntropyUnit(UnitEnum):
    joule_per_kelvin_per_mole = "Item:OSW6d40ac4bdbc950ec9290f6a47ce23d20"


class MolarEntropy(QuantityValue):
    """
    The "Standard Molar Entropy" is the entropy content of one mole of substance, under standard conditions (not standard temperature and pressure STP).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "78bb22c1-7107-5ca7-81ec-3c9fff9991ea",
            "title": "MolarEntropy",
            "title*": {"en": "Molar Entropy"},
            "description": 'The "Standard Molar Entropy" is the entropy content of one mole of substance, under standard conditions (not standard temperature and pressure STP).',
            "description*": {
                "en": 'The "Standard Molar Entropy" is the entropy content of one mole of substance, under standard conditions (not standard temperature and pressure STP).'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarEntropyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW78bb22c171075ca781ec3c9fff9991ea"]
    unit: Optional[MolarEntropyUnit] = Field(
        MolarEntropyUnit.joule_per_kelvin_per_mole,
        options={"enum_titles": ["J/(mol·K)"]},
        title="MolarEntropyUnit",
        x_enum_varnames=["joule_per_kelvin_per_mole"],
    )


class SeebeckCoefficientUnit(UnitEnum):
    volt_per_kelvin = "Item:OSW8998763d58065a069429e7e6fe3c153a"


class SeebeckCoefficient(QuantityValue):
    """
    "Seebeck Coefficient", or thermopower, or thermoelectric power of a material is a measure of the magnitude of an induced thermoelectric voltage in response to a temperature difference across that material.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "bade8d0a-825f-5900-be44-268cec649801",
            "title": "SeebeckCoefficient",
            "title*": {"en": "Seebeck Coefficient"},
            "description": '"Seebeck Coefficient", or thermopower, or thermoelectric power of a material is a measure of the magnitude of an induced thermoelectric voltage in response to a temperature difference across that material.',
            "description*": {
                "en": '"Seebeck Coefficient", or thermopower, or thermoelectric power of a material is a measure of the magnitude of an induced thermoelectric voltage in response to a temperature difference across that material.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSeebeckCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWbade8d0a825f5900be44268cec649801"]
    unit: Optional[SeebeckCoefficientUnit] = Field(
        SeebeckCoefficientUnit.volt_per_kelvin,
        options={"enum_titles": ["V/K"]},
        title="SeebeckCoefficientUnit",
        x_enum_varnames=["volt_per_kelvin"],
    )


class LuminousIntensityUnit(UnitEnum):
    candela = "Item:OSWf04f81ce6d6a53b98630967e75958e53"


class LuminousIntensity(QuantityValue):
    """
    Luminous Intensity is a measure of the wavelength-weighted power emitted by a light source in a particular direction per unit solid angle. The weighting is determined by the luminosity function, a standardized model of the sensitivity of the human eye to different wavelengths.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "cd5084e9-8d8a-541e-b5d1-21ae983fad3d",
            "title": "LuminousIntensity",
            "title*": {"en": "Luminous intensity", "de": "Lichtstärke"},
            "description": "Luminous Intensity is a measure of the wavelength-weighted power emitted by a light source in a particular direction per unit solid angle. The weighting is determined by the luminosity function, a standardized model of the sensitivity of the human eye to different wavelengths.",
            "description*": {
                "en": "Luminous Intensity is a measure of the wavelength-weighted power emitted by a light source in a particular direction per unit solid angle. The weighting is determined by the luminosity function, a standardized model of the sensitivity of the human eye to different wavelengths."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLuminousIntensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcd5084e98d8a541eb5d121ae983fad3d"]
    unit: Optional[LuminousIntensityUnit] = Field(
        LuminousIntensityUnit.candela,
        options={"enum_titles": ["cd"]},
        title="LuminousIntensityUnit",
        x_enum_varnames=["candela"],
    )


class SpeedOfLight(Speed):
    """
    The quantity kind $\text{Speed of Light}$ is the speed of electomagnetic waves in a given medium.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ead5dcb1-6a9a-5c25-9862-f31eca41609d",
            "title": "SpeedOfLight",
            "title*": {"en": "Speed of light", "de": "Lichtgeschwindigkeit"},
            "description": "The quantity kind $\\text{Speed of Light}$ is the speed of electomagnetic waves in a given medium.",
            "description*": {
                "en": "The quantity kind $\\text{Speed of Light}$ is the speed of electomagnetic waves in a given medium."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpeedOfLightValue",
            "@context": [
                "/wiki/Category:OSW29b1dc01984d568f84c03e03ed2ed731?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWead5dcb16a9a5c259862f31eca41609d"]


class WarpingMomentUnit(UnitEnum):
    meter_squared_newton = "Item:OSW9dfac70a65b753709e52cb3591dd8547"
    kilo_newton_meter_squared = (
        "Item:OSW9dfac70a65b753709e52cb3591dd8547#OSW54ba1a65b3a75b708a5ddb4089c205b1"
    )


class WarpingMoment(QuantityValue):
    """
    The warping moment measure is a measure for the warping moment, which occurs in warping torsional analysis. It is usually measured in kNm².
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9a57ea5f-a37f-59cf-a4eb-6ad9d2427c4e",
            "title": "WarpingMoment",
            "title*": {"en": "Warping Moment"},
            "description": "The warping moment measure is a measure for the warping moment, which occurs in warping torsional analysis. It is usually measured in kNm².",
            "description*": {
                "en": "The warping moment measure is a measure for the warping moment, which occurs in warping torsional analysis. It is usually measured in kNm²."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasWarpingMomentValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9a57ea5fa37f59cfa4eb6ad9d2427c4e"]
    unit: Optional[WarpingMomentUnit] = Field(
        WarpingMomentUnit.meter_squared_newton,
        options={"enum_titles": ["N·m²", "kN·m²"]},
        title="WarpingMomentUnit",
        x_enum_varnames=["meter_squared_newton", "kilo_newton_meter_squared"],
    )


class Wavenumber(InverseLength):
    """
    "Wavenumber" is the spatial frequency of a wave - the number of waves that exist over a specified distance. More formally, it is the reciprocal of the wavelength. It is also the magnitude of the wave vector. Light passing through different media keeps its frequency, but not its wavelength or wavenumber. The unit for wavenumber commonly used in spectroscopy is centimetre to power minus one, PER-CM, rather than metre to power minus one, PER-M.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0bca40ca-00e0-5ec4-aab8-e33e1a4acf8f",
            "title": "Wavenumber",
            "title*": {"en": "Wavenumber", "de": "Repetenz"},
            "description": '"Wavenumber" is the spatial frequency of a wave - the number of waves that exist over a specified distance. More formally, it is the reciprocal of the wavelength. It is also the magnitude of the wave vector. Light passing through different media keeps its frequency, but not its wavelength or wavenumber. The unit for wavenumber commonly used in spectroscopy is centimetre to power minus one, PER-CM, rather than metre to power minus one, PER-M.',
            "description*": {
                "en": '"Wavenumber" is the spatial frequency of a wave - the number of waves that exist over a specified distance. More formally, it is the reciprocal of the wavelength. It is also the magnitude of the wave vector. Light passing through different media keeps its frequency, but not its wavelength or wavenumber. The unit for wavenumber commonly used in spectroscopy is centimetre to power minus one, PER-CM, rather than metre to power minus one, PER-M.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasWavenumberValue",
            "@context": [
                "/wiki/Category:OSW23837e2c50f05ba884682b08465bf173?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0bca40ca00e05ec4aab8e33e1a4acf8f"]


class MassPerLengthUnit(UnitEnum):
    kilo_gram_per_meter = (
        "Item:OSW0429f89d17e6572fac6630caa443c336#OSW1e1793e6b72454f1a81b08eabc8272b7"
    )


class MassPerLength(QuantityValue):
    """
    Linear density, linear mass density or linear mass is a measure of mass per unit of length, and it is a characteristic of strings or other one-dimensional objects. The SI unit of linear density is the kilogram per metre ($kg/m$).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "c1785119-277b-56f0-b8b0-69c41b019d06",
            "title": "MassPerLength",
            "title*": {"en": "Mass per Length"},
            "description": "Linear density, linear mass density or linear mass is a measure of mass per unit of length, and it is a characteristic of strings or other one-dimensional objects. The SI unit of linear density is the kilogram per metre ($kg/m$).",
            "description*": {
                "en": "Linear density, linear mass density or linear mass is a measure of mass per unit of length, and it is a characteristic of strings or other one-dimensional objects. The SI unit of linear density is the kilogram per metre ($kg/m$)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassPerLengthValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc1785119277b56f0b8b069c41b019d06"]
    unit: Optional[MassPerLengthUnit] = Field(
        MassPerLengthUnit.kilo_gram_per_meter,
        options={"enum_titles": ["kg/m"]},
        title="MassPerLengthUnit",
        x_enum_varnames=["kilo_gram_per_meter"],
    )


class IncidenceRate(Incidence):
    """
    The incidence rate is a measure of the frequency with which a disease or other incident occurs over a specified time period. It is also known as the incidence density rate or person-time incidence rate, when the denominator is the combined person-time of the population at risk (the sum of the time duration of exposure across all persons exposed)
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "877bfc2b-db1c-5e19-b67c-4fede37fdb56",
            "title": "IncidenceRate",
            "title*": {"en": "Incidence Rate"},
            "description": "The incidence rate is a measure of the frequency with which a disease or other incident occurs over a specified time period. It is also known as the incidence density rate or person-time incidence rate, when the denominator is the combined person-time of the population at risk (the sum of the time duration of exposure across all persons exposed)",
            "description*": {
                "en": "The incidence rate is a measure of the frequency with which a disease or other incident occurs over a specified time period. It is also known as the incidence density rate or person-time incidence rate, when the denominator is the combined person-time of the population at risk (the sum of the time duration of exposure across all persons exposed)"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasIncidenceRateValue",
            "@context": [
                "/wiki/Category:OSWe8d1194aeb2e5b9f877867eab5c9cae9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW877bfc2bdb1c5e19b67c4fede37fdb56"]


class MeanLinearRange(Length):
    """
    "Mean Linear Range" is, in a given material, for specified charged particles of a specified energy, the average displacement of the particles before they stop. That is, the mean totl rectified path length travelled by a particle in the course of slowing down to rest (or to some suitable cut-off energy) in a given substance under specified conditions averaged over a group of particles having the same initial energy.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "46e725ac-a931-51bf-828d-906615b3ce50",
            "title": "MeanLinearRange",
            "title*": {"en": "Mean Linear Range"},
            "description": '"Mean Linear Range" is, in a given material, for specified charged particles of a specified energy, the average displacement of the particles before they stop. That is, the mean totl rectified path length travelled by a particle in the course of slowing down to rest (or to some suitable cut-off energy) in a given substance under specified conditions averaged over a group of particles having the same initial energy.',
            "description*": {
                "en": '"Mean Linear Range" is, in a given material, for specified charged particles of a specified energy, the average displacement of the particles before they stop. That is, the mean totl rectified path length travelled by a particle in the course of slowing down to rest (or to some suitable cut-off energy) in a given substance under specified conditions averaged over a group of particles having the same initial energy.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMeanLinearRangeValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW46e725aca93151bf828d906615b3ce50"]


class ChemicalPotential(MolarEnergy):
    """
    "Chemical Potential", also known as partial molar free energy, is a form of potential energy that can be absorbed or released during a chemical reaction.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7119e1d7-6181-5d4f-acb1-dbee71829517",
            "title": "ChemicalPotential",
            "title*": {
                "en": "Chemical potential",
                "de": "Chemisches Potential des Stoffs B",
            },
            "description": '"Chemical Potential", also known as partial molar free energy, is a form of potential energy that can be absorbed or released during a chemical reaction.',
            "description*": {
                "en": '"Chemical Potential", also known as partial molar free energy, is a form of potential energy that can be absorbed or released during a chemical reaction.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasChemicalPotentialValue",
            "@context": [
                "/wiki/Category:OSW21ec5968e3c2533d98f20564838541fa?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7119e1d761815d4facb1dbee71829517"]


class ElectricDisplacementField(ElectricChargePerArea):
    """
    This is an autogenerated partial class definition of 'ElectricDisplacementField'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "5a24fd1c-3d86-5b1c-9148-be921d0fdbed",
            "title": "ElectricDisplacementField",
            "title*": {"en": "Electric Displacement Field"},
            "description": "This is an autogenerated partial class definition of 'ElectricDisplacementField'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricDisplacementFieldValue",
            "@context": [
                "/wiki/Category:OSW4f0b36aedcac5f4dafcc0eaec8eb86dd?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW5a24fd1c3d865b1c9148be921d0fdbed"]


class MobilityUnit(UnitEnum):
    meter_squared_per_second_per_volt = "Item:OSWb2b78d963e4e54d7b5e64db90eb5fad2"
    centi_meter_squared_per_second_per_volt = (
        "Item:OSWb2b78d963e4e54d7b5e64db90eb5fad2#OSW5912aba53a8b5951ae88d643b40ff33d"
    )


class Mobility(QuantityValue):
    """
    "Mobility" characterizes how quickly a particle can move through a metal or semiconductor, when pulled by an electric field. The average drift speed imparted to a charged particle in a medium by an electric field, divided by the electric field strength.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "b11e150b-382c-5481-b59c-763f0d4794fb",
            "title": "Mobility",
            "title*": {"en": "Mobility", "de": "Beweglichkeit"},
            "description": '"Mobility" characterizes how quickly a particle can move through a metal or semiconductor, when pulled by an electric field. The average drift speed imparted to a charged particle in a medium by an electric field, divided by the electric field strength.',
            "description*": {
                "en": '"Mobility" characterizes how quickly a particle can move through a metal or semiconductor, when pulled by an electric field. The average drift speed imparted to a charged particle in a medium by an electric field, divided by the electric field strength.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMobilityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb11e150b382c5481b59c763f0d4794fb"]
    unit: Optional[MobilityUnit] = Field(
        MobilityUnit.meter_squared_per_second_per_volt,
        options={"enum_titles": ["m²/(V·s)", "cm²/(V·s)"]},
        title="MobilityUnit",
        x_enum_varnames=[
            "meter_squared_per_second_per_volt",
            "centi_meter_squared_per_second_per_volt",
        ],
    )


class MeanMassRangeUnit(UnitEnum):
    kilo_gram_per_meter_squared = (
        "Item:OSWb93e608c86fd5480a5de9cd1b3e9ea22#OSW86b6ab5f70aa5624be17645333d53d51"
    )


class MeanMassRange(QuantityValue):
    """
    "Mean Mass Range" is the mean linear range multiplied by the mass density of the material.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "e1380e89-9bfe-51bd-ab98-5a0c3581e8c4",
            "title": "MeanMassRange",
            "title*": {"en": "Mean Mass Range"},
            "description": '"Mean Mass Range" is the mean linear range multiplied by the mass density of the material.',
            "description*": {
                "en": '"Mean Mass Range" is the mean linear range multiplied by the mass density of the material.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMeanMassRangeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe1380e899bfe51bdab985a0c3581e8c4"]
    unit: Optional[MeanMassRangeUnit] = Field(
        MeanMassRangeUnit.kilo_gram_per_meter_squared,
        options={"enum_titles": ["kg/m²"]},
        title="MeanMassRangeUnit",
        x_enum_varnames=["kilo_gram_per_meter_squared"],
    )


class ForcePerAngle(QuantityValue):
    """
    This is an autogenerated partial class definition of 'ForcePerAngle'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "15c4097e-d256-572c-97e7-a1dbbfb154dd",
            "title": "ForcePerAngle",
            "title*": {"en": "Force per Angle"},
            "description": "This is an autogenerated partial class definition of 'ForcePerAngle'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasForcePerAngleValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW15c4097ed256572c97e7a1dbbfb154dd"]
    unit: Optional[ForcePerAngleUnit] = Field(
        ForcePerAngleUnit.newton_per_radian,
        options={"enum_titles": ["N/rad"]},
        title="ForcePerAngleUnit",
        x_enum_varnames=["newton_per_radian"],
    )


class EquivalentConcentration(Concentration):
    """
    The amount of a substance that reacts with (or is equivalent to) an arbitrary amount (typically one mole) of another substance in a given chemical reaction, per volume.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1634701e-fb42-5f1d-8f32-fe9ae216cef8",
            "title": "EquivalentConcentration",
            "title*": {"en": "Equivalent Concentration"},
            "description": "The amount of a substance that reacts with (or is equivalent to) an arbitrary amount (typically one mole) of another substance in a given chemical reaction, per volume.",
            "description*": {
                "en": "The amount of a substance that reacts with (or is equivalent to) an arbitrary amount (typically one mole) of another substance in a given chemical reaction, per volume."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEquivalentConcentrationValue",
            "@context": [
                "/wiki/Category:OSW4ce5add385d2545ab8ab50e4b222dab4?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1634701efb425f1d8f32fe9ae216cef8"]


class PhotosyntheticPhotonFluxUnit(UnitEnum):
    mole_per_second = "Item:OSW6b764c5799c45b62bb947ed93f8b99eb"
    kilo_mole_per_second = (
        "Item:OSW6b764c5799c45b62bb947ed93f8b99eb#OSWb3ad32c2d89057e08a13a3562b52bd17"
    )
    micro_mole_per_second = (
        "Item:OSW6b764c5799c45b62bb947ed93f8b99eb#OSW10e98cb9b70150158fc1544d9f094ad2"
    )


class PhotosyntheticPhotonFlux(QuantityValue):
    """
    Photosynthetic Photon Flux (PPF) is a measurement of the total number of photons emitted by a light source each second within the PAR wavelength range and is measured in μmol/s. Lighting manufacturers may specify their grow light products in terms of PPF. It can be considered as analogous to measuring the luminous flux (lumens) of visible light which would typically require the use of an integrating sphere or a goniometer system with spectroradiometer sensor.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "6daf9ac4-c6f8-59fb-b5f6-e241f1430f09",
            "title": "PhotosyntheticPhotonFlux",
            "title*": {"en": "Photosynthetic Photon Flux"},
            "description": "Photosynthetic Photon Flux (PPF) is a measurement of the total number of photons emitted by a light source each second within the PAR wavelength range and is measured in μmol/s. Lighting manufacturers may specify their grow light products in terms of PPF. It can be considered as analogous to measuring the luminous flux (lumens) of visible light which would typically require the use of an integrating sphere or a goniometer system with spectroradiometer sensor.",
            "description*": {
                "en": "Photosynthetic Photon Flux (PPF) is a measurement of the total number of photons emitted by a light source each second within the PAR wavelength range and is measured in μmol/s. Lighting manufacturers may specify their grow light products in terms of PPF. It can be considered as analogous to measuring the luminous flux (lumens) of visible light which would typically require the use of an integrating sphere or a goniometer system with spectroradiometer sensor."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPhotosyntheticPhotonFluxValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6daf9ac4c6f859fbb5f6e241f1430f09"]
    unit: Optional[PhotosyntheticPhotonFluxUnit] = Field(
        PhotosyntheticPhotonFluxUnit.mole_per_second,
        options={"enum_titles": ["mol/s", "kmol/s", "μmol/s"]},
        title="PhotosyntheticPhotonFluxUnit",
        x_enum_varnames=[
            "mole_per_second",
            "kilo_mole_per_second",
            "micro_mole_per_second",
        ],
    )


class TemperatureGradientUnit(UnitEnum):
    Celsius_per_meter = "Item:OSWee60f0c86f6051bb9e1c60b77a607ba2"


class TemperatureGradient(QuantityValue):
    """
    The temperature gradient measures the difference of a temperature per length, as for instance used in an external wall or its layers. It is usually measured in K/m.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "6bd60a9a-d518-5c0d-b70d-e4eb4b727073",
            "title": "TemperatureGradient",
            "title*": {"en": "Temperature Gradient"},
            "description": "The temperature gradient measures the difference of a temperature per length, as for instance used in an external wall or its layers. It is usually measured in K/m.",
            "description*": {
                "en": "The temperature gradient measures the difference of a temperature per length, as for instance used in an external wall or its layers. It is usually measured in K/m."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTemperatureGradientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6bd60a9ad5185c0db70de4eb4b727073"]
    unit: Optional[TemperatureGradientUnit] = Field(
        TemperatureGradientUnit.Celsius_per_meter,
        options={"enum_titles": ["°C/m"]},
        title="TemperatureGradientUnit",
        x_enum_varnames=["Celsius_per_meter"],
    )


class WaterHorsepower(Power):
    """
    No pump can convert all of its mechanical power into water power. Mechanical power is lost in the pumping process due to friction losses and other physical losses. It is because of these losses that the horsepower going into the pump has to be greater than the water horsepower leaving the pump. The efficiency of any given pump is defined as the ratio of the water horsepower out of the pump compared to the mechanical horsepower into the pump.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0a6d4ab2-792f-569d-a06a-f40abdb83759",
            "title": "WaterHorsepower",
            "title*": {"en": "Water Horsepower"},
            "description": "No pump can convert all of its mechanical power into water power. Mechanical power is lost in the pumping process due to friction losses and other physical losses. It is because of these losses that the horsepower going into the pump has to be greater than the water horsepower leaving the pump. The efficiency of any given pump is defined as the ratio of the water horsepower out of the pump compared to the mechanical horsepower into the pump.",
            "description*": {
                "en": "No pump can convert all of its mechanical power into water power. Mechanical power is lost in the pumping process due to friction losses and other physical losses. It is because of these losses that the horsepower going into the pump has to be greater than the water horsepower leaving the pump. The efficiency of any given pump is defined as the ratio of the water horsepower out of the pump compared to the mechanical horsepower into the pump."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasWaterHorsepowerValue",
            "@context": [
                "/wiki/Category:OSWa819b53101b854ad923f9f13dfb41794?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0a6d4ab2792f569da06af40abdb83759"]


class PhononMeanFreePath(Length):
    """
    "Phonon Mean Free Path" is the mean free path of phonons.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "05ead501-1114-5f24-adcf-e86c6645c303",
            "title": "PhononMeanFreePath",
            "title*": {"en": "Phonon Mean Free Path"},
            "description": '"Phonon Mean Free Path" is the mean free path of phonons.',
            "description*": {
                "en": '"Phonon Mean Free Path" is the mean free path of phonons.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPhononMeanFreePathValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW05ead50111145f24adcfe86c6645c303"]


class LengthRatio(DimensionlessRatio):
    """
    This is an autogenerated partial class definition of 'LengthRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "031793bb-135f-5bab-91e4-6bbf96621f93",
            "title": "LengthRatio",
            "title*": {"en": "Length Ratio"},
            "description": "This is an autogenerated partial class definition of 'LengthRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLengthRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW031793bb135f5bab91e46bbf96621f93"]


class PermittivityUnit(UnitEnum):
    farad_per_meter = "Item:OSWe279fe2c49705948a6f2fff270d50be1"
    pico_farad_per_meter = (
        "Item:OSWe279fe2c49705948a6f2fff270d50be1#OSW635f4b8020b655738a877cb7e87831be"
    )
    farad_per_kilo_meter = (
        "Item:OSWe279fe2c49705948a6f2fff270d50be1#OSW47e4ca2649285de5b1dbd98338fac916"
    )
    nano_farad_per_meter = (
        "Item:OSWe279fe2c49705948a6f2fff270d50be1#OSWa8178412351155eea5ff7170de8040be"
    )
    micro_farad_per_meter = (
        "Item:OSWe279fe2c49705948a6f2fff270d50be1#OSWc45e1c5e49095d4d805ea836290790b7"
    )


class Permittivity(QuantityValue):
    """
    "Permittivity" is a physical quantity that describes how an electric field affects, and is affected by a dielectric medium, and is determined by the ability of a material to polarize in response to the field, and thereby reduce the total electric field inside the material.  Permittivity is often a scalar valued quantity, however in the general case it is tensor-valued.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a2c1b304-0a2b-51e7-a8eb-fa4524755702",
            "title": "Permittivity",
            "title*": {"en": "Permittivity"},
            "description": '"Permittivity" is a physical quantity that describes how an electric field affects, and is affected by a dielectric medium, and is determined by the ability of a material to polarize in response to the field, and thereby reduce the total electric field inside the material.  Permittivity is often a scalar valued quantity, however in the general case it is tensor-valued.',
            "description*": {
                "en": '"Permittivity" is a physical quantity that describes how an electric field affects, and is affected by a dielectric medium, and is determined by the ability of a material to polarize in response to the field, and thereby reduce the total electric field inside the material.  Permittivity is often a scalar valued quantity, however in the general case it is tensor-valued.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPermittivityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa2c1b3040a2b51e7a8ebfa4524755702"]
    unit: Optional[PermittivityUnit] = Field(
        PermittivityUnit.farad_per_meter,
        options={"enum_titles": ["F/m", "pF/m", "F/km", "nF/m", "μF/m"]},
        title="PermittivityUnit",
        x_enum_varnames=[
            "farad_per_meter",
            "pico_farad_per_meter",
            "farad_per_kilo_meter",
            "nano_farad_per_meter",
            "micro_farad_per_meter",
        ],
    )


class ElectricCurrent(QuantityValue):
    """
    "Electric Current" is the flow (movement) of electric charge. The amount of electric current through some surface, for example, a section through a copper conductor, is defined as the amount of electric charge flowing through that surface over time. Current is a scalar-valued quantity. Electric current is one of the base quantities in the International System of Quantities, ISQ, on which the International System of Units, SI, is based.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "7c210ed3-aad8-5519-ae73-30073a9d6f9f",
            "title": "ElectricCurrent",
            "title*": {"en": "Electric current", "de": "Elektrische Stromstärke"},
            "description": '"Electric Current" is the flow (movement) of electric charge. The amount of electric current through some surface, for example, a section through a copper conductor, is defined as the amount of electric charge flowing through that surface over time. Current is a scalar-valued quantity. Electric current is one of the base quantities in the International System of Quantities, ISQ, on which the International System of Units, SI, is based.',
            "description*": {
                "en": '"Electric Current" is the flow (movement) of electric charge. The amount of electric current through some surface, for example, a section through a copper conductor, is defined as the amount of electric charge flowing through that surface over time. Current is a scalar-valued quantity. Electric current is one of the base quantities in the International System of Quantities, ISQ, on which the International System of Units, SI, is based.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricCurrentValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7c210ed3aad85519ae7330073a9d6f9f"]
    unit: Optional[ElectricCurrentUnit] = Field(
        ElectricCurrentUnit.ampere,
        options={"enum_titles": ["A", "mA", "MA", "pA", "kA", "μA"]},
        title="ElectricCurrentUnit",
        x_enum_varnames=[
            "ampere",
            "milli_ampere",
            "mega_ampere",
            "pico_ampere",
            "kilo_ampere",
            "micro_ampere",
        ],
    )


class Kerma(SpecificEnergy):
    """
    "Kerma" is the sum of the initial kinetic energies of all the charged particles liberated by uncharged ionizing radiation (i.e., indirectly ionizing radiation such as photons and neutrons) in a sample of matter, divided by the mass of the sample.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7ad0e917-48bb-5eed-ac17-c39491d0626e",
            "title": "Kerma",
            "title*": {"en": "Kerma"},
            "description": '"Kerma" is the sum of the initial kinetic energies of all the charged particles liberated by uncharged ionizing radiation (i.e., indirectly ionizing radiation such as photons and neutrons) in a sample of matter, divided by the mass of the sample.',
            "description*": {
                "en": '"Kerma" is the sum of the initial kinetic energies of all the charged particles liberated by uncharged ionizing radiation (i.e., indirectly ionizing radiation such as photons and neutrons) in a sample of matter, divided by the mass of the sample.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasKermaValue",
            "@context": [
                "/wiki/Category:OSW9a32b5a84f235a0cb0a9e9fba9bd252e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7ad0e91748bb5eedac17c39491d0626e"]


class StochasticProcess(Frequency):
    """
    In probability theory, a stochastic process, or sometimes random process  is a collection of random variables; this is often used to represent the evolution of some random value, or system, over time. This is the probabilistic counterpart to a deterministic process (or deterministic system).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "bec11680-5837-5097-b615-7eb8ac35eab4",
            "title": "StochasticProcess",
            "title*": {"en": "Stochastic Process"},
            "description": "In probability theory, a stochastic process, or sometimes random process  is a collection of random variables; this is often used to represent the evolution of some random value, or system, over time. This is the probabilistic counterpart to a deterministic process (or deterministic system).",
            "description*": {
                "en": "In probability theory, a stochastic process, or sometimes random process  is a collection of random variables; this is often used to represent the evolution of some random value, or system, over time. This is the probabilistic counterpart to a deterministic process (or deterministic system)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasStochasticProcessValue",
            "@context": [
                "/wiki/Category:OSWc543ebb853385a1a9382f57faad6170d?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWbec1168058375097b6157eb8ac35eab4"]


class RfPowerLevel(SignalStrength):
    """
    Radio-Frequency Power. Power level of electromagnetic waves alternating at the frequency of radio waves (up to 10^10 Hz).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0eab93f8-6d93-59bc-bdfa-90d6af162d71",
            "title": "RfPowerLevel",
            "title*": {"en": "RF-Power Level"},
            "description": "Radio-Frequency Power. Power level of electromagnetic waves alternating at the frequency of radio waves (up to 10^10 Hz).",
            "description*": {
                "en": "Radio-Frequency Power. Power level of electromagnetic waves alternating at the frequency of radio waves (up to 10^10 Hz)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRfPowerLevelValue",
            "@context": [
                "/wiki/Category:OSW2b4e65f26005511487ca6d47b859e932?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0eab93f86d9359bcbdfa90d6af162d71"]


class SoundPressure(Pressure):
    """
    Sound Pressure is the difference between instantaneous total pressure and static pressure.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "28f9a77b-22c6-5003-b5d7-e23a5d938191",
            "title": "SoundPressure",
            "title*": {"en": "Sound pressure"},
            "description": "Sound Pressure is the difference between instantaneous total pressure and static pressure.",
            "description*": {
                "en": "Sound Pressure is the difference between instantaneous total pressure and static pressure."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSoundPressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW28f9a77b22c65003b5d7e23a5d938191"]


class LengthTemperatureTimeUnit(UnitEnum):
    centi_meter_Celsius_second = "Item:OSW47b476c946d35bde93b5757a8e2d3d1b"


class LengthTemperatureTime(QuantityValue):
    """
    This is an autogenerated partial class definition of 'LengthTemperatureTime'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "3d8035cb-aa26-5d40-a8e6-cb6317c72700",
            "title": "LengthTemperatureTime",
            "title*": {"en": "Length Temperature Time"},
            "description": "This is an autogenerated partial class definition of 'LengthTemperatureTime'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLengthTemperatureTimeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3d8035cbaa265d40a8e6cb6317c72700"]
    unit: Optional[LengthTemperatureTimeUnit] = Field(
        LengthTemperatureTimeUnit.centi_meter_Celsius_second,
        options={"enum_titles": ["cm·s·°C"]},
        title="LengthTemperatureTimeUnit",
        x_enum_varnames=["centi_meter_Celsius_second"],
    )


class EnergyContent(Energy):
    """
    gespeicherte Energiemenge, die physikalisch oder chemisch nutzbar ist
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "40402cb3-470f-5f39-9e35-e20b06ba615b",
            "title": "EnergyContent",
            "title*": {"en": "Energy content"},
            "description": "gespeicherte Energiemenge, die physikalisch oder chemisch nutzbar ist",
            "description*": {
                "en": "gespeicherte Energiemenge, die physikalisch oder chemisch nutzbar ist"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnergyContentValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW40402cb3470f5f399e35e20b06ba615b"]


class EnergyFluenceRate(PowerPerArea):
    """
    "Energy Fluence Rate" can be used to describe the energy fluence delivered per unit time.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "be37b1c6-0f23-5f87-b627-2138ce574d4f",
            "title": "EnergyFluenceRate",
            "title*": {"en": "Energy Fluence Rate"},
            "description": '"Energy Fluence Rate" can be used to describe the energy fluence delivered per unit time.',
            "description*": {
                "en": '"Energy Fluence Rate" can be used to describe the energy fluence delivered per unit time.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnergyFluenceRateValue",
            "@context": [
                "/wiki/Category:OSW40c46aba16f45962a7330b7f8b88681e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWbe37b1c60f235f87b6272138ce574d4f"]


class InverseVolume(QuantityValue):
    """
    This is an autogenerated partial class definition of 'InverseVolume'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "dc5df784-e44e-5802-beda-722786fd75bf",
            "title": "InverseVolume",
            "title*": {"en": "Inverse Volume"},
            "description": "This is an autogenerated partial class definition of 'InverseVolume'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInverseVolumeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWdc5df784e44e5802beda722786fd75bf"]
    unit: Optional[InverseVolumeUnit] = Field(
        InverseVolumeUnit.per_meter_cubed,
        options={"enum_titles": ["1/m³", "1/mm³", "1/cm³"]},
        title="InverseVolumeUnit",
        x_enum_varnames=[
            "per_meter_cubed",
            "per_milli_meter_cubed",
            "per_centi_meter_cubed",
        ],
    )


class SpecificHeatCapacityAtConstantPressureUnit(UnitEnum):
    joule_per_Celsius_per_kilo_gram = (
        "Item:OSW93d8b6e516fd54f09d483dee1278e3a8#OSWa0cd208ccfa759388597f5f9ff5c69fc"
    )


class SpecificHeatCapacityAtConstantPressure(QuantityValue):
    """
    Specific heat at a constant pressure.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "12b88b32-ed2f-58c5-aa63-3841b687b985",
            "title": "SpecificHeatCapacityAtConstantPressure",
            "title*": {"en": "Specific heat capacity at constant pressure"},
            "description": "Specific heat at a constant pressure.",
            "description*": {"en": "Specific heat at a constant pressure."},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificHeatCapacityAtConstantPressureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW12b88b32ed2f58c5aa633841b687b985"]
    unit: Optional[SpecificHeatCapacityAtConstantPressureUnit] = Field(
        SpecificHeatCapacityAtConstantPressureUnit.joule_per_Celsius_per_kilo_gram,
        options={"enum_titles": ["J/(kg·°C)"]},
        title="SpecificHeatCapacityAtConstantPressureUnit",
        x_enum_varnames=["joule_per_Celsius_per_kilo_gram"],
    )


class RichardsonConstantUnit(UnitEnum):
    ampere_per_kelvin_squared_per_meter_squared = (
        "Item:OSW958d74176efb543f819fe576e03621fa"
    )


class RichardsonConstant(QuantityValue):
    """
    "Richardson Constant" is a constant used in developing thermionic emission current density for a metal.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a78b60b5-e433-540b-ba1f-2970c4a21f07",
            "title": "RichardsonConstant",
            "title*": {"en": "Richardson Constant"},
            "description": '"Richardson Constant" is a constant used in developing thermionic emission current density for a metal.',
            "description*": {
                "en": '"Richardson Constant" is a constant used in developing thermionic emission current density for a metal.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRichardsonConstantValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa78b60b5e433540bba1f2970c4a21f07"]
    unit: Optional[RichardsonConstantUnit] = Field(
        RichardsonConstantUnit.ampere_per_kelvin_squared_per_meter_squared,
        options={"enum_titles": ["A/(m²·K²)"]},
        title="RichardsonConstantUnit",
        x_enum_varnames=["ampere_per_kelvin_squared_per_meter_squared"],
    )


class PlaneAngle(QuantityValue):
    """
    An angle formed by two straight lines (in the same plane) angle - the space between two lines or planes that intersect; the inclination of one line to another; measured in degrees or radians
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "cfa8c174-8f3b-586e-9a03-04ab1e2dbc41",
            "title": "PlaneAngle",
            "title*": {"en": "Plane angle", "de": "Ebener Winkel"},
            "description": "An angle formed by two straight lines (in the same plane) angle - the space between two lines or planes that intersect; the inclination of one line to another; measured in degrees or radians",
            "description*": {
                "en": "An angle formed by two straight lines (in the same plane) angle - the space between two lines or planes that intersect; the inclination of one line to another; measured in degrees or radians"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPlaneAngleValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcfa8c1748f3b586e9a0304ab1e2dbc41"]
    unit: Optional[PlaneAngleUnit] = Field(
        PlaneAngleUnit.radian,
        options={"enum_titles": ["rad", "µrad", "mrad"]},
        title="PlaneAngleUnit",
        x_enum_varnames=["radian", "micro_radian", "milli_radian"],
    )


class LengthTemperatureUnit(UnitEnum):
    kelvin_meter = "Item:OSWb87aaf787d285ba88225897edbebc154"


class LengthTemperature(QuantityValue):
    """
    This is an autogenerated partial class definition of 'LengthTemperature'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "d28e7818-86de-5a3f-bab0-7eefc7bb9aa2",
            "title": "LengthTemperature",
            "title*": {"en": "Length Temperature"},
            "description": "This is an autogenerated partial class definition of 'LengthTemperature'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLengthTemperatureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd28e781886de5a3fbab07eefc7bb9aa2"]
    unit: Optional[LengthTemperatureUnit] = Field(
        LengthTemperatureUnit.kelvin_meter,
        options={"enum_titles": ["K·m"]},
        title="LengthTemperatureUnit",
        x_enum_varnames=["kelvin_meter"],
    )


class MassicActivityUnit(UnitEnum):
    becquerel_per_kilo_gram = "Item:OSW03b25e9a7cef5adeb7f3d5f82115dfc3"
    milli_becquerel_per_kilo_gram = (
        "Item:OSW03b25e9a7cef5adeb7f3d5f82115dfc3#OSWc896c96c6de8521181daee0118de2c5b"
    )
    micro_becquerel_per_kilo_gram = (
        "Item:OSW03b25e9a7cef5adeb7f3d5f82115dfc3#OSW23b3668ed7d3501da40aaa0a4e9f765e"
    )


class MassicActivity(QuantityValue):
    """
    "Massic Activity" is the activity divided by the total mass of the sample.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9cb88f0c-3394-51c5-9ecf-9587128ee4b5",
            "title": "MassicActivity",
            "title*": {"en": "Massic Activity"},
            "description": '"Massic Activity" is the activity divided by the total mass of the sample.',
            "description*": {
                "en": '"Massic Activity" is the activity divided by the total mass of the sample.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassicActivityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9cb88f0c339451c59ecf9587128ee4b5"]
    unit: Optional[MassicActivityUnit] = Field(
        MassicActivityUnit.becquerel_per_kilo_gram,
        options={"enum_titles": ["Bq/kg", "mBq/kg", "μBq/kg"]},
        title="MassicActivityUnit",
        x_enum_varnames=[
            "becquerel_per_kilo_gram",
            "milli_becquerel_per_kilo_gram",
            "micro_becquerel_per_kilo_gram",
        ],
    )


class ActivityRelatedByMass(MassicActivity):
    """
    quantitative Angabe der Radioaktivität einer Menge eines Radionuklids in einem bestimmten Energiezustand zu einem gegebenen Zeitpunkt dividiert durch die zugehörige Masse dieser Menge #,#quantitative data of the radioactivity of the amount of a radionuclide in a particular state of energy at a defined point in time, divided by the related mass of this quantity
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "cfe97306-540e-52e5-882c-bbb336f25e33",
            "title": "ActivityRelatedByMass",
            "title*": {"en": "Activity related by mass"},
            "description": "quantitative Angabe der Radioaktivität einer Menge eines Radionuklids in einem bestimmten Energiezustand zu einem gegebenen Zeitpunkt dividiert durch die zugehörige Masse dieser Menge #,#quantitative data of the radioactivity of the amount of a radionuclide in a particular state of energy at a defined point in time, divided by the related mass of this quantity",
            "description*": {
                "en": "quantitative Angabe der Radioaktivität einer Menge eines Radionuklids in einem bestimmten Energiezustand zu einem gegebenen Zeitpunkt dividiert durch die zugehörige Masse dieser Menge #,#quantitative data of the radioactivity of the amount of a radionuclide in a particular state of energy at a defined point in time, divided by the related mass of this quantity"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasActivityRelatedByMassValue",
            "@context": [
                "/wiki/Category:OSW9cb88f0c339451c59ecf9587128ee4b5?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcfe97306540e52e5882cbbb336f25e33"]


class AngularAcceleration(InverseSquareTime):
    """
    Angular acceleration is the rate of change of angular velocity over time. Measurement of the change made in the rate of change of an angle that a spinning object undergoes per unit time. It is a vector quantity.  Also called Rotational acceleration. In SI units, it is measured in radians per second squared ($rad/s^2$), and is usually denoted by the Greek letter alpha.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c635dd8c-8ae6-5263-a6d2-b3777f5776bb",
            "title": "AngularAcceleration",
            "title*": {"en": "Angular acceleration", "de": "Winkelbeschleunigung"},
            "description": "Angular acceleration is the rate of change of angular velocity over time. Measurement of the change made in the rate of change of an angle that a spinning object undergoes per unit time. It is a vector quantity.  Also called Rotational acceleration. In SI units, it is measured in radians per second squared ($rad/s^2$), and is usually denoted by the Greek letter alpha.",
            "description*": {
                "en": "Angular acceleration is the rate of change of angular velocity over time. Measurement of the change made in the rate of change of an angle that a spinning object undergoes per unit time. It is a vector quantity.  Also called Rotational acceleration. In SI units, it is measured in radians per second squared ($rad/s^2$), and is usually denoted by the Greek letter alpha."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngularAccelerationValue",
            "@context": [
                "/wiki/Category:OSW3484a41e5b0e57f7998a5033177ab080?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc635dd8c8ae65263a6d2b3777f5776bb"]


class MassRatio(QuantityValue):
    """
    In aerospace engineering, mass ratio is a measure of the efficiency of a rocket. It describes how much more massive the vehicle is with propellant than without; that is, it is the ratio of the rocket's wet mass (vehicle plus contents plus propellant) to its dry mass (vehicle plus contents)
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "feea4244-1eab-5f65-98b3-6cda1157f75f",
            "title": "MassRatio",
            "title*": {"en": "Mass Ratio"},
            "description": "In aerospace engineering, mass ratio is a measure of the efficiency of a rocket. It describes how much more massive the vehicle is with propellant than without; that is, it is the ratio of the rocket's wet mass (vehicle plus contents plus propellant) to its dry mass (vehicle plus contents)",
            "description*": {
                "en": "In aerospace engineering, mass ratio is a measure of the efficiency of a rocket. It describes how much more massive the vehicle is with propellant than without; that is, it is the ratio of the rocket's wet mass (vehicle plus contents plus propellant) to its dry mass (vehicle plus contents)"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassRatioValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfeea42441eab5f6598b36cda1157f75f"]
    unit: Optional[MassRatioUnit] = Field(
        MassRatioUnit.field_,
        options={"enum_titles": ["g/g", "kg/kg", "μg/g", "g/kg", "mg/g", "pg/g"]},
        title="MassRatioUnit",
        x_enum_varnames=[
            "",
            "",
            "micro_gram_per_gram",
            "gram_per_kilo_gram",
            "milli_gram_per_gram",
            "pico_gram_per_gram",
        ],
    )


class ReluctanceUnit(UnitEnum):
    per_henry = "Item:OSW8a3b2c786aeb55f7a8a6be1fe96329a1"


class Reluctance(QuantityValue):
    """
    "Reluctance" or magnetic resistance, is a concept used in the analysis of magnetic circuits. It is analogous to resistance in an electrical circuit, but rather than dissipating electric energy it stores magnetic energy. In likeness to the way an electric field causes an electric current to follow the path of least resistance, a magnetic field causes magnetic flux to follow the path of least magnetic reluctance. It is a scalar, extensive quantity, akin to electrical resistance.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9eeda948-d38a-5594-8bfc-8acd78bc8293",
            "title": "Reluctance",
            "title*": {"en": "Reluctance"},
            "description": '"Reluctance" or magnetic resistance, is a concept used in the analysis of magnetic circuits. It is analogous to resistance in an electrical circuit, but rather than dissipating electric energy it stores magnetic energy. In likeness to the way an electric field causes an electric current to follow the path of least resistance, a magnetic field causes magnetic flux to follow the path of least magnetic reluctance. It is a scalar, extensive quantity, akin to electrical resistance.',
            "description*": {
                "en": '"Reluctance" or magnetic resistance, is a concept used in the analysis of magnetic circuits. It is analogous to resistance in an electrical circuit, but rather than dissipating electric energy it stores magnetic energy. In likeness to the way an electric field causes an electric current to follow the path of least resistance, a magnetic field causes magnetic flux to follow the path of least magnetic reluctance. It is a scalar, extensive quantity, akin to electrical resistance.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasReluctanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9eeda948d38a55948bfc8acd78bc8293"]
    unit: Optional[ReluctanceUnit] = Field(
        ReluctanceUnit.per_henry,
        options={"enum_titles": ["1/H"]},
        title="ReluctanceUnit",
        x_enum_varnames=["per_henry"],
    )


class LandauGinzburgNumber(DimensionlessRatio):
    """
    "Landau-Ginzburg Number", also known as the Ginzburg-Landau parameter, describes the relationship between London penetration depth and coherence length.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0edc656a-4a2e-5537-819f-189398ab6b74",
            "title": "LandauGinzburgNumber",
            "title*": {"en": "Landau-Ginzburg Number"},
            "description": '"Landau-Ginzburg Number", also known as the Ginzburg-Landau parameter, describes the relationship between London penetration depth and coherence length.',
            "description*": {
                "en": '"Landau-Ginzburg Number", also known as the Ginzburg-Landau parameter, describes the relationship between London penetration depth and coherence length.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLandauGinzburgNumberValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0edc656a4a2e5537819f189398ab6b74"]


class PressureCoefficientUnit(UnitEnum):
    pascal_per_kelvin = "Item:OSWac77b78c88875d4b829975141f651b94"
    mega_pascal_per_kelvin = (
        "Item:OSWac77b78c88875d4b829975141f651b94#OSW3232f6c70da55b8aa7b7c2ea4f84565b"
    )
    hecto_pascal_per_kelvin = (
        "Item:OSWac77b78c88875d4b829975141f651b94#OSW56eb00ee243c5f2993c44c2259217fd3"
    )
    kilo_pascal_per_kelvin = (
        "Item:OSWac77b78c88875d4b829975141f651b94#OSWb436256689755bf1993955ab270253c3"
    )


class PressureCoefficient(QuantityValue):
    """
    This is an autogenerated partial class definition of 'PressureCoefficient'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a1c670ea-697d-58d8-8f1a-79b2c8aca63e",
            "title": "PressureCoefficient",
            "title*": {"en": "Pressure Coefficient"},
            "description": "This is an autogenerated partial class definition of 'PressureCoefficient'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPressureCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa1c670ea697d58d88f1a79b2c8aca63e"]
    unit: Optional[PressureCoefficientUnit] = Field(
        PressureCoefficientUnit.pascal_per_kelvin,
        options={"enum_titles": ["Pa/K", "MPa/K", "hPa/K", "kPa/K"]},
        title="PressureCoefficientUnit",
        x_enum_varnames=[
            "pascal_per_kelvin",
            "mega_pascal_per_kelvin",
            "hecto_pascal_per_kelvin",
            "kilo_pascal_per_kelvin",
        ],
    )


class MomentumUnit(UnitEnum):
    newton_second = "Item:OSWb05df920a96b5987aeb46a9b4f7ca333"


class Momentum(QuantityValue):
    """
    The momentum of a system of particles is given by the sum of the momentums of the individual particles which make up the system or by the product of the total mass of the system and the velocity of the center of gravity of the system. The momentum of a continuous medium is given by the integral of the velocity over the mass of the medium or by the product of the total mass of the medium and the velocity of the center of gravity of the medium.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "fcd8d6e6-9a0d-595b-b4e9-fb4969abf37c",
            "title": "Momentum",
            "title*": {"en": "Momentum", "de": "Impuls"},
            "description": "The momentum of a system of particles is given by the sum of the momentums of the individual particles which make up the system or by the product of the total mass of the system and the velocity of the center of gravity of the system. The momentum of a continuous medium is given by the integral of the velocity over the mass of the medium or by the product of the total mass of the medium and the velocity of the center of gravity of the medium.",
            "description*": {
                "en": "The momentum of a system of particles is given by the sum of the momentums of the individual particles which make up the system or by the product of the total mass of the system and the velocity of the center of gravity of the system. The momentum of a continuous medium is given by the integral of the velocity over the mass of the medium or by the product of the total mass of the medium and the velocity of the center of gravity of the medium."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMomentumValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfcd8d6e69a0d595bb4e9fb4969abf37c"]
    unit: Optional[MomentumUnit] = Field(
        MomentumUnit.newton_second,
        options={"enum_titles": ["N·m·s/m"]},
        title="MomentumUnit",
        x_enum_varnames=["newton_second"],
    )


class ForcePerElectricChargeUnit(UnitEnum):
    newton_per_coulomb = "Item:OSW3ce8ee5544995c36be4ab4d2f34e037e"


class ForcePerElectricCharge(QuantityValue):
    """
    The electric field depicts the force exerted on other electrically charged objects by the electrically charged particle the field is surrounding. The electric field is a vector field with SI units of newtons per coulomb ($N C^{-1}$) or, equivalently, volts per metre ($V m^{-1}$ ). The SI base units of the electric field are $kg m s^{-3} A^{-1}$. The strength or magnitude of the field at a given point is defined as the force that would be exerted on a positive test charge of 1 coulomb placed at that point
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "3db28177-ab14-5fce-ab80-85ac3b0c94d2",
            "title": "ForcePerElectricCharge",
            "title*": {"en": "Force per Electric Charge"},
            "description": "The electric field depicts the force exerted on other electrically charged objects by the electrically charged particle the field is surrounding. The electric field is a vector field with SI units of newtons per coulomb ($N C^{-1}$) or, equivalently, volts per metre ($V m^{-1}$ ). The SI base units of the electric field are $kg m s^{-3} A^{-1}$. The strength or magnitude of the field at a given point is defined as the force that would be exerted on a positive test charge of 1 coulomb placed at that point",
            "description*": {
                "en": "The electric field depicts the force exerted on other electrically charged objects by the electrically charged particle the field is surrounding. The electric field is a vector field with SI units of newtons per coulomb ($N C^{-1}$) or, equivalently, volts per metre ($V m^{-1}$ ). The SI base units of the electric field are $kg m s^{-3} A^{-1}$. The strength or magnitude of the field at a given point is defined as the force that would be exerted on a positive test charge of 1 coulomb placed at that point"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasForcePerElectricChargeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3db28177ab145fceab8085ac3b0c94d2"]
    unit: Optional[ForcePerElectricChargeUnit] = Field(
        ForcePerElectricChargeUnit.newton_per_coulomb,
        options={"enum_titles": ["N/C"]},
        title="ForcePerElectricChargeUnit",
        x_enum_varnames=["newton_per_coulomb"],
    )


class VolumeFlowRateUnit(UnitEnum):
    meter_cubed_per_second = "Item:OSW4ed5503a56ab514ab3d925287da52a95"
    deci_meter_cubed_per_second = (
        "Item:OSW4ed5503a56ab514ab3d925287da52a95#OSW58c067fb208b5294899599809141c3ff"
    )
    centi_meter_cubed_per_second = (
        "Item:OSW4ed5503a56ab514ab3d925287da52a95#OSWacda1333cb6958069dc83172f3a047db"
    )


class VolumeFlowRate(QuantityValue):
    """
    Volumetric Flow Rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "fa14092d-e387-562a-aacb-b2a35059aa60",
            "title": "VolumeFlowRate",
            "title*": {"en": "Volume Flow Rate"},
            "description": "Volumetric Flow Rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time.",
            "description*": {
                "en": "Volumetric Flow Rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVolumeFlowRateValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfa14092de387562aaacbb2a35059aa60"]
    unit: Optional[VolumeFlowRateUnit] = Field(
        VolumeFlowRateUnit.meter_cubed_per_second,
        options={"enum_titles": ["m³/s", "dm³/s", "cm³/s"]},
        title="VolumeFlowRateUnit",
        x_enum_varnames=[
            "meter_cubed_per_second",
            "deci_meter_cubed_per_second",
            "centi_meter_cubed_per_second",
        ],
    )


class AngularReciprocalLatticeVector(QuantityValue):
    """
    "Angular Reciprocal Lattice Vector" is a vector whose scalar products with all fundamental lattice vectors are integral multiples of $2\pi$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "0dca3665-339d-53b2-aeb2-c152dc1ff577",
            "title": "AngularReciprocalLatticeVector",
            "title*": {"en": "Angular Reciprocal Lattice Vector"},
            "description": '"Angular Reciprocal Lattice Vector" is a vector whose scalar products with all fundamental lattice vectors are integral multiples of $2\\pi$.',
            "description*": {
                "en": '"Angular Reciprocal Lattice Vector" is a vector whose scalar products with all fundamental lattice vectors are integral multiples of $2\\pi$.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngularReciprocalLatticeVectorValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0dca3665339d53b2aeb2c152dc1ff577"]
    unit: Optional[AngularReciprocalLatticeVectorUnit] = Field(
        AngularReciprocalLatticeVectorUnit.per_meter,
        options={
            "enum_titles": ["1/m", "1/cm", "1/nm", "1/mm", "1/pm", "1/μm", "1/km"]
        },
        title="AngularReciprocalLatticeVectorUnit",
        x_enum_varnames=[
            "per_meter",
            "per_centi_meter",
            "per_nano_meter",
            "per_milli_meter",
            "per_pico_meter",
            "per_micro_meter",
            "per_kilo_meter",
        ],
    )


class TemperaturePerTime(QuantityValue):
    """
    This is an autogenerated partial class definition of 'TemperaturePerTime'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "b124402a-1c76-538b-81dd-41babc0cd7e2",
            "title": "TemperaturePerTime",
            "title*": {"en": "Temperature per Time"},
            "description": "This is an autogenerated partial class definition of 'TemperaturePerTime'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTemperaturePerTimeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb124402a1c76538b81dd41babc0cd7e2"]
    unit: Optional[TemperaturePerTimeUnit] = Field(
        TemperaturePerTimeUnit.Celsius_per_second,
        options={"enum_titles": ["°C/s"]},
        title="TemperaturePerTimeUnit",
        x_enum_varnames=["Celsius_per_second"],
    )


class ThermalResistivityUnit(UnitEnum):
    kelvin_meter_per_watt = "Item:OSWc51652fc56f1518ebabb2c7f7701436e"


class ThermalResistivity(QuantityValue):
    """
    The reciprocal of thermal conductivity is thermal resistivity, measured in $kelvin-metres$ per watt ($K \cdot m/W$).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "22acaaf9-b83e-5160-b8a2-9b1a4147e848",
            "title": "ThermalResistivity",
            "title*": {"en": "Thermal Resistivity"},
            "description": "The reciprocal of thermal conductivity is thermal resistivity, measured in $kelvin-metres$ per watt ($K \\cdot m/W$).",
            "description*": {
                "en": "The reciprocal of thermal conductivity is thermal resistivity, measured in $kelvin-metres$ per watt ($K \\cdot m/W$)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThermalResistivityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW22acaaf9b83e5160b8a29b1a4147e848"]
    unit: Optional[ThermalResistivityUnit] = Field(
        ThermalResistivityUnit.kelvin_meter_per_watt,
        options={"enum_titles": ["K·m/W"]},
        title="ThermalResistivityUnit",
        x_enum_varnames=["kelvin_meter_per_watt"],
    )


class ThermalAdmittance(CoefficientOfHeatTransfer):
    """
    The heat transfer coefficient is also known as thermal admittance in the sense that the material may be seen as admitting heat to flow.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b82f3ae5-f1c2-5607-aac3-8b12aba13dd7",
            "title": "ThermalAdmittance",
            "title*": {"en": "Thermal Admittance"},
            "description": "The heat transfer coefficient is also known as thermal admittance in the sense that the material may be seen as admitting heat to flow.",
            "description*": {
                "en": "The heat transfer coefficient is also known as thermal admittance in the sense that the material may be seen as admitting heat to flow."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThermalAdmittanceValue",
            "@context": [
                "/wiki/Category:OSW46cf5d4e08e25909a1bbad7563535a8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb82f3ae5f1c25607aac38b12aba13dd7"]


class SoundPowerLevel(QuantityValue):
    """
    Sound Power Level abbreviated as $SWL$ expresses sound power more practically as a relation to the threshold of hearing - 1 picoW - in a logarithmic scale.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "7f56c0da-dee6-5455-b206-ddbb22bb84f8",
            "title": "SoundPowerLevel",
            "title*": {"en": "Sound power level"},
            "description": "Sound Power Level abbreviated as $SWL$ expresses sound power more practically as a relation to the threshold of hearing - 1 picoW - in a logarithmic scale.",
            "description*": {
                "en": "Sound Power Level abbreviated as $SWL$ expresses sound power more practically as a relation to the threshold of hearing - 1 picoW - in a logarithmic scale."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSoundPowerLevelValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7f56c0dadee65455b206ddbb22bb84f8"]
    unit: Optional[SoundPowerLevelUnit] = Field(
        SoundPowerLevelUnit.byte,
        options={"enum_titles": ["B"]},
        title="SoundPowerLevelUnit",
        x_enum_varnames=["byte"],
    )


class DragCoefficient(Dimensionless):
    """
    In fluid dynamics, the drag coefficient is a dimensionless quantity that is used to quantify the drag or resistance of an object in a fluid environment such as air or water.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "48ab89ca-0517-56ab-9cae-adfb5c2cce08",
            "title": "DragCoefficient",
            "title*": {"en": "Drag Coefficient"},
            "description": "In fluid dynamics, the drag coefficient is a dimensionless quantity that is used to quantify the drag or resistance of an object in a fluid environment such as air or water.",
            "description*": {
                "en": "In fluid dynamics, the drag coefficient is a dimensionless quantity that is used to quantify the drag or resistance of an object in a fluid environment such as air or water."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDragCoefficientValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW48ab89ca051756ab9caeadfb5c2cce08"]


class Breadth(Length):
    """
    "Breadth" is the extent or measure of how broad or wide something is.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c2d5b706-ce55-50b7-9cb2-d73ad8f91acd",
            "title": "Breadth",
            "title*": {"en": "Breadth", "de": "Breite"},
            "description": '"Breadth" is the extent or measure of how broad or wide something is.',
            "description*": {
                "en": '"Breadth" is the extent or measure of how broad or wide something is.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasBreadthValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc2d5b706ce5550b79cb2d73ad8f91acd"]


class RadiantIntensityUnit(UnitEnum):
    watt_per_steradian = "Item:OSWeb74cc6d085859178ff708d39709ea29"


class RadiantIntensity(QuantityValue):
    """
    Radiant Intensity is a measure of the intensity of electromagnetic radiation. It is defined as power per unit solid angle.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "e7fa402c-f56d-511e-8172-7e5f976a1c9f",
            "title": "RadiantIntensity",
            "title*": {"en": "Radiant Intensity"},
            "description": "Radiant Intensity is a measure of the intensity of electromagnetic radiation. It is defined as power per unit solid angle.",
            "description*": {
                "en": "Radiant Intensity is a measure of the intensity of electromagnetic radiation. It is defined as power per unit solid angle."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRadiantIntensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe7fa402cf56d511e81727e5f976a1c9f"]
    unit: Optional[RadiantIntensityUnit] = Field(
        RadiantIntensityUnit.watt_per_steradian,
        options={"enum_titles": ["W/sr"]},
        title="RadiantIntensityUnit",
        x_enum_varnames=["watt_per_steradian"],
    )


class AngularMomentumPerAngleUnit(UnitEnum):
    meter_newton_second_per_radian = "Item:OSW404a6456c6e85787a64ba84779ef3d70"


class AngularMomentumPerAngle(QuantityValue):
    """
    This is an autogenerated partial class definition of 'AngularMomentumPerAngle'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "313d97b5-a268-5dd6-8666-86c37b62a259",
            "title": "AngularMomentumPerAngle",
            "title*": {"en": "Angular Momentum per Angle"},
            "description": "This is an autogenerated partial class definition of 'AngularMomentumPerAngle'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngularMomentumPerAngleValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW313d97b5a2685dd6866686c37b62a259"]
    unit: Optional[AngularMomentumPerAngleUnit] = Field(
        AngularMomentumPerAngleUnit.meter_newton_second_per_radian,
        options={"enum_titles": ["N·m·s/rad"]},
        title="AngularMomentumPerAngleUnit",
        x_enum_varnames=["meter_newton_second_per_radian"],
    )


class LinearForce(ForcePerLength):
    """
    Stiffness is the extent to which an object resists deformation in response to an applied force. Linear Stiffness is the term used in the Industry Foundation Classes (IFC) standard.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0459ceb0-7125-5f8c-8bba-85be19091874",
            "title": "LinearForce",
            "title*": {"en": "Linear Force", "de": "Streckenlast"},
            "description": "Stiffness is the extent to which an object resists deformation in response to an applied force. Linear Stiffness is the term used in the Industry Foundation Classes (IFC) standard.",
            "description*": {
                "en": "Stiffness is the extent to which an object resists deformation in response to an applied force. Linear Stiffness is the term used in the Industry Foundation Classes (IFC) standard."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLinearForceValue",
            "@context": [
                "/wiki/Category:OSW4496d2b66d71545392a81e9e05297338?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0459ceb071255f8c8bba85be19091874"]


class ChargeNumber(Dimensionless):
    """
    The "Charge Number", or just valance of an ion is the coefficient that, when multiplied by the elementary charge, gives the ion's charge.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0accaf04-56ef-52ee-8816-1e974f36e3ba",
            "title": "ChargeNumber",
            "title*": {"en": "Charge Number"},
            "description": 'The "Charge Number", or just valance of an ion is the coefficient that, when multiplied by the elementary charge, gives the ion\'s charge.',
            "description*": {
                "en": 'The "Charge Number", or just valance of an ion is the coefficient that, when multiplied by the elementary charge, gives the ion\'s charge.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasChargeNumberValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0accaf0456ef52ee88161e974f36e3ba"]


class DynamicFriction(Friction):
    """
    Kinetic (or dynamic) friction occurs when two objects are moving relative to each other and rub together (like a sled on the ground).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "77c9caa1-70e1-512a-9453-4c634ef1545e",
            "title": "DynamicFriction",
            "title*": {"en": "Dynamic Friction"},
            "description": "Kinetic (or dynamic) friction occurs when two objects are moving relative to each other and rub together (like a sled on the ground).",
            "description*": {
                "en": "Kinetic (or dynamic) friction occurs when two objects are moving relative to each other and rub together (like a sled on the ground)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDynamicFrictionValue",
            "@context": [
                "/wiki/Category:OSW92473183e45854a8bd13de8f0aefff19?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW77c9caa170e1512a94534c634ef1545e"]


class GrossLiftOffWeight(Mass):
    """
    The sum of a rocket's inert mass and usable fluids and gases at sea level.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "8061114f-a355-5012-b53c-39fca5cbc5a8",
            "title": "GrossLiftOffWeight",
            "title*": {"en": "Gross Lift-Off Weight"},
            "description": "The sum of a rocket's inert mass and usable fluids and gases at sea level.",
            "description*": {
                "en": "The sum of a rocket's inert mass and usable fluids and gases at sea level."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasGrossLiftOffWeightValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8061114fa3555012b53c39fca5cbc5a8"]


class AmountOfSubstancePerVolume(Concentration):
    """
    The amount of substance per unit volume is called the molar density. Molar density is an intensive property of a substance and depends on the temperature and pressure.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "98493d0d-7b8b-528f-a42a-2332c8cf502f",
            "title": "AmountOfSubstancePerVolume",
            "title*": {"en": "Amount of Substance per Volume"},
            "description": "The amount of substance per unit volume is called the molar density. Molar density is an intensive property of a substance and depends on the temperature and pressure.",
            "description*": {
                "en": "The amount of substance per unit volume is called the molar density. Molar density is an intensive property of a substance and depends on the temperature and pressure."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAmountOfSubstancePerVolumeValue",
            "@context": [
                "/wiki/Category:OSW4ce5add385d2545ab8ab50e4b222dab4?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW98493d0d7b8b528fa42a2332c8cf502f"]


class RadiantFlux(Power):
    """
    Radiant Flux, or radiant power, is the measure of the total power of electromagnetic radiation (including infrared, ultraviolet, and visible light). The power may be the total emitted from a source, or the total landing on a particular surface.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "91a9f32b-98cb-5dc3-9ad2-c3b039d86ba7",
            "title": "RadiantFlux",
            "title*": {"en": "Radiant flux", "de": "Strahlungsfluss"},
            "description": "Radiant Flux, or radiant power, is the measure of the total power of electromagnetic radiation (including infrared, ultraviolet, and visible light). The power may be the total emitted from a source, or the total landing on a particular surface.",
            "description*": {
                "en": "Radiant Flux, or radiant power, is the measure of the total power of electromagnetic radiation (including infrared, ultraviolet, and visible light). The power may be the total emitted from a source, or the total landing on a particular surface."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRadiantFluxValue",
            "@context": [
                "/wiki/Category:OSWa819b53101b854ad923f9f13dfb41794?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW91a9f32b98cb5dc39ad2c3b039d86ba7"]


class Wavelength(Length):
    """
    For a monochromatic wave, "wavelength" is the distance between two successive points in a direction perpendicular to the wavefront where at a given instant the phase differs by $2\pi$. The wavelength of a sinusoidal wave is the spatial period of the wave—the distance over which the wave's shape repeats. The SI unit of wavelength is the meter.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "63b3e955-e2ee-540b-8345-25f44672012d",
            "title": "Wavelength",
            "title*": {"en": "Wavelength", "de": "Wellenlänge"},
            "description": 'For a monochromatic wave, "wavelength" is the distance between two successive points in a direction perpendicular to the wavefront where at a given instant the phase differs by $2\\pi$. The wavelength of a sinusoidal wave is the spatial period of the wave—the distance over which the wave\'s shape repeats. The SI unit of wavelength is the meter.',
            "description*": {
                "en": 'For a monochromatic wave, "wavelength" is the distance between two successive points in a direction perpendicular to the wavefront where at a given instant the phase differs by $2\\pi$. The wavelength of a sinusoidal wave is the spatial period of the wave—the distance over which the wave\'s shape repeats. The SI unit of wavelength is the meter.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasWavelengthValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW63b3e955e2ee540b834525f44672012d"]


class Height(Length):
    """
    "Height" is the measurement of vertical distance, but has two meanings in common use. It can either indicate how "tall" something is, or how "high up" it is.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c1bdd6bc-fc95-5882-ba1d-068110ae41cc",
            "title": "Height",
            "title*": {"en": "Height", "de": "Höhe"},
            "description": '"Height" is the measurement of vertical distance, but has two meanings in common use. It can either indicate how "tall" something is, or how "high up" it is.',
            "description*": {
                "en": '"Height" is the measurement of vertical distance, but has two meanings in common use. It can either indicate how "tall" something is, or how "high up" it is.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasHeightValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc1bdd6bcfc955882ba1d068110ae41cc"]


class IonizationEnergy(Energy):
    """
    "Ionization Energy" is the energy difference between an electron at rest at infinity and an electron at a certain energy level. The amount of energy required to remove an electron from that atom or molecule in the gas phase.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "510287e6-716f-5be0-98e9-ad2c80ea3d4f",
            "title": "IonizationEnergy",
            "title*": {"en": "Ionization Energy"},
            "description": '"Ionization Energy" is the energy difference between an electron at rest at infinity and an electron at a certain energy level. The amount of energy required to remove an electron from that atom or molecule in the gas phase.',
            "description*": {
                "en": '"Ionization Energy" is the energy difference between an electron at rest at infinity and an electron at a certain energy level. The amount of energy required to remove an electron from that atom or molecule in the gas phase.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasIonizationEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW510287e6716f5be098e9ad2c80ea3d4f"]


class RadiusOfCurvature(Length):
    """
    In geometry, the "Radius of Curvature", R, of a curve at a point is a measure of the radius of the circular arc which best approximates the curve at that point.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b9fc44a8-68dd-5936-9128-bda6e511507d",
            "title": "RadiusOfCurvature",
            "title*": {"en": "Radius of Curvature"},
            "description": 'In geometry, the "Radius of Curvature", R, of a curve at a point is a measure of the radius of the circular arc which best approximates the curve at that point.',
            "description*": {
                "en": 'In geometry, the "Radius of Curvature", R, of a curve at a point is a measure of the radius of the circular arc which best approximates the curve at that point.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRadiusOfCurvatureValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb9fc44a868dd59369128bda6e511507d"]


class RestMass(Mass):
    """
    The $\\textit{Rest Mass}$, the invariant mass, intrinsic mass, proper mass, or (in the case of bound systems or objects observed in their center of momentum frame) simply mass, is a characteristic of the total energy and momentum of an object or a system of objects that is the same in all frames of reference related by Lorentz transformations. The mass of a particle type X (electron, proton or neutron) when that particle is at rest. For an electron: $m_e = 9,109 382 15(45) 10^{-31} kg$, for a proton: $m_p = 1,672 621 637(83) 10^{-27} kg$, for a neutron: $m_n = 1,674 927 211(84) 10^{-27} kg$. Rest mass is often denoted $m_0$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "cc4866e4-7ced-53df-bb70-9c97a8752530",
            "title": "RestMass",
            "title*": {"en": "Rest mass", "de": "Ruhemasse"},
            "description": "The $\\textit{Rest Mass}$, the invariant mass, intrinsic mass, proper mass, or (in the case of bound systems or objects observed in their center of momentum frame) simply mass, is a characteristic of the total energy and momentum of an object or a system of objects that is the same in all frames of reference related by Lorentz transformations. The mass of a particle type X (electron, proton or neutron) when that particle is at rest. For an electron: $m_e = 9,109 382 15(45) 10^{-31} kg$, for a proton: $m_p = 1,672 621 637(83) 10^{-27} kg$, for a neutron: $m_n = 1,674 927 211(84) 10^{-27} kg$. Rest mass is often denoted $m_0$.",
            "description*": {
                "en": "The $\\textit{Rest Mass}$, the invariant mass, intrinsic mass, proper mass, or (in the case of bound systems or objects observed in their center of momentum frame) simply mass, is a characteristic of the total energy and momentum of an object or a system of objects that is the same in all frames of reference related by Lorentz transformations. The mass of a particle type X (electron, proton or neutron) when that particle is at rest. For an electron: $m_e = 9,109 382 15(45) 10^{-31} kg$, for a proton: $m_p = 1,672 621 637(83) 10^{-27} kg$, for a neutron: $m_n = 1,674 927 211(84) 10^{-27} kg$. Rest mass is often denoted $m_0$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRestMassValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcc4866e47ced53dfbb709c97a8752530"]


class AbsorbedDose(SpecificEnergy):
    """
    "Absorbed Dose" (also known as Total Ionizing Dose, TID) is a measure of the energy deposited in a medium by ionizing radiation. It is equal to the energy deposited per unit mass of medium, and so has the unit $J/kg$, which is given the special name Gray ($Gy$).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b6892111-1fae-5bca-a1d6-128bc8be6615",
            "title": "AbsorbedDose",
            "title*": {"en": "Absorbed Dose"},
            "description": '"Absorbed Dose" (also known as Total Ionizing Dose, TID) is a measure of the energy deposited in a medium by ionizing radiation. It is equal to the energy deposited per unit mass of medium, and so has the unit $J/kg$, which is given the special name Gray ($Gy$).',
            "description*": {
                "en": '"Absorbed Dose" (also known as Total Ionizing Dose, TID) is a measure of the energy deposited in a medium by ionizing radiation. It is equal to the energy deposited per unit mass of medium, and so has the unit $J/kg$, which is given the special name Gray ($Gy$).'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAbsorbedDoseValue",
            "@context": [
                "/wiki/Category:OSW9a32b5a84f235a0cb0a9e9fba9bd252e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb68921111fae5bcaa1d6128bc8be6615"]


class InverseLengthTemperatureUnit(UnitEnum):
    per_kelvin_per_meter = "Item:OSWf56de776e1935d7da1fc50db7cd12490"


class InverseLengthTemperature(QuantityValue):
    """
    This is an autogenerated partial class definition of 'InverseLengthTemperature'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "0f94186c-90c8-5d26-9958-5af6b6985d2c",
            "title": "InverseLengthTemperature",
            "title*": {"en": "Inverse Length Temperature"},
            "description": "This is an autogenerated partial class definition of 'InverseLengthTemperature'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInverseLengthTemperatureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0f94186c90c85d2699585af6b6985d2c"]
    unit: Optional[InverseLengthTemperatureUnit] = Field(
        InverseLengthTemperatureUnit.per_kelvin_per_meter,
        options={"enum_titles": ["1/(m·K)"]},
        title="InverseLengthTemperatureUnit",
        x_enum_varnames=["per_kelvin_per_meter"],
    )


class SurfaceActivityDensityUnit(UnitEnum):
    becquerel_per_meter_squared = "Item:OSW8369e204ddec5045893b3249ff474d53"


class SurfaceActivityDensity(QuantityValue):
    """
    The "Surface Activity Density" is undefined.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "c2294c7d-ee72-52b4-a277-d3e03eb1e8f8",
            "title": "SurfaceActivityDensity",
            "title*": {"en": "Surface Activity Density"},
            "description": 'The "Surface Activity Density" is undefined.',
            "description*": {"en": 'The "Surface Activity Density" is undefined.'},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSurfaceActivityDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc2294c7dee7252b4a277d3e03eb1e8f8"]
    unit: Optional[SurfaceActivityDensityUnit] = Field(
        SurfaceActivityDensityUnit.becquerel_per_meter_squared,
        options={"enum_titles": ["Bq/m²"]},
        title="SurfaceActivityDensityUnit",
        x_enum_varnames=["becquerel_per_meter_squared"],
    )


class CoefficientOfHeatTransfer(QuantityValue):
    """
    "Coefficient of Heat Transfer", in thermodynamics and in mechanical and chemical engineering, is used in calculating the heat transfer, typically by convection or phase transition between a fluid and a solid. The heat transfer coefficient is the proportionality coefficient between the heat flux, that is heat flow per unit area, q/A, and the thermodynamic driving force for the flow of heat (that is, the temperature difference, (Delta T).  Areic heat flow rate divided by thermodynamic temperature difference. In building technology, the "Coefficient of Heat Transfer", is often called "thermal transmittance}" with the symbol "U". It has SI units in watts per squared meter kelvin.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "46cf5d4e-08e2-5909-a1bb-ad7563535a8e",
            "title": "CoefficientOfHeatTransfer",
            "title*": {"en": "Coefficient of heat transfer"},
            "description": '"Coefficient of Heat Transfer", in thermodynamics and in mechanical and chemical engineering, is used in calculating the heat transfer, typically by convection or phase transition between a fluid and a solid. The heat transfer coefficient is the proportionality coefficient between the heat flux, that is heat flow per unit area, q/A, and the thermodynamic driving force for the flow of heat (that is, the temperature difference, (Delta T).  Areic heat flow rate divided by thermodynamic temperature difference. In building technology, the "Coefficient of Heat Transfer", is often called "thermal transmittance}" with the symbol "U". It has SI units in watts per squared meter kelvin.',
            "description*": {
                "en": '"Coefficient of Heat Transfer", in thermodynamics and in mechanical and chemical engineering, is used in calculating the heat transfer, typically by convection or phase transition between a fluid and a solid. The heat transfer coefficient is the proportionality coefficient between the heat flux, that is heat flow per unit area, q/A, and the thermodynamic driving force for the flow of heat (that is, the temperature difference, (Delta T).  Areic heat flow rate divided by thermodynamic temperature difference. In building technology, the "Coefficient of Heat Transfer", is often called "thermal transmittance}" with the symbol "U". It has SI units in watts per squared meter kelvin.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCoefficientOfHeatTransferValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW46cf5d4e08e25909a1bbad7563535a8e"]
    unit: Optional[CoefficientOfHeatTransferUnit] = Field(
        CoefficientOfHeatTransferUnit.watt_per_kelvin_per_meter_squared,
        options={"enum_titles": ["W/(m²·K)"]},
        title="CoefficientOfHeatTransferUnit",
        x_enum_varnames=["watt_per_kelvin_per_meter_squared"],
    )


class AericHeatFlowRate(PowerPerArea):
    """
    Density of heat flow rate.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "e4e4be24-a160-562a-932a-1a36bf7fff9d",
            "title": "AericHeatFlowRate",
            "title*": {"en": "Aeric Heat Flow Rate"},
            "description": "Density of heat flow rate.",
            "description*": {"en": "Density of heat flow rate."},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAericHeatFlowRateValue",
            "@context": [
                "/wiki/Category:OSW40c46aba16f45962a7330b7f8b88681e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe4e4be24a160562a932a1a36bf7fff9d"]


class AreaThermalExpansionUnit(UnitEnum):
    meter_squared_per_kelvin = "Item:OSWf1731214810f50999e9ce8343fe57e34"


class AreaThermalExpansion(QuantityValue):
    """
    When the temperature of a substance changes, the energy that is stored in the intermolecular bonds between atoms changes. When the stored energy increases, so does the length of the molecular bonds. As a result, solids typically expand in response to heating and contract on cooling; this dimensional response to temperature change is expressed by its coefficient of thermal expansion.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "1ad6b428-ff38-5d10-b28b-dc0221bf5b81",
            "title": "AreaThermalExpansion",
            "title*": {"en": "Area Thermal Expansion"},
            "description": "When the temperature of a substance changes, the energy that is stored in the intermolecular bonds between atoms changes. When the stored energy increases, so does the length of the molecular bonds. As a result, solids typically expand in response to heating and contract on cooling; this dimensional response to temperature change is expressed by its coefficient of thermal expansion.",
            "description*": {
                "en": "When the temperature of a substance changes, the energy that is stored in the intermolecular bonds between atoms changes. When the stored energy increases, so does the length of the molecular bonds. As a result, solids typically expand in response to heating and contract on cooling; this dimensional response to temperature change is expressed by its coefficient of thermal expansion."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAreaThermalExpansionValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1ad6b428ff385d10b28bdc0221bf5b81"]
    unit: Optional[AreaThermalExpansionUnit] = Field(
        AreaThermalExpansionUnit.meter_squared_per_kelvin,
        options={"enum_titles": ["m²/K"]},
        title="AreaThermalExpansionUnit",
        x_enum_varnames=["meter_squared_per_kelvin"],
    )


class LinearForce(ForcePerLength):
    """
    Another name for Force Per Length, used by the Industry Foundation Classes (IFC) standard.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "07c57bfb-44bc-521d-978e-e17c347b3eb4",
            "title": "LinearForce",
            "title*": {"en": "Linear Force", "de": "Streckenlast"},
            "description": "Another name for Force Per Length, used by the Industry Foundation Classes (IFC) standard.",
            "description*": {
                "en": "Another name for Force Per Length, used by the Industry Foundation Classes (IFC) standard."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLinearForceValue",
            "@context": [
                "/wiki/Category:OSW4496d2b66d71545392a81e9e05297338?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW07c57bfb44bc521d978ee17c347b3eb4"]


class Adaptation(Time):
    """
    "Adaptation" is the recovery of visual ability following exposure to light (dark adaptation).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "83d957cf-054d-539c-9ed2-a830d7563441",
            "title": "Adaptation",
            "title*": {"en": "Adaptation"},
            "description": '"Adaptation" is the recovery of visual ability following exposure to light (dark adaptation).',
            "description*": {
                "en": '"Adaptation" is the recovery of visual ability following exposure to light (dark adaptation).'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAdaptationValue",
            "@context": [
                "/wiki/Category:OSW389cb87d31be515aa5d2f12e2b66e938?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW83d957cf054d539c9ed2a830d7563441"]


class ThermalExpansionCoefficient(ExpansionRatio):
    """
    The "Thermal Expansion Coefficient" is a measure of the thermal expansion coefficient of a material, which expresses its elongation (as a ratio) per temperature difference. It is usually measured in 1/K. A positive elongation per (positive) rise of temperature is expressed by a positive value.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "5fa26223-beca-5098-96be-e33fd38ea86a",
            "title": "ThermalExpansionCoefficient",
            "title*": {"en": "Thermal Expansion Coefficient"},
            "description": 'The "Thermal Expansion Coefficient" is a measure of the thermal expansion coefficient of a material, which expresses its elongation (as a ratio) per temperature difference. It is usually measured in 1/K. A positive elongation per (positive) rise of temperature is expressed by a positive value.',
            "description*": {
                "en": 'The "Thermal Expansion Coefficient" is a measure of the thermal expansion coefficient of a material, which expresses its elongation (as a ratio) per temperature difference. It is usually measured in 1/K. A positive elongation per (positive) rise of temperature is expressed by a positive value.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThermalExpansionCoefficientValue",
            "@context": [
                "/wiki/Category:OSWa3a8179bb49f5fafa9ff680f4d7f9f34?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW5fa26223beca509896bee33fd38ea86a"]


class SpectralAngularCrossSectionUnit(UnitEnum):
    meter_squared_per_joule_per_steradian = "Item:OSW67a27e9bd9685e61a525f06b3e25b81f"


class SpectralAngularCrossSection(QuantityValue):
    """
    "Spectral Angular Cross-section" is the cross-section for ejecting or scattering a particle into an elementary cone with energy $E$ in an energy interval, divided by the solid angle $d\Omega$ of that cone and the range $dE$ of that interval.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4e1cadc1-79b3-55b3-9ed4-0a4ea0c3ff5a",
            "title": "SpectralAngularCrossSection",
            "title*": {"en": "Spectral Angular Cross-section"},
            "description": '"Spectral Angular Cross-section" is the cross-section for ejecting or scattering a particle into an elementary cone with energy $E$ in an energy interval, divided by the solid angle $d\\Omega$ of that cone and the range $dE$ of that interval.',
            "description*": {
                "en": '"Spectral Angular Cross-section" is the cross-section for ejecting or scattering a particle into an elementary cone with energy $E$ in an energy interval, divided by the solid angle $d\\Omega$ of that cone and the range $dE$ of that interval.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpectralAngularCrossSectionValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4e1cadc179b355b39ed40a4ea0c3ff5a"]
    unit: Optional[SpectralAngularCrossSectionUnit] = Field(
        SpectralAngularCrossSectionUnit.meter_squared_per_joule_per_steradian,
        options={"enum_titles": ["m²/(sr·J)"]},
        title="SpectralAngularCrossSectionUnit",
        x_enum_varnames=["meter_squared_per_joule_per_steradian"],
    )


class DonorIonizationEnergy(IonizationEnergy):
    """
    "Donor Ionization Energy" is the ionization energy of a donor.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "f5c5b968-f612-5fab-80cf-dbc0a74706fa",
            "title": "DonorIonizationEnergy",
            "title*": {"en": "Donor Ionization Energy"},
            "description": '"Donor Ionization Energy" is the ionization energy of a donor.',
            "description*": {
                "en": '"Donor Ionization Energy" is the ionization energy of a donor.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDonorIonizationEnergyValue",
            "@context": [
                "/wiki/Category:OSW510287e6716f5be098e9ad2c80ea3d4f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf5c5b968f6125fab80cfdbc0a74706fa"]


class EffectiveMass(Mass):
    """
    "Effective Mass" is used in the motional equation for electrons in solid state bodies, depending on the wavenumber and corresponding to its velocity and energy level.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "4a5b46b7-3675-5f22-ab06-881a142f62e6",
            "title": "EffectiveMass",
            "title*": {"en": "Effective Mass"},
            "description": '"Effective Mass" is used in the motional equation for electrons in solid state bodies, depending on the wavenumber and corresponding to its velocity and energy level.',
            "description*": {
                "en": '"Effective Mass" is used in the motional equation for electrons in solid state bodies, depending on the wavenumber and corresponding to its velocity and energy level.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEffectiveMassValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4a5b46b736755f22ab06881a142f62e6"]


class ExpansionRatio(QuantityValue):
    """
    This is an autogenerated partial class definition of 'ExpansionRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a3a8179b-b49f-5faf-a9ff-680f4d7f9f34",
            "title": "ExpansionRatio",
            "title*": {"en": "Expansion Ratio"},
            "description": "This is an autogenerated partial class definition of 'ExpansionRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasExpansionRatioValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa3a8179bb49f5fafa9ff680f4d7f9f34"]
    unit: Optional[ExpansionRatioUnit] = Field(
        ExpansionRatioUnit.per_kelvin,
        options={"enum_titles": ["1/K"]},
        title="ExpansionRatioUnit",
        x_enum_varnames=["per_kelvin"],
    )


class MolarFluxDensityUnit(UnitEnum):
    mole_per_meter_squared_per_second = "Item:OSW3063bab947d256b1a7a11cdb158d11b1"
    milli_mole_per_meter_squared_per_second = (
        "Item:OSW3063bab947d256b1a7a11cdb158d11b1#OSWd5bf9cdb27765d8bbc553cf3682b1c52"
    )
    micro_mole_per_meter_squared_per_second = (
        "Item:OSW3063bab947d256b1a7a11cdb158d11b1#OSW92a55c5f59b259f8acfe7284e9f7ebe1"
    )


class MolarFluxDensity(QuantityValue):
    """
    the rate at which moles of a substance pass through a unit area per unit time. It is used for describing the flow of materials in terms of the transport of molecules or particles rather than bulk mass. The SI units are mol m-2 s-1
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "00dbaeb2-4c29-52cd-9ad2-9928be2f1b83",
            "title": "MolarFluxDensity",
            "title*": {"en": "Molar Flux Density"},
            "description": "the rate at which moles of a substance pass through a unit area per unit time. It is used for describing the flow of materials in terms of the transport of molecules or particles rather than bulk mass. The SI units are mol m-2 s-1",
            "description*": {
                "en": "the rate at which moles of a substance pass through a unit area per unit time. It is used for describing the flow of materials in terms of the transport of molecules or particles rather than bulk mass. The SI units are mol m-2 s-1"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarFluxDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW00dbaeb24c2952cd9ad29928be2f1b83"]
    unit: Optional[MolarFluxDensityUnit] = Field(
        MolarFluxDensityUnit.mole_per_meter_squared_per_second,
        options={"enum_titles": ["mol/(m²·s)", "mmol/(m²·s)", "μmol/(m²·s)"]},
        title="MolarFluxDensityUnit",
        x_enum_varnames=[
            "mole_per_meter_squared_per_second",
            "milli_mole_per_meter_squared_per_second",
            "micro_mole_per_meter_squared_per_second",
        ],
    )


class SlowingDownLength(Length):
    """
    "Slowing-Down Length" is the average straight-line distance that a fast neutron will travel between its introduction into the slowing-downmedium (moderator) and thermalization.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "cabedf85-97d2-5a3e-b8d1-96f2b864e0a6",
            "title": "SlowingDownLength",
            "title*": {"en": "Slowing-Down Length"},
            "description": '"Slowing-Down Length" is the average straight-line distance that a fast neutron will travel between its introduction into the slowing-downmedium (moderator) and thermalization.',
            "description*": {
                "en": '"Slowing-Down Length" is the average straight-line distance that a fast neutron will travel between its introduction into the slowing-downmedium (moderator) and thermalization.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSlowingDownLengthValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcabedf8597d25a3eb8d196f2b864e0a6"]


class MassAbsorptionCoefficientUnit(UnitEnum):
    meter_squared_per_kilo_gram = (
        "Item:OSWd7015166d39d5cae866a40eac3d51896#OSWc811db362efa5d33a49b56ffdd77e54d"
    )


class MassAbsorptionCoefficient(QuantityValue):
    """
    The mass absorption coefficient is the linear absorption coefficient divided by the density of the absorber.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4270a516-cdbe-5466-abee-a6638b402fea",
            "title": "MassAbsorptionCoefficient",
            "title*": {"en": "Mass Absorption Coefficient"},
            "description": "The mass absorption coefficient is the linear absorption coefficient divided by the density of the absorber.",
            "description*": {
                "en": "The mass absorption coefficient is the linear absorption coefficient divided by the density of the absorber."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassAbsorptionCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4270a516cdbe5466abeea6638b402fea"]
    unit: Optional[MassAbsorptionCoefficientUnit] = Field(
        MassAbsorptionCoefficientUnit.meter_squared_per_kilo_gram,
        options={"enum_titles": ["m²/kg"]},
        title="MassAbsorptionCoefficientUnit",
        x_enum_varnames=["meter_squared_per_kilo_gram"],
    )


class VerticalVelocity(Velocity):
    """
    The rate at which a body moves upwards at an angle of 90 degrees to the ground. It is the component of a projectile's velocity which is concerned with lifting the projectile.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "8d942272-7623-5715-9c76-6f3a5a7f29c5",
            "title": "VerticalVelocity",
            "title*": {"en": "Vertical Velocity"},
            "description": "The rate at which a body moves upwards at an angle of 90 degrees to the ground. It is the component of a projectile's velocity which is concerned with lifting the projectile.",
            "description*": {
                "en": "The rate at which a body moves upwards at an angle of 90 degrees to the ground. It is the component of a projectile's velocity which is concerned with lifting the projectile."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVerticalVelocityValue",
            "@context": [
                "/wiki/Category:OSW397c67ece63a5a5c96bad9349f49f3d7?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8d942272762357159c766f3a5a7f29c5"]


class AreaPerTime(QuantityValue):
    """
    This is an autogenerated partial class definition of 'AreaPerTime'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "64892b4f-11e8-52b1-8739-75a66e851abe",
            "title": "AreaPerTime",
            "title*": {"en": "Area per Time"},
            "description": "This is an autogenerated partial class definition of 'AreaPerTime'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAreaPerTimeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW64892b4f11e852b1873975a66e851abe"]
    unit: Optional[AreaPerTimeUnit] = Field(
        AreaPerTimeUnit.hertz_meter_squared,
        options={"enum_titles": ["m²·Hz"]},
        title="AreaPerTimeUnit",
        x_enum_varnames=["hertz_meter_squared"],
    )


class MassPerAreaTimeUnit(UnitEnum):
    gram_per_day_per_meter_squared = "Item:OSWb2902ae1df0b561682bfc174af5ff039"
    milli_gram_per_day_per_meter_squared = (
        "Item:OSWb2902ae1df0b561682bfc174af5ff039#OSW93a70588ce305c56aa1c3d6417632649"
    )
    micro_gram_per_day_per_meter_squared = (
        "Item:OSWb2902ae1df0b561682bfc174af5ff039#OSWae40efaa247650f38362d522eabf49ca"
    )


class MassPerAreaTime(QuantityValue):
    """
    In Physics and Engineering, mass flux is the rate of mass flow per unit area. The common symbols are $j$, $J$, $\phi$, or $\Phi$  (Greek lower or capital Phi), sometimes with subscript $m$ to indicate mass is the flowing quantity.  Its SI units are $ kg s^{-1} m^{-2}$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9e775ee5-d354-55fa-aa88-953b35b2d911",
            "title": "MassPerAreaTime",
            "title*": {"en": "Mass per Area Time"},
            "description": "In Physics and Engineering, mass flux is the rate of mass flow per unit area. The common symbols are $j$, $J$, $\\phi$, or $\\Phi$  (Greek lower or capital Phi), sometimes with subscript $m$ to indicate mass is the flowing quantity.  Its SI units are $ kg s^{-1} m^{-2}$.",
            "description*": {
                "en": "In Physics and Engineering, mass flux is the rate of mass flow per unit area. The common symbols are $j$, $J$, $\\phi$, or $\\Phi$  (Greek lower or capital Phi), sometimes with subscript $m$ to indicate mass is the flowing quantity.  Its SI units are $ kg s^{-1} m^{-2}$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassPerAreaTimeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9e775ee5d35455faaa88953b35b2d911"]
    unit: Optional[MassPerAreaTimeUnit] = Field(
        MassPerAreaTimeUnit.gram_per_day_per_meter_squared,
        options={"enum_titles": ["g/(m²·d)", "mg/(m²·d)", "μg/(m²·d)"]},
        title="MassPerAreaTimeUnit",
        x_enum_varnames=[
            "gram_per_day_per_meter_squared",
            "milli_gram_per_day_per_meter_squared",
            "micro_gram_per_day_per_meter_squared",
        ],
    )


class AcousticImpediance(MassPerAreaTime):
    """
    Acoustic impedance at a surface is the complex quotient of the average sound pressure over that surface by the sound volume flow rate through that surface.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1122e0bc-34a9-581f-aea3-1f6967f701d6",
            "title": "AcousticImpediance",
            "title*": {"en": "Acoustic Impediance"},
            "description": "Acoustic impedance at a surface is the complex quotient of the average sound pressure over that surface by the sound volume flow rate through that surface.",
            "description*": {
                "en": "Acoustic impedance at a surface is the complex quotient of the average sound pressure over that surface by the sound volume flow rate through that surface."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAcousticImpedianceValue",
            "@context": [
                "/wiki/Category:OSW9e775ee5d35455faaa88953b35b2d911?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1122e0bc34a9581faea31f6967f701d6"]


class CharacteristicAcousticImpedance(AcousticImpediance):
    """
    Characteristic impedance at a point in a non-dissipative medium and for a plane progressive wave, the quotient of the sound pressure $p$ by the component of the sound particle velocity $v$ in the direction of the wave propagation.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "8fab4f29-a54f-56db-8cab-bd1cb60b9501",
            "title": "CharacteristicAcousticImpedance",
            "title*": {"en": "Characteristic Acoustic Impedance"},
            "description": "Characteristic impedance at a point in a non-dissipative medium and for a plane progressive wave, the quotient of the sound pressure $p$ by the component of the sound particle velocity $v$ in the direction of the wave propagation.",
            "description*": {
                "en": "Characteristic impedance at a point in a non-dissipative medium and for a plane progressive wave, the quotient of the sound pressure $p$ by the component of the sound particle velocity $v$ in the direction of the wave propagation."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCharacteristicAcousticImpedanceValue",
            "@context": [
                "/wiki/Category:OSW1122e0bc34a9581faea31f6967f701d6?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8fab4f29a54f56db8cabbd1cb60b9501"]


class SlowingDownArea(Area):
    """
    "Slowing-Down Area" in an infinite homogenous medium, is one-sixth of the mean square distance between the neutron source and the point where a neutron reaches a given energy.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3bb93168-722e-5893-b632-cd3889967bf0",
            "title": "SlowingDownArea",
            "title*": {"en": "Slowing-Down Area"},
            "description": '"Slowing-Down Area" in an infinite homogenous medium, is one-sixth of the mean square distance between the neutron source and the point where a neutron reaches a given energy.',
            "description*": {
                "en": '"Slowing-Down Area" in an infinite homogenous medium, is one-sixth of the mean square distance between the neutron source and the point where a neutron reaches a given energy.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSlowingDownAreaValue",
            "@context": [
                "/wiki/Category:OSW1fcf1694712e5684885071efdf775bd9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3bb93168722e5893b632cd3889967bf0"]


class DensityOfTheExhaustGases(Density):
    """
    This is an autogenerated partial class definition of 'DensityOfTheExhaustGases'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0ae584a5-bdf9-5705-a72f-864c11e61486",
            "title": "DensityOfTheExhaustGases",
            "title*": {"en": "Density Of The Exhaust Gases"},
            "description": "This is an autogenerated partial class definition of 'DensityOfTheExhaustGases'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDensityOfTheExhaustGasesValue",
            "@context": [
                "/wiki/Category:OSW571f68d4b4715284b2dc5020ad51cf72?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0ae584a5bdf95705a72f864c11e61486"]


class CurrentLinkageUnit(UnitEnum):
    ampere = "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec"
    milli_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSW614e3543b8aa55a5b4aa87c9cd179703"
    )
    mega_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSWc611b97c5c4354059113fb8f17a26f2f"
    )
    pico_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSWb59bf21962f75857965df77a55549178"
    )
    kilo_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSW49e59ce46e35588193327425fa1d89ab"
    )
    micro_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSW771bd899c7045f84b282cc653efe6d28"
    )


class CurrentLinkage(QuantityValue):
    """
    "Current Linkage" is the net electric current through a surface delimited by a closed loop.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9c76ad47-f403-50a2-884c-90c49786ec6f",
            "title": "CurrentLinkage",
            "title*": {"en": "Current Linkage"},
            "description": '"Current Linkage" is the net electric current through a surface delimited by a closed loop.',
            "description*": {
                "en": '"Current Linkage" is the net electric current through a surface delimited by a closed loop.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCurrentLinkageValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9c76ad47f40350a2884c90c49786ec6f"]
    unit: Optional[CurrentLinkageUnit] = Field(
        CurrentLinkageUnit.ampere,
        options={"enum_titles": ["A", "mA", "MA", "pA", "kA", "μA"]},
        title="CurrentLinkageUnit",
        x_enum_varnames=[
            "ampere",
            "milli_ampere",
            "mega_ampere",
            "pico_ampere",
            "kilo_ampere",
            "micro_ampere",
        ],
    )


class AlphaDisintegrationEnergy(Energy):
    """
    The "Alpha Disintegration Energy" is the sum of the kinetic energy of the alpha-particle produced in the disintegration process and the recoil energy of the product atom in the reference frame in which the emitting nucleus is at rest before its disintegration.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "fe05b78a-868b-51be-8f9b-cc20d5778090",
            "title": "AlphaDisintegrationEnergy",
            "title*": {"en": "Alpha Disintegration Energy"},
            "description": 'The "Alpha Disintegration Energy" is the sum of the kinetic energy of the alpha-particle produced in the disintegration process and the recoil energy of the product atom in the reference frame in which the emitting nucleus is at rest before its disintegration.',
            "description*": {
                "en": 'The "Alpha Disintegration Energy" is the sum of the kinetic energy of the alpha-particle produced in the disintegration process and the recoil energy of the product atom in the reference frame in which the emitting nucleus is at rest before its disintegration.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAlphaDisintegrationEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfe05b78a868b51be8f9bcc20d5778090"]


class AngularDistance(Angle):
    """
    Angular distance travelled by orbiting vehicle measured from the azimuth of closest approach.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "95c5ca7c-d32d-588a-a490-d8bc28e9cbb8",
            "title": "AngularDistance",
            "title*": {"en": "Angular Distance"},
            "description": "Angular distance travelled by orbiting vehicle measured from the azimuth of closest approach.",
            "description*": {
                "en": "Angular distance travelled by orbiting vehicle measured from the azimuth of closest approach."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngularDistanceValue",
            "@context": [
                "/wiki/Category:OSW2339256af71e5635a541ac7f5a437141?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW95c5ca7cd32d588aa490d8bc28e9cbb8"]


class DebyeTemperature(Temperature):
    """
    "Debye Temperature" is the temperature at which the highest-frequency mode (and hence all modes) are excited.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "bb7902b2-0906-5fa5-8581-83c383ed4254",
            "title": "DebyeTemperature",
            "title*": {"en": "Debye Temperature"},
            "description": '"Debye Temperature" is the temperature at which the highest-frequency mode (and hence all modes) are excited.',
            "description*": {
                "en": '"Debye Temperature" is the temperature at which the highest-frequency mode (and hence all modes) are excited.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDebyeTemperatureValue",
            "@context": [
                "/wiki/Category:OSW20927e4900e95e93985698c92995f964?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWbb7902b209065fa5858183c383ed4254"]


class WebTimeAverageThrust(Thrust):
    """
    This is an autogenerated partial class definition of 'WebTimeAverageThrust'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "e5068aa8-fec2-52a2-803f-5ecf06a90cbb",
            "title": "WebTimeAverageThrust",
            "title*": {"en": "Web Time Average Thrust"},
            "description": "This is an autogenerated partial class definition of 'WebTimeAverageThrust'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasWebTimeAverageThrustValue",
            "@context": [
                "/wiki/Category:OSW7bf742d673495bb8bd77d1ea5295b2cd?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe5068aa8fec252a2803f5ecf06a90cbb"]


class ElectricFieldStrength(QuantityValue):
    """
    $\\textit{Electric Field Strength}$ is the magnitude and direction of an electric field, expressed by the value of $E$, also referred to as $\color{indigo} {\textit{electric field intensity}}$ or simply the electric field.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "c66c35bc-f6bd-5b08-a2e9-763d78a082cb",
            "title": "ElectricFieldStrength",
            "title*": {"en": "Electric field strength", "de": "Elektrische Feldstärke"},
            "description": "$\\textit{Electric Field Strength}$ is the magnitude and direction of an electric field, expressed by the value of $E$, also referred to as $\\color{indigo} {\\textit{electric field intensity}}$ or simply the electric field.",
            "description*": {
                "en": "$\\textit{Electric Field Strength}$ is the magnitude and direction of an electric field, expressed by the value of $E$, also referred to as $\\color{indigo} {\\textit{electric field intensity}}$ or simply the electric field."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricFieldStrengthValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc66c35bcf6bd5b08a2e9763d78a082cb"]
    unit: Optional[ElectricFieldStrengthUnit] = Field(
        ElectricFieldStrengthUnit.volt_per_meter,
        options={
            "enum_titles": ["V/m", "kV/m", "mV/m", "V/mm", "µV/m", "MV/m", "V/cm"]
        },
        title="ElectricFieldStrengthUnit",
        x_enum_varnames=[
            "volt_per_meter",
            "kilo_volt_per_meter",
            "milli_volt_per_meter",
            "volt_per_milli_meter",
            "micro_volt_per_meter",
            "mega_volt_per_meter",
            "volt_per_centi_meter",
        ],
    )


class ElectricPower(Power):
    """
    "Electric Power" is the rate at which electrical energy is transferred by an electric circuit. In the simple case of direct current circuits, electric power can be calculated as the product of the potential difference in the circuit (V) and the amount of current flowing in the circuit (I): $P = VI$, where $P$ is the power, $V$ is the potential difference, and $I$ is the current. However, in general electric power is calculated by taking the integral of the vector cross-product of the electrical and magnetic fields over a specified area.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "06164d3f-ebb9-5a42-add7-826696cc5387",
            "title": "ElectricPower",
            "title*": {"en": "Electric power", "de": "Wirkleistung"},
            "description": '"Electric Power" is the rate at which electrical energy is transferred by an electric circuit. In the simple case of direct current circuits, electric power can be calculated as the product of the potential difference in the circuit (V) and the amount of current flowing in the circuit (I): $P = VI$, where $P$ is the power, $V$ is the potential difference, and $I$ is the current. However, in general electric power is calculated by taking the integral of the vector cross-product of the electrical and magnetic fields over a specified area.',
            "description*": {
                "en": '"Electric Power" is the rate at which electrical energy is transferred by an electric circuit. In the simple case of direct current circuits, electric power can be calculated as the product of the potential difference in the circuit (V) and the amount of current flowing in the circuit (I): $P = VI$, where $P$ is the power, $V$ is the potential difference, and $I$ is the current. However, in general electric power is calculated by taking the integral of the vector cross-product of the electrical and magnetic fields over a specified area.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricPowerValue",
            "@context": [
                "/wiki/Category:OSWa819b53101b854ad923f9f13dfb41794?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW06164d3febb95a42add7826696cc5387"]


class PrincipalQuantumNumber(QuantumNumber):
    """
    The "Principal Quantum Number" describes the electron shell, or energy level, of an atom. The value of $n$ ranges from 1 to the shell containing the outermost electron of that atom.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "83c66986-8aad-5ac5-a74c-c377907c78d3",
            "title": "PrincipalQuantumNumber",
            "title*": {"en": "Principal Quantum Number"},
            "description": 'The "Principal Quantum Number" describes the electron shell, or energy level, of an atom. The value of $n$ ranges from 1 to the shell containing the outermost electron of that atom.',
            "description*": {
                "en": 'The "Principal Quantum Number" describes the electron shell, or energy level, of an atom. The value of $n$ ranges from 1 to the shell containing the outermost electron of that atom.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPrincipalQuantumNumberValue",
            "@context": [
                "/wiki/Category:OSWa35c06b30b7750c49dd53768ffd9e756?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW83c669868aad5ac5a74cc377907c78d3"]


class StaticFriction(Friction):
    """
    Static friction is friction between two or more solid objects that are not moving relative to each other. For example, static friction can prevent an object from sliding down a sloped surface.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "bae7311e-d444-5fb5-922b-5b8470ff235a",
            "title": "StaticFriction",
            "title*": {"en": "Static Friction"},
            "description": "Static friction is friction between two or more solid objects that are not moving relative to each other. For example, static friction can prevent an object from sliding down a sloped surface.",
            "description*": {
                "en": "Static friction is friction between two or more solid objects that are not moving relative to each other. For example, static friction can prevent an object from sliding down a sloped surface."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasStaticFrictionValue",
            "@context": [
                "/wiki/Category:OSW92473183e45854a8bd13de8f0aefff19?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWbae7311ed4445fb5922b5b8470ff235a"]


class NeonConductivityVarianceUnit(UnitEnum):
    micro_siemens_squared_per_centi_meter_squared = (
        "Item:OSW89e525be6d675802a9d695d2d6655505"
    )


class NeonConductivityVariance(QuantityValue):
    """
    Variance for NEON conductivity data measured in MicroS-PER-CM
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "2bd655ad-ef37-5aa0-a5e4-c1192efbb2e6",
            "title": "NeonConductivityVariance",
            "title*": {"en": "NEON Conductivity Variance"},
            "description": "Variance for NEON conductivity data measured in MicroS-PER-CM",
            "description*": {
                "en": "Variance for NEON conductivity data measured in MicroS-PER-CM"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasNeonConductivityVarianceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2bd655adef375aa0a5e4c1192efbb2e6"]
    unit: Optional[NeonConductivityVarianceUnit] = Field(
        NeonConductivityVarianceUnit.micro_siemens_squared_per_centi_meter_squared,
        options={"enum_titles": ["uS2/cm2"]},
        title="NeonConductivityVarianceUnit",
        x_enum_varnames=["micro_siemens_squared_per_centi_meter_squared"],
    )


class MassOfElectricalPowerSupply(Mass):
    """
    This is an autogenerated partial class definition of 'MassOfElectricalPowerSupply'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "dbbc6a4f-e070-57ac-8135-afb96caaf32d",
            "title": "MassOfElectricalPowerSupply",
            "title*": {"en": "Mass Of Electrical Power Supply"},
            "description": "This is an autogenerated partial class definition of 'MassOfElectricalPowerSupply'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassOfElectricalPowerSupplyValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWdbbc6a4fe07057ac8135afb96caaf32d"]


class ResidualResistivityUnit(UnitEnum):
    meter_ohm = "Item:OSW825f941d934e5a73866e39b6c42c99f0"


class ResidualResistivity(QuantityValue):
    """
    "Residual Resistivity" for metals, is the resistivity extrapolated to zero thermodynamic temperature.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "773f040f-505b-5893-8f7e-e54e1b7eb29f",
            "title": "ResidualResistivity",
            "title*": {"en": "Residual Resistivity"},
            "description": '"Residual Resistivity" for metals, is the resistivity extrapolated to zero thermodynamic temperature.',
            "description*": {
                "en": '"Residual Resistivity" for metals, is the resistivity extrapolated to zero thermodynamic temperature.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasResidualResistivityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW773f040f505b58938f7ee54e1b7eb29f"]
    unit: Optional[ResidualResistivityUnit] = Field(
        ResidualResistivityUnit.meter_ohm,
        options={"enum_titles": ["Ω·m"]},
        title="ResidualResistivityUnit",
        x_enum_varnames=["meter_ohm"],
    )


class SoundParticleAcceleration(Acceleration):
    """
    In a compressible sound transmission medium - mainly air - air particles get an accelerated motion: the particle acceleration or sound acceleration with the symbol a in $m/s2$. In acoustics or physics, acceleration (symbol: $a$) is defined as the rate of change (or time derivative) of velocity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "f360ae36-8617-543f-aa1e-4b2205078443",
            "title": "SoundParticleAcceleration",
            "title*": {"en": "Sound particle acceleration"},
            "description": "In a compressible sound transmission medium - mainly air - air particles get an accelerated motion: the particle acceleration or sound acceleration with the symbol a in $m/s2$. In acoustics or physics, acceleration (symbol: $a$) is defined as the rate of change (or time derivative) of velocity.",
            "description*": {
                "en": "In a compressible sound transmission medium - mainly air - air particles get an accelerated motion: the particle acceleration or sound acceleration with the symbol a in $m/s2$. In acoustics or physics, acceleration (symbol: $a$) is defined as the rate of change (or time derivative) of velocity."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSoundParticleAccelerationValue",
            "@context": [
                "/wiki/Category:OSW347462e67d905995af16f97dc7c9ef48?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf360ae368617543faa1e4b2205078443"]


class AngularFrequency(QuantityValue):
    """
    "Angular frequency", symbol $\omega$ (also referred to by the terms angular speed, radial frequency, circular frequency, orbital frequency, radian frequency, and pulsatance) is a scalar measure of rotation rate. Angular frequency (or angular speed) is the magnitude of the vector quantity angular velocity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9534c898-b7d4-5510-adfa-6673507a4e10",
            "title": "AngularFrequency",
            "title*": {"en": "Angular frequency", "de": "Kreisfrequenz"},
            "description": '"Angular frequency", symbol $\\omega$ (also referred to by the terms angular speed, radial frequency, circular frequency, orbital frequency, radian frequency, and pulsatance) is a scalar measure of rotation rate. Angular frequency (or angular speed) is the magnitude of the vector quantity angular velocity.',
            "description*": {
                "en": '"Angular frequency", symbol $\\omega$ (also referred to by the terms angular speed, radial frequency, circular frequency, orbital frequency, radian frequency, and pulsatance) is a scalar measure of rotation rate. Angular frequency (or angular speed) is the magnitude of the vector quantity angular velocity.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngularFrequencyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9534c898b7d45510adfa6673507a4e10"]
    unit: Optional[AngularFrequencyUnit] = Field(
        AngularFrequencyUnit.radian_per_second,
        options={"enum_titles": ["rad/s"]},
        title="AngularFrequencyUnit",
        x_enum_varnames=["radian_per_second"],
    )


class CompressibilityFactor(DimensionlessRatio):
    """
    The compressibility factor ($Z$) is a useful thermodynamic property for modifying the ideal gas law to account for the real gas behaviour. The closer a gas is to a phase change, the larger the deviations from ideal behavior. It is simply defined as the ratio of the molar volume of a gas to the molar volume of an ideal gas at the same temperature and pressure. Values for compressibility are calculated using equations of state (EOS), such as the virial equation and van der Waals equation. The compressibility factor for specific gases can be obtained, with out calculation, from compressibility charts. These charts are created by plotting Z as a function of pressure at constant temperature.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "818055ce-036f-5845-a326-d24ddba849eb",
            "title": "CompressibilityFactor",
            "title*": {"en": "Compressibility Factor"},
            "description": "The compressibility factor ($Z$) is a useful thermodynamic property for modifying the ideal gas law to account for the real gas behaviour. The closer a gas is to a phase change, the larger the deviations from ideal behavior. It is simply defined as the ratio of the molar volume of a gas to the molar volume of an ideal gas at the same temperature and pressure. Values for compressibility are calculated using equations of state (EOS), such as the virial equation and van der Waals equation. The compressibility factor for specific gases can be obtained, with out calculation, from compressibility charts. These charts are created by plotting Z as a function of pressure at constant temperature.",
            "description*": {
                "en": "The compressibility factor ($Z$) is a useful thermodynamic property for modifying the ideal gas law to account for the real gas behaviour. The closer a gas is to a phase change, the larger the deviations from ideal behavior. It is simply defined as the ratio of the molar volume of a gas to the molar volume of an ideal gas at the same temperature and pressure. Values for compressibility are calculated using equations of state (EOS), such as the virial equation and van der Waals equation. The compressibility factor for specific gases can be obtained, with out calculation, from compressibility charts. These charts are created by plotting Z as a function of pressure at constant temperature."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCompressibilityFactorValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW818055ce036f5845a326d24ddba849eb"]


class PolarisabilityUnit(UnitEnum):
    coulomb_meter_squared_per_volt = "Item:OSWd5e480234d635c7e8c93bbd6c99e521a"


class Polarisability(QuantityValue):
    """
    Maß für die Deformierbarkeit der Elektronenhülle von Molekülen und Atomen
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "428688cf-d142-56ef-9997-65241fd57f9e",
            "title": "Polarisability",
            "title*": {"en": "Polarisability"},
            "description": "Maß für die Deformierbarkeit der Elektronenhülle von Molekülen und Atomen",
            "description*": {
                "en": "Maß für die Deformierbarkeit der Elektronenhülle von Molekülen und Atomen"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPolarisabilityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW428688cfd14256ef999765241fd57f9e"]
    unit: Optional[PolarisabilityUnit] = Field(
        PolarisabilityUnit.coulomb_meter_squared_per_volt,
        options={"enum_titles": ["C·m²/V"]},
        title="PolarisabilityUnit",
        x_enum_varnames=["coulomb_meter_squared_per_volt"],
    )


class ElectricDipoleMomentUnit(UnitEnum):
    coulomb_meter = "Item:OSW1daae0d7c4d35d3e8a523ce4f9c64970"


class ElectricDipoleMoment(QuantityValue):
    """
    "Electric Dipole Moment" is a measure of the separation of positive and negative electrical charges in a system of (discrete or continuous) charges. It is a vector-valued quantity. If the system of charges is neutral, that is if the sum of all charges is zero, then the dipole moment of the system is independent of the choice of a reference frame; however in a non-neutral system, such as the dipole moment of a single proton, a dependence on the choice of reference point arises. In such cases it is conventional to choose the reference point to be the center of mass of the system or the center of charge, not some arbitrary origin. This convention ensures that the dipole moment is an intrinsic property of the system. The electric dipole moment of a substance within a domain is the vector sum of electric dipole moments of all electric dipoles included in the domain.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "e21f6c5e-4c5e-5b5b-9f86-920aec0eaae7",
            "title": "ElectricDipoleMoment",
            "title*": {
                "en": "Electric dipole moment",
                "de": "Elektrisches Dipolmoment",
            },
            "description": '"Electric Dipole Moment" is a measure of the separation of positive and negative electrical charges in a system of (discrete or continuous) charges. It is a vector-valued quantity. If the system of charges is neutral, that is if the sum of all charges is zero, then the dipole moment of the system is independent of the choice of a reference frame; however in a non-neutral system, such as the dipole moment of a single proton, a dependence on the choice of reference point arises. In such cases it is conventional to choose the reference point to be the center of mass of the system or the center of charge, not some arbitrary origin. This convention ensures that the dipole moment is an intrinsic property of the system. The electric dipole moment of a substance within a domain is the vector sum of electric dipole moments of all electric dipoles included in the domain.',
            "description*": {
                "en": '"Electric Dipole Moment" is a measure of the separation of positive and negative electrical charges in a system of (discrete or continuous) charges. It is a vector-valued quantity. If the system of charges is neutral, that is if the sum of all charges is zero, then the dipole moment of the system is independent of the choice of a reference frame; however in a non-neutral system, such as the dipole moment of a single proton, a dependence on the choice of reference point arises. In such cases it is conventional to choose the reference point to be the center of mass of the system or the center of charge, not some arbitrary origin. This convention ensures that the dipole moment is an intrinsic property of the system. The electric dipole moment of a substance within a domain is the vector sum of electric dipole moments of all electric dipoles included in the domain.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricDipoleMomentValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe21f6c5e4c5e5b5b9f86920aec0eaae7"]
    unit: Optional[ElectricDipoleMomentUnit] = Field(
        ElectricDipoleMomentUnit.coulomb_meter,
        options={"enum_titles": ["C·m"]},
        title="ElectricDipoleMomentUnit",
        x_enum_varnames=["coulomb_meter"],
    )


class DiffusionArea(Area):
    """
    "Diffusion Area" in an infinite homogenous medium, is one-sixth of the mean square distance between the point where a neutron enters a specified class and the point where it leaves that class.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0b80c1b7-5624-573d-acff-39addc27fd98",
            "title": "DiffusionArea",
            "title*": {"en": "Diffusion Area"},
            "description": '"Diffusion Area" in an infinite homogenous medium, is one-sixth of the mean square distance between the point where a neutron enters a specified class and the point where it leaves that class.',
            "description*": {
                "en": '"Diffusion Area" in an infinite homogenous medium, is one-sixth of the mean square distance between the point where a neutron enters a specified class and the point where it leaves that class.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDiffusionAreaValue",
            "@context": [
                "/wiki/Category:OSW1fcf1694712e5684885071efdf775bd9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0b80c1b75624573dacff39addc27fd98"]


class SpecificImpulseByWeightUnit(UnitEnum):
    second = "Item:OSW85302b21cf045998b80f38c9fdb88f84"
    nano_second = (
        "Item:OSW85302b21cf045998b80f38c9fdb88f84#OSW14e2efd7a4a05306a74663592edb23e8"
    )
    micro_second = (
        "Item:OSW85302b21cf045998b80f38c9fdb88f84#OSW90ff22cff2dd5d8ba6de84bf9a70c50c"
    )
    pico_second = (
        "Item:OSW85302b21cf045998b80f38c9fdb88f84#OSWc6f2918cbdef5bde8d00cf86938c7f8e"
    )
    atto_second = (
        "Item:OSW85302b21cf045998b80f38c9fdb88f84#OSW2e4fec0373f45f1891403f06e433c5eb"
    )
    kilo_second = (
        "Item:OSW85302b21cf045998b80f38c9fdb88f84#OSWbc38445f00d056069fef04f8e25c66f6"
    )
    deci_second = (
        "Item:OSW85302b21cf045998b80f38c9fdb88f84#OSW78488a0c8e885365beff30aae10a4efd"
    )
    femto_second = (
        "Item:OSW85302b21cf045998b80f38c9fdb88f84#OSWd1e24421c83d5defb5c22e9a5fe490fb"
    )
    milli_second = (
        "Item:OSW85302b21cf045998b80f38c9fdb88f84#OSW84d4f530814e5251b06e73ee0184e32b"
    )


class SpecificImpulseByWeight(QuantityValue):
    """
    This is an autogenerated partial class definition of 'SpecificImpulseByWeight'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "48d80990-2b44-5a6c-a8ec-ae9e3fdfbcf0",
            "title": "SpecificImpulseByWeight",
            "title*": {"en": "Specific Impulse by Weight"},
            "description": "This is an autogenerated partial class definition of 'SpecificImpulseByWeight'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificImpulseByWeightValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW48d809902b445a6ca8ecae9e3fdfbcf0"]
    unit: Optional[SpecificImpulseByWeightUnit] = Field(
        SpecificImpulseByWeightUnit.second,
        options={"enum_titles": ["s", "ns", "µs", "ps", "as", "ks", "ds", "fs", "ms"]},
        title="SpecificImpulseByWeightUnit",
        x_enum_varnames=[
            "second",
            "nano_second",
            "micro_second",
            "pico_second",
            "atto_second",
            "kilo_second",
            "deci_second",
            "femto_second",
            "milli_second",
        ],
    )


class ElectricChargeVolumeDensityUnit(UnitEnum):
    coulomb_per_meter_cubed = "Item:OSW138cfd775f5f5791acb676b2e30a858b"
    mega_coulomb_per_meter_cubed = (
        "Item:OSW138cfd775f5f5791acb676b2e30a858b#OSW78239b85b3255c27b70c82b5d719f312"
    )
    kilo_coulomb_per_meter_cubed = (
        "Item:OSW138cfd775f5f5791acb676b2e30a858b#OSWabb39bf77e53590aafd85088c14233eb"
    )
    coulomb_per_milli_meter_cubed = (
        "Item:OSW138cfd775f5f5791acb676b2e30a858b#OSW6684ece78b035280a9997fd7e0946a64"
    )
    milli_coulomb_per_meter_cubed = (
        "Item:OSW138cfd775f5f5791acb676b2e30a858b#OSW0cf667e041bf5c70ad88948e99591fa7"
    )
    micro_coulomb_per_meter_cubed = (
        "Item:OSW138cfd775f5f5791acb676b2e30a858b#OSW7ff981494feb573893427df6c288c2c1"
    )
    giga_coulomb_per_meter_cubed = (
        "Item:OSW138cfd775f5f5791acb676b2e30a858b#OSWa2ef417cc76554ccbc1e21d3399b1d0f"
    )
    coulomb_per_centi_meter_cubed = (
        "Item:OSW138cfd775f5f5791acb676b2e30a858b#OSWf658e9170de757b99c1b492865347a7e"
    )


class ElectricChargeVolumeDensity(QuantityValue):
    """
    In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively. The respective SI units are $C \cdot m^{-1}$, $C \cdot m^{-2}$ or $C \cdot m^{-3}$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "ef9be82e-8329-5e35-a630-f2703fd7595d",
            "title": "ElectricChargeVolumeDensity",
            "title*": {"en": "Electric Charge Volume Density"},
            "description": "In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively. The respective SI units are $C \\cdot m^{-1}$, $C \\cdot m^{-2}$ or $C \\cdot m^{-3}$.",
            "description*": {
                "en": "In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively. The respective SI units are $C \\cdot m^{-1}$, $C \\cdot m^{-2}$ or $C \\cdot m^{-3}$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricChargeVolumeDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWef9be82e83295e35a630f2703fd7595d"]
    unit: Optional[ElectricChargeVolumeDensityUnit] = Field(
        ElectricChargeVolumeDensityUnit.coulomb_per_meter_cubed,
        options={
            "enum_titles": [
                "C/m³",
                "MC/m³",
                "kC/m³",
                "C/mm³",
                "mC/m³",
                "μC/m³",
                "GC/m³",
                "C/cm³",
            ]
        },
        title="ElectricChargeVolumeDensityUnit",
        x_enum_varnames=[
            "coulomb_per_meter_cubed",
            "mega_coulomb_per_meter_cubed",
            "kilo_coulomb_per_meter_cubed",
            "coulomb_per_milli_meter_cubed",
            "milli_coulomb_per_meter_cubed",
            "micro_coulomb_per_meter_cubed",
            "giga_coulomb_per_meter_cubed",
            "coulomb_per_centi_meter_cubed",
        ],
    )


class VolumetricHeatCapacityUnit(UnitEnum):
    joule_per_kelvin_per_meter_cubed = "Item:OSW4db6d50e4e4e5d9dbd549d706e3f6c44"
    joule_per_centi_meter_cubed_per_kelvin = (
        "Item:OSW4db6d50e4e4e5d9dbd549d706e3f6c44#OSW831c2e0119cd5e46a75afc834fffaf7d"
    )


class VolumetricHeatCapacity(QuantityValue):
    """
    $\\textit{Volumetric Heat Capacity (VHC)}$, also termed $\\textit{volume-specific heat capacity}$, describes the ability of a given volume of a substance to store internal energy while undergoing a given temperature change, but without undergoing a phase transition. It is different from specific heat capacity in that the VHC is a $\\textit{per unit volume}$ measure of the relationship between thermal energy and temperature of a material, while the specific heat is a $\\textit{per unit mass}$ measure (or occasionally per molar quantity of the material).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9eb93142-6c78-5245-bf64-c1fe1dce25c8",
            "title": "VolumetricHeatCapacity",
            "title*": {"en": "Volumetric Heat Capacity"},
            "description": "$\\textit{Volumetric Heat Capacity (VHC)}$, also termed $\\textit{volume-specific heat capacity}$, describes the ability of a given volume of a substance to store internal energy while undergoing a given temperature change, but without undergoing a phase transition. It is different from specific heat capacity in that the VHC is a $\\textit{per unit volume}$ measure of the relationship between thermal energy and temperature of a material, while the specific heat is a $\\textit{per unit mass}$ measure (or occasionally per molar quantity of the material).",
            "description*": {
                "en": "$\\textit{Volumetric Heat Capacity (VHC)}$, also termed $\\textit{volume-specific heat capacity}$, describes the ability of a given volume of a substance to store internal energy while undergoing a given temperature change, but without undergoing a phase transition. It is different from specific heat capacity in that the VHC is a $\\textit{per unit volume}$ measure of the relationship between thermal energy and temperature of a material, while the specific heat is a $\\textit{per unit mass}$ measure (or occasionally per molar quantity of the material)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVolumetricHeatCapacityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9eb931426c785245bf64c1fe1dce25c8"]
    unit: Optional[VolumetricHeatCapacityUnit] = Field(
        VolumetricHeatCapacityUnit.joule_per_kelvin_per_meter_cubed,
        options={"enum_titles": ["J/(m³·K)", "J/(cm³·K)"]},
        title="VolumetricHeatCapacityUnit",
        x_enum_varnames=[
            "joule_per_kelvin_per_meter_cubed",
            "joule_per_centi_meter_cubed_per_kelvin",
        ],
    )


class KineticEnergy(Energy):
    """
    $\\textit{Kinetic Energy}$ is the energy which a body possesses as a consequence of its motion, defined as one-half the product of its mass $m$ and the square of its speed $v$, $ \frac{1}{2} mv^{2} $. The kinetic energy per unit volume of a fluid parcel is the $ \frac{1}{2}  p v^{2}$ , where $p$ is the density and $v$ the speed of the parcel. See potential energy. For relativistic speeds the kinetic energy is given by $E_k = mc^2 - m_0 c^2$, where $c$ is the velocity of light in a vacuum, $m_0$ is the rest mass, and $m$ is the moving mass.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3d68ad15-ab04-5622-8c94-8d35e26b9dfd",
            "title": "KineticEnergy",
            "title*": {"en": "Kinetic Energy"},
            "description": "$\\textit{Kinetic Energy}$ is the energy which a body possesses as a consequence of its motion, defined as one-half the product of its mass $m$ and the square of its speed $v$, $ \\frac{1}{2} mv^{2} $. The kinetic energy per unit volume of a fluid parcel is the $ \\frac{1}{2}  p v^{2}$ , where $p$ is the density and $v$ the speed of the parcel. See potential energy. For relativistic speeds the kinetic energy is given by $E_k = mc^2 - m_0 c^2$, where $c$ is the velocity of light in a vacuum, $m_0$ is the rest mass, and $m$ is the moving mass.",
            "description*": {
                "en": "$\\textit{Kinetic Energy}$ is the energy which a body possesses as a consequence of its motion, defined as one-half the product of its mass $m$ and the square of its speed $v$, $ \\frac{1}{2} mv^{2} $. The kinetic energy per unit volume of a fluid parcel is the $ \\frac{1}{2}  p v^{2}$ , where $p$ is the density and $v$ the speed of the parcel. See potential energy. For relativistic speeds the kinetic energy is given by $E_k = mc^2 - m_0 c^2$, where $c$ is the velocity of light in a vacuum, $m_0$ is the rest mass, and $m$ is the moving mass."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasKineticEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3d68ad15ab0456228c948d35e26b9dfd"]


class MolarInternalEnergy(MolarEnergy):
    """
    This is an autogenerated partial class definition of 'MolarInternalEnergy'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "cd40c1d8-5109-521d-a9cb-3b34f13e2671",
            "title": "MolarInternalEnergy",
            "title*": {"en": "Molar internal energy"},
            "description": "This is an autogenerated partial class definition of 'MolarInternalEnergy'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarInternalEnergyValue",
            "@context": [
                "/wiki/Category:OSW21ec5968e3c2533d98f20564838541fa?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcd40c1d85109521da9cb3b34f13e2671"]


class MassicActivity(QuantityValue):
    """
    "Massic Activity" is the activity divided by the total mass of the sample.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9cb88f0c-3394-51c5-9ecf-9587128ee4b5",
            "title": "MassicActivity",
            "title*": {"en": "Massic Activity"},
            "description": '"Massic Activity" is the activity divided by the total mass of the sample.',
            "description*": {
                "en": '"Massic Activity" is the activity divided by the total mass of the sample.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassicActivityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9cb88f0c339451c59ecf9587128ee4b5"]
    unit: Optional[MassicActivityUnit] = Field(
        MassicActivityUnit.becquerel_per_kilo_gram,
        options={"enum_titles": ["Bq/kg", "mBq/kg", "μBq/kg"]},
        title="MassicActivityUnit",
        x_enum_varnames=[
            "becquerel_per_kilo_gram",
            "milli_becquerel_per_kilo_gram",
            "micro_becquerel_per_kilo_gram",
        ],
    )


class ThomsonCoefficientUnit(UnitEnum):
    volt_per_kelvin = "Item:OSW8998763d58065a069429e7e6fe3c153a"


class ThomsonCoefficient(QuantityValue):
    """
    "Thomson Coefficient" represents Thomson heat power developed, divided by the electric current and the temperature difference.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "c56f5d63-f59d-527e-9a10-5d4c7edda71e",
            "title": "ThomsonCoefficient",
            "title*": {"en": "Thomson Coefficient"},
            "description": '"Thomson Coefficient" represents Thomson heat power developed, divided by the electric current and the temperature difference.',
            "description*": {
                "en": '"Thomson Coefficient" represents Thomson heat power developed, divided by the electric current and the temperature difference.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThomsonCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc56f5d63f59d527e9a105d4c7edda71e"]
    unit: Optional[ThomsonCoefficientUnit] = Field(
        ThomsonCoefficientUnit.volt_per_kelvin,
        options={"enum_titles": ["V/K"]},
        title="ThomsonCoefficientUnit",
        x_enum_varnames=["volt_per_kelvin"],
    )


class StateOfCharge(DimensionlessRatio):
    """
    ""State of Charge",quantifies the remaining capacity available in a battery at a given time and in relation to a given state of ageing.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "d443875d-fab1-594b-91b2-07cd59e9e0fa",
            "title": "StateOfCharge",
            "title*": {"en": "State of charge"},
            "description": '""State of Charge",quantifies the remaining capacity available in a battery at a given time and in relation to a given state of ageing.',
            "description*": {
                "en": '""State of Charge",quantifies the remaining capacity available in a battery at a given time and in relation to a given state of ageing.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasStateOfChargeValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd443875dfab1594b91b207cd59e9e0fa"]


class SurfaceCoefficientOfHeatTransferUnit(UnitEnum):
    watt_per_kelvin_per_meter_squared = "Item:OSWdc31cad7e9225defbc08f6f79bf5c4ea"


class SurfaceCoefficientOfHeatTransfer(QuantityValue):
    """
    This is an autogenerated partial class definition of 'SurfaceCoefficientOfHeatTransfer'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "7423002c-2fd4-5809-bfc0-c4879b7d6f9c",
            "title": "SurfaceCoefficientOfHeatTransfer",
            "title*": {"en": "Surface Coefficient of Heat Transfer"},
            "description": "This is an autogenerated partial class definition of 'SurfaceCoefficientOfHeatTransfer'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSurfaceCoefficientOfHeatTransferValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7423002c2fd45809bfc0c4879b7d6f9c"]
    unit: Optional[SurfaceCoefficientOfHeatTransferUnit] = Field(
        SurfaceCoefficientOfHeatTransferUnit.watt_per_kelvin_per_meter_squared,
        options={"enum_titles": ["W/(m²·K)"]},
        title="SurfaceCoefficientOfHeatTransferUnit",
        x_enum_varnames=["watt_per_kelvin_per_meter_squared"],
    )


class AngularImpulseUnit(UnitEnum):
    joule_second = "Item:OSWf045a04750e15ea2b152fb3bfebf162a"
    atto_joule_second = (
        "Item:OSWf045a04750e15ea2b152fb3bfebf162a#OSW3eaa66dd20f856fe9a5c4199bc0a1ea4"
    )


class AngularImpulse(QuantityValue):
    """
    The Angular Impulse, also known as angular momentum, is the moment of linear momentum around a point. It is defined as$H = \int Mdt$, where $M$ is the moment of force and $t$ is time.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "140347dd-94e6-593a-aea4-daf9a1264a0a",
            "title": "AngularImpulse",
            "title*": {"en": "Angular impulse", "de": "Drehstoß"},
            "description": "The Angular Impulse, also known as angular momentum, is the moment of linear momentum around a point. It is defined as$H = \\int Mdt$, where $M$ is the moment of force and $t$ is time.",
            "description*": {
                "en": "The Angular Impulse, also known as angular momentum, is the moment of linear momentum around a point. It is defined as$H = \\int Mdt$, where $M$ is the moment of force and $t$ is time."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngularImpulseValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW140347dd94e6593aaea4daf9a1264a0a"]
    unit: Optional[AngularImpulseUnit] = Field(
        AngularImpulseUnit.joule_second,
        options={"enum_titles": ["J·s", "aJ·s"]},
        title="AngularImpulseUnit",
        x_enum_varnames=["joule_second", "atto_joule_second"],
    )


class RadiantEnergy(Energy):
    """
    In radiometry,"Radiant Energy} is the energy of electromagnetic waves. The quantity of radiant energy may be calculated by integrating radiant flux (or power) with respect to time.  In nuclear physics, $\\textit{Radiant Energy" is energy, excluding rest energy, of the particles that are emitted, transferred, or received.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "f27fad2a-3c15-5c80-a219-65b7ddc00016",
            "title": "RadiantEnergy",
            "title*": {"en": "Radiant energy", "de": "Strahlungsenergie"},
            "description": 'In radiometry,"Radiant Energy} is the energy of electromagnetic waves. The quantity of radiant energy may be calculated by integrating radiant flux (or power) with respect to time.  In nuclear physics, $\\textit{Radiant Energy" is energy, excluding rest energy, of the particles that are emitted, transferred, or received.',
            "description*": {
                "en": 'In radiometry,"Radiant Energy} is the energy of electromagnetic waves. The quantity of radiant energy may be calculated by integrating radiant flux (or power) with respect to time.  In nuclear physics, $\\textit{Radiant Energy" is energy, excluding rest energy, of the particles that are emitted, transferred, or received.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRadiantEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf27fad2a3c155c80a21965b7ddc00016"]


class CharacteristicNumber(Dimensionless):
    """
    Größe der Dimension 1 (als Ergebnis der metrisierenden Messtheorie), die Sachverhalte, Zustände oder Entwicklungen verdeutlicht und als Maßstab dient, um z. B. Ursache und Wirkung von Vorgängen in kausalem Zusammenhang darzustellen
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "56555874-6452-5ab5-9c9d-0f03d982c365",
            "title": "CharacteristicNumber",
            "title*": {"en": "Characteristic number"},
            "description": "Größe der Dimension 1 (als Ergebnis der metrisierenden Messtheorie), die Sachverhalte, Zustände oder Entwicklungen verdeutlicht und als Maßstab dient, um z. B. Ursache und Wirkung von Vorgängen in kausalem Zusammenhang darzustellen",
            "description*": {
                "en": "Größe der Dimension 1 (als Ergebnis der metrisierenden Messtheorie), die Sachverhalte, Zustände oder Entwicklungen verdeutlicht und als Maßstab dient, um z. B. Ursache und Wirkung von Vorgängen in kausalem Zusammenhang darzustellen"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCharacteristicNumberValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW5655587464525ab59c9d0f03d982c365"]


class SpeedRatio(DimensionlessRatio):
    """
    Speed ratio generally refers to the ratio of the rotational speeds of two interconnected rotating components, but it sometimes relates linear speeds.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "db19a2fd-40ed-5dc9-a322-98deac1650e3",
            "title": "SpeedRatio",
            "title*": {"en": "Speed Ratio"},
            "description": "Speed ratio generally refers to the ratio of the rotational speeds of two interconnected rotating components, but it sometimes relates linear speeds.",
            "description*": {
                "en": "Speed ratio generally refers to the ratio of the rotational speeds of two interconnected rotating components, but it sometimes relates linear speeds."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpeedRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWdb19a2fd40ed5dc9a32298deac1650e3"]


class LinearElectricCurrent(LinearElectricCurrentDensity):
    """
    "Linear Electric Linear Current" is the electric current per unit line.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "53042a34-f31b-52b8-a499-26a2368d0e12",
            "title": "LinearElectricCurrent",
            "title*": {"en": "Linear Electric Current"},
            "description": '"Linear Electric Linear Current" is the electric current per unit line.',
            "description*": {
                "en": '"Linear Electric Linear Current" is the electric current per unit line.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLinearElectricCurrentValue",
            "@context": [
                "/wiki/Category:OSW6ce762ef103d5b15976dcfa13914bef4?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW53042a34f31b52b8a49926a2368d0e12"]


class Magnetization(LinearElectricCurrent):
    """
    "Magnetization" is defined as the ratio of magnetic moment per unit volume. It is a vector-valued quantity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "6657e0d5-f552-5ae2-b465-f952260b5c3e",
            "title": "Magnetization",
            "title*": {"en": "Magnetization", "de": "Magnetisierung"},
            "description": '"Magnetization" is defined as the ratio of magnetic moment per unit volume. It is a vector-valued quantity.',
            "description*": {
                "en": '"Magnetization" is defined as the ratio of magnetic moment per unit volume. It is a vector-valued quantity.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMagnetizationValue",
            "@context": [
                "/wiki/Category:OSW53042a34f31b52b8a49926a2368d0e12?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6657e0d5f5525ae2b465f952260b5c3e"]


class ExchangeIntegralUnit(UnitEnum):
    joule = "Item:OSW730568cd7ae65906abbbcef1d15cb074"
    atto_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSWa73c696efa58519aa07c265ea965ceda"
    )
    kilo_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSWad2518d42b685f569679c3599455c3d3"
    )
    peta_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW4e7003f5d7ff58a190167711dd63b0bd"
    )
    milli_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW6df751011258508e9d15967190c819f3"
    )
    giga_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSWc26bf1cf449d56ef8122745336585d2b"
    )
    femto_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW2d5cdc08b064506e8f9a5b0456b7a0b3"
    )
    exa_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW5ba80670b2945c08b35551442d3169d5"
    )
    tera_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSW0ac3643d930d5c99936e5ece487a9634"
    )
    mega_joule = (
        "Item:OSW730568cd7ae65906abbbcef1d15cb074#OSWc1525b1f1fc05c40b9715328bf707805"
    )


class ExchangeIntegral(QuantityValue):
    """
    "Exchange Integral" is the constituent of the interaction energy between the spins of adjacent electrons in matter arising from the overlap of electron state functions.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "e45b76ea-9ca8-5972-997b-6808b31b3b92",
            "title": "ExchangeIntegral",
            "title*": {"en": "Exchange Integral"},
            "description": '"Exchange Integral" is the constituent of the interaction energy between the spins of adjacent electrons in matter arising from the overlap of electron state functions.',
            "description*": {
                "en": '"Exchange Integral" is the constituent of the interaction energy between the spins of adjacent electrons in matter arising from the overlap of electron state functions.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasExchangeIntegralValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe45b76ea9ca85972997b6808b31b3b92"]
    unit: Optional[ExchangeIntegralUnit] = Field(
        ExchangeIntegralUnit.joule,
        options={
            "enum_titles": ["J", "aJ", "kJ", "PJ", "mJ", "GJ", "fJ", "EJ", "TJ", "MJ"]
        },
        title="ExchangeIntegralUnit",
        x_enum_varnames=[
            "joule",
            "atto_joule",
            "kilo_joule",
            "peta_joule",
            "milli_joule",
            "giga_joule",
            "femto_joule",
            "exa_joule",
            "tera_joule",
            "mega_joule",
        ],
    )


class AreaPerHeatingLoadUnit(UnitEnum):
    meter_squared_per_watt = "Item:OSWe1310c5fc4e65dc68ddc749604c7d758"
    meter_squared_per_kilo_watt = (
        "Item:OSWe1310c5fc4e65dc68ddc749604c7d758#OSW1e8006cf834952ab86733cd87ed7be1c"
    )


class AreaPerHeatingLoad(QuantityValue):
    """
    The ratio of an area and the power required for maintaining room temperature at a given level
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4d26c25a-bed1-595e-bf6f-aebbb937aa29",
            "title": "AreaPerHeatingLoad",
            "title*": {"en": "Area per heating load", "de": "Fläche pro Heizlast"},
            "description": "The ratio of an area and the power required for maintaining room temperature at a given level",
            "description*": {
                "en": "The ratio of an area and the power required for maintaining room temperature at a given level"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAreaPerHeatingLoadValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4d26c25abed1595ebf6faebbb937aa29"]
    unit: Optional[AreaPerHeatingLoadUnit] = Field(
        AreaPerHeatingLoadUnit.meter_squared_per_watt,
        options={"enum_titles": ["m²/W", "m²/kW"]},
        title="AreaPerHeatingLoadUnit",
        x_enum_varnames=["meter_squared_per_watt", "meter_squared_per_kilo_watt"],
    )


class NozzleThroatCrossSectionalArea(Area):
    """
    Cross-sectional area of the nozzle at the throat.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "d827a75e-0225-570e-a3a1-ac154234dad2",
            "title": "NozzleThroatCrossSectionalArea",
            "title*": {"en": "Nozzle Throat Cross-sectional Area"},
            "description": "Cross-sectional area of the nozzle at the throat.",
            "description*": {"en": "Cross-sectional area of the nozzle at the throat."},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasNozzleThroatCrossSectionalAreaValue",
            "@context": [
                "/wiki/Category:OSW1fcf1694712e5684885071efdf775bd9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd827a75e0225570ea3a1ac154234dad2"]


class ActivityConcentrationUnit(UnitEnum):
    becquerel_per_meter_cubed = "Item:OSWd3720cbbb37c5c1698a8570b837b5af9"


class ActivityConcentration(QuantityValue):
    """
    The "Activity Concentration", also known as volume activity, and activity density, is .
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "815fd908-9afe-56a9-9cdf-0e0ca0c04543",
            "title": "ActivityConcentration",
            "title*": {"en": "Activity Concentration"},
            "description": 'The "Activity Concentration", also known as volume activity, and activity density, is .',
            "description*": {
                "en": 'The "Activity Concentration", also known as volume activity, and activity density, is .'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasActivityConcentrationValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW815fd9089afe56a99cdf0e0ca0c04543"]
    unit: Optional[ActivityConcentrationUnit] = Field(
        ActivityConcentrationUnit.becquerel_per_meter_cubed,
        options={"enum_titles": ["Bq/m³"]},
        title="ActivityConcentrationUnit",
        x_enum_varnames=["becquerel_per_meter_cubed"],
    )


class ComplexPower(ElectricPower):
    """
    $\\textit{Complex Power}$, under sinusoidal conditions,
       is the product of the phasor $\mathbf{U}$ representing the voltage between the terminals of a linear two-terminal element,
       or two-terminal circuit and the complex conjugate of the phasor $I$ representing the electric current in the element or circuit.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2e156bd3-451d-56e9-aa27-d9604de376f1",
            "title": "ComplexPower",
            "title*": {"en": "Complex Power"},
            "description": "$\\textit{Complex Power}$, under sinusoidal conditions,\n   is the product of the phasor $\\mathbf{U}$ representing the voltage between the terminals of a linear two-terminal element,\n   or two-terminal circuit and the complex conjugate of the phasor $I$ representing the electric current in the element or circuit.",
            "description*": {
                "en": "$\\textit{Complex Power}$, under sinusoidal conditions,\n   is the product of the phasor $\\mathbf{U}$ representing the voltage between the terminals of a linear two-terminal element,\n   or two-terminal circuit and the complex conjugate of the phasor $I$ representing the electric current in the element or circuit."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasComplexPowerValue",
            "@context": [
                "/wiki/Category:OSW06164d3febb95a42add7826696cc5387?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2e156bd3451d56e9aa27d9604de376f1"]


class SpecificOpticalRotatoryPowerUnit(UnitEnum):
    meter_squared_radian_per_kilo_gram = "Item:OSW555ce8e01951566b8507f419b1987b04"


class SpecificOpticalRotatoryPower(QuantityValue):
    """
    The "Specific Optical Rotatory Power" Angle of optical rotation divided by the optical path length through the medium and by the mass concentration of the substance giving the specific optical rotatory power.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "77e8f77c-e04f-54e9-a4f3-d616427252b6",
            "title": "SpecificOpticalRotatoryPower",
            "title*": {"en": "Specific Optical Rotatory Power"},
            "description": 'The "Specific Optical Rotatory Power" Angle of optical rotation divided by the optical path length through the medium and by the mass concentration of the substance giving the specific optical rotatory power.',
            "description*": {
                "en": 'The "Specific Optical Rotatory Power" Angle of optical rotation divided by the optical path length through the medium and by the mass concentration of the substance giving the specific optical rotatory power.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificOpticalRotatoryPowerValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW77e8f77ce04f54e9a4f3d616427252b6"]
    unit: Optional[SpecificOpticalRotatoryPowerUnit] = Field(
        SpecificOpticalRotatoryPowerUnit.meter_squared_radian_per_kilo_gram,
        options={"enum_titles": ["rad·m²/kg"]},
        title="SpecificOpticalRotatoryPowerUnit",
        x_enum_varnames=["meter_squared_radian_per_kilo_gram"],
    )


class NuclearEnergy(Energy):
    """
    This is an autogenerated partial class definition of 'NuclearEnergy'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "00fcca05-152e-5a99-b668-44586776938b",
            "title": "NuclearEnergy",
            "title*": {"en": "Nuclear energy"},
            "description": "This is an autogenerated partial class definition of 'NuclearEnergy'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasNuclearEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW00fcca05152e5a99b66844586776938b"]


class VaporPermeanceUnit(UnitEnum):
    kilo_gram_per_meter_squared_per_pascal_per_second = (
        "Item:OSW60bdefc5b50c502095c7e1f8f8a7d03e"
    )


class VaporPermeance(QuantityValue):
    """
    A material's "permeance", is dependent on thickness much like the R-value in heat transmission. Dividing the permeability of a material by its thickness gives the material's permeance. Permeance is the number that should be used to compare various products in regard to moisture transmission resistance.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "0f0eccb9-6996-55f5-8a52-b9dcf741676b",
            "title": "VaporPermeance",
            "title*": {"en": "VaporPermeance"},
            "description": "A material's \"permeance\", is dependent on thickness much like the R-value in heat transmission. Dividing the permeability of a material by its thickness gives the material's permeance. Permeance is the number that should be used to compare various products in regard to moisture transmission resistance.",
            "description*": {
                "en": "A material's \"permeance\", is dependent on thickness much like the R-value in heat transmission. Dividing the permeability of a material by its thickness gives the material's permeance. Permeance is the number that should be used to compare various products in regard to moisture transmission resistance."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVaporPermeanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0f0eccb9699655f58a52b9dcf741676b"]
    unit: Optional[VaporPermeanceUnit] = Field(
        VaporPermeanceUnit.kilo_gram_per_meter_squared_per_pascal_per_second,
        options={"enum_titles": ["kg/(m²·Pa·s)"]},
        title="VaporPermeanceUnit",
        x_enum_varnames=["kilo_gram_per_meter_squared_per_pascal_per_second"],
    )


class MassConcentrationOfWaterVapourUnit(UnitEnum):
    gram_per_deci_meter_cubed = (
        "Item:OSW9161ae8b61ca56a687f8db32bdf2ddd3#OSW08e3de493176593ebb6435ee52474b42"
    )


class MassConcentrationOfWaterVapour(QuantityValue):
    """
    Mass Concentration of Water is one of a number of Concentration quantities defined by ISO 80000.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "73df0db8-ab36-56d7-927b-c38db277a50e",
            "title": "MassConcentrationOfWaterVapour",
            "title*": {"en": "Mass Concentration of Water Vapour"},
            "description": "Mass Concentration of Water is one of a number of Concentration quantities defined by ISO 80000.",
            "description*": {
                "en": "Mass Concentration of Water is one of a number of Concentration quantities defined by ISO 80000."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassConcentrationOfWaterVapourValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW73df0db8ab3656d7927bc38db277a50e"]
    unit: Optional[MassConcentrationOfWaterVapourUnit] = Field(
        MassConcentrationOfWaterVapourUnit.gram_per_deci_meter_cubed,
        options={"enum_titles": ["g/dm³"]},
        title="MassConcentrationOfWaterVapourUnit",
        x_enum_varnames=["gram_per_deci_meter_cubed"],
    )


class PoyntingVectorUnit(UnitEnum):
    watt_per_meter_squared = "Item:OSW7f2c167c5a39550d91c1f95cc01a9a11"
    watt_per_centi_meter_squared = (
        "Item:OSW7f2c167c5a39550d91c1f95cc01a9a11#OSWa735be7b016c510f98dd404ee42c6722"
    )
    pico_watt_per_meter_squared = (
        "Item:OSW7f2c167c5a39550d91c1f95cc01a9a11#OSWf194c328c8ef587c823773008774afc8"
    )
    milli_watt_per_meter_squared = (
        "Item:OSW7f2c167c5a39550d91c1f95cc01a9a11#OSWf33a1a99c6055b178a0b973e57e1aacb"
    )
    micro_watt_per_meter_squared = (
        "Item:OSW7f2c167c5a39550d91c1f95cc01a9a11#OSWbec47ab085945564b8bc080ab7934395"
    )


class PoyntingVector(QuantityValue):
    """
    "Poynting Vector" is the vector product of the electric field strength $\mathbf{E}$ and the magnetic field strength $\mathbf{H}" of the electromagnetic field at a given point. The flux of the Poynting vector through a closed surface is equal to the electromagnetic power passing through this surface. For a periodic electromagnetic field, the time average of the Poynting vector is a vector of which, with certain reservations, the direction may be considered as being the direction of propagation of electromagnetic energy and the magnitude considered as being the average electromagnetic power flux density.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a43ea013-a522-5362-ab72-33fa2d33a5aa",
            "title": "PoyntingVector",
            "title*": {"en": "Poynting vector", "de": "Poynting-Vektor"},
            "description": '"Poynting Vector" is the vector product of the electric field strength $\\mathbf{E}$ and the magnetic field strength $\\mathbf{H}" of the electromagnetic field at a given point. The flux of the Poynting vector through a closed surface is equal to the electromagnetic power passing through this surface. For a periodic electromagnetic field, the time average of the Poynting vector is a vector of which, with certain reservations, the direction may be considered as being the direction of propagation of electromagnetic energy and the magnitude considered as being the average electromagnetic power flux density.',
            "description*": {
                "en": '"Poynting Vector" is the vector product of the electric field strength $\\mathbf{E}$ and the magnetic field strength $\\mathbf{H}" of the electromagnetic field at a given point. The flux of the Poynting vector through a closed surface is equal to the electromagnetic power passing through this surface. For a periodic electromagnetic field, the time average of the Poynting vector is a vector of which, with certain reservations, the direction may be considered as being the direction of propagation of electromagnetic energy and the magnitude considered as being the average electromagnetic power flux density.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPoyntingVectorValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa43ea013a5225362ab7233fa2d33a5aa"]
    unit: Optional[PoyntingVectorUnit] = Field(
        PoyntingVectorUnit.watt_per_meter_squared,
        options={"enum_titles": ["W/m²", "W/cm²", "pW/m²", "mW/m²", "µW/m²"]},
        title="PoyntingVectorUnit",
        x_enum_varnames=[
            "watt_per_meter_squared",
            "watt_per_centi_meter_squared",
            "pico_watt_per_meter_squared",
            "milli_watt_per_meter_squared",
            "micro_watt_per_meter_squared",
        ],
    )


class CharacteristicVelocity(Velocity):
    """
    Characteristic velocity or $c^{*}$ is a measure of the combustion performance of a rocket engine independent of nozzle performance, and is used to compare different propellants and propulsion systems.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "06321a3e-d416-5337-a8fc-380a77a64e09",
            "title": "CharacteristicVelocity",
            "title*": {"en": "Characteristic Velocity"},
            "description": "Characteristic velocity or $c^{*}$ is a measure of the combustion performance of a rocket engine independent of nozzle performance, and is used to compare different propellants and propulsion systems.",
            "description*": {
                "en": "Characteristic velocity or $c^{*}$ is a measure of the combustion performance of a rocket engine independent of nozzle performance, and is used to compare different propellants and propulsion systems."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCharacteristicVelocityValue",
            "@context": [
                "/wiki/Category:OSW397c67ece63a5a5c96bad9349f49f3d7?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW06321a3ed4165337a8fc380a77a64e09"]


class MolarRefractivityUnit(UnitEnum):
    meter_cubed_per_mole = "Item:OSW94bba2ee2f9a573eb5fa99c9331f1626"
    centi_meter_cubed_per_mole = (
        "Item:OSW94bba2ee2f9a573eb5fa99c9331f1626#OSW90c99a00002b5483a1ac0638fdbe9078"
    )
    deci_meter_cubed_per_mole = (
        "Item:OSW94bba2ee2f9a573eb5fa99c9331f1626#OSW6eaa02f1d5ad581f97e7e017fab31412"
    )


class MolarRefractivity(QuantityValue):
    """
    A quantity kind that is a measure of the total polarizability of a mole of substance that depends on the temperature, the index of refraction and the pressure.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "f8e46376-1065-56cf-bbf2-7ebe2af14849",
            "title": "MolarRefractivity",
            "title*": {"en": "Molar Refractivity"},
            "description": "A quantity kind that is a measure of the total polarizability of a mole of substance that depends on the temperature, the index of refraction and the pressure.",
            "description*": {
                "en": "A quantity kind that is a measure of the total polarizability of a mole of substance that depends on the temperature, the index of refraction and the pressure."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarRefractivityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf8e46376106556cfbbf27ebe2af14849"]
    unit: Optional[MolarRefractivityUnit] = Field(
        MolarRefractivityUnit.meter_cubed_per_mole,
        options={"enum_titles": ["m³/mol", "cm³/mol", "dm³/mol"]},
        title="MolarRefractivityUnit",
        x_enum_varnames=[
            "meter_cubed_per_mole",
            "centi_meter_cubed_per_mole",
            "deci_meter_cubed_per_mole",
        ],
    )


class ElectronMobility(Mobility):
    """
    This is an autogenerated partial class definition of 'ElectronMobility'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ab83a0c2-9273-584b-b426-7cdde76fb928",
            "title": "ElectronMobility",
            "title*": {"en": "Electron mobility"},
            "description": "This is an autogenerated partial class definition of 'ElectronMobility'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectronMobilityValue",
            "@context": [
                "/wiki/Category:OSWb11e150b382c5481b59c763f0d4794fb?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWab83a0c29273584bb4267cdde76fb928"]


class TotalCurrentUnit(UnitEnum):
    ampere = "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec"
    milli_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSW614e3543b8aa55a5b4aa87c9cd179703"
    )
    mega_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSWc611b97c5c4354059113fb8f17a26f2f"
    )
    pico_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSWb59bf21962f75857965df77a55549178"
    )
    kilo_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSW49e59ce46e35588193327425fa1d89ab"
    )
    micro_ampere = (
        "Item:OSW0846b0dbcf495d5aab1172e4fb3bddec#OSW771bd899c7045f84b282cc653efe6d28"
    )


class TotalCurrent(QuantityValue):
    """
    "Total Current" is the sum of the electric current that is flowing through a surface and the displacement current.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "527cea47-c257-5449-a1a4-f61349f12ee5",
            "title": "TotalCurrent",
            "title*": {"en": "Total Current"},
            "description": '"Total Current" is the sum of the electric current that is flowing through a surface and the displacement current.',
            "description*": {
                "en": '"Total Current" is the sum of the electric current that is flowing through a surface and the displacement current.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTotalCurrentValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW527cea47c2575449a1a4f61349f12ee5"]
    unit: Optional[TotalCurrentUnit] = Field(
        TotalCurrentUnit.ampere,
        options={"enum_titles": ["A", "mA", "MA", "pA", "kA", "μA"]},
        title="TotalCurrentUnit",
        x_enum_varnames=[
            "ampere",
            "milli_ampere",
            "mega_ampere",
            "pico_ampere",
            "kilo_ampere",
            "micro_ampere",
        ],
    )


class RotationalFrequency(QuantityValue):
    """
    IfcRotationalFrequencyMeasure is a measure of the number of cycles that an item revolves in unit time. Usually measured in cycles/s.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a57dc717-06f7-5ba7-995a-8eebdcea18da",
            "title": "RotationalFrequency",
            "title*": {"en": "RotationalFrequency"},
            "description": "IfcRotationalFrequencyMeasure is a measure of the number of cycles that an item revolves in unit time. Usually measured in cycles/s.",
            "description*": {
                "en": "IfcRotationalFrequencyMeasure is a measure of the number of cycles that an item revolves in unit time. Usually measured in cycles/s."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRotationalFrequencyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa57dc71706f75ba7995a8eebdcea18da"]
    unit: Optional[RotationalFrequencyUnit] = Field(
        RotationalFrequencyUnit.hertz,
        options={"enum_titles": ["Hz", "MHz", "kHz", "GHz", "THz"]},
        title="RotationalFrequencyUnit",
        x_enum_varnames=[
            "hertz",
            "mega_hertz",
            "kilo_hertz",
            "giga_hertz",
            "tera_hertz",
        ],
    )


class NozzleWallsThrustReaction(Force):
    """
    This is an autogenerated partial class definition of 'NozzleWallsThrustReaction'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1d953cfe-ca67-574d-add6-a6f0c42d7483",
            "title": "NozzleWallsThrustReaction",
            "title*": {"en": "Nozzle Walls Thrust Reaction"},
            "description": "This is an autogenerated partial class definition of 'NozzleWallsThrustReaction'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasNozzleWallsThrustReactionValue",
            "@context": [
                "/wiki/Category:OSW1b832c1a42c055eb9669bb0cdda18d7f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1d953cfeca67574dadd6a6f0c42d7483"]


class Exposure(ElectricChargePerMass):
    """
    "Exposure" reflects the extent of ionization events taking place when air is irradiated by ionizing photons (gamma radiation and/or x rays). In photography, exposure is the amount of light allowed to fall on each area unit of a photographic medium (photographic film or image sensor) during the process of taking a photograph. Exposure is measured in lux seconds, and can be computed from exposure value (EV) and scene luminance in a specified region.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "d41cd569-a9fb-561a-8415-b09d2d0af5f2",
            "title": "Exposure",
            "title*": {"en": "Exposure"},
            "description": '"Exposure" reflects the extent of ionization events taking place when air is irradiated by ionizing photons (gamma radiation and/or x rays). In photography, exposure is the amount of light allowed to fall on each area unit of a photographic medium (photographic film or image sensor) during the process of taking a photograph. Exposure is measured in lux seconds, and can be computed from exposure value (EV) and scene luminance in a specified region.',
            "description*": {
                "en": '"Exposure" reflects the extent of ionization events taking place when air is irradiated by ionizing photons (gamma radiation and/or x rays). In photography, exposure is the amount of light allowed to fall on each area unit of a photographic medium (photographic film or image sensor) during the process of taking a photograph. Exposure is measured in lux seconds, and can be computed from exposure value (EV) and scene luminance in a specified region.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasExposureValue",
            "@context": [
                "/wiki/Category:OSW27391d33725254a288fefb618be785f7?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd41cd569a9fb561a8415b09d2d0af5f2"]


class VisibleRadiantEnergy(Energy):
    """
    "Visible Radiant Energy", also known as luminous energy, is the energy of electromagnetic waves. It is energy of the particles that are emitted, transferred, or received as radiation.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "fec7990b-044c-5e3a-8298-91756b36c3a2",
            "title": "VisibleRadiantEnergy",
            "title*": {"en": "Visible Radiant Energy"},
            "description": '"Visible Radiant Energy", also known as luminous energy, is the energy of electromagnetic waves. It is energy of the particles that are emitted, transferred, or received as radiation.',
            "description*": {
                "en": '"Visible Radiant Energy", also known as luminous energy, is the energy of electromagnetic waves. It is energy of the particles that are emitted, transferred, or received as radiation.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVisibleRadiantEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfec7990b044c5e3a829891756b36c3a2"]


class Heat(ThermalEnergy):
    """
    "Heat" is the energy transferred by a thermal process.  Heat can be measured in terms of the dynamical units of energy, as the erg, joule, etc., or in terms of the amount of energy required to produce a definite thermal change in some substance, as, for example, the energy required per degree to raise the temperature of a unit mass of water at some temperature ( calorie, Btu).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "cba88507-fe87-5a5f-bebc-2a29a5691f03",
            "title": "Heat",
            "title*": {"en": "Heat", "de": "Wärme"},
            "description": '"Heat" is the energy transferred by a thermal process.  Heat can be measured in terms of the dynamical units of energy, as the erg, joule, etc., or in terms of the amount of energy required to produce a definite thermal change in some substance, as, for example, the energy required per degree to raise the temperature of a unit mass of water at some temperature ( calorie, Btu).',
            "description*": {
                "en": '"Heat" is the energy transferred by a thermal process.  Heat can be measured in terms of the dynamical units of energy, as the erg, joule, etc., or in terms of the amount of energy required to produce a definite thermal change in some substance, as, for example, the energy required per degree to raise the temperature of a unit mass of water at some temperature ( calorie, Btu).'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasHeatValue",
            "@context": [
                "/wiki/Category:OSW487ed07f775b5dc2b0f8185d06e33fb8?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcba88507fe875a5fbebc2a29a5691f03"]


class MassNumber(Count):
    """
    The "Mass Number" (A), also called atomic mass number or nucleon number, is the total number of protons and neutrons (together known as nucleons) in an atomic nucleus. Nuclides with the same value of $A$ are called isobars.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "57d546ae-6cae-5831-a7ef-d0cf3b933b27",
            "title": "MassNumber",
            "title*": {"en": "Mass Number"},
            "description": 'The "Mass Number" (A), also called atomic mass number or nucleon number, is the total number of protons and neutrons (together known as nucleons) in an atomic nucleus. Nuclides with the same value of $A$ are called isobars.',
            "description*": {
                "en": 'The "Mass Number" (A), also called atomic mass number or nucleon number, is the total number of protons and neutrons (together known as nucleons) in an atomic nucleus. Nuclides with the same value of $A$ are called isobars.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassNumberValue",
            "@context": [
                "/wiki/Category:OSWb0250d3677f6592f9d4329c8b9d5f8d1?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW57d546ae6cae5831a7efd0cf3b933b27"]


class OsmoticPressure(Pressure):
    """
    The "Osmotic Pressure" is the pressure which needs to be applied to a solution to prevent the inward flow of water across a semipermeable membrane.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a76a1a2e-60f9-52fd-9b4b-da2edfd4047a",
            "title": "OsmoticPressure",
            "title*": {"en": "Osmotic pressure", "de": "Osmotischer Druck"},
            "description": 'The "Osmotic Pressure" is the pressure which needs to be applied to a solution to prevent the inward flow of water across a semipermeable membrane.',
            "description*": {
                "en": 'The "Osmotic Pressure" is the pressure which needs to be applied to a solution to prevent the inward flow of water across a semipermeable membrane.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasOsmoticPressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa76a1a2e60f952fd9b4bda2edfd4047a"]


class PositiveLength(Length):
    """
    "NonNegativeLength" is a measure of length greater than or equal to zero.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "04772b79-15d6-597f-adf5-b7d44f4e90a5",
            "title": "PositiveLength",
            "title*": {"en": "Positive Length"},
            "description": '"NonNegativeLength" is a measure of length greater than or equal to zero.',
            "description*": {
                "en": '"NonNegativeLength" is a measure of length greater than or equal to zero.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPositiveLengthValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW04772b7915d6597fadf5b7d44f4e90a5"]


class MassAttenuationCoefficientUnit(UnitEnum):
    meter_squared_per_kilo_gram = (
        "Item:OSWd7015166d39d5cae866a40eac3d51896#OSWc811db362efa5d33a49b56ffdd77e54d"
    )


class MassAttenuationCoefficient(QuantityValue):
    """
    "Mass Attenuation Coefficient" is a measurement of how strongly a chemical species or substance absorbs or scatters light at a given wavelength, per unit mass.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "6a7ba5aa-1883-572e-8086-67e4e0f83ef8",
            "title": "MassAttenuationCoefficient",
            "title*": {"en": "Mass Attenuation Coefficient"},
            "description": '"Mass Attenuation Coefficient" is a measurement of how strongly a chemical species or substance absorbs or scatters light at a given wavelength, per unit mass.',
            "description*": {
                "en": '"Mass Attenuation Coefficient" is a measurement of how strongly a chemical species or substance absorbs or scatters light at a given wavelength, per unit mass.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassAttenuationCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6a7ba5aa1883572e808667e4e0f83ef8"]
    unit: Optional[MassAttenuationCoefficientUnit] = Field(
        MassAttenuationCoefficientUnit.meter_squared_per_kilo_gram,
        options={"enum_titles": ["m²/kg"]},
        title="MassAttenuationCoefficientUnit",
        x_enum_varnames=["meter_squared_per_kilo_gram"],
    )


class Power(QuantityValue):
    """
    Power is the rate at which work is performed or energy is transmitted, or the amount of energy required or expended for a given unit of time. As a rate of change of work done or the energy of a subsystem, power is: $P = W/t$, where $P$ is power, $W$ is work and {t} is time.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a819b531-01b8-54ad-923f-9f13dfb41794",
            "title": "Power",
            "title*": {"en": "Power", "de": "Leistung"},
            "description": "Power is the rate at which work is performed or energy is transmitted, or the amount of energy required or expended for a given unit of time. As a rate of change of work done or the energy of a subsystem, power is: $P = W/t$, where $P$ is power, $W$ is work and {t} is time.",
            "description*": {
                "en": "Power is the rate at which work is performed or energy is transmitted, or the amount of energy required or expended for a given unit of time. As a rate of change of work done or the energy of a subsystem, power is: $P = W/t$, where $P$ is power, $W$ is work and {t} is time."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPowerValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa819b53101b854ad923f9f13dfb41794"]
    unit: Optional[PowerUnit] = Field(
        PowerUnit.watt,
        options={"enum_titles": ["W", "pW", "µW", "TW", "nW", "MW", "GW", "mW", "kW"]},
        title="PowerUnit",
        x_enum_varnames=[
            "watt",
            "pico_watt",
            "micro_watt",
            "tera_watt",
            "nano_watt",
            "mega_watt",
            "giga_watt",
            "milli_watt",
            "kilo_watt",
        ],
    )


class CatalyticActivityUnit(UnitEnum):
    katal = "Item:OSW73fc60d9e1dd5337a5f4befdc3646012"


class CatalyticActivity(QuantityValue):
    """
    An index of the actual or potential activity of a catalyst. The catalytic activity of an enzyme or an enzyme-containing preparation is defined as the property measured by the increase in the rate of conversion of a specified chemical reaction that the enzyme produces in a specified assay system. Catalytic activity is an extensive quantity and is a property of the enzyme, not of the reaction mixture; it is thus conceptually different from rate of conversion although measured by and equidimensional with it. The unit for catalytic activity is the $katal$; it may also be expressed in mol $s^{-1}$. Dimensions: $N T^{-1}$. Former terms such as catalytic ability, catalytic amount, and enzymic activity are no er recommended. Derived quantities are molar catalytic activity, specific catalytic activity, and catalytic activity concentration. Source(s): <a href="http://www.answers.com/topic/catalytic-activity-biochemistry">www.answers.com</a>
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "be579463-8aff-5dcd-b9fd-6a34466c98b4",
            "title": "CatalyticActivity",
            "title*": {"en": "Catalytic Activity"},
            "description": 'An index of the actual or potential activity of a catalyst. The catalytic activity of an enzyme or an enzyme-containing preparation is defined as the property measured by the increase in the rate of conversion of a specified chemical reaction that the enzyme produces in a specified assay system. Catalytic activity is an extensive quantity and is a property of the enzyme, not of the reaction mixture; it is thus conceptually different from rate of conversion although measured by and equidimensional with it. The unit for catalytic activity is the $katal$; it may also be expressed in mol $s^{-1}$. Dimensions: $N T^{-1}$. Former terms such as catalytic ability, catalytic amount, and enzymic activity are no er recommended. Derived quantities are molar catalytic activity, specific catalytic activity, and catalytic activity concentration. Source(s): <a href="http://www.answers.com/topic/catalytic-activity-biochemistry">www.answers.com</a>',
            "description*": {
                "en": 'An index of the actual or potential activity of a catalyst. The catalytic activity of an enzyme or an enzyme-containing preparation is defined as the property measured by the increase in the rate of conversion of a specified chemical reaction that the enzyme produces in a specified assay system. Catalytic activity is an extensive quantity and is a property of the enzyme, not of the reaction mixture; it is thus conceptually different from rate of conversion although measured by and equidimensional with it. The unit for catalytic activity is the $katal$; it may also be expressed in mol $s^{-1}$. Dimensions: $N T^{-1}$. Former terms such as catalytic ability, catalytic amount, and enzymic activity are no er recommended. Derived quantities are molar catalytic activity, specific catalytic activity, and catalytic activity concentration. Source(s): <a href="http://www.answers.com/topic/catalytic-activity-biochemistry">www.answers.com</a>'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCatalyticActivityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWbe5794638aff5dcdb9fd6a34466c98b4"]
    unit: Optional[CatalyticActivityUnit] = Field(
        CatalyticActivityUnit.katal,
        options={"enum_titles": ["kat"]},
        title="CatalyticActivityUnit",
        x_enum_varnames=["katal"],
    )


class MassDefect(Mass):
    """
    The "Mass Defect", also termed mass deficit, or mass packing fraction, describes mass change (decrease) in bound systems, particularly atomic nuclei.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "98b06c55-0c59-5e78-a13f-f79969b21e2e",
            "title": "MassDefect",
            "title*": {"en": "Mass Defect"},
            "description": 'The "Mass Defect", also termed mass deficit, or mass packing fraction, describes mass change (decrease) in bound systems, particularly atomic nuclei.',
            "description*": {
                "en": 'The "Mass Defect", also termed mass deficit, or mass packing fraction, describes mass change (decrease) in bound systems, particularly atomic nuclei.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassDefectValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW98b06c550c595e78a13ff79969b21e2e"]


class LoudnessLevel(Dimensionless):
    """
    in phon angegebener Wert als Maß für die Stärke der subjektiven Wahrnehmung eines Schallvorgange, der zahlenmäßig dem in dB angegebenen Schalldruckpegel eines Referenzschalls entspricht, der aus einer frontal einfallenden ebenen Welle mit der Frequenz 1000 Hz besteht und als gleich laut wie das Geräusch empfunden wird
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "50eb3918-2e34-5788-9925-e653d5a3bd03",
            "title": "LoudnessLevel",
            "title*": {"en": "Loudness level"},
            "description": "in phon angegebener Wert als Maß für die Stärke der subjektiven Wahrnehmung eines Schallvorgange, der zahlenmäßig dem in dB angegebenen Schalldruckpegel eines Referenzschalls entspricht, der aus einer frontal einfallenden ebenen Welle mit der Frequenz 1000 Hz besteht und als gleich laut wie das Geräusch empfunden wird",
            "description*": {
                "en": "in phon angegebener Wert als Maß für die Stärke der subjektiven Wahrnehmung eines Schallvorgange, der zahlenmäßig dem in dB angegebenen Schalldruckpegel eines Referenzschalls entspricht, der aus einer frontal einfallenden ebenen Welle mit der Frequenz 1000 Hz besteht und als gleich laut wie das Geräusch empfunden wird"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLoudnessLevelValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW50eb39182e3457889925e653d5a3bd03"]


class TimeAveragedSoundIntensity(SoundIntensity):
    """
    Sound intensity or acoustic intensity ($I$) is defined as the sound power $P_a$ per unit area $A$. The usual context is the noise measurement of sound intensity in the air at a listener's location as a sound energy quantity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ba1d28c2-642f-5d28-bd67-5412004bfc15",
            "title": "TimeAveragedSoundIntensity",
            "title*": {"en": "Time averaged sound intensity"},
            "description": "Sound intensity or acoustic intensity ($I$) is defined as the sound power $P_a$ per unit area $A$. The usual context is the noise measurement of sound intensity in the air at a listener's location as a sound energy quantity.",
            "description*": {
                "en": "Sound intensity or acoustic intensity ($I$) is defined as the sound power $P_a$ per unit area $A$. The usual context is the noise measurement of sound intensity in the air at a listener's location as a sound energy quantity."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTimeAveragedSoundIntensityValue",
            "@context": [
                "/wiki/Category:OSW7450be7f3aa3552e9da4bb8a6d952f9f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWba1d28c2642f5d28bd675412004bfc15"]


class ReactionRateConstant(QuantityValue):
    """
    A quantity kind that is a proportionality constant that quantifies the relationship between the molar concentrations of the reactants and the rate of a second order chemical reaction.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "ec4a0bb9-cee1-55e3-a799-94b906fbd3a7",
            "title": "ReactionRateConstant",
            "title*": {"en": "Reaction Rate Constant"},
            "description": "A quantity kind that is a proportionality constant that quantifies the relationship between the molar concentrations of the reactants and the rate of a second order chemical reaction.",
            "description*": {
                "en": "A quantity kind that is a proportionality constant that quantifies the relationship between the molar concentrations of the reactants and the rate of a second order chemical reaction."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasReactionRateConstantValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWec4a0bb9cee155e3a79994b906fbd3a7"]
    unit: Optional[ReactionRateConstantUnit] = Field(
        ReactionRateConstantUnit.meter_cubed_per_mole_per_second,
        options={"enum_titles": ["m³/(mol·s)", "cm³/(mol·s)"]},
        title="ReactionRateConstantUnit",
        x_enum_varnames=[
            "meter_cubed_per_mole_per_second",
            "centi_meter_cubed_per_mole_per_second",
        ],
    )


class TimeRatio(DimensionlessRatio):
    """
    This is an autogenerated partial class definition of 'TimeRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "da552423-849a-536c-80fb-7c6e0f85eca4",
            "title": "TimeRatio",
            "title*": {"en": "Time Ratio"},
            "description": "This is an autogenerated partial class definition of 'TimeRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTimeRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWda552423849a536c80fb7c6e0f85eca4"]


class CenterOfMassCom(PositionVector):
    """
    The point at which the distributed mass of a composite body can be acted upon by a force without inducing any rotation of the composite body.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "55d3f263-afd7-5338-8c3d-d35e1e5d8481",
            "title": "CenterOfMassCom",
            "title*": {"en": "Center of Mass (CoM)"},
            "description": "The point at which the distributed mass of a composite body can be acted upon by a force without inducing any rotation of the composite body.",
            "description*": {
                "en": "The point at which the distributed mass of a composite body can be acted upon by a force without inducing any rotation of the composite body."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCenterOfMassComValue",
            "@context": [
                "/wiki/Category:OSWd60aaf9b746a594a83805f0f0ae921ff?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW55d3f263afd753388c3dd35e1e5d8481"]


class InitialVehicleMass(Mass):
    """
    This is an autogenerated partial class definition of 'InitialVehicleMass'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a573ff74-e1f1-5ca2-86ce-442b065146dc",
            "title": "InitialVehicleMass",
            "title*": {"en": "Initial Vehicle Mass"},
            "description": "This is an autogenerated partial class definition of 'InitialVehicleMass'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInitialVehicleMassValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa573ff74e1f15ca286ce442b065146dc"]


class Width(Length):
    """
    "Width" is the middle of three dimensions: length, width, thickness.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "f8e82967-34a7-59de-b817-315f69a78fb9",
            "title": "Width",
            "title*": {"en": "Width"},
            "description": '"Width" is the middle of three dimensions: length, width, thickness.',
            "description*": {
                "en": '"Width" is the middle of three dimensions: length, width, thickness.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasWidthValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf8e8296734a759deb817315f69a78fb9"]


class SpectralCrossSectionUnit(UnitEnum):
    meter_squared_per_joule = "Item:OSW06fd6479544b5a6db5427ff73da63ee9"


class SpectralCrossSection(QuantityValue):
    """
    "Spectral Cross-section" is the cross-section for a process in which the energy of the ejected or scattered particle is in an interval of energy, divided by the range $dE$ of this interval.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "eec705c7-a600-5269-8e01-058732a6d8de",
            "title": "SpectralCrossSection",
            "title*": {"en": "Spectral Cross-section"},
            "description": '"Spectral Cross-section" is the cross-section for a process in which the energy of the ejected or scattered particle is in an interval of energy, divided by the range $dE$ of this interval.',
            "description*": {
                "en": '"Spectral Cross-section" is the cross-section for a process in which the energy of the ejected or scattered particle is in an interval of energy, divided by the range $dE$ of this interval.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpectralCrossSectionValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWeec705c7a60052698e01058732a6d8de"]
    unit: Optional[SpectralCrossSectionUnit] = Field(
        SpectralCrossSectionUnit.meter_squared_per_joule,
        options={"enum_titles": ["m²/J"]},
        title="SpectralCrossSectionUnit",
        x_enum_varnames=["meter_squared_per_joule"],
    )


class Work(Energy):
    """
    A force is said to do Work when it acts on a body so that there is a displacement of the point of application, however small, in the direction of the force.  The concepts of work and energy are closely tied to the concept of force because an applied force can do work on an object and cause a change in energy. Energy is defined as the ability to do work. Work is done on an object when an applied force moves it through a distance. Kinetic energy is the energy of an object in motion. The net work is equal to the change in kinetic energy.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1be0e061-6fe4-5f6e-9acb-6395577080b5",
            "title": "Work",
            "title*": {"en": "Work", "de": "Arbeit"},
            "description": "A force is said to do Work when it acts on a body so that there is a displacement of the point of application, however small, in the direction of the force.  The concepts of work and energy are closely tied to the concept of force because an applied force can do work on an object and cause a change in energy. Energy is defined as the ability to do work. Work is done on an object when an applied force moves it through a distance. Kinetic energy is the energy of an object in motion. The net work is equal to the change in kinetic energy.",
            "description*": {
                "en": "A force is said to do Work when it acts on a body so that there is a displacement of the point of application, however small, in the direction of the force.  The concepts of work and energy are closely tied to the concept of force because an applied force can do work on an object and cause a change in energy. Energy is defined as the ability to do work. Work is done on an object when an applied force moves it through a distance. Kinetic energy is the energy of an object in motion. The net work is equal to the change in kinetic energy."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasWorkValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1be0e0616fe45f6e9acb6395577080b5"]


class MacroscopicCrossSection(CrossSection):
    """
    "Macroscopic Cross-section" is the sum of the cross-sections for a reaction or process of a specified type over all atoms or other entities in a given 3D domain, divided by the volume of that domain.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7825b2bb-b4c2-5834-8224-e4e6d4f364e8",
            "title": "MacroscopicCrossSection",
            "title*": {"en": "Macroscopic Cross-section"},
            "description": '"Macroscopic Cross-section" is the sum of the cross-sections for a reaction or process of a specified type over all atoms or other entities in a given 3D domain, divided by the volume of that domain.',
            "description*": {
                "en": '"Macroscopic Cross-section" is the sum of the cross-sections for a reaction or process of a specified type over all atoms or other entities in a given 3D domain, divided by the volume of that domain.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMacroscopicCrossSectionValue",
            "@context": [
                "/wiki/Category:OSWa002dbedf44c5a86a375783a4e7ba6e7?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7825b2bbb4c258348224e4e6d4f364e8"]


class NozzleThroatDiameter(Length):
    """
    This is an autogenerated partial class definition of 'NozzleThroatDiameter'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "02b07b5b-2f09-5f45-afb5-157bce27379a",
            "title": "NozzleThroatDiameter",
            "title*": {"en": "Nozzle Throat Diameter"},
            "description": "This is an autogenerated partial class definition of 'NozzleThroatDiameter'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasNozzleThroatDiameterValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW02b07b5b2f095f45afb5157bce27379a"]


class CartesianArea(Area):
    """
    "Area" is a quantity that expresses the extent of a two-dimensional surface or shape, or planar lamina, in the plane.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "022058c6-b4a3-517c-b9d5-a00efac71e12",
            "title": "CartesianArea",
            "title*": {"en": "Cartesian Area"},
            "description": '"Area" is a quantity that expresses the extent of a two-dimensional surface or shape, or planar lamina, in the plane.',
            "description*": {
                "en": '"Area" is a quantity that expresses the extent of a two-dimensional surface or shape, or planar lamina, in the plane.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCartesianAreaValue",
            "@context": [
                "/wiki/Category:OSW1fcf1694712e5684885071efdf775bd9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW022058c6b4a3517cb9d5a00efac71e12"]


class OverRangeDistance(Length):
    """
    Additional distance traveled by a rocket because Of excessive initial velocity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2bfac452-578d-5a63-a9f5-6d0ce3c538e0",
            "title": "OverRangeDistance",
            "title*": {"en": "Over-range distance"},
            "description": "Additional distance traveled by a rocket because Of excessive initial velocity.",
            "description*": {
                "en": "Additional distance traveled by a rocket because Of excessive initial velocity."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasOverRangeDistanceValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2bfac452578d5a63a9f56d0ce3c538e0"]


class MassPerTimeUnit(UnitEnum):
    newton_second_per_meter = "Item:OSW69c99f1ab4825dffbf3578e6d04cd58e"


class MassPerTime(QuantityValue):
    """
    This is an autogenerated partial class definition of 'MassPerTime'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "b61a75d7-0236-5027-b17c-fa7e8ae10cb3",
            "title": "MassPerTime",
            "title*": {"en": "Mass per Time"},
            "description": "This is an autogenerated partial class definition of 'MassPerTime'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassPerTimeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb61a75d702365027b17cfa7e8ae10cb3"]
    unit: Optional[MassPerTimeUnit] = Field(
        MassPerTimeUnit.newton_second_per_meter,
        options={"enum_titles": ["N·s/m"]},
        title="MassPerTimeUnit",
        x_enum_varnames=["newton_second_per_meter"],
    )


class ThermodynamicTemperature(Temperature):
    """
    Thermodynamic temperature is the absolute measure of temperature and is one of the principal parameters of thermodynamics.
    Temperature is a physical property of matter that quantitatively expresses the common notions of hot and cold.
    In thermodynamics, in a system of which the entropy is considered as an independent externally controlled variable, absolute, or thermodynamic temperature is defined as the derivative of the internal energy with respect to the entropy. This is a base quantity in the International System of Quantities, ISQ, on which the International System of Units, SI, is based.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "69b648b4-fe1a-5607-b167-a699f899be87",
            "title": "ThermodynamicTemperature",
            "title*": {
                "en": "Thermodynamic temperature",
                "de": "Thermodynamische Temperatur",
            },
            "description": "Thermodynamic temperature is the absolute measure of temperature and is one of the principal parameters of thermodynamics.\nTemperature is a physical property of matter that quantitatively expresses the common notions of hot and cold.\nIn thermodynamics, in a system of which the entropy is considered as an independent externally controlled variable, absolute, or thermodynamic temperature is defined as the derivative of the internal energy with respect to the entropy. This is a base quantity in the International System of Quantities, ISQ, on which the International System of Units, SI, is based.",
            "description*": {
                "en": "Thermodynamic temperature is the absolute measure of temperature and is one of the principal parameters of thermodynamics.\nTemperature is a physical property of matter that quantitatively expresses the common notions of hot and cold.\nIn thermodynamics, in a system of which the entropy is considered as an independent externally controlled variable, absolute, or thermodynamic temperature is defined as the derivative of the internal energy with respect to the entropy. This is a base quantity in the International System of Quantities, ISQ, on which the International System of Units, SI, is based."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThermodynamicTemperatureValue",
            "@context": [
                "/wiki/Category:OSW20927e4900e95e93985698c92995f964?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW69b648b4fe1a5607b167a699f899be87"]


class BoilingPointTemperature(Temperature):
    """
    A temperature that is the one at which a substance will change its physical state from a liquid to a gas.  It is also the temperature where the liquid and gaseous forms of a pure substance can exist in equilibrium.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2ab56dc7-ae31-5aa9-8995-de458930f379",
            "title": "BoilingPointTemperature",
            "title*": {"en": "Boiling Point Temperature"},
            "description": "A temperature that is the one at which a substance will change its physical state from a liquid to a gas.  It is also the temperature where the liquid and gaseous forms of a pure substance can exist in equilibrium.",
            "description*": {
                "en": "A temperature that is the one at which a substance will change its physical state from a liquid to a gas.  It is also the temperature where the liquid and gaseous forms of a pure substance can exist in equilibrium."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasBoilingPointTemperatureValue",
            "@context": [
                "/wiki/Category:OSW20927e4900e95e93985698c92995f964?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2ab56dc7ae315aa98995de458930f379"]


class ElectricChargeLineDensityUnit(UnitEnum):
    coulomb_per_meter = "Item:OSW375890764ffa5a5cb84e1cbbe16a7315"


class ElectricChargeLineDensity(QuantityValue):
    """
    In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively. The respective SI units are $C \cdot $, $m^{-1}$, $C \cdot m^{-2}$ or $C \cdot m^{-3}$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "475a9570-e84c-5fd8-86a8-b6f889ed24ca",
            "title": "ElectricChargeLineDensity",
            "title*": {"en": "Electric Charge Line Density"},
            "description": "In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively. The respective SI units are $C \\cdot $, $m^{-1}$, $C \\cdot m^{-2}$ or $C \\cdot m^{-3}$.",
            "description*": {
                "en": "In electromagnetism, charge density is a measure of electric charge per unit volume of space, in one, two or three dimensions. More specifically: the linear, surface, or volume charge density is the amount of electric charge per unit length, surface area, or volume, respectively. The respective SI units are $C \\cdot $, $m^{-1}$, $C \\cdot m^{-2}$ or $C \\cdot m^{-3}$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricChargeLineDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW475a9570e84c5fd886a8b6f889ed24ca"]
    unit: Optional[ElectricChargeLineDensityUnit] = Field(
        ElectricChargeLineDensityUnit.coulomb_per_meter,
        options={"enum_titles": ["C/m"]},
        title="ElectricChargeLineDensityUnit",
        x_enum_varnames=["coulomb_per_meter"],
    )


class RocketAtmosphericTransverseForce(Force):
    """
    Transverse force on rocket due to an atmosphere
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "58a8aa9d-0dbf-5a20-8fad-263db52d2a1b",
            "title": "RocketAtmosphericTransverseForce",
            "title*": {"en": "Rocket Atmospheric Transverse Force"},
            "description": "Transverse force on rocket due to an atmosphere",
            "description*": {"en": "Transverse force on rocket due to an atmosphere"},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRocketAtmosphericTransverseForceValue",
            "@context": [
                "/wiki/Category:OSW1b832c1a42c055eb9669bb0cdda18d7f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW58a8aa9d0dbf5a208fad263db52d2a1b"]


class EvaporativeHeatTransferCoefficientUnit(UnitEnum):
    watt_per_meter_squared_per_pascal = "Item:OSWa553473ceb6957438779040c3e07c200"


class EvaporativeHeatTransferCoefficient(QuantityValue):
    """
    "Evaporative Heat Transfer Coefficient" is the areic heat transfer coefficient multiplied by the water vapor pressure difference between skind and the environment, and by the exchange area.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "fe778dce-cbe8-5850-9d42-538c1ed9aca8",
            "title": "EvaporativeHeatTransferCoefficient",
            "title*": {"en": "Evaporative Heat Transfer Coefficient"},
            "description": '"Evaporative Heat Transfer Coefficient" is the areic heat transfer coefficient multiplied by the water vapor pressure difference between skind and the environment, and by the exchange area.',
            "description*": {
                "en": '"Evaporative Heat Transfer Coefficient" is the areic heat transfer coefficient multiplied by the water vapor pressure difference between skind and the environment, and by the exchange area.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEvaporativeHeatTransferCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfe778dcecbe858509d42538c1ed9aca8"]
    unit: Optional[EvaporativeHeatTransferCoefficientUnit] = Field(
        EvaporativeHeatTransferCoefficientUnit.watt_per_meter_squared_per_pascal,
        options={"enum_titles": ["W/(m²·Pa)"]},
        title="EvaporativeHeatTransferCoefficientUnit",
        x_enum_varnames=["watt_per_meter_squared_per_pascal"],
    )


class ModulusOfSubgradeReactionUnit(UnitEnum):
    newton_per_meter_cubed = "Item:OSWf3f9733d84285a338b5b7306145c9b6d"
    kilo_newton_per_meter_cubed = (
        "Item:OSWf3f9733d84285a338b5b7306145c9b6d#OSWfe42a11de5995fa380fbde579c89484c"
    )


class ModulusOfSubgradeReaction(QuantityValue):
    """
    Modulus of Subgrade Reaction is a geotechnical measure describing interaction between foundation structures and the soil. May also be known as bedding measure. Usually measured in N/m3.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a74a4171-3cc1-54b8-8da6-8cd2d1399e71",
            "title": "ModulusOfSubgradeReaction",
            "title*": {"en": "Modulus of Subgrade Reaction"},
            "description": "Modulus of Subgrade Reaction is a geotechnical measure describing interaction between foundation structures and the soil. May also be known as bedding measure. Usually measured in N/m3.",
            "description*": {
                "en": "Modulus of Subgrade Reaction is a geotechnical measure describing interaction between foundation structures and the soil. May also be known as bedding measure. Usually measured in N/m3."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasModulusOfSubgradeReactionValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa74a41713cc154b88da68cd2d1399e71"]
    unit: Optional[ModulusOfSubgradeReactionUnit] = Field(
        ModulusOfSubgradeReactionUnit.newton_per_meter_cubed,
        options={"enum_titles": ["N/m³", "kN/m³"]},
        title="ModulusOfSubgradeReactionUnit",
        x_enum_varnames=["newton_per_meter_cubed", "kilo_newton_per_meter_cubed"],
    )


class MechanicalEnergy(Energy):
    """
    Mechanical Energy is the sum of potential energy and kinetic energy. It is the energy associated with the motion and position of an object.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7f4e4ae7-033a-51d2-903c-951e9efd306b",
            "title": "MechanicalEnergy",
            "title*": {"en": "Mechanical Energy"},
            "description": "Mechanical Energy is the sum of potential energy and kinetic energy. It is the energy associated with the motion and position of an object.",
            "description*": {
                "en": "Mechanical Energy is the sum of potential energy and kinetic energy. It is the energy associated with the motion and position of an object."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMechanicalEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7f4e4ae7033a51d2903c951e9efd306b"]


class InversePermittivityUnit(UnitEnum):
    meter_per_farad = "Item:OSW7897b70c933d560b918444de17703f23"


class InversePermittivity(QuantityValue):
    """
    This is an autogenerated partial class definition of 'InversePermittivity'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4307744d-b9bb-582a-a546-240504683af7",
            "title": "InversePermittivity",
            "title*": {"en": "Inverse Permittivity"},
            "description": "This is an autogenerated partial class definition of 'InversePermittivity'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInversePermittivityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4307744db9bb582aa546240504683af7"]
    unit: Optional[InversePermittivityUnit] = Field(
        InversePermittivityUnit.meter_per_farad,
        options={"enum_titles": ["m/F"]},
        title="InversePermittivityUnit",
        x_enum_varnames=["meter_per_farad"],
    )


class SoundParticleDisplacement(Length):
    """
    Sound Particle Displacement is the nstantaneous displacement of a particle in a medium from what would be its position in the absence of sound waves.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7ceec259-ea9e-5770-87a6-70ecd631ab27",
            "title": "SoundParticleDisplacement",
            "title*": {"en": "Sound Particle Displacement"},
            "description": "Sound Particle Displacement is the nstantaneous displacement of a particle in a medium from what would be its position in the absence of sound waves.",
            "description*": {
                "en": "Sound Particle Displacement is the nstantaneous displacement of a particle in a medium from what would be its position in the absence of sound waves."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSoundParticleDisplacementValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7ceec259ea9e577087a670ecd631ab27"]


class RelativeAtomicMass(DimensionlessRatio):
    """
    "Relative Atomic Mass " is a dimensionless physical quantity, the ratio of the average mass of atoms of an element (from a given source) to 1/12 of the mass of an atom of carbon-12 (known as the unified atomic mass unit)
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1e5c0bad-db35-5cd5-91ec-727ff16e88d9",
            "title": "RelativeAtomicMass",
            "title*": {"en": "Relative Atomic Mass"},
            "description": '"Relative Atomic Mass " is a dimensionless physical quantity, the ratio of the average mass of atoms of an element (from a given source) to 1/12 of the mass of an atom of carbon-12 (known as the unified atomic mass unit)',
            "description*": {
                "en": '"Relative Atomic Mass " is a dimensionless physical quantity, the ratio of the average mass of atoms of an element (from a given source) to 1/12 of the mass of an atom of carbon-12 (known as the unified atomic mass unit)'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRelativeAtomicMassValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1e5c0baddb355cd591ec727ff16e88d9"]


class BraggAngle(Angle):
    """
    "Bragg Angle" describes the condition for a plane wave to be diffracted from a family of lattice planes, the angle between the wavevector of the incident plane wave, and the lattice planes.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "9a7f3c02-8f7b-5055-a03f-ef1d0ec722ee",
            "title": "BraggAngle",
            "title*": {"en": "Bragg Angle"},
            "description": '"Bragg Angle" describes the condition for a plane wave to be diffracted from a family of lattice planes, the angle between the wavevector of the incident plane wave, and the lattice planes.',
            "description*": {
                "en": '"Bragg Angle" describes the condition for a plane wave to be diffracted from a family of lattice planes, the angle between the wavevector of the incident plane wave, and the lattice planes.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasBraggAngleValue",
            "@context": [
                "/wiki/Category:OSW2339256af71e5635a541ac7f5a437141?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9a7f3c028f7b5055a03fef1d0ec722ee"]


class ModulusOfImpedanceUnit(UnitEnum):
    ohm = "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1"
    milli_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSWa8d17cb3f4255320af6052cbd471d716"
    )
    mega_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSW14b14dd3c32d5ee199a67e3796734a4a"
    )
    kilo_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSW5e05beabf6935ae2b559c1cffc788110"
    )
    micro_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSWacd4090bd8335717b6eea6b8c1151b29"
    )
    giga_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSW66dbbd77c6ca5d5684b223fdfcc7b773"
    )
    tera_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSW5196e38637c752e58c2b5be5521e4234"
    )


class ModulusOfImpedance(QuantityValue):
    """
    "Modulus Of Impedance} is the absolute value of the quantity $\\textit{impedance}$. Apparent impedance is defined more generally as

    the quotient of rms voltage and rms electric current; it is often denoted by $Z$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4804fb4f-1134-5ebe-99f0-eaaabafc1c88",
            "title": "ModulusOfImpedance",
            "title*": {"en": "Modulus Of Impedance"},
            "description": '"Modulus Of Impedance} is the absolute value of the quantity $\\textit{impedance}$. Apparent impedance is defined more generally as\n\nthe quotient of rms voltage and rms electric current; it is often denoted by $Z$.',
            "description*": {
                "en": '"Modulus Of Impedance} is the absolute value of the quantity $\\textit{impedance}$. Apparent impedance is defined more generally as\n\nthe quotient of rms voltage and rms electric current; it is often denoted by $Z$.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasModulusOfImpedanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4804fb4f11345ebe99f0eaaabafc1c88"]
    unit: Optional[ModulusOfImpedanceUnit] = Field(
        ModulusOfImpedanceUnit.ohm,
        options={"enum_titles": ["Ω", "mΩ", "MΩ", "kΩ", "μΩ", "GΩ", "TΩ"]},
        title="ModulusOfImpedanceUnit",
        x_enum_varnames=[
            "ohm",
            "milli_ohm",
            "mega_ohm",
            "kilo_ohm",
            "micro_ohm",
            "giga_ohm",
            "tera_ohm",
        ],
    )


class AcousticImpediance(MassPerAreaTime):
    """
    Acoustic impedance at a surface is the complex quotient of the average sound pressure over that surface by the sound volume flow rate through that surface.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "1122e0bc-34a9-581f-aea3-1f6967f701d6",
            "title": "AcousticImpediance",
            "title*": {"en": "Acoustic Impediance"},
            "description": "Acoustic impedance at a surface is the complex quotient of the average sound pressure over that surface by the sound volume flow rate through that surface.",
            "description*": {
                "en": "Acoustic impedance at a surface is the complex quotient of the average sound pressure over that surface by the sound volume flow rate through that surface."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAcousticImpedianceValue",
            "@context": [
                "/wiki/Category:OSW9e775ee5d35455faaa88953b35b2d911?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW1122e0bc34a9581faea31f6967f701d6"]


class VolumePerTimeUnit(UnitEnum):
    meter_cubed_per_second = "Item:OSW4ed5503a56ab514ab3d925287da52a95"
    deci_meter_cubed_per_second = (
        "Item:OSW4ed5503a56ab514ab3d925287da52a95#OSW58c067fb208b5294899599809141c3ff"
    )
    centi_meter_cubed_per_second = (
        "Item:OSW4ed5503a56ab514ab3d925287da52a95#OSWacda1333cb6958069dc83172f3a047db"
    )


class VolumePerTime(QuantityValue):
    """
    This is an autogenerated partial class definition of 'VolumePerTime'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "015e4223-9c0f-5ff3-8b65-340955c12f80",
            "title": "VolumePerTime",
            "title*": {"en": "Volume per Time"},
            "description": "This is an autogenerated partial class definition of 'VolumePerTime'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVolumePerTimeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW015e42239c0f5ff38b65340955c12f80"]
    unit: Optional[VolumePerTimeUnit] = Field(
        VolumePerTimeUnit.meter_cubed_per_second,
        options={"enum_titles": ["m³/s", "dm³/s", "cm³/s"]},
        title="VolumePerTimeUnit",
        x_enum_varnames=[
            "meter_cubed_per_second",
            "deci_meter_cubed_per_second",
            "centi_meter_cubed_per_second",
        ],
    )


class SoundExposureLevelUnit(UnitEnum):
    byte = "Item:OSW20ac6724f1a05ee884222d546955e78f"


class SoundExposureLevel(QuantityValue):
    """
    Sound Exposure Level abbreviated as $SEL$ and $LAE$, is the total noise energy produced from a single noise event, expressed as a logarithmic ratio from a reference level.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4e21f4a2-c906-5a73-aebb-426c037f5362",
            "title": "SoundExposureLevel",
            "title*": {"en": "Sound exposure level"},
            "description": "Sound Exposure Level abbreviated as $SEL$ and $LAE$, is the total noise energy produced from a single noise event, expressed as a logarithmic ratio from a reference level.",
            "description*": {
                "en": "Sound Exposure Level abbreviated as $SEL$ and $LAE$, is the total noise energy produced from a single noise event, expressed as a logarithmic ratio from a reference level."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSoundExposureLevelValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4e21f4a2c9065a73aebb426c037f5362"]
    unit: Optional[SoundExposureLevelUnit] = Field(
        SoundExposureLevelUnit.byte,
        options={"enum_titles": ["B"]},
        title="SoundExposureLevelUnit",
        x_enum_varnames=["byte"],
    )


class ElectricPotentialUnit(UnitEnum):
    volt = "Item:OSW85efe1428cb75363a75aab6435e2d98d"
    micro_volt = (
        "Item:OSW85efe1428cb75363a75aab6435e2d98d#OSWc0cb09a94aa553589a59ea70bfccfc96"
    )
    mega_volt = (
        "Item:OSW85efe1428cb75363a75aab6435e2d98d#OSW78798aa1bdcb57f0aea8d4eb86ff3355"
    )
    milli_volt = (
        "Item:OSW85efe1428cb75363a75aab6435e2d98d#OSW82d25d00b1485cc18c204f95de4536a9"
    )
    kilo_volt = (
        "Item:OSW85efe1428cb75363a75aab6435e2d98d#OSW4deed980237a5360b48e0dd1331d4199"
    )


class ElectricPotential(QuantityValue):
    """
    The Electric Potential is a scalar valued quantity associated with an electric field. The electric potential $\phi(x)$ at a point, $x$, is formally defined as the line integral of the electric field taken along a path from x to the point at infinity. If the electric field is static, that is time independent, then the choice of the path is arbitrary; however if the electric field is time dependent, taking the integral a different paths will produce different results.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "e88cb448-2e6e-587d-922c-9004a3d73a8d",
            "title": "ElectricPotential",
            "title*": {"en": "Electric potential", "de": "Elektrisches Potenzial"},
            "description": "The Electric Potential is a scalar valued quantity associated with an electric field. The electric potential $\\phi(x)$ at a point, $x$, is formally defined as the line integral of the electric field taken along a path from x to the point at infinity. If the electric field is static, that is time independent, then the choice of the path is arbitrary; however if the electric field is time dependent, taking the integral a different paths will produce different results.",
            "description*": {
                "en": "The Electric Potential is a scalar valued quantity associated with an electric field. The electric potential $\\phi(x)$ at a point, $x$, is formally defined as the line integral of the electric field taken along a path from x to the point at infinity. If the electric field is static, that is time independent, then the choice of the path is arbitrary; however if the electric field is time dependent, taking the integral a different paths will produce different results."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricPotentialValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe88cb4482e6e587d922c9004a3d73a8d"]
    unit: Optional[ElectricPotentialUnit] = Field(
        ElectricPotentialUnit.volt,
        options={"enum_titles": ["V", "µV", "MV", "mV", "kV"]},
        title="ElectricPotentialUnit",
        x_enum_varnames=["volt", "micro_volt", "mega_volt", "milli_volt", "kilo_volt"],
    )


class ResistivityUnit(UnitEnum):
    meter_ohm = "Item:OSW825f941d934e5a73866e39b6c42c99f0"


class Resistivity(QuantityValue):
    """
    "Resistivity" is the inverse of the conductivity when this inverse exists.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "25cb564b-caed-56bc-84bc-b4c518f7d8d8",
            "title": "Resistivity",
            "title*": {"en": "Resistivity"},
            "description": '"Resistivity" is the inverse of the conductivity when this inverse exists.',
            "description*": {
                "en": '"Resistivity" is the inverse of the conductivity when this inverse exists.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasResistivityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW25cb564bcaed56bc84bcb4c518f7d8d8"]
    unit: Optional[ResistivityUnit] = Field(
        ResistivityUnit.meter_ohm,
        options={"enum_titles": ["Ω·m"]},
        title="ResistivityUnit",
        x_enum_varnames=["meter_ohm"],
    )


class LiftForce(Force):
    """
    The lift force, lifting force or simply lift is the sum of all the forces on a body that force it to move perpendicular to the direction of flow.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "640ee9c8-ab96-5ca2-ae9a-83571a2e057e",
            "title": "LiftForce",
            "title*": {"en": "Lift Force"},
            "description": "The lift force, lifting force or simply lift is the sum of all the forces on a body that force it to move perpendicular to the direction of flow.",
            "description*": {
                "en": "The lift force, lifting force or simply lift is the sum of all the forces on a body that force it to move perpendicular to the direction of flow."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLiftForceValue",
            "@context": [
                "/wiki/Category:OSW1b832c1a42c055eb9669bb0cdda18d7f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW640ee9c8ab965ca2ae9a83571a2e057e"]


class Activity(StochasticProcess):
    """
    $\\textit{Activity}$ is the number of decays per unit time of a radioactive sample,
       the term used to characterise the number of nuclei which disintegrate in a radioactive substance per unit time.
      Activity is usually measured in Becquerels ($Bq$), where 1 $Bq$ is 1 disintegration per second,
       in honor of the scientist Henri Becquerel.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "e45bd0c8-c7c8-527d-a9d3-1b11e061b60a",
            "title": "Activity",
            "title*": {"en": "Activity"},
            "description": "$\\textit{Activity}$ is the number of decays per unit time of a radioactive sample,\n   the term used to characterise the number of nuclei which disintegrate in a radioactive substance per unit time. \n  Activity is usually measured in Becquerels ($Bq$), where 1 $Bq$ is 1 disintegration per second,\n   in honor of the scientist Henri Becquerel.",
            "description*": {
                "en": "$\\textit{Activity}$ is the number of decays per unit time of a radioactive sample,\n   the term used to characterise the number of nuclei which disintegrate in a radioactive substance per unit time. \n  Activity is usually measured in Becquerels ($Bq$), where 1 $Bq$ is 1 disintegration per second,\n   in honor of the scientist Henri Becquerel."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasActivityValue",
            "@context": [
                "/wiki/Category:OSWbec1168058375097b6157eb8ac35eab4?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe45bd0c8c7c8527da9d31b11e061b60a"]


class VehicleVelocity(Velocity):
    """
    This is an autogenerated partial class definition of 'VehicleVelocity'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "42543b13-af4c-5af8-8462-e7ac8ff8707d",
            "title": "VehicleVelocity",
            "title*": {"en": "Vehicle Velocity"},
            "description": "This is an autogenerated partial class definition of 'VehicleVelocity'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVehicleVelocityValue",
            "@context": [
                "/wiki/Category:OSW397c67ece63a5a5c96bad9349f49f3d7?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW42543b13af4c5af88462e7ac8ff8707d"]


class ElectricCurrentPerTemperatureUnit(UnitEnum):
    ampere_per_Celsius = "Item:OSW167de6aa22ae5b798f9914c5468307c3"


class ElectricCurrentPerTemperature(QuantityValue):
    """
    "Electric Current per Temperature" is used to express how a current is subject to temperature. Originally used in Wien's Law to describe phenomena related to filaments. One use today is to express how a current generator derates with temperature.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "442f95e9-3435-5966-b4f8-7f1d5ed06b13",
            "title": "ElectricCurrentPerTemperature",
            "title*": {"en": "Electric Current per Temperature"},
            "description": '"Electric Current per Temperature" is used to express how a current is subject to temperature. Originally used in Wien\'s Law to describe phenomena related to filaments. One use today is to express how a current generator derates with temperature.',
            "description*": {
                "en": '"Electric Current per Temperature" is used to express how a current is subject to temperature. Originally used in Wien\'s Law to describe phenomena related to filaments. One use today is to express how a current generator derates with temperature.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricCurrentPerTemperatureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW442f95e934355966b4f87f1d5ed06b13"]
    unit: Optional[ElectricCurrentPerTemperatureUnit] = Field(
        ElectricCurrentPerTemperatureUnit.ampere_per_Celsius,
        options={"enum_titles": ["A/°C"]},
        title="ElectricCurrentPerTemperatureUnit",
        x_enum_varnames=["ampere_per_Celsius"],
    )


class SpecificPower(QuantityValue):
    """
    Specific power, also known as power-to-weight ratio, is the amount of power output per unit mass of the power source. It is generally used to measure the performance of that power source. The higher the ratio, the more power a system produces relative to its weight. It's commonly used in the automotive and aerospace industries to compare the performance of different engines. It's generally measured in watts per kilogram (W/kg) or horsepower per pound (hp/lb).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "592625bd-38e7-5a4e-87d8-66ef370b8a6c",
            "title": "SpecificPower",
            "title*": {"en": "Specific Power"},
            "description": "Specific power, also known as power-to-weight ratio, is the amount of power output per unit mass of the power source. It is generally used to measure the performance of that power source. The higher the ratio, the more power a system produces relative to its weight. It's commonly used in the automotive and aerospace industries to compare the performance of different engines. It's generally measured in watts per kilogram (W/kg) or horsepower per pound (hp/lb).",
            "description*": {
                "en": "Specific power, also known as power-to-weight ratio, is the amount of power output per unit mass of the power source. It is generally used to measure the performance of that power source. The higher the ratio, the more power a system produces relative to its weight. It's commonly used in the automotive and aerospace industries to compare the performance of different engines. It's generally measured in watts per kilogram (W/kg) or horsepower per pound (hp/lb)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificPowerValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW592625bd38e75a4e87d866ef370b8a6c"]
    unit: Optional[SpecificPowerUnit] = Field(
        SpecificPowerUnit.gray_per_second,
        options={"enum_titles": ["Gy/s"]},
        title="SpecificPowerUnit",
        x_enum_varnames=["gray_per_second"],
    )


class IonTransportNumber(DimensionlessRatio):
    """
    The "Ion Transport Number" is a quantity which indicates the different contribution of ions to the electric current in electrolytes due to different electrical mobility.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "4b7775a1-7ff1-520a-aad9-af4ddb1f283c",
            "title": "IonTransportNumber",
            "title*": {"en": "Ion Transport Number"},
            "description": 'The "Ion Transport Number" is a quantity which indicates the different contribution of ions to the electric current in electrolytes due to different electrical mobility.',
            "description*": {
                "en": 'The "Ion Transport Number" is a quantity which indicates the different contribution of ions to the electric current in electrolytes due to different electrical mobility.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasIonTransportNumberValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4b7775a17ff1520aaad9af4ddb1f283c"]


class ExitPlaneTemperature(Temperature):
    """
    This is an autogenerated partial class definition of 'ExitPlaneTemperature'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "56417a86-9994-5e82-ab40-ada7d4b44973",
            "title": "ExitPlaneTemperature",
            "title*": {"en": "Exit Plane Temperature"},
            "description": "This is an autogenerated partial class definition of 'ExitPlaneTemperature'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasExitPlaneTemperatureValue",
            "@context": [
                "/wiki/Category:OSW20927e4900e95e93985698c92995f964?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW56417a8699945e82ab40ada7d4b44973"]


class ImpedanceUnit(UnitEnum):
    ohm = "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1"
    milli_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSWa8d17cb3f4255320af6052cbd471d716"
    )
    mega_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSW14b14dd3c32d5ee199a67e3796734a4a"
    )
    kilo_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSW5e05beabf6935ae2b559c1cffc788110"
    )
    micro_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSWacd4090bd8335717b6eea6b8c1151b29"
    )
    giga_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSW66dbbd77c6ca5d5684b223fdfcc7b773"
    )
    tera_ohm = (
        "Item:OSWf9a174b6598a52fe8b9ac50ee48bf7a1#OSW5196e38637c752e58c2b5be5521e4234"
    )


class Impedance(QuantityValue):
    """
    "Impedance" is the measure of the opposition that a circuit presents to the passage of a current when a voltage is applied. In quantitative terms, it is the complex ratio of the voltage to the current in an alternating current (AC) circuit. Impedance extends the concept of resistance to AC circuits, and possesses both magnitude and phase, unlike resistance, which has only magnitude. When a circuit is driven with direct current (DC), there is no distinction between impedance and resistance; the latter can be thought of as impedance with zero phase angle.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "3e38ca0e-a54e-5d02-917c-52434bcf41d6",
            "title": "Impedance",
            "title*": {"en": "Impedance"},
            "description": '"Impedance" is the measure of the opposition that a circuit presents to the passage of a current when a voltage is applied. In quantitative terms, it is the complex ratio of the voltage to the current in an alternating current (AC) circuit. Impedance extends the concept of resistance to AC circuits, and possesses both magnitude and phase, unlike resistance, which has only magnitude. When a circuit is driven with direct current (DC), there is no distinction between impedance and resistance; the latter can be thought of as impedance with zero phase angle.',
            "description*": {
                "en": '"Impedance" is the measure of the opposition that a circuit presents to the passage of a current when a voltage is applied. In quantitative terms, it is the complex ratio of the voltage to the current in an alternating current (AC) circuit. Impedance extends the concept of resistance to AC circuits, and possesses both magnitude and phase, unlike resistance, which has only magnitude. When a circuit is driven with direct current (DC), there is no distinction between impedance and resistance; the latter can be thought of as impedance with zero phase angle.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasImpedanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3e38ca0ea54e5d02917c52434bcf41d6"]
    unit: Optional[ImpedanceUnit] = Field(
        ImpedanceUnit.ohm,
        options={"enum_titles": ["Ω", "mΩ", "MΩ", "kΩ", "μΩ", "GΩ", "TΩ"]},
        title="ImpedanceUnit",
        x_enum_varnames=[
            "ohm",
            "milli_ohm",
            "mega_ohm",
            "kilo_ohm",
            "micro_ohm",
            "giga_ohm",
            "tera_ohm",
        ],
    )


class RadiantExposure(EnergyPerArea):
    """
    Radiant exposure is a measure of the total radiant energy incident on a surface per unit area; equal to the integral over time of the radiant flux density. Also known as exposure.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "db037d62-fb0c-5294-8d59-44b910ec7e40",
            "title": "RadiantExposure",
            "title*": {"en": "Radiant Exposure"},
            "description": "Radiant exposure is a measure of the total radiant energy incident on a surface per unit area; equal to the integral over time of the radiant flux density. Also known as exposure.",
            "description*": {
                "en": "Radiant exposure is a measure of the total radiant energy incident on a surface per unit area; equal to the integral over time of the radiant flux density. Also known as exposure."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRadiantExposureValue",
            "@context": [
                "/wiki/Category:OSW46d8ae433dda5e368d8e76800d85ee12?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWdb037d62fb0c52948d5944b910ec7e40"]


class MaximumExpectedOperatingPressure(Pressure):
    """
    This is an autogenerated partial class definition of 'MaximumExpectedOperatingPressure'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b9a0d284-8bdf-58a0-b258-81447ff8513d",
            "title": "MaximumExpectedOperatingPressure",
            "title*": {"en": "Maximum Expected Operating Pressure"},
            "description": "This is an autogenerated partial class definition of 'MaximumExpectedOperatingPressure'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMaximumExpectedOperatingPressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb9a0d2848bdf58a0b25881447ff8513d"]


class InverseSquareEnergyUnit(UnitEnum):
    per_joule_squared = "Item:OSW0dddefef8d455a10adeaafa69cd3afd7"


class InverseSquareEnergy(QuantityValue):
    """
    This is an autogenerated partial class definition of 'InverseSquareEnergy'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "d1463903-2128-589b-bb33-cfd08b009878",
            "title": "InverseSquareEnergy",
            "title*": {"en": "Inverse Square Energy"},
            "description": "This is an autogenerated partial class definition of 'InverseSquareEnergy'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInverseSquareEnergyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd14639032128589bbb33cfd08b009878"]
    unit: Optional[InverseSquareEnergyUnit] = Field(
        InverseSquareEnergyUnit.per_joule_squared,
        options={"enum_titles": ["1/J²"]},
        title="InverseSquareEnergyUnit",
        x_enum_varnames=["per_joule_squared"],
    )


class WaterVapourDiffusionCoefficientUnit(UnitEnum):
    kilo_gram_per_meter_per_pascal_per_second = (
        "Item:OSWa2b4ab78b9975e0891d0d14dfbb12314"
    )


class WaterVapourDiffusionCoefficient(QuantityValue):
    """
    The Water vapour diffusion coefficient describes how easy vapor diffusion happens in a given material.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "31d75c6a-e929-5c32-9263-57387234c870",
            "title": "WaterVapourDiffusionCoefficient",
            "title*": {
                "en": "Water vapour diffusion coefficient",
                "de": "Wasserdampfdiffusionsleitkoeffizient",
            },
            "description": "The Water vapour diffusion coefficient describes how easy vapor diffusion happens in a given material.",
            "description*": {
                "en": "The Water vapour diffusion coefficient describes how easy vapor diffusion happens in a given material."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasWaterVapourDiffusionCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW31d75c6ae9295c32926357387234c870"]
    unit: Optional[WaterVapourDiffusionCoefficientUnit] = Field(
        WaterVapourDiffusionCoefficientUnit.kilo_gram_per_meter_per_pascal_per_second,
        options={"enum_titles": ["kg/(Pa·s·m)"]},
        title="WaterVapourDiffusionCoefficientUnit",
        x_enum_varnames=["kilo_gram_per_meter_per_pascal_per_second"],
    )


class TemperaturePerTimeSquaredUnit(UnitEnum):
    kelvin_per_second_squared = "Item:OSW44905d403bba5525b7b95b2325c87b42"


class TemperaturePerTimeSquared(QuantityValue):
    """
    This is an autogenerated partial class definition of 'TemperaturePerTimeSquared'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "3023cedc-5307-51a1-8804-888ed56cdca5",
            "title": "TemperaturePerTimeSquared",
            "title*": {"en": "Temperature per Time Squared"},
            "description": "This is an autogenerated partial class definition of 'TemperaturePerTimeSquared'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTemperaturePerTimeSquaredValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3023cedc530751a18804888ed56cdca5"]
    unit: Optional[TemperaturePerTimeSquaredUnit] = Field(
        TemperaturePerTimeSquaredUnit.kelvin_per_second_squared,
        options={"enum_titles": ["K/s²"]},
        title="TemperaturePerTimeSquaredUnit",
        x_enum_varnames=["kelvin_per_second_squared"],
    )


class RelaxationTime(Time):
    """
    "Relaxation TIme" is a time constant for exponential decay towards equilibrium.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "63d2744b-1442-52ec-a779-5fec18656d3f",
            "title": "RelaxationTime",
            "title*": {"en": "Relaxation TIme"},
            "description": '"Relaxation TIme" is a time constant for exponential decay towards equilibrium.',
            "description*": {
                "en": '"Relaxation TIme" is a time constant for exponential decay towards equilibrium.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRelaxationTimeValue",
            "@context": [
                "/wiki/Category:OSW389cb87d31be515aa5d2f12e2b66e938?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW63d2744b144252eca7795fec18656d3f"]


class ModulusOfLinearSubgradeReaction(ForcePerArea):
    """
    Modulus of Linear Subgrade Reaction is a measure for modulus of linear subgrade reaction, which expresses the elastic bedding of a linear structural element per length, such as for a beam. It is typically measured in N/m^2
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ebf10f70-d777-5b28-ab44-f8fcecbd8b16",
            "title": "ModulusOfLinearSubgradeReaction",
            "title*": {"en": "Modulus of Linear Subgrade Reaction"},
            "description": "Modulus of Linear Subgrade Reaction is a measure for modulus of linear subgrade reaction, which expresses the elastic bedding of a linear structural element per length, such as for a beam. It is typically measured in N/m^2",
            "description*": {
                "en": "Modulus of Linear Subgrade Reaction is a measure for modulus of linear subgrade reaction, which expresses the elastic bedding of a linear structural element per length, such as for a beam. It is typically measured in N/m^2"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasModulusOfLinearSubgradeReactionValue",
            "@context": [
                "/wiki/Category:OSW2ff3a26daf13563481acc8b0ebc5b37f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWebf10f70d7775b28ab44f8fcecbd8b16"]


class ShearStrain(Strain):
    """
    Shear Strain is the amount of deformation perpendicular to a given line rather than parallel to it.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "cd5753ab-faf3-5c29-92b9-887c20e8443c",
            "title": "ShearStrain",
            "title*": {"en": "Shear Strain"},
            "description": "Shear Strain is the amount of deformation perpendicular to a given line rather than parallel to it.",
            "description*": {
                "en": "Shear Strain is the amount of deformation perpendicular to a given line rather than parallel to it."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasShearStrainValue",
            "@context": [
                "/wiki/Category:OSW877f6c0b113452649d1a4ac5ea3a6710?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcd5753abfaf35c2992b9887c20e8443c"]


class SoundPower(Power):
    """
    Sound power or acoustic power $P_a$ is a measure of sonic energy $E$ per time $t$ unit. It is measured in watts and can be computed as sound intensity ($I$) times area ($A$).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "499c7be1-f792-51ba-989d-017a787d40e3",
            "title": "SoundPower",
            "title*": {"en": "Sound power", "de": "Schallleistung"},
            "description": "Sound power or acoustic power $P_a$ is a measure of sonic energy $E$ per time $t$ unit. It is measured in watts and can be computed as sound intensity ($I$) times area ($A$).",
            "description*": {
                "en": "Sound power or acoustic power $P_a$ is a measure of sonic energy $E$ per time $t$ unit. It is measured in watts and can be computed as sound intensity ($I$) times area ($A$)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSoundPowerValue",
            "@context": [
                "/wiki/Category:OSWa819b53101b854ad923f9f13dfb41794?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW499c7be1f79251ba989d017a787d40e3"]


class FishBiotransformationHalfLife(Time):
    """
    A time that quantifies how long its takes to transform 50% of a substance's total concentration from any concentration point in time in fish via whole body metabolic reactions.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "f75817e6-c9af-5ba9-b9d3-ed582403f82c",
            "title": "FishBiotransformationHalfLife",
            "title*": {"en": "Fish Biotransformation Half Life"},
            "description": "A time that quantifies how long its takes to transform 50% of a substance's total concentration from any concentration point in time in fish via whole body metabolic reactions.",
            "description*": {
                "en": "A time that quantifies how long its takes to transform 50% of a substance's total concentration from any concentration point in time in fish via whole body metabolic reactions."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFishBiotransformationHalfLifeValue",
            "@context": [
                "/wiki/Category:OSW389cb87d31be515aa5d2f12e2b66e938?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf75817e6c9af5ba9b9d3ed582403f82c"]


class Pressure(ForcePerArea):
    """
    Pressure is an effect which occurs when a force is applied on a surface. Pressure is the amount of force acting on a unit area. Pressure is distinct from stress, as the former is the ratio of the component of force normal to a surface to the surface area. Stress is a tensor that relates the vector force to the vector area.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b58cb5a4-654f-52e1-804c-74c035d21352",
            "title": "Pressure",
            "title*": {"en": "Pressure", "de": "Druck"},
            "description": "Pressure is an effect which occurs when a force is applied on a surface. Pressure is the amount of force acting on a unit area. Pressure is distinct from stress, as the former is the ratio of the component of force normal to a surface to the surface area. Stress is a tensor that relates the vector force to the vector area.",
            "description*": {
                "en": "Pressure is an effect which occurs when a force is applied on a surface. Pressure is the amount of force acting on a unit area. Pressure is distinct from stress, as the former is the ratio of the component of force normal to a surface to the surface area. Stress is a tensor that relates the vector force to the vector area."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPressureValue",
            "@context": [
                "/wiki/Category:OSW2ff3a26daf13563481acc8b0ebc5b37f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb58cb5a4654f52e1804c74c035d21352"]


class MagneticMomentUnit(UnitEnum):
    ampere_meter_squared = "Item:OSWa0a0662b7e5b53f79c6d8bef841dd415"


class MagneticMoment(QuantityValue):
    """
    "Magnetic Moment", for a magnetic dipole, is a vector quantity equal to the product of the current, the loop area, and the unit vector normal to the loop plane, the direction of which corresponds to the loop orientation. "Magnetic Moment" is also referred to as "Magnetic Area Moment", and is not to be confused with Magnetic Dipole Moment.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "7d63568f-d3d8-5426-8aba-399d60e611ef",
            "title": "MagneticMoment",
            "title*": {"en": "Magnetic moment", "de": "Magnetisches Dipolmoment"},
            "description": '"Magnetic Moment", for a magnetic dipole, is a vector quantity equal to the product of the current, the loop area, and the unit vector normal to the loop plane, the direction of which corresponds to the loop orientation. "Magnetic Moment" is also referred to as "Magnetic Area Moment", and is not to be confused with Magnetic Dipole Moment.',
            "description*": {
                "en": '"Magnetic Moment", for a magnetic dipole, is a vector quantity equal to the product of the current, the loop area, and the unit vector normal to the loop plane, the direction of which corresponds to the loop orientation. "Magnetic Moment" is also referred to as "Magnetic Area Moment", and is not to be confused with Magnetic Dipole Moment.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMagneticMomentValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7d63568fd3d854268aba399d60e611ef"]
    unit: Optional[MagneticMomentUnit] = Field(
        MagneticMomentUnit.ampere_meter_squared,
        options={"enum_titles": ["A·m²"]},
        title="MagneticMomentUnit",
        x_enum_varnames=["ampere_meter_squared"],
    )


class EllipticalOrbitPerigeeVelocity(VehicleVelocity):
    """
    Velocity at apogee for an elliptical orbit velocity.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "aabb19e4-a406-5b32-adf8-94d97cb462b6",
            "title": "EllipticalOrbitPerigeeVelocity",
            "title*": {"en": "Elliptical Orbit Perigee Velocity"},
            "description": "Velocity at apogee for an elliptical orbit velocity.",
            "description*": {
                "en": "Velocity at apogee for an elliptical orbit velocity."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEllipticalOrbitPerigeeVelocityValue",
            "@context": [
                "/wiki/Category:OSW42543b13af4c5af88462e7ac8ff8707d?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWaabb19e4a4065b32adf894d97cb462b6"]


class TemperatureDifference(Temperature):
    """
    Temperature difference (Delta T) is the difference of temperatures between two measuring points
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0ec63b28-8571-5618-b4e7-ffdba2987af8",
            "title": "TemperatureDifference",
            "title*": {"en": "Temperature difference", "de": "Temperaturdifferenz"},
            "description": "Temperature difference (Delta T) is the difference of temperatures between two measuring points",
            "description*": {
                "en": "Temperature difference (Delta T) is the difference of temperatures between two measuring points"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTemperatureDifferenceValue",
            "@context": [
                "/wiki/Category:OSW20927e4900e95e93985698c92995f964?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0ec63b2885715618b4e7ffdba2987af8"]


class TotalAngularMomentumQuantumNumber(QuantumNumber):
    """
    The "Total Angular Quantum Number" describes the magnitude of total angular momentum $J$, where $j$ refers to a specific particle and $J$ is used for the whole system.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "176905fa-6516-5b4d-834f-093249932fef",
            "title": "TotalAngularMomentumQuantumNumber",
            "title*": {"en": "Total Angular Momentum Quantum Number"},
            "description": 'The "Total Angular Quantum Number" describes the magnitude of total angular momentum $J$, where $j$ refers to a specific particle and $J$ is used for the whole system.',
            "description*": {
                "en": 'The "Total Angular Quantum Number" describes the magnitude of total angular momentum $J$, where $j$ refers to a specific particle and $J$ is used for the whole system.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTotalAngularMomentumQuantumNumberValue",
            "@context": [
                "/wiki/Category:OSWa35c06b30b7750c49dd53768ffd9e756?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW176905fa65165b4d834f093249932fef"]


class MagneticFluxPerLengthUnit(UnitEnum):
    newton_per_ampere = "Item:OSWefcd851d718352018f7355bf1594398e"


class MagneticFluxPerLength(QuantityValue):
    """
    "Magnetic Flux per Length" is a quantity in the SI and C.G.S. Systems of Quantities.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "bb4c4273-347b-5d59-b4d0-b083dd8135a5",
            "title": "MagneticFluxPerLength",
            "title*": {"en": "Magnetic flux per length"},
            "description": '"Magnetic Flux per Length" is a quantity in the SI and C.G.S. Systems of Quantities.',
            "description*": {
                "en": '"Magnetic Flux per Length" is a quantity in the SI and C.G.S. Systems of Quantities.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMagneticFluxPerLengthValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWbb4c4273347b5d59b4d0b083dd8135a5"]
    unit: Optional[MagneticFluxPerLengthUnit] = Field(
        MagneticFluxPerLengthUnit.newton_per_ampere,
        options={"enum_titles": ["N/A"]},
        title="MagneticFluxPerLengthUnit",
        x_enum_varnames=["newton_per_ampere"],
    )


class LengthEnergyUnit(UnitEnum):
    fermi_mega_electron_volt = "Item:OSW8a2c52d852d358a79e43fa4496c65528"


class LengthEnergy(QuantityValue):
    """
    This is an autogenerated partial class definition of 'LengthEnergy'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "ebfe1183-8eec-5b17-a7f2-42ea30869fbb",
            "title": "LengthEnergy",
            "title*": {"en": "Length Energy"},
            "description": "This is an autogenerated partial class definition of 'LengthEnergy'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLengthEnergyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWebfe11838eec5b17a7f242ea30869fbb"]
    unit: Optional[LengthEnergyUnit] = Field(
        LengthEnergyUnit.fermi_mega_electron_volt,
        options={"enum_titles": ["MeV·fm"]},
        title="LengthEnergyUnit",
        x_enum_varnames=["fermi_mega_electron_volt"],
    )


class BendingMomentOfForce(Torque):
    """
    A bending moment exists in a structural element when a moment is applied to the element so that the element bends. It is the component of moment of force perpendicular to the longitudinal axis of a beam or a shaft.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3d007b21-655e-5a68-9b8a-d512f768cd37",
            "title": "BendingMomentOfForce",
            "title*": {"en": "Bending Moment of Force"},
            "description": "A bending moment exists in a structural element when a moment is applied to the element so that the element bends. It is the component of moment of force perpendicular to the longitudinal axis of a beam or a shaft.",
            "description*": {
                "en": "A bending moment exists in a structural element when a moment is applied to the element so that the element bends. It is the component of moment of force perpendicular to the longitudinal axis of a beam or a shaft."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasBendingMomentOfForceValue",
            "@context": [
                "/wiki/Category:OSW77f25284632d50b0ae2be064592412ce?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3d007b21655e5a689b8ad512f768cd37"]


class FlightPathAngle(Angle):
    """
    Flight path angle is defined in two different ways. To the aerodynamicist, it is the angle between the flight path vector (where the airplane is going) and the local atmosphere. To the flight crew, it is normally known as the angle between the flight path vector and the horizon, also known as the climb (or descent) angle.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "00c10a25-00cf-59fd-bfaf-48764629b35d",
            "title": "FlightPathAngle",
            "title*": {"en": "Flight Path Angle"},
            "description": "Flight path angle is defined in two different ways. To the aerodynamicist, it is the angle between the flight path vector (where the airplane is going) and the local atmosphere. To the flight crew, it is normally known as the angle between the flight path vector and the horizon, also known as the climb (or descent) angle.",
            "description*": {
                "en": "Flight path angle is defined in two different ways. To the aerodynamicist, it is the angle between the flight path vector (where the airplane is going) and the local atmosphere. To the flight crew, it is normally known as the angle between the flight path vector and the horizon, also known as the climb (or descent) angle."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFlightPathAngleValue",
            "@context": [
                "/wiki/Category:OSW2339256af71e5635a541ac7f5a437141?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW00c10a2500cf59fdbfaf48764629b35d"]


class Permeability(QuantityValue):
    """
    This is an autogenerated partial class definition of 'Permeability'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "0f7b7612-7389-5e38-86f0-584b3b8197b1",
            "title": "Permeability",
            "title*": {"en": "Permeability"},
            "description": "This is an autogenerated partial class definition of 'Permeability'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPermeabilityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0f7b761273895e3886f0584b3b8197b1"]
    unit: Optional[PermeabilityUnit] = Field(
        PermeabilityUnit.henry_per_meter,
        options={"enum_titles": ["H/m", "μH/m", "nH/m"]},
        title="PermeabilityUnit",
        x_enum_varnames=[
            "henry_per_meter",
            "micro_henry_per_meter",
            "nano_henry_per_meter",
        ],
    )


class PositiveDimensionlessRatio(DimensionlessRatio):
    """
    A "Normalized Dimensionless Ratio" is a dimensionless ratio ranging from 0.0 to 1.0
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a76d2144-0d01-543a-aa63-a7e8d97c0438",
            "title": "PositiveDimensionlessRatio",
            "title*": {"en": "Positive Dimensionless Ratio"},
            "description": 'A "Normalized Dimensionless Ratio" is a dimensionless ratio ranging from 0.0 to 1.0',
            "description*": {
                "en": 'A "Normalized Dimensionless Ratio" is a dimensionless ratio ranging from 0.0 to 1.0'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPositiveDimensionlessRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa76d21440d01543aaa63a7e8d97c0438"]


class NominalAscentPropellantMass(Mass):
    """
    The amount of propellant mass within a stage that is available for impulse for use in nominal payload performance prediction. This mass excludes loaded propellant that has been set aside for off- nominal performance behavior (FPR and fuel bias).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "d5ff55bc-f210-5e6e-9e7f-4cf1bca75dad",
            "title": "NominalAscentPropellantMass",
            "title*": {"en": "Nominal Ascent Propellant Mass"},
            "description": "The amount of propellant mass within a stage that is available for impulse for use in nominal payload performance prediction. This mass excludes loaded propellant that has been set aside for off- nominal performance behavior (FPR and fuel bias).",
            "description*": {
                "en": "The amount of propellant mass within a stage that is available for impulse for use in nominal payload performance prediction. This mass excludes loaded propellant that has been set aside for off- nominal performance behavior (FPR and fuel bias)."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasNominalAscentPropellantMassValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd5ff55bcf2105e6e9e7f4cf1bca75dad"]


class BodyMassIndexUnit(UnitEnum):
    kilo_gram_per_meter_squared = (
        "Item:OSWb93e608c86fd5480a5de9cd1b3e9ea22#OSW86b6ab5f70aa5624be17645333d53d51"
    )


class BodyMassIndex(QuantityValue):
    """
    $\\textit{Body Mass Index}$, BMI, is an index of weight for height, calculated as: $BMI = \frac{M_{body}}{H^2}$, where $M_{body}$ is body mass in kg, and $H$ is height in metres. The BMI has been used as a guideline for defining whether a person is overweight because it minimizes the effect of height, but it does not take into consideration other important factors, such as age and body build. The BMI has also been used as an indicator of obesity on the assumption that the higher the index, the greater the level of body fat.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "6b1c18cb-5a6e-5051-9e02-6012231b9603",
            "title": "BodyMassIndex",
            "title*": {"en": "Body Mass Index"},
            "description": "$\\textit{Body Mass Index}$, BMI, is an index of weight for height, calculated as: $BMI = \\frac{M_{body}}{H^2}$, where $M_{body}$ is body mass in kg, and $H$ is height in metres. The BMI has been used as a guideline for defining whether a person is overweight because it minimizes the effect of height, but it does not take into consideration other important factors, such as age and body build. The BMI has also been used as an indicator of obesity on the assumption that the higher the index, the greater the level of body fat.",
            "description*": {
                "en": "$\\textit{Body Mass Index}$, BMI, is an index of weight for height, calculated as: $BMI = \\frac{M_{body}}{H^2}$, where $M_{body}$ is body mass in kg, and $H$ is height in metres. The BMI has been used as a guideline for defining whether a person is overweight because it minimizes the effect of height, but it does not take into consideration other important factors, such as age and body build. The BMI has also been used as an indicator of obesity on the assumption that the higher the index, the greater the level of body fat."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasBodyMassIndexValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6b1c18cb5a6e50519e026012231b9603"]
    unit: Optional[BodyMassIndexUnit] = Field(
        BodyMassIndexUnit.kilo_gram_per_meter_squared,
        options={"enum_titles": ["kg/m²"]},
        title="BodyMassIndexUnit",
        x_enum_varnames=["kilo_gram_per_meter_squared"],
    )


class PartialPressure(Pressure):
    """
    "Partial Pressure" is the pressure that the gas would have if it alone occupied the volume of the mixture at the same temperature.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "9bf4b48d-351a-56e9-a123-cd93d798ef12",
            "title": "PartialPressure",
            "title*": {"en": "Partial Pressure"},
            "description": '"Partial Pressure" is the pressure that the gas would have if it alone occupied the volume of the mixture at the same temperature.',
            "description*": {
                "en": '"Partial Pressure" is the pressure that the gas would have if it alone occupied the volume of the mixture at the same temperature.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPartialPressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9bf4b48d351a56e9a123cd93d798ef12"]


class LinearEnergyTransferUnit(UnitEnum):
    joule_per_meter = "Item:OSW0505357de255592eb766bdfce883acb3"


class LinearEnergyTransfer(QuantityValue):
    """
    "Linear Energy Transfer"  (LET) is the linear density of energy lost by a charged ionizing particle travelling through matter.Typically, this measure is used to quantify the effects of ionizing radiation on biological specimens or electronic devices.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "e471db8f-a7d8-5359-a1ad-86773c4d671b",
            "title": "LinearEnergyTransfer",
            "title*": {"en": "Linear Energy Transfer"},
            "description": '"Linear Energy Transfer"  (LET) is the linear density of energy lost by a charged ionizing particle travelling through matter.Typically, this measure is used to quantify the effects of ionizing radiation on biological specimens or electronic devices.',
            "description*": {
                "en": '"Linear Energy Transfer"  (LET) is the linear density of energy lost by a charged ionizing particle travelling through matter.Typically, this measure is used to quantify the effects of ionizing radiation on biological specimens or electronic devices.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLinearEnergyTransferValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe471db8fa7d85359a1ad86773c4d671b"]
    unit: Optional[LinearEnergyTransferUnit] = Field(
        LinearEnergyTransferUnit.joule_per_meter,
        options={"enum_titles": ["J/m"]},
        title="LinearEnergyTransferUnit",
        x_enum_varnames=["joule_per_meter"],
    )


class MassFluxDensity(MassPerAreaTime):
    """
    Produkt aus Strömungsgeschwindigkeit und Dichte
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b2039403-1e71-582e-963e-4a89b43289e7",
            "title": "MassFluxDensity",
            "title*": {"en": "Mass flux density"},
            "description": "Produkt aus Strömungsgeschwindigkeit und Dichte",
            "description*": {"en": "Produkt aus Strömungsgeschwindigkeit und Dichte"},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassFluxDensityValue",
            "@context": [
                "/wiki/Category:OSW9e775ee5d35455faaa88953b35b2d911?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb20394031e71582e963e4a89b43289e7"]


class Radiosity(PowerPerArea):
    """
    Radiosity is the total emitted and reflected radiation leaving a surface.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2c869e5a-09fa-5fdf-b818-543b40bacb08",
            "title": "Radiosity",
            "title*": {"en": "Radiosity"},
            "description": "Radiosity is the total emitted and reflected radiation leaving a surface.",
            "description*": {
                "en": "Radiosity is the total emitted and reflected radiation leaving a surface."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRadiosityValue",
            "@context": [
                "/wiki/Category:OSW40c46aba16f45962a7330b7f8b88681e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2c869e5a09fa5fdfb818543b40bacb08"]


class ConductanceUnit(UnitEnum):
    siemens = "Item:OSW46249e4c237d546198d98bff0b9d5e93"
    milli_siemens = (
        "Item:OSW46249e4c237d546198d98bff0b9d5e93#OSW8253047fc4835d79b0f31baf3b96182d"
    )
    kilo_siemens = (
        "Item:OSW46249e4c237d546198d98bff0b9d5e93#OSW35746906e9d051c39bdeebdf5736c2ba"
    )
    micro_siemens = (
        "Item:OSW46249e4c237d546198d98bff0b9d5e93#OSWfd5a12b202d2534c9cb0844fb6c4f15e"
    )


class Conductance(QuantityValue):
    """
    $\\textit{Conductance}$, for a resistive two-terminal element or two-terminal circuit with terminals A and B, quotient of the electric current i in the element or circuit by the voltage $u_{AB}$ between the terminals: $G = \frac{1}{R}$, where the electric current is taken as positive if its direction is from A to B and negative in the opposite case. The conductance of an element or circuit is the inverse of its resistance.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "0e1e7031-084d-5e20-b42b-5ceba993d916",
            "title": "Conductance",
            "title*": {"en": "Conductance"},
            "description": "$\\textit{Conductance}$, for a resistive two-terminal element or two-terminal circuit with terminals A and B, quotient of the electric current i in the element or circuit by the voltage $u_{AB}$ between the terminals: $G = \\frac{1}{R}$, where the electric current is taken as positive if its direction is from A to B and negative in the opposite case. The conductance of an element or circuit is the inverse of its resistance.",
            "description*": {
                "en": "$\\textit{Conductance}$, for a resistive two-terminal element or two-terminal circuit with terminals A and B, quotient of the electric current i in the element or circuit by the voltage $u_{AB}$ between the terminals: $G = \\frac{1}{R}$, where the electric current is taken as positive if its direction is from A to B and negative in the opposite case. The conductance of an element or circuit is the inverse of its resistance."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasConductanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0e1e7031084d5e20b42b5ceba993d916"]
    unit: Optional[ConductanceUnit] = Field(
        ConductanceUnit.siemens,
        options={"enum_titles": ["S", "mS", "kS", "μS"]},
        title="ConductanceUnit",
        x_enum_varnames=["siemens", "milli_siemens", "kilo_siemens", "micro_siemens"],
    )


class InverseEnergyUnit(UnitEnum):
    per_hour_per_kilo_volt_ampere = "Item:OSW98c14d48aecc52fdab52023fb924debd"


class InverseEnergy(QuantityValue):
    """
    This is an autogenerated partial class definition of 'InverseEnergy'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "0da38e7b-53f1-5e17-88cc-4bbfbc4c6842",
            "title": "InverseEnergy",
            "title*": {"en": "Inverse Energy"},
            "description": "This is an autogenerated partial class definition of 'InverseEnergy'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInverseEnergyValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0da38e7b53f15e1788cc4bbfbc4c6842"]
    unit: Optional[InverseEnergyUnit] = Field(
        InverseEnergyUnit.per_hour_per_kilo_volt_ampere,
        options={"enum_titles": ["1/(kVA·h)"]},
        title="InverseEnergyUnit",
        x_enum_varnames=["per_hour_per_kilo_volt_ampere"],
    )


class ElectricPropulsionPropellantMass(PropellantMass):
    """
    This is an autogenerated partial class definition of 'ElectricPropulsionPropellantMass'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7d9cb17e-b1c7-5492-a024-f50a69b04ffc",
            "title": "ElectricPropulsionPropellantMass",
            "title*": {"en": "Electric Propulsion Propellant Mass"},
            "description": "This is an autogenerated partial class definition of 'ElectricPropulsionPropellantMass'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricPropulsionPropellantMassValue",
            "@context": [
                "/wiki/Category:OSW3cca82ea6a345bc79d209236e827ea73?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7d9cb17eb1c75492a024f50a69b04ffc"]


class EnergyImparted(Energy):
    """
    The "Energy Imparted", is a physical quantity associated with the energy delivered to a particular volume of matter by all the directly and indirectly ionizing particles (i.e. charged and uncharged) entering that volume.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a4ca4199-72bd-586e-9ab6-c19db17d04d9",
            "title": "EnergyImparted",
            "title*": {"en": "Energy Imparted"},
            "description": 'The "Energy Imparted", is a physical quantity associated with the energy delivered to a particular volume of matter by all the directly and indirectly ionizing particles (i.e. charged and uncharged) entering that volume.',
            "description*": {
                "en": 'The "Energy Imparted", is a physical quantity associated with the energy delivered to a particular volume of matter by all the directly and indirectly ionizing particles (i.e. charged and uncharged) entering that volume.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEnergyImpartedValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa4ca419972bd586e9ab6c19db17d04d9"]


class ParticlePositionVector(Length):
    """
    "Particle Position Vector" is the position vector of a particle.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c2570a8c-e0a6-5454-a303-491826ff7617",
            "title": "ParticlePositionVector",
            "title*": {"en": "Particle Position Vector"},
            "description": '"Particle Position Vector" is the position vector of a particle.',
            "description*": {
                "en": '"Particle Position Vector" is the position vector of a particle.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasParticlePositionVectorValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc2570a8ce0a65454a303491826ff7617"]


class GibbsEnergy(Energy):
    """
    Gibbs Energy is one of the potentials used to measure energy changes in systems as they evolve from an initial state to a final state. The potential used depends on the constraints of the system, such as constant temperature or pressure. $\\textit{Internal Energy} is the internal energy of the system, Enthalpy is the internal energy of the system plus the energy related to pressure-volume work, and Helmholtz and Gibbs free energy are the energies available in a system to do useful work when the temperature and volume or the pressure and temperature are fixed, respectively. The name Gibbs Free Energy is also used.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a8247c61-52ee-5174-85f1-711f5e5f38b7",
            "title": "GibbsEnergy",
            "title*": {"en": "Gibbs energy", "de": "Freie Enthalpie"},
            "description": "Gibbs Energy is one of the potentials used to measure energy changes in systems as they evolve from an initial state to a final state. The potential used depends on the constraints of the system, such as constant temperature or pressure. $\\textit{Internal Energy} is the internal energy of the system, Enthalpy is the internal energy of the system plus the energy related to pressure-volume work, and Helmholtz and Gibbs free energy are the energies available in a system to do useful work when the temperature and volume or the pressure and temperature are fixed, respectively. The name Gibbs Free Energy is also used.",
            "description*": {
                "en": "Gibbs Energy is one of the potentials used to measure energy changes in systems as they evolve from an initial state to a final state. The potential used depends on the constraints of the system, such as constant temperature or pressure. $\\textit{Internal Energy} is the internal energy of the system, Enthalpy is the internal energy of the system plus the energy related to pressure-volume work, and Helmholtz and Gibbs free energy are the energies available in a system to do useful work when the temperature and volume or the pressure and temperature are fixed, respectively. The name Gibbs Free Energy is also used."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasGibbsEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa8247c6152ee517485f1711f5e5f38b7"]


class InternalEnergy(Energy):
    """
    "Internal Energy" is simply its energy. "internal" refers to the fact that some energy contributions are not considered. For instance, when the total system is in uniform motion, it has kinetic energy. This overall kinetic energy is never seen as part of the internal energy; one could call it external energy. Or, if the system is at constant non-zero height above the surface the Earth, it has constant potential energy in the gravitational field of the Earth. Gravitational energy is only taken into account when it plays a role in the phenomenon of interest, for instance in a colloidal suspension, where the gravitation influences the up- downward motion of the small particles comprising the colloid. In all other cases, gravitational energy is assumed not to contribute to the internal energy; one may call it again external energy.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "774f88c4-4dcc-50cb-8bc8-b1defc410724",
            "title": "InternalEnergy",
            "title*": {"en": "Internal Energy"},
            "description": '"Internal Energy" is simply its energy. "internal" refers to the fact that some energy contributions are not considered. For instance, when the total system is in uniform motion, it has kinetic energy. This overall kinetic energy is never seen as part of the internal energy; one could call it external energy. Or, if the system is at constant non-zero height above the surface the Earth, it has constant potential energy in the gravitational field of the Earth. Gravitational energy is only taken into account when it plays a role in the phenomenon of interest, for instance in a colloidal suspension, where the gravitation influences the up- downward motion of the small particles comprising the colloid. In all other cases, gravitational energy is assumed not to contribute to the internal energy; one may call it again external energy.',
            "description*": {
                "en": '"Internal Energy" is simply its energy. "internal" refers to the fact that some energy contributions are not considered. For instance, when the total system is in uniform motion, it has kinetic energy. This overall kinetic energy is never seen as part of the internal energy; one could call it external energy. Or, if the system is at constant non-zero height above the surface the Earth, it has constant potential energy in the gravitational field of the Earth. Gravitational energy is only taken into account when it plays a role in the phenomenon of interest, for instance in a colloidal suspension, where the gravitation influences the up- downward motion of the small particles comprising the colloid. In all other cases, gravitational energy is assumed not to contribute to the internal energy; one may call it again external energy.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasInternalEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW774f88c44dcc50cb8bc8b1defc410724"]


class EquivalentDensity(Density):
    """
    "Equivalent Density" is the mass of a substance that reacts with (or is equivalent to) an arbitrary mass of
    another substance in a given chemical reaction, per volume.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "264c76d5-ade3-53be-a3e1-ab65437ff187",
            "title": "EquivalentDensity",
            "title*": {"en": "Equivalent Density"},
            "description": '"Equivalent Density" is the mass of a substance that reacts with (or is equivalent to) an arbitrary mass of \nanother substance in a given chemical reaction, per volume.',
            "description*": {
                "en": '"Equivalent Density" is the mass of a substance that reacts with (or is equivalent to) an arbitrary mass of \nanother substance in a given chemical reaction, per volume.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasEquivalentDensityValue",
            "@context": [
                "/wiki/Category:OSW571f68d4b4715284b2dc5020ad51cf72?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW264c76d5ade353bea3e1ab65437ff187"]


class PolarizationField(ElectricChargePerArea):
    """
    The Polarization Field is the vector field that expresses the density of permanent or induced electric dipole moments in a dielectric material. The polarization vector P is defined as the ratio of electric dipole moment per unit volume.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "8c90f5f9-c23e-50fd-b640-6d6a819289cc",
            "title": "PolarizationField",
            "title*": {"en": "Polarization Field"},
            "description": "The Polarization Field is the vector field that expresses the density of permanent or induced electric dipole moments in a dielectric material. The polarization vector P is defined as the ratio of electric dipole moment per unit volume.",
            "description*": {
                "en": "The Polarization Field is the vector field that expresses the density of permanent or induced electric dipole moments in a dielectric material. The polarization vector P is defined as the ratio of electric dipole moment per unit volume."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPolarizationFieldValue",
            "@context": [
                "/wiki/Category:OSW4f0b36aedcac5f4dafcc0eaec8eb86dd?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8c90f5f9c23e50fdb6406d6a819289cc"]


class MassOfTheEarth(Mass):
    """
    Earth mass is the unit of mass equal to that of the Earth.  Earth mass is often used to describe masses of rocky terrestrial planets.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "58c3637b-7e51-5ed8-b51f-7e9dc4ea424f",
            "title": "MassOfTheEarth",
            "title*": {"en": "Mass Of The Earth"},
            "description": "Earth mass is the unit of mass equal to that of the Earth.  Earth mass is often used to describe masses of rocky terrestrial planets.",
            "description*": {
                "en": "Earth mass is the unit of mass equal to that of the Earth.  Earth mass is often used to describe masses of rocky terrestrial planets."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassOfTheEarthValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW58c3637b7e515ed8b51f7e9dc4ea424f"]


class PhotonRadianceUnit(UnitEnum):
    per_meter_squared_per_second_per_steradian = (
        "Item:OSWb2f2150d25eb5a948de6ae5033a72afa"
    )


class PhotonRadiance(QuantityValue):
    """
    A measure of flux of photons per surface area per solid angle
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "cca5fb12-6c33-5044-b494-f4a9e7a34913",
            "title": "PhotonRadiance",
            "title*": {"en": "Photon Radiance"},
            "description": "A measure of flux of photons per surface area per solid angle",
            "description*": {
                "en": "A measure of flux of photons per surface area per solid angle"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPhotonRadianceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWcca5fb126c335044b494f4a9e7a34913"]
    unit: Optional[PhotonRadianceUnit] = Field(
        PhotonRadianceUnit.per_meter_squared_per_second_per_steradian,
        options={"enum_titles": ["1/(s·m²·sr)"]},
        title="PhotonRadianceUnit",
        x_enum_varnames=["per_meter_squared_per_second_per_steradian"],
    )


class DryBulbTemperature(Temperature):
    """
    The temperature of air measured by a thermometer freely exposed to the air, but shielded from radiation.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "fde09f3b-6e9b-5c2f-947f-1e1bdb12f20e",
            "title": "DryBulbTemperature",
            "title*": {"en": "Dry Bulb Temperature"},
            "description": "The temperature of air measured by a thermometer freely exposed to the air, but shielded from radiation.",
            "description*": {
                "en": "The temperature of air measured by a thermometer freely exposed to the air, but shielded from radiation."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDryBulbTemperatureValue",
            "@context": [
                "/wiki/Category:OSW20927e4900e95e93985698c92995f964?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfde09f3b6e9b5c2f947f1e1bdb12f20e"]


class RecombinationCoefficientUnit(UnitEnum):
    meter_cubed_per_second = "Item:OSW4ed5503a56ab514ab3d925287da52a95"
    deci_meter_cubed_per_second = (
        "Item:OSW4ed5503a56ab514ab3d925287da52a95#OSW58c067fb208b5294899599809141c3ff"
    )
    centi_meter_cubed_per_second = (
        "Item:OSW4ed5503a56ab514ab3d925287da52a95#OSWacda1333cb6958069dc83172f3a047db"
    )


class RecombinationCoefficient(QuantityValue):
    """
    The "Recombination Coefficient" is the rate of recombination of positive ions with electrons or negative ions in a gas, per unit volume, divided by the product of the number of positive ions per unit volume and the number of electrons or negative ions per unit volume.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "518bf073-6bae-513a-83f1-61f597ddc074",
            "title": "RecombinationCoefficient",
            "title*": {"en": "Recombination Coefficient"},
            "description": 'The "Recombination Coefficient" is the rate of recombination of positive ions with electrons or negative ions in a gas, per unit volume, divided by the product of the number of positive ions per unit volume and the number of electrons or negative ions per unit volume.',
            "description*": {
                "en": 'The "Recombination Coefficient" is the rate of recombination of positive ions with electrons or negative ions in a gas, per unit volume, divided by the product of the number of positive ions per unit volume and the number of electrons or negative ions per unit volume.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasRecombinationCoefficientValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW518bf0736bae513a83f161f597ddc074"]
    unit: Optional[RecombinationCoefficientUnit] = Field(
        RecombinationCoefficientUnit.meter_cubed_per_second,
        options={"enum_titles": ["m³/s", "dm³/s", "cm³/s"]},
        title="RecombinationCoefficientUnit",
        x_enum_varnames=[
            "meter_cubed_per_second",
            "deci_meter_cubed_per_second",
            "centi_meter_cubed_per_second",
        ],
    )


class TemperatureRatio(DimensionlessRatio):
    """
    This is an autogenerated partial class definition of 'TemperatureRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "7f104091-cb7f-50ae-a7e4-ad58065ef4fb",
            "title": "TemperatureRatio",
            "title*": {"en": "Temperature Ratio"},
            "description": "This is an autogenerated partial class definition of 'TemperatureRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTemperatureRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7f104091cb7f50aea7e4ad58065ef4fb"]


class ElectronAffinity(Energy):
    """
    "Electron Affinity" is the energy difference between an electron at rest at infinity and an electron at the lowest level of the conduction band in an insulator or semiconductor. The the amount of energy released when an electron is added to a neutral atom or molecule to form a negative ion.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "56927c77-340d-5c3e-99ad-1a180ed6aa81",
            "title": "ElectronAffinity",
            "title*": {"en": "Electron Affinity"},
            "description": '"Electron Affinity" is the energy difference between an electron at rest at infinity and an electron at the lowest level of the conduction band in an insulator or semiconductor. The the amount of energy released when an electron is added to a neutral atom or molecule to form a negative ion.',
            "description*": {
                "en": '"Electron Affinity" is the energy difference between an electron at rest at infinity and an electron at the lowest level of the conduction band in an insulator or semiconductor. The the amount of energy released when an electron is added to a neutral atom or molecule to form a negative ion.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectronAffinityValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW56927c77340d5c3e99ad1a180ed6aa81"]


class Count(Dimensionless):
    """
    "Count" is the value of a count of items.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "b0250d36-77f6-592f-9d43-29c8b9d5f8d1",
            "title": "Count",
            "title*": {"en": "Count"},
            "description": '"Count" is the value of a count of items.',
            "description*": {"en": '"Count" is the value of a count of items.'},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCountValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWb0250d3677f6592f9d4329c8b9d5f8d1"]


class FrictionCoefficient(DimensionlessRatio):
    """
    "Friction Coefficient" is the ratio of the force of friction between two bodies and the force pressing them together
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "8f66d565-d52b-52ba-b7fe-2840caf54ffa",
            "title": "FrictionCoefficient",
            "title*": {"en": "Friction Coefficient"},
            "description": '"Friction Coefficient" is the ratio of the force of friction between two bodies and the force pressing them together',
            "description*": {
                "en": '"Friction Coefficient" is the ratio of the force of friction between two bodies and the force pressing them together'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFrictionCoefficientValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8f66d565d52b52bab7fe2840caf54ffa"]


class Depth(Length):
    """
    Depth typically refers to the vertical measure of length from the surface of a liquid.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "9c887dd0-f7e0-5d67-baab-92a2ba4be3bc",
            "title": "Depth",
            "title*": {"en": "Depth"},
            "description": "Depth typically refers to the vertical measure of length from the surface of a liquid.",
            "description*": {
                "en": "Depth typically refers to the vertical measure of length from the surface of a liquid."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDepthValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9c887dd0f7e05d67baab92a2ba4be3bc"]


class IonConcentrationUnit(UnitEnum):
    candela_per_lumen = "Item:OSWb175d26e736c5603bcaa1060f2afddff"
    candela_per_kilo_lumen = (
        "Item:OSWb175d26e736c5603bcaa1060f2afddff#OSW77b2c8bd92a057b1ade0ce1687eb7520"
    )


class IonConcentration(QuantityValue):
    """
    "Luminous Intensity Distribution" is a measure of the luminous intensity of a light source that changes according to the direction of the ray. It is normally based on some standardized distribution light distribution curves. Usually measured in Candela/Lumen (cd/lm) or (cd/klm).
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9882e317-01b2-5fa1-8ff6-9a38f57debf5",
            "title": "IonConcentration",
            "title*": {"en": "Ion Concentration"},
            "description": '"Luminous Intensity Distribution" is a measure of the luminous intensity of a light source that changes according to the direction of the ray. It is normally based on some standardized distribution light distribution curves. Usually measured in Candela/Lumen (cd/lm) or (cd/klm).',
            "description*": {
                "en": '"Luminous Intensity Distribution" is a measure of the luminous intensity of a light source that changes according to the direction of the ray. It is normally based on some standardized distribution light distribution curves. Usually measured in Candela/Lumen (cd/lm) or (cd/klm).'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasIonConcentrationValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9882e31701b25fa18ff69a38f57debf5"]
    unit: Optional[IonConcentrationUnit] = Field(
        IonConcentrationUnit.candela_per_lumen,
        options={"enum_titles": ["cd/lm", "cd/klm"]},
        title="IonConcentrationUnit",
        x_enum_varnames=["candela_per_lumen", "candela_per_kilo_lumen"],
    )


class Time(QuantityValue):
    """
    Time is a basic component of the measuring system used to sequence events, to compare the durations of events and the intervals between them, and to quantify the motions of objects.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "389cb87d-31be-515a-a5d2-f12e2b66e938",
            "title": "Time",
            "title*": {"en": "Time", "de": "Zeit"},
            "description": "Time is a basic component of the measuring system used to sequence events, to compare the durations of events and the intervals between them, and to quantify the motions of objects.",
            "description*": {
                "en": "Time is a basic component of the measuring system used to sequence events, to compare the durations of events and the intervals between them, and to quantify the motions of objects."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasTimeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW389cb87d31be515aa5d2f12e2b66e938"]
    unit: Optional[TimeUnit] = Field(
        TimeUnit.second,
        options={"enum_titles": ["s", "ns", "µs", "ps", "as", "ks", "ds", "fs", "ms"]},
        title="TimeUnit",
        x_enum_varnames=[
            "second",
            "nano_second",
            "micro_second",
            "pico_second",
            "atto_second",
            "kilo_second",
            "deci_second",
            "femto_second",
            "milli_second",
        ],
    )


class MaximumOperatingPressure(Pressure):
    """
    This is an autogenerated partial class definition of 'MaximumOperatingPressure'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "817c053c-4646-5665-a4ba-40e2cffd27fb",
            "title": "MaximumOperatingPressure",
            "title*": {"en": "Maximum Operating Pressure"},
            "description": "This is an autogenerated partial class definition of 'MaximumOperatingPressure'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMaximumOperatingPressureValue",
            "@context": [
                "/wiki/Category:OSWb58cb5a4654f52e1804c74c035d21352?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW817c053c46465665a4ba40e2cffd27fb"]


class AverageHeadEndPressure(HeadEndPressure):
    """
    This is an autogenerated partial class definition of 'AverageHeadEndPressure'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "e0ed059c-b201-5747-bde4-4a56c85b8be8",
            "title": "AverageHeadEndPressure",
            "title*": {"en": "Average Head End Pressure"},
            "description": "This is an autogenerated partial class definition of 'AverageHeadEndPressure'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAverageHeadEndPressureValue",
            "@context": [
                "/wiki/Category:OSW31cf0c812f335d06a0fab1a15b46d6e5?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe0ed059cb2015747bde44a56c85b8be8"]


class DimensionlessRatio(Dimensionless):
    """
    This is an autogenerated partial class definition of 'DimensionlessRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "67faac86-0ed7-5875-8aa4-484387e5d5c9",
            "title": "DimensionlessRatio",
            "title*": {"en": "Dimensionless Ratio"},
            "description": "This is an autogenerated partial class definition of 'DimensionlessRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDimensionlessRatioValue",
            "@context": [
                "/wiki/Category:OSWbcaa33bd770e53e09d5e6087d141648b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW67faac860ed758758aa4484387e5d5c9"]


class PhotonIntensityUnit(UnitEnum):
    per_second_per_steradian = "Item:OSWaf6c62c0856f5ac288ac862f5344f227"


class PhotonIntensity(QuantityValue):
    """
    A measure of flux of photons per solid angle
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "24bf224c-3e2a-57b6-a896-f3cd3b9395b2",
            "title": "PhotonIntensity",
            "title*": {"en": "Photon Intensity"},
            "description": "A measure of flux of photons per solid angle",
            "description*": {"en": "A measure of flux of photons per solid angle"},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPhotonIntensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW24bf224c3e2a57b6a896f3cd3b9395b2"]
    unit: Optional[PhotonIntensityUnit] = Field(
        PhotonIntensityUnit.per_second_per_steradian,
        options={"enum_titles": ["1/(s·sr)"]},
        title="PhotonIntensityUnit",
        x_enum_varnames=["per_second_per_steradian"],
    )


class ConductionSpeed(Speed):
    """
    "Conduction Speed" is the speed of impulses in nerve fibers.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2a1c80f8-e8fb-5867-b9e1-38bbaf83d105",
            "title": "ConductionSpeed",
            "title*": {"en": "Conduction Speed"},
            "description": '"Conduction Speed" is the speed of impulses in nerve fibers.',
            "description*": {
                "en": '"Conduction Speed" is the speed of impulses in nerve fibers.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasConductionSpeedValue",
            "@context": [
                "/wiki/Category:OSW29b1dc01984d568f84c03e03ed2ed731?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2a1c80f8e8fb5867b9e138bbaf83d105"]


class ShearStress(Stress):
    """
    Shear stress occurs when the force  occurs in shear, or perpendicular to the normal.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "f0ab9cfd-e91f-5e7a-8b21-de948729e1ac",
            "title": "ShearStress",
            "title*": {"en": "Shear Stress"},
            "description": "Shear stress occurs when the force  occurs in shear, or perpendicular to the normal.",
            "description*": {
                "en": "Shear stress occurs when the force  occurs in shear, or perpendicular to the normal."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasShearStressValue",
            "@context": [
                "/wiki/Category:OSW74ae1de66beb525ea52eedabf09ab228?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf0ab9cfde91f5e7a8b21de948729e1ac"]


class LuminousFluxRatio(DimensionlessRatio):
    """
    Luminous Flux Ratio (or Relative Luminous Flux or Relative Luminous Power) is the measure of the perceived power of light. It differs from radiant flux, the measure of the total power of light emitted, in that luminous flux is adjusted to reflect the varying sensitivity of the human eye to different wavelengths of light. It is expressed as a percentage or fraction of full power.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "bb723efa-d62b-5aed-9426-7ff03b896fb7",
            "title": "LuminousFluxRatio",
            "title*": {"en": "Luminous Flux Ratio"},
            "description": "Luminous Flux Ratio (or Relative Luminous Flux or Relative Luminous Power) is the measure of the perceived power of light. It differs from radiant flux, the measure of the total power of light emitted, in that luminous flux is adjusted to reflect the varying sensitivity of the human eye to different wavelengths of light. It is expressed as a percentage or fraction of full power.",
            "description*": {
                "en": "Luminous Flux Ratio (or Relative Luminous Flux or Relative Luminous Power) is the measure of the perceived power of light. It differs from radiant flux, the measure of the total power of light emitted, in that luminous flux is adjusted to reflect the varying sensitivity of the human eye to different wavelengths of light. It is expressed as a percentage or fraction of full power."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLuminousFluxRatioValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWbb723efad62b5aed94267ff03b896fb7"]


class MassicPower(SpecificPower):
    """
    Quotient Energie durch Zeit und durch zugehöriger Masse
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "c8acb208-c983-59d2-82bf-6f2a59af4e15",
            "title": "MassicPower",
            "title*": {"en": "Massic power"},
            "description": "Quotient Energie durch Zeit und durch zugehöriger Masse",
            "description*": {
                "en": "Quotient Energie durch Zeit und durch zugehöriger Masse"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMassicPowerValue",
            "@context": [
                "/wiki/Category:OSW592625bd38e75a4e87d866ef370b8a6c?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWc8acb208c98359d282bf6f2a59af4e15"]


class AreicMass(MassPerArea):
    """
    Masse dividiert durch die zugehörige Fläche
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "89ba427c-9d83-5122-b4f1-9b10afa15f89",
            "title": "AreicMass",
            "title*": {"en": "Areic mass"},
            "description": "Masse dividiert durch die zugehörige Fläche",
            "description*": {"en": "Masse dividiert durch die zugehörige Fläche"},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAreicMassValue",
            "@context": [
                "/wiki/Category:OSWb9612bfb909c5eab9e57e8d8a6c86082?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW89ba427c9d835122b4f19b10afa15f89"]


class SpecificHeatVolumeUnit(UnitEnum):
    joule_per_kelvin_per_kilo_gram_per_meter_cubed = (
        "Item:OSWc06da5be651b56d993bef3fc05d91bd6"
    )


class SpecificHeatVolume(QuantityValue):
    """
    Specific heat per constant volume.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "74026893-cf1a-50c4-8b24-be5ed1ffd6d2",
            "title": "SpecificHeatVolume",
            "title*": {"en": "Specific Heat Volume"},
            "description": "Specific heat per constant volume.",
            "description*": {"en": "Specific heat per constant volume."},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificHeatVolumeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW74026893cf1a50c48b24be5ed1ffd6d2"]
    unit: Optional[SpecificHeatVolumeUnit] = Field(
        SpecificHeatVolumeUnit.joule_per_kelvin_per_kilo_gram_per_meter_cubed,
        options={"enum_titles": ["J/(K·kg·m³)"]},
        title="SpecificHeatVolumeUnit",
        x_enum_varnames=["joule_per_kelvin_per_kilo_gram_per_meter_cubed"],
    )


class NuclearQuadrupoleMomentUnit(UnitEnum):
    meter_squared = "Item:OSWd10e5841c68e5aad94b481b58ef9dfb9"
    deci_meter_squared = (
        "Item:OSWd10e5841c68e5aad94b481b58ef9dfb9#OSW90aaf1cb6a9f518a8e7ed0b7fc2fc325"
    )
    milli_meter_squared = (
        "Item:OSWd10e5841c68e5aad94b481b58ef9dfb9#OSWeca22bf4270853038ef3395bd6dd797b"
    )
    nano_meter_squared = (
        "Item:OSWd10e5841c68e5aad94b481b58ef9dfb9#OSW8ef862bedf335232a9d387b1ee29cd1d"
    )
    centi_meter_squared = (
        "Item:OSWd10e5841c68e5aad94b481b58ef9dfb9#OSWe36916dd7a34557b8a52c38d6dd7b832"
    )
    micro_meter_squared = (
        "Item:OSWd10e5841c68e5aad94b481b58ef9dfb9#OSWd45e991f8e6658dcb6c891c9c0ea094f"
    )


class NuclearQuadrupoleMoment(QuantityValue):
    """
    "Nuclear Quadrupole Moment" is a quantity that characterizes the deviation from spherical symmetry of the electrical charge distribution in an atomic nucleus.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "7e9c76bc-94c2-5dc8-929b-c8fe039ecf8f",
            "title": "NuclearQuadrupoleMoment",
            "title*": {"en": "Nuclear Quadrupole Moment"},
            "description": '"Nuclear Quadrupole Moment" is a quantity that characterizes the deviation from spherical symmetry of the electrical charge distribution in an atomic nucleus.',
            "description*": {
                "en": '"Nuclear Quadrupole Moment" is a quantity that characterizes the deviation from spherical symmetry of the electrical charge distribution in an atomic nucleus.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasNuclearQuadrupoleMomentValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7e9c76bc94c25dc8929bc8fe039ecf8f"]
    unit: Optional[NuclearQuadrupoleMomentUnit] = Field(
        NuclearQuadrupoleMomentUnit.meter_squared,
        options={"enum_titles": ["m²", "dm²", "mm²", "nm²", "cm²", "μm²"]},
        title="NuclearQuadrupoleMomentUnit",
        x_enum_varnames=[
            "meter_squared",
            "deci_meter_squared",
            "milli_meter_squared",
            "nano_meter_squared",
            "centi_meter_squared",
            "micro_meter_squared",
        ],
    )


class PowerAreaPerSolidAngleUnit(UnitEnum):
    meter_squared_watt_per_steradian = "Item:OSW21cf512b048358628e8ce57f4cecb9cc"


class PowerAreaPerSolidAngle(QuantityValue):
    """
    This is an autogenerated partial class definition of 'PowerAreaPerSolidAngle'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "d6e7af58-9178-5a8e-b9b5-4036c37a8bcb",
            "title": "PowerAreaPerSolidAngle",
            "title*": {"en": "Power Area per Solid Angle"},
            "description": "This is an autogenerated partial class definition of 'PowerAreaPerSolidAngle'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPowerAreaPerSolidAngleValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd6e7af5891785a8eb9b54036c37a8bcb"]
    unit: Optional[PowerAreaPerSolidAngleUnit] = Field(
        PowerAreaPerSolidAngleUnit.meter_squared_watt_per_steradian,
        options={"enum_titles": ["W·m²/sr"]},
        title="PowerAreaPerSolidAngleUnit",
        x_enum_varnames=["meter_squared_watt_per_steradian"],
    )


class LuminanceUnit(UnitEnum):
    candela_per_meter_squared = "Item:OSW4f047e2da1fc5ea497c9e22eb8e98ce5"


class Luminance(QuantityValue):
    """
    Luminance is a photometric measure of the luminous intensity per unit area of light travelling in a given direction. It describes the amount of light that passes through or is emitted from a particular area, and falls within a given solid angle.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "fad28497-6682-566c-ab9e-bd9d6bd15711",
            "title": "Luminance",
            "title*": {"en": "Luminance"},
            "description": "Luminance is a photometric measure of the luminous intensity per unit area of light travelling in a given direction. It describes the amount of light that passes through or is emitted from a particular area, and falls within a given solid angle.",
            "description*": {
                "en": "Luminance is a photometric measure of the luminous intensity per unit area of light travelling in a given direction. It describes the amount of light that passes through or is emitted from a particular area, and falls within a given solid angle."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLuminanceValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWfad284976682566cab9ebd9d6bd15711"]
    unit: Optional[LuminanceUnit] = Field(
        LuminanceUnit.candela_per_meter_squared,
        options={"enum_titles": ["cd/m²"]},
        title="LuminanceUnit",
        x_enum_varnames=["candela_per_meter_squared"],
    )


class StrainEnergyReleaseRate(EnergyPerArea):
    """
    In fracture mechanics, the energy release rate, G, is the rate at which energy is transformed as a material undergoes fracture. Mathematically, the energy release rate is expressed as the decrease in total potential energy per increase in fracture surface area, and is thus expressed in terms of energy per unit area.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "00432537-c21f-5667-92bf-eea72ed63b6f",
            "title": "StrainEnergyReleaseRate",
            "title*": {"en": "Strain Energy Release Rate"},
            "description": "In fracture mechanics, the energy release rate, G, is the rate at which energy is transformed as a material undergoes fracture. Mathematically, the energy release rate is expressed as the decrease in total potential energy per increase in fracture surface area, and is thus expressed in terms of energy per unit area.",
            "description*": {
                "en": "In fracture mechanics, the energy release rate, G, is the rate at which energy is transformed as a material undergoes fracture. Mathematically, the energy release rate is expressed as the decrease in total potential energy per increase in fracture surface area, and is thus expressed in terms of energy per unit area."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasStrainEnergyReleaseRateValue",
            "@context": [
                "/wiki/Category:OSW46d8ae433dda5e368d8e76800d85ee12?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW00432537c21f566792bfeea72ed63b6f"]


class MagneticFieldStrength(ElectricCurrentPerLength):
    """
    $\\textit{Magnetic Field Strength}$ is a vector quantity obtained at a given point by subtracting the magnetization $M$ from the magnetic flux density $B$ divided by the magnetic constant $\mu_0$. The magnetic field strength is related to the total current density $J_{tot}$ via: $\text{rot} H = J_{tot}$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "5066212a-dfda-5519-af30-7363bd1c5c79",
            "title": "MagneticFieldStrength",
            "title*": {"en": "Magnetic field strength", "de": "Magnetische Feldstärke"},
            "description": "$\\textit{Magnetic Field Strength}$ is a vector quantity obtained at a given point by subtracting the magnetization $M$ from the magnetic flux density $B$ divided by the magnetic constant $\\mu_0$. The magnetic field strength is related to the total current density $J_{tot}$ via: $\\text{rot} H = J_{tot}$.",
            "description*": {
                "en": "$\\textit{Magnetic Field Strength}$ is a vector quantity obtained at a given point by subtracting the magnetization $M$ from the magnetic flux density $B$ divided by the magnetic constant $\\mu_0$. The magnetic field strength is related to the total current density $J_{tot}$ via: $\\text{rot} H = J_{tot}$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMagneticFieldStrengthValue",
            "@context": [
                "/wiki/Category:OSW8ba7ac8b06c453e2885cc41c9d9ee0bb?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW5066212adfda5519af307363bd1c5c79"]


class SoundExposureUnit(UnitEnum):
    pascal_squared_second = "Item:OSW480ba7517ec75d798c6b56f61d91de1d"


class SoundExposure(QuantityValue):
    """
    Sound Exposure is the energy of the A-weighted sound calculated over the measurement time(s). For a given period of time, an increase of 10 dB(A) in sound pressure level corresponds to a tenfold increase in E.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "dac4a86a-2558-53e6-835f-1f526ebc7d4b",
            "title": "SoundExposure",
            "title*": {"en": "Sound exposure"},
            "description": "Sound Exposure is the energy of the A-weighted sound calculated over the measurement time(s). For a given period of time, an increase of 10 dB(A) in sound pressure level corresponds to a tenfold increase in E.",
            "description*": {
                "en": "Sound Exposure is the energy of the A-weighted sound calculated over the measurement time(s). For a given period of time, an increase of 10 dB(A) in sound pressure level corresponds to a tenfold increase in E."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSoundExposureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWdac4a86a255853e6835f1f526ebc7d4b"]
    unit: Optional[SoundExposureUnit] = Field(
        SoundExposureUnit.pascal_squared_second,
        options={"enum_titles": ["Pa²·s"]},
        title="SoundExposureUnit",
        x_enum_varnames=["pascal_squared_second"],
    )


class MoleFraction(DimensionlessRatio):
    """
    In chemistry, the mole fraction of a component in a mixture is the relative proportion of molecules belonging to the component to those in the mixture, by number of molecules. It is one way of measuring concentration.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "75c0b290-d1a4-51fb-8de3-6ffa84bdc59c",
            "title": "MoleFraction",
            "title*": {"en": "Mole Fraction"},
            "description": "In chemistry, the mole fraction of a component in a mixture is the relative proportion of molecules belonging to the component to those in the mixture, by number of molecules. It is one way of measuring concentration.",
            "description*": {
                "en": "In chemistry, the mole fraction of a component in a mixture is the relative proportion of molecules belonging to the component to those in the mixture, by number of molecules. It is one way of measuring concentration."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMoleFractionValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW75c0b290d1a451fb8de36ffa84bdc59c"]


class KermaRateUnit(UnitEnum):
    gray_per_second = "Item:OSW4cbc32faa6945fea85c32ee675aff008"


class KermaRate(QuantityValue):
    """
    "Kerma Rate" is the kerma per unit time.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "e08b19a7-b5ef-5828-8297-9b450b729fe6",
            "title": "KermaRate",
            "title*": {"en": "Kerma Rate"},
            "description": '"Kerma Rate" is the kerma per unit time.',
            "description*": {"en": '"Kerma Rate" is the kerma per unit time.'},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasKermaRateValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe08b19a7b5ef582882979b450b729fe6"]
    unit: Optional[KermaRateUnit] = Field(
        KermaRateUnit.gray_per_second,
        options={"enum_titles": ["Gy/s"]},
        title="KermaRateUnit",
        x_enum_varnames=["gray_per_second"],
    )


class LinkedFlux(MagneticFlux):
    """
    "Linked Flux" is defined as the path integral of the magnetic vector potential. This is the line integral of a magnetic vector potential $A$ along a curve $C$. The line vector element $dr$ is the differential of position vector $r$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ca710662-e2c3-5883-810a-8192a8113f0c",
            "title": "LinkedFlux",
            "title*": {"en": "Linked Flux"},
            "description": '"Linked Flux" is defined as the path integral of the magnetic vector potential. This is the line integral of a magnetic vector potential $A$ along a curve $C$. The line vector element $dr$ is the differential of position vector $r$.',
            "description*": {
                "en": '"Linked Flux" is defined as the path integral of the magnetic vector potential. This is the line integral of a magnetic vector potential $A$ along a curve $C$. The line vector element $dr$ is the differential of position vector $r$.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLinkedFluxValue",
            "@context": [
                "/wiki/Category:OSW82a515de9bcc5af8a2f33974e7ec0f1a?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWca710662e2c35883810a8192a8113f0c"]


class SoilAdsorptionCoefficient(SpecificVolume):
    """
    A specific volume that is the ratio of the amount of substance adsorbed per unit weight of organic carbon in the soil or sediment to the concentration of the chemical in aqueous solution at equilibrium.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "8a3a8be1-f119-53c5-bb43-a0d6ae3efac2",
            "title": "SoilAdsorptionCoefficient",
            "title*": {"en": "Soil Adsorption Coefficient"},
            "description": "A specific volume that is the ratio of the amount of substance adsorbed per unit weight of organic carbon in the soil or sediment to the concentration of the chemical in aqueous solution at equilibrium.",
            "description*": {
                "en": "A specific volume that is the ratio of the amount of substance adsorbed per unit weight of organic carbon in the soil or sediment to the concentration of the chemical in aqueous solution at equilibrium."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSoilAdsorptionCoefficientValue",
            "@context": [
                "/wiki/Category:OSW26ae18e11ed158dc9ea7e62d1d5ce92e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8a3a8be1f11953c5bb43a0d6ae3efac2"]


class DebyeAngularWavenumber(InverseLength):
    """
    "Debye Angular Wavenumber" is the cut-off angular wavenumber in the Debye model of the vibrational spectrum of a solid.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3d79fbc6-be93-589e-9e71-64f80e6d9e61",
            "title": "DebyeAngularWavenumber",
            "title*": {"en": "Debye Angular Wavenumber"},
            "description": '"Debye Angular Wavenumber" is the cut-off angular wavenumber in the Debye model of the vibrational spectrum of a solid.',
            "description*": {
                "en": '"Debye Angular Wavenumber" is the cut-off angular wavenumber in the Debye model of the vibrational spectrum of a solid.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDebyeAngularWavenumberValue",
            "@context": [
                "/wiki/Category:OSW23837e2c50f05ba884682b08465bf173?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3d79fbc6be93589e9e7164f80e6d9e61"]


class MolarHeatCapacityUnit(UnitEnum):
    joule_per_kelvin_per_mole = "Item:OSW6d40ac4bdbc950ec9290f6a47ce23d20"


class MolarHeatCapacity(QuantityValue):
    """
    "Molar Heat Capacity" is the amount of heat energy required to raise the temperature of 1 mole of a substance. In SI units, molar heat capacity (symbol: cn) is the amount of heat in joules required to raise 1 mole of a substance 1 Kelvin.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "d3bbec0b-8c44-5d8a-9b7a-a98383fce1ad",
            "title": "MolarHeatCapacity",
            "title*": {"en": "Molar Heat Capacity"},
            "description": '"Molar Heat Capacity" is the amount of heat energy required to raise the temperature of 1 mole of a substance. In SI units, molar heat capacity (symbol: cn) is the amount of heat in joules required to raise 1 mole of a substance 1 Kelvin.',
            "description*": {
                "en": '"Molar Heat Capacity" is the amount of heat energy required to raise the temperature of 1 mole of a substance. In SI units, molar heat capacity (symbol: cn) is the amount of heat in joules required to raise 1 mole of a substance 1 Kelvin.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarHeatCapacityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd3bbec0b8c445d8a9b7aa98383fce1ad"]
    unit: Optional[MolarHeatCapacityUnit] = Field(
        MolarHeatCapacityUnit.joule_per_kelvin_per_mole,
        options={"enum_titles": ["J/(mol·K)"]},
        title="MolarHeatCapacityUnit",
        x_enum_varnames=["joule_per_kelvin_per_mole"],
    )


class LowerCriticalMagneticFluxDensity(MagneticFluxDensity):
    """
    "Lower Critical Magnetic Flux Density" for type II superconductors, is the threshold magnetic flux density for magnetic flux entering the superconductor.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "e54917d4-9a3b-5a02-b60f-280f68490fa4",
            "title": "LowerCriticalMagneticFluxDensity",
            "title*": {"en": "Lower Critical Magnetic Flux Density"},
            "description": '"Lower Critical Magnetic Flux Density" for type II superconductors, is the threshold magnetic flux density for magnetic flux entering the superconductor.',
            "description*": {
                "en": '"Lower Critical Magnetic Flux Density" for type II superconductors, is the threshold magnetic flux density for magnetic flux entering the superconductor.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasLowerCriticalMagneticFluxDensityValue",
            "@context": [
                "/wiki/Category:OSW91fc2f110c7f52628dce39bc0278562b?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe54917d49a3b5a02b60f280f68490fa4"]


class DiffusionLength(Length):
    """
    "Diffusion Length" is the average distance traveled by a particle, or a thermal neutron in a nuclear reactor, from the point at which it is formed to the point at which it is absorbed.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "4d3cf91b-99bc-5413-a41b-88cf3c1a814c",
            "title": "DiffusionLength",
            "title*": {"en": "Diffusion Length"},
            "description": '"Diffusion Length" is the average distance traveled by a particle, or a thermal neutron in a nuclear reactor, from the point at which it is formed to the point at which it is absorbed.',
            "description*": {
                "en": '"Diffusion Length" is the average distance traveled by a particle, or a thermal neutron in a nuclear reactor, from the point at which it is formed to the point at which it is absorbed.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDiffusionLengthValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4d3cf91b99bc5413a41b88cf3c1a814c"]


class ElectricDisplacement(ElectricChargePerArea):
    """
    In a dielectric material the presence of an electric field E causes the bound charges in the material (atomic nuclei and their electrons) to slightly separate, inducing a local electric dipole moment. The Electric Displacement Field, $D$, is a vector field that accounts for the effects of free charges within such dielectric materials. This describes also the charge density on an extended surface that could be causing the field.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "9d0277a4-94b2-5238-a583-c550230d3d0a",
            "title": "ElectricDisplacement",
            "title*": {"en": "Electric Displacement"},
            "description": "In a dielectric material the presence of an electric field E causes the bound charges in the material (atomic nuclei and their electrons) to slightly separate, inducing a local electric dipole moment. The Electric Displacement Field, $D$, is a vector field that accounts for the effects of free charges within such dielectric materials. This describes also the charge density on an extended surface that could be causing the field.",
            "description*": {
                "en": "In a dielectric material the presence of an electric field E causes the bound charges in the material (atomic nuclei and their electrons) to slightly separate, inducing a local electric dipole moment. The Electric Displacement Field, $D$, is a vector field that accounts for the effects of free charges within such dielectric materials. This describes also the charge density on an extended surface that could be causing the field."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectricDisplacementValue",
            "@context": [
                "/wiki/Category:OSW4f0b36aedcac5f4dafcc0eaec8eb86dd?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9d0277a494b25238a583c550230d3d0a"]


class ThrustToMassRatio(Acceleration):
    """
    This is an autogenerated partial class definition of 'ThrustToMassRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "993eb85e-6303-5bd2-bf24-dafc18760215",
            "title": "ThrustToMassRatio",
            "title*": {"en": "Thrust To Mass Ratio"},
            "description": "This is an autogenerated partial class definition of 'ThrustToMassRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasThrustToMassRatioValue",
            "@context": [
                "/wiki/Category:OSW347462e67d905995af16f97dc7c9ef48?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW993eb85e63035bd2bf24dafc18760215"]


class MolarMassVariationDueToPressureUnit(UnitEnum):
    mole_per_kilo_gram_per_pascal = "Item:OSWe96cbd9b4c9c5e2ab7b4a76d5ad71449"


class MolarMassVariationDueToPressure(QuantityValue):
    """
    The "Variation of Molar Mass" of a gas as a function of pressure.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "6edd0e59-86c8-5950-824d-854922387dc3",
            "title": "MolarMassVariationDueToPressure",
            "title*": {"en": "Molar Mass variation due to Pressure"},
            "description": 'The "Variation of Molar Mass" of a gas as a function of pressure.',
            "description*": {
                "en": 'The "Variation of Molar Mass" of a gas as a function of pressure.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarMassVariationDueToPressureValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW6edd0e5986c85950824d854922387dc3"]
    unit: Optional[MolarMassVariationDueToPressureUnit] = Field(
        MolarMassVariationDueToPressureUnit.mole_per_kilo_gram_per_pascal,
        options={"enum_titles": ["mol/(kg·Pa)"]},
        title="MolarMassVariationDueToPressureUnit",
        x_enum_varnames=["mole_per_kilo_gram_per_pascal"],
    )


class AngularVelocity(QuantityValue):
    """
    The change of angle per unit time; specifically, in celestial mechanics, the change in angle of the radius vector per unit time.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "d76028b6-5910-5d13-9a01-faedd83fefbd",
            "title": "AngularVelocity",
            "title*": {"en": "Angular velocity", "de": "Winkelgeschwindigkeit"},
            "description": "The change of angle per unit time; specifically, in celestial mechanics, the change in angle of the radius vector per unit time.",
            "description*": {
                "en": "The change of angle per unit time; specifically, in celestial mechanics, the change in angle of the radius vector per unit time."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngularVelocityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd76028b659105d139a01faedd83fefbd"]
    unit: Optional[AngularVelocityUnit] = Field(
        AngularVelocityUnit.radian_per_second,
        options={"enum_titles": ["rad/s"]},
        title="AngularVelocityUnit",
        x_enum_varnames=["radian_per_second"],
    )


class ElectromotiveForce(EnergyPerElectricCharge):
    """
    In physics, $\\textit{Electromotive Force}$, or most commonly $emf$ (seldom capitalized), or (occasionally) electromotance is that which tends to cause current (actual electrons and ions) to flow.
      More formally, $emf$ is the external work expended per unit of charge to produce an electric potential difference across two open-circuited terminals.
      $\\textit{Electromotive Force}$ is deprecated in the ISO System of Quantities.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "2ea2a195-a92e-5232-854d-eeb78edf3b6f",
            "title": "ElectromotiveForce",
            "title*": {"en": "Electromotive force", "de": "Elektromotorische Kraft"},
            "description": "In physics, $\\textit{Electromotive Force}$, or most commonly $emf$ (seldom capitalized), or (occasionally) electromotance is that which tends to cause current (actual electrons and ions) to flow. \n  More formally, $emf$ is the external work expended per unit of charge to produce an electric potential difference across two open-circuited terminals.\n  $\\textit{Electromotive Force}$ is deprecated in the ISO System of Quantities.",
            "description*": {
                "en": "In physics, $\\textit{Electromotive Force}$, or most commonly $emf$ (seldom capitalized), or (occasionally) electromotance is that which tends to cause current (actual electrons and ions) to flow. \n  More formally, $emf$ is the external work expended per unit of charge to produce an electric potential difference across two open-circuited terminals.\n  $\\textit{Electromotive Force}$ is deprecated in the ISO System of Quantities."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectromotiveForceValue",
            "@context": [
                "/wiki/Category:OSWce9a8c0dfd2159b2a628364ae9fbe9f3?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW2ea2a195a92e5232854deeb78edf3b6f"]


class ContractEndItemCeiSpecificationMass(Mass):
    """
    Contractual mass requirement of a delivered item. Note that The term 'control mass' is sometimes utilized as a limit in lieu of CEI mass when a CEI mass does not exist. The term 'Interface Control Document Mass' is another alternative for specifying a contractual mass requirement.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "28dfaf74-a031-5d0c-82f6-e6faaaa25e9e",
            "title": "ContractEndItemCeiSpecificationMass",
            "title*": {"en": "Contract End Item (CEI) Specification Mass."},
            "description": "Contractual mass requirement of a delivered item. Note that The term 'control mass' is sometimes utilized as a limit in lieu of CEI mass when a CEI mass does not exist. The term 'Interface Control Document Mass' is another alternative for specifying a contractual mass requirement.",
            "description*": {
                "en": "Contractual mass requirement of a delivered item. Note that The term 'control mass' is sometimes utilized as a limit in lieu of CEI mass when a CEI mass does not exist. The term 'Interface Control Document Mass' is another alternative for specifying a contractual mass requirement."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasContractEndItemCeiSpecificationMassValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW28dfaf74a0315d0c82f6e6faaaa25e9e"]


class MomentumPerAngleUnit(UnitEnum):
    newton_second_per_radian = "Item:OSW7f98af11c42058aeb941076309b78dea"


class MomentumPerAngle(QuantityValue):
    """
    This is an autogenerated partial class definition of 'MomentumPerAngle'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9ecfc2e0-9756-5a46-9701-e0a2c23e57fb",
            "title": "MomentumPerAngle",
            "title*": {"en": "Momentum per Angle"},
            "description": "This is an autogenerated partial class definition of 'MomentumPerAngle'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMomentumPerAngleValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9ecfc2e097565a469701e0a2c23e57fb"]
    unit: Optional[MomentumPerAngleUnit] = Field(
        MomentumPerAngleUnit.newton_second_per_radian,
        options={"enum_titles": ["N·s/rad"]},
        title="MomentumPerAngleUnit",
        x_enum_varnames=["newton_second_per_radian"],
    )


class ElectromagneticEnergyDensityUnit(UnitEnum):
    joule_per_meter_cubed = "Item:OSW9ea4bf89c42b56728392f1c55639ac18"
    mega_joule_per_meter_cubed = (
        "Item:OSW9ea4bf89c42b56728392f1c55639ac18#OSW7044da5ba4b45554b3acc6c6f3fc3624"
    )


class ElectromagneticEnergyDensity(QuantityValue):
    """
    $\\textit{Electromagnetic Energy Density}$, also known as the $\color{indigo} {\text{Volumic Electromagnetic Energy}}$, is the energy associated with an electromagnetic field, per unit volume of the field.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "d762c411-8322-5469-b74f-b0626b36aa70",
            "title": "ElectromagneticEnergyDensity",
            "title*": {"en": "Electromagnetic Energy Density"},
            "description": "$\\textit{Electromagnetic Energy Density}$, also known as the $\\color{indigo} {\\text{Volumic Electromagnetic Energy}}$, is the energy associated with an electromagnetic field, per unit volume of the field.",
            "description*": {
                "en": "$\\textit{Electromagnetic Energy Density}$, also known as the $\\color{indigo} {\\text{Volumic Electromagnetic Energy}}$, is the energy associated with an electromagnetic field, per unit volume of the field."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasElectromagneticEnergyDensityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd762c41183225469b74fb0626b36aa70"]
    unit: Optional[ElectromagneticEnergyDensityUnit] = Field(
        ElectromagneticEnergyDensityUnit.joule_per_meter_cubed,
        options={"enum_titles": ["J/m³", "MJ/m³"]},
        title="ElectromagneticEnergyDensityUnit",
        x_enum_varnames=["joule_per_meter_cubed", "mega_joule_per_meter_cubed"],
    )


class SpecificHeatCapacityAtSaturationUnit(UnitEnum):
    joule_per_Celsius_per_kilo_gram = (
        "Item:OSW93d8b6e516fd54f09d483dee1278e3a8#OSWa0cd208ccfa759388597f5f9ff5c69fc"
    )


class SpecificHeatCapacityAtSaturation(QuantityValue):
    """
    Specific heat per constant volume.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "4500771e-3381-5320-9800-1c704d0b9cb1",
            "title": "SpecificHeatCapacityAtSaturation",
            "title*": {"en": "Specific Heat Capacity at Saturation"},
            "description": "Specific heat per constant volume.",
            "description*": {"en": "Specific heat per constant volume."},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSpecificHeatCapacityAtSaturationValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW4500771e3381532098001c704d0b9cb1"]
    unit: Optional[SpecificHeatCapacityAtSaturationUnit] = Field(
        SpecificHeatCapacityAtSaturationUnit.joule_per_Celsius_per_kilo_gram,
        options={"enum_titles": ["J/(kg·°C)"]},
        title="SpecificHeatCapacityAtSaturationUnit",
        x_enum_varnames=["joule_per_Celsius_per_kilo_gram"],
    )


class SingleStageLauncherMassRatio(MassRatio):
    """
    This is an autogenerated partial class definition of 'SingleStageLauncherMassRatio'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "0964da9e-f1d9-5299-8971-48151a660792",
            "title": "SingleStageLauncherMassRatio",
            "title*": {"en": "Single Stage Launcher Mass Ratio"},
            "description": "This is an autogenerated partial class definition of 'SingleStageLauncherMassRatio'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasSingleStageLauncherMassRatioValue",
            "@context": [
                "/wiki/Category:OSWfeea42441eab5f6598b36cda1157f75f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW0964da9ef1d95299897148151a660792"]


class AngularCrossSectionUnit(UnitEnum):
    meter_squared_per_steradian = "Item:OSWe9c4745c4d3a5c17a288b08a7f870ffc"


class AngularCrossSection(QuantityValue):
    """
    "Angular Cross-section" is the cross-section for ejecting or scattering a particle into an elementary cone, divided by the solid angle $d\Omega$ of that cone.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "a1a449c3-adf3-5ee3-aba8-109c7667b890",
            "title": "AngularCrossSection",
            "title*": {"en": "Angular Cross-section"},
            "description": '"Angular Cross-section" is the cross-section for ejecting or scattering a particle into an elementary cone, divided by the solid angle $d\\Omega$ of that cone.',
            "description*": {
                "en": '"Angular Cross-section" is the cross-section for ejecting or scattering a particle into an elementary cone, divided by the solid angle $d\\Omega$ of that cone.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAngularCrossSectionValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa1a449c3adf35ee3aba8109c7667b890"]
    unit: Optional[AngularCrossSectionUnit] = Field(
        AngularCrossSectionUnit.meter_squared_per_steradian,
        options={"enum_titles": ["m²/sr"]},
        title="AngularCrossSectionUnit",
        x_enum_varnames=["meter_squared_per_steradian"],
    )


class CompoundPlaneAngle(PlaneAngle):
    """
    A "Compound Plane Angle" is a compound measure of plane angle in degrees, minutes, seconds, and optionally millionth-seconds of arc.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "116611f9-5169-5317-bee0-d3df1d1796be",
            "title": "CompoundPlaneAngle",
            "title*": {"en": "Compound Plane Angle"},
            "description": 'A "Compound Plane Angle" is a compound measure of plane angle in degrees, minutes, seconds, and optionally millionth-seconds of arc.',
            "description*": {
                "en": 'A "Compound Plane Angle" is a compound measure of plane angle in degrees, minutes, seconds, and optionally millionth-seconds of arc.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCompoundPlaneAngleValue",
            "@context": [
                "/wiki/Category:OSWcfa8c1748f3b586e9a0304ab1e2dbc41?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW116611f951695317bee0d3df1d1796be"]


class AreicChargeDensity(ElectricChargePerArea):
    """
    This is an autogenerated partial class definition of 'AreicChargeDensity'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "634ec6da-c47f-5f43-9bd6-f64e9243351c",
            "title": "AreicChargeDensity",
            "title*": {"en": "Areic charge density"},
            "description": "This is an autogenerated partial class definition of 'AreicChargeDensity'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAreicChargeDensityValue",
            "@context": [
                "/wiki/Category:OSW4f0b36aedcac5f4dafcc0eaec8eb86dd?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW634ec6dac47f5f439bd6f64e9243351c"]


class ActivePower(ElectricPower):
    """
    An $Active Power$ is, under periodic conditions, the mean value, taken over one period $T$, of the instantaneous power $p$.
      In complex notation, $P = \mathbf{Re} \; \\underline{S}$, where $\\underline{S}$ is $\\textit{complex power}$.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "d8d82c09-0624-5817-ad4c-0d3d273e0b29",
            "title": "ActivePower",
            "title*": {"en": "Active Power"},
            "description": "An $Active Power$ is, under periodic conditions, the mean value, taken over one period $T$, of the instantaneous power $p$. \n  In complex notation, $P = \\mathbf{Re} \\; \\underline{S}$, where $\\underline{S}$ is $\\textit{complex power}$.",
            "description*": {
                "en": "An $Active Power$ is, under periodic conditions, the mean value, taken over one period $T$, of the instantaneous power $p$. \n  In complex notation, $P = \\mathbf{Re} \\; \\underline{S}$, where $\\underline{S}$ is $\\textit{complex power}$."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasActivePowerValue",
            "@context": [
                "/wiki/Category:OSW06164d3febb95a42add7826696cc5387?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWd8d82c0906245817ad4c0d3d273e0b29"]


class FinalOrCurrentVehicleMass(Mass):
    """
    This is an autogenerated partial class definition of 'FinalOrCurrentVehicleMass'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a6c948d5-809e-504c-ab9f-a3aae14ad79a",
            "title": "FinalOrCurrentVehicleMass",
            "title*": {"en": "Final Or Current Vehicle Mass"},
            "description": "This is an autogenerated partial class definition of 'FinalOrCurrentVehicleMass'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFinalOrCurrentVehicleMassValue",
            "@context": [
                "/wiki/Category:OSWe9be062de2d15d10891397a18212f920?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa6c948d5809e504cab9fa3aae14ad79a"]


class Prevalence(DimensionlessRatio):
    """
    In epidemiology, prevalence is the proportion of a particular population found to be affected by a medical condition (typically a disease or a risk factor such as smoking or seatbelt use) at a specific time. (Wikipedia)
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "8ae4971b-bbb1-5913-a90c-0f6a1075e2ae",
            "title": "Prevalence",
            "title*": {"en": "Prevalence"},
            "description": "In epidemiology, prevalence is the proportion of a particular population found to be affected by a medical condition (typically a disease or a risk factor such as smoking or seatbelt use) at a specific time. (Wikipedia)",
            "description*": {
                "en": "In epidemiology, prevalence is the proportion of a particular population found to be affected by a medical condition (typically a disease or a risk factor such as smoking or seatbelt use) at a specific time. (Wikipedia)"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPrevalenceValue",
            "@context": [
                "/wiki/Category:OSW67faac860ed758758aa4484387e5d5c9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8ae4971bbbb15913a90c0f6a1075e2ae"]


class FermiEnergy(Energy):
    """
    "Fermi Energy" in a metal is the highest occupied energy level at zero thermodynamic temperature.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "76e5322d-7b8c-5f03-be94-ad8dc87405b1",
            "title": "FermiEnergy",
            "title*": {"en": "Fermi Energy"},
            "description": '"Fermi Energy" in a metal is the highest occupied energy level at zero thermodynamic temperature.',
            "description*": {
                "en": '"Fermi Energy" in a metal is the highest occupied energy level at zero thermodynamic temperature.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFermiEnergyValue",
            "@context": [
                "/wiki/Category:OSWc87ddd4a7d1159f0a75b686a61ef4e8e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW76e5322d7b8c5f03be94ad8dc87405b1"]


class Volume(QuantityValue):
    """
    The volume of a solid object is the three-dimensional concept of how much space it occupies, often quantified numerically. One-dimensional figures (such as lines) and two-dimensional shapes (such as squares) are assigned zero volume in the three-dimensional space.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "f5c54cd7-0ddf-5ff3-b1ef-1aee6ae8f0cb",
            "title": "Volume",
            "title*": {"en": "Volume"},
            "description": "The volume of a solid object is the three-dimensional concept of how much space it occupies, often quantified numerically. One-dimensional figures (such as lines) and two-dimensional shapes (such as squares) are assigned zero volume in the three-dimensional space.",
            "description*": {
                "en": "The volume of a solid object is the three-dimensional concept of how much space it occupies, often quantified numerically. One-dimensional figures (such as lines) and two-dimensional shapes (such as squares) are assigned zero volume in the three-dimensional space."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasVolumeValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf5c54cd70ddf5ff3b1ef1aee6ae8f0cb"]
    unit: Optional[VolumeUnit] = Field(
        VolumeUnit.meter_cubed,
        options={"enum_titles": ["m³", "mm³", "dm³", "μm³", "dam³", "cm³"]},
        title="VolumeUnit",
        x_enum_varnames=[
            "meter_cubed",
            "milli_meter_cubed",
            "deci_meter_cubed",
            "micro_meter_cubed",
            "deca_meter_cubed",
            "centi_meter_cubed",
        ],
    )


class Displacement(Length):
    """
    "Displacement" is the shortest distance from the initial to the final position of a point P.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "22c5c9fd-1072-518c-a4e3-6301f8459bc8",
            "title": "Displacement",
            "title*": {"en": "Displacement"},
            "description": '"Displacement" is the shortest distance from the initial to the final position of a point P.',
            "description*": {
                "en": '"Displacement" is the shortest distance from the initial to the final position of a point P.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDisplacementValue",
            "@context": [
                "/wiki/Category:OSWee9c7e5c343e542cb5a8b4648315902f?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW22c5c9fd1072518ca4e36301f8459bc8"]


class IsothermalMoistureCapacity(SpecificVolume):
    """
    "Isothermal Moisture Capacity" is the capacity of a material to absorb moisture in the Effective Moisture Penetration Depth (EMPD) model.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "3cd5a696-56f4-5901-94bb-bfc7cfa614fb",
            "title": "IsothermalMoistureCapacity",
            "title*": {"en": "Isothermal Moisture Capacity"},
            "description": '"Isothermal Moisture Capacity" is the capacity of a material to absorb moisture in the Effective Moisture Penetration Depth (EMPD) model.',
            "description*": {
                "en": '"Isothermal Moisture Capacity" is the capacity of a material to absorb moisture in the Effective Moisture Penetration Depth (EMPD) model.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasIsothermalMoistureCapacityValue",
            "@context": [
                "/wiki/Category:OSW26ae18e11ed158dc9ea7e62d1d5ce92e?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW3cd5a69656f4590194bbbfc7cfa614fb"]


class CubicExpansionCoefficient(ExpansionRatio):
    """
    This is an autogenerated partial class definition of 'CubicExpansionCoefficient'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "74621602-59c6-5b45-be63-69b78ee192aa",
            "title": "CubicExpansionCoefficient",
            "title*": {
                "en": "Cubic expansion coefficient",
                "de": "Volumenausdehnungskoeffizient",
            },
            "description": "This is an autogenerated partial class definition of 'CubicExpansionCoefficient'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCubicExpansionCoefficientValue",
            "@context": [
                "/wiki/Category:OSWa3a8179bb49f5fafa9ff680f4d7f9f34?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW7462160259c65b45be6369b78ee192aa"]


class CompressibilityUnit(UnitEnum):
    meter_squared_per_newton = "Item:OSWfabd2eabe9d5542f9de724b3d10058ec"


class Compressibility(QuantityValue):
    """
    Compressibility is a measure of the relative volume change of a fluid or solid as a response to a pressure (or mean stress) change.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "e98ffe7d-9377-5d5e-ae95-108872432f2f",
            "title": "Compressibility",
            "title*": {"en": "Compressibility"},
            "description": "Compressibility is a measure of the relative volume change of a fluid or solid as a response to a pressure (or mean stress) change.",
            "description*": {
                "en": "Compressibility is a measure of the relative volume change of a fluid or solid as a response to a pressure (or mean stress) change."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasCompressibilityValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWe98ffe7d93775d5eae95108872432f2f"]
    unit: Optional[CompressibilityUnit] = Field(
        CompressibilityUnit.meter_squared_per_newton,
        options={"enum_titles": ["m²/N"]},
        title="CompressibilityUnit",
        x_enum_varnames=["meter_squared_per_newton"],
    )


class PressureLossPerLengthUnit(UnitEnum):
    kilo_gram_per_meter_squared_per_second_squared = (
        "Item:OSW876a1c66fd4c5fda86f129d3b65a1b98"
    )


class PressureLossPerLength(QuantityValue):
    """
    "Pressure Loss per Length" refers to the power lost in overcoming the friction between two moving surfaces. Also referred to as "Friction Loss".
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWc7f9aec4f71f4346b6031f96d7e46bd7",
            "uuid": "9315ab4c-dde4-56b4-948e-73cc6ba050b1",
            "title": "PressureLossPerLength",
            "title*": {"en": "Pressure Loss per Length"},
            "description": '"Pressure Loss per Length" refers to the power lost in overcoming the friction between two moving surfaces. Also referred to as "Friction Loss".',
            "description*": {
                "en": '"Pressure Loss per Length" refers to the power lost in overcoming the friction between two moving surfaces. Also referred to as "Friction Loss".'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPressureLossPerLengthValue",
            "@context": [
                "/wiki/Category:OSW4082937906634af992cf9a1b18d772cf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW9315ab4cdde456b4948e73cc6ba050b1"]
    unit: Optional[PressureLossPerLengthUnit] = Field(
        PressureLossPerLengthUnit.kilo_gram_per_meter_squared_per_second_squared,
        options={"enum_titles": ["kg/(m²·s²)"]},
        title="PressureLossPerLengthUnit",
        x_enum_varnames=["kilo_gram_per_meter_squared_per_second_squared"],
    )


class FailureRate(Incidence):
    """
    Grenzwert - falls er existiert - des Quotienten aus der bedingten Wahrscheinlichkeit, dass der Ausfallzeitpunkt t eines Betriebsmittels in ein gegebenes Zeitintervall (t, t + Δt) fällt, und der Dauer dieses Zeitintervalls, wenn Δt gegen null geht und das Betriebsmittel sich zu Beginn des Zeitintervalls im betriebsfähigen Zustand befindet
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "11d1e28e-ce21-52e3-868f-438d4eb40a11",
            "title": "FailureRate",
            "title*": {"en": "Failure rate"},
            "description": "Grenzwert - falls er existiert - des Quotienten aus der bedingten Wahrscheinlichkeit, dass der Ausfallzeitpunkt t eines Betriebsmittels in ein gegebenes Zeitintervall (t, t + Δt) fällt, und der Dauer dieses Zeitintervalls, wenn Δt gegen null geht und das Betriebsmittel sich zu Beginn des Zeitintervalls im betriebsfähigen Zustand befindet",
            "description*": {
                "en": "Grenzwert - falls er existiert - des Quotienten aus der bedingten Wahrscheinlichkeit, dass der Ausfallzeitpunkt t eines Betriebsmittels in ein gegebenes Zeitintervall (t, t + Δt) fällt, und der Dauer dieses Zeitintervalls, wenn Δt gegen null geht und das Betriebsmittel sich zu Beginn des Zeitintervalls im betriebsfähigen Zustand befindet"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFailureRateValue",
            "@context": [
                "/wiki/Category:OSWe8d1194aeb2e5b9f877867eab5c9cae9?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW11d1e28ece2152e3868f438d4eb40a11"]


class PropellantTemperature(Temperature):
    """
    This is an autogenerated partial class definition of 'PropellantTemperature'
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "a78a937a-78d6-5bf8-9d04-af65b0ae5b4a",
            "title": "PropellantTemperature",
            "title*": {"en": "Propellant Temperature"},
            "description": "This is an autogenerated partial class definition of 'PropellantTemperature'",
            "description*": {},
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasPropellantTemperatureValue",
            "@context": [
                "/wiki/Category:OSW20927e4900e95e93985698c92995f964?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWa78a937a78d65bf89d04af65b0ae5b4a"]


class DewPointTemperature(Temperature):
    """
    "Dew Point Temperature" is the temperature at which vapour in air reaches saturation.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "8d34f0cc-11e7-58bf-a887-aa0be724fe4e",
            "title": "DewPointTemperature",
            "title*": {"en": "Dew Point Temperature"},
            "description": '"Dew Point Temperature" is the temperature at which vapour in air reaches saturation.',
            "description*": {
                "en": '"Dew Point Temperature" is the temperature at which vapour in air reaches saturation.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasDewPointTemperatureValue",
            "@context": [
                "/wiki/Category:OSW20927e4900e95e93985698c92995f964?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW8d34f0cc11e758bfa887aa0be724fe4e"]


class HalfLife(Time):
    """
    The "Half-Life" is the average duration required for the decay of one half of the atoms or nuclei.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "22e788fd-36bc-5f8d-9007-e46b1b874413",
            "title": "HalfLife",
            "title*": {"en": "Half-life", "de": "Halbwertszeit"},
            "description": 'The "Half-Life" is the average duration required for the decay of one half of the atoms or nuclei.',
            "description*": {
                "en": 'The "Half-Life" is the average duration required for the decay of one half of the atoms or nuclei.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasHalfLifeValue",
            "@context": [
                "/wiki/Category:OSW389cb87d31be515aa5d2f12e2b66e938?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW22e788fd36bc5f8d9007e46b1b874413"]


class AbsoluteActivity(InverseVolume):
    """
    The "Absolute Activity" is the exponential of the ratio of the chemical potential to $RT$ where $R$ is the gas constant and $T$ the thermodynamic temperature.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "21ccd415-85d4-5a7f-97e6-8ffe96373f47",
            "title": "AbsoluteActivity",
            "title*": {"en": "Absolute Activity"},
            "description": 'The "Absolute Activity" is the exponential of the ratio of the chemical potential to $RT$ where $R$ is the gas constant and $T$ the thermodynamic temperature.',
            "description*": {
                "en": 'The "Absolute Activity" is the exponential of the ratio of the chemical potential to $RT$ where $R$ is the gas constant and $T$ the thermodynamic temperature.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasAbsoluteActivityValue",
            "@context": [
                "/wiki/Category:OSWdc5df784e44e5802beda722786fd75bf?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW21ccd41585d45a7f97e68ffe96373f47"]


class FahrenheitTemperature(Temperature):
    """
    Größe, deren Nullpunkt durch die Mischungstemperatur von Eis, Wasser und Salmiak (Ammoniumchlorid) definiert ist (-17,8 °C) und deren Fixpunkte auf der Fahrenheit-Skala 32 °F (Schmelztemperatur von Eis) und 212 °F (Siedetemperatur des Wassers) sind
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "ab84f18a-6ca8-5e0a-b17c-23c701c650b3",
            "title": "FahrenheitTemperature",
            "title*": {"en": "Fahrenheit temperature"},
            "description": "Größe, deren Nullpunkt durch die Mischungstemperatur von Eis, Wasser und Salmiak (Ammoniumchlorid) definiert ist (-17,8 °C) und deren Fixpunkte auf der Fahrenheit-Skala 32 °F (Schmelztemperatur von Eis) und 212 °F (Siedetemperatur des Wassers) sind",
            "description*": {
                "en": "Größe, deren Nullpunkt durch die Mischungstemperatur von Eis, Wasser und Salmiak (Ammoniumchlorid) definiert ist (-17,8 °C) und deren Fixpunkte auf der Fahrenheit-Skala 32 °F (Schmelztemperatur von Eis) und 212 °F (Siedetemperatur des Wassers) sind"
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasFahrenheitTemperatureValue",
            "@context": [
                "/wiki/Category:OSW20927e4900e95e93985698c92995f964?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWab84f18a6ca85e0ab17c23c701c650b3"]


class BiodegredationHalfLife(Time):
    """
    A time that quantifies how long it takes to reduce a substance's concentration by 50% from any concentration point in time in a water or soil environment by either bacteria or another living organism.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "053f9587-dee8-5c8b-809d-6ada48db67cd",
            "title": "BiodegredationHalfLife",
            "title*": {"en": "Biodegredation Half Life"},
            "description": "A time that quantifies how long it takes to reduce a substance's concentration by 50% from any concentration point in time in a water or soil environment by either bacteria or another living organism.",
            "description*": {
                "en": "A time that quantifies how long it takes to reduce a substance's concentration by 50% from any concentration point in time in a water or soil environment by either bacteria or another living organism."
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasBiodegredationHalfLifeValue",
            "@context": [
                "/wiki/Category:OSW389cb87d31be515aa5d2f12e2b66e938?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSW053f9587dee85c8b809d6ada48db67cd"]


class MolarEquivalent(AmountOfSubstance):
    """
    "Molar Equivalent" is the amount of a substance that reacts with (or is equivalent to) an arbitrary amount (typically one mole) of
    another substance in a given chemical reaction.
    """

    class Config:
        schema_extra = {
            "$comment": "Autogenerated section - do not edit. Generated from Category:Category Category:OSWffe74f291d354037b318c422591c5023 Category:OSWac07a46c2cf14f3daec503136861f5ab",
            "uuid": "f9c536c2-ed28-5ff4-8276-52539e5e0152",
            "title": "MolarEquivalent",
            "title*": {"en": "Molar Equivalent"},
            "description": '"Molar Equivalent" is the amount of a substance that reacts with (or is equivalent to) an arbitrary amount (typically one mole) of \nanother substance in a given chemical reaction.',
            "description*": {
                "en": '"Molar Equivalent" is the amount of a substance that reacts with (or is equivalent to) an arbitrary amount (typically one mole) of \nanother substance in a given chemical reaction.'
            },
            "defaultProperties": ["type"],
            "x-smw-quantity-property": "Property:HasMolarEquivalentValue",
            "@context": [
                "/wiki/Category:OSW2f222621d774517193dc5eab674e3721?action=raw&slot=jsonschema",
                {},
            ],
            "$defs": {},
        }

    type: Optional[Any] = ["Category:OSWf9c536c2ed285ff4827652539e5e0152"]
