[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "uber-central-rest-client"
version = "1.1.0"
description = "Official Python client for the Uber Central API - Enterprise Uber ride management"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Uber Central Team", email = "support@uber-central.com"}
]
maintainers = [
    {name = "Uber Central Team", email = "support@uber-central.com"}
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Office/Business",
    "Topic :: Communications",
    "Typing :: Typed",
]
keywords = [
    "uber", "ride", "booking", "api", "client", "transportation", 
    "enterprise", "business", "ride-sharing", "mobility", "travel",
    "scheduling", "fleet", "corporate", "expense", "tracking"
]
dependencies = [
    "requests>=2.25.0",
    "pydantic>=1.8.0,<3.0.0",
    "typing-extensions>=4.0.0; python_version<'3.10'",
]
requires-python = ">=3.8"

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=2.10.0",
    "black>=21.0.0",
    "flake8>=3.8.0",
    "mypy>=0.800",
    "twine>=3.0.0",
    "build>=0.5.0",
]
async = [
    "aiohttp>=3.7.0",
    "asyncio-throttle>=1.0.0",
]
testing = [
    "responses>=0.12.0", 
    "pytest-mock>=3.0.0",
    "factory-boy>=3.0.0",
]

[project.urls]
Homepage = "https://github.com/lymanlabs/uber-central"
Documentation = "https://apparel-scraper--uber-central-api-serve.modal.run/docs"
Repository = "https://github.com/lymanlabs/uber-central"
"Issue Tracker" = "https://github.com/lymanlabs/uber-central/issues"
"API Endpoint" = "https://apparel-scraper--uber-central-api-serve.modal.run"

[project.scripts]
uber-central = "uber_central_client.cli:main"

[tool.setuptools]
packages = ["uber_central_client"]

[tool.setuptools.package-data]
uber_central_client = ["py.typed"]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "requests.*",
    "pydantic.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=uber_central_client",
    "--cov-report=term-missing:skip-covered",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["uber_central_client"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/cli.py",  # CLI not included in coverage
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]