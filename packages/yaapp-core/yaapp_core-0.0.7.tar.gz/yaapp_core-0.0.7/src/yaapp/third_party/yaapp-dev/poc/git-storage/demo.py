#!/usr/bin/env python3
"""
Live demonstration of the Git Storage PoC functionality.
Shows the complete workflow from storage to issue management.
"""

import json
import tempfile
from simple_test import MockGitStorage, MockIssueManager

def print_step(step: int, title: str):
    print(f"\n{'='*50}")
    print(f"Step {step}: {title}")
    print(f"{'='*50}")

def print_result(data, title: str = "Result"):
    print(f"\n{title}:")
    print(json.dumps(data, indent=2, default=str))

def main():
    print("ðŸš€ Git-Based Blockchain Storage - Live Demo")
    print("This demonstrates the complete workflow of the PoC implementation")
    
    # Initialize storage
    with tempfile.TemporaryDirectory() as tmpdir:
        storage = MockGitStorage(tmpdir)
        issue_manager = MockIssueManager(storage)
        
        print_step(1, "Initialize Storage System")
        stats = storage.get_stats()
        print_result(stats.data, "Initial Storage Stats")
        
        print_step(2, "Store User Data")
        users = [
            {"name": "Alice Smith", "role": "developer", "email": "alice@company.com"},
            {"name": "Bob Johnson", "role": "reviewer", "email": "bob@company.com"},
            {"name": "Carol Davis", "role": "manager", "email": "carol@company.com"}
        ]
        
        for i, user in enumerate(users):
            result = storage.store(f"user_{i+1}", user, {"type": "user"})
            print(f"âœ… Stored user: {user['name']} (Commit: {result.commit_hash[:8]})")
        
        print_step(3, "Store Configuration Data")
        config = {
            "app_name": "YAPP Demo",
            "version": "1.0.0",
            "features": ["git_storage", "issue_management", "review_workflow"],
            "settings": {
                "cache_enabled": True,
                "max_connections": 100,
                "debug_mode": False
            }
        }
        
        result = storage.store("app_config", config, {"type": "configuration"})
        print(f"âœ… Stored configuration (Commit: {result.commit_hash[:8]})")
        print_result(result.data['data'], "Configuration Data")
        
        print_step(4, "Create Issues")
        issues = [
            {
                "title": "Implement user authentication",
                "description": "Add secure login system with JWT tokens",
                "assignee": "alice@company.com"
            },
            {
                "title": "Optimize database queries",
                "description": "Improve performance of user lookup queries",
                "assignee": "bob@company.com"
            },
            {
                "title": "Add API documentation",
                "description": "Create comprehensive API documentation with examples",
                "assignee": "alice@company.com"
            }
        ]
        
        issue_ids = []
        for issue_data in issues:
            result = issue_manager.create_issue(**issue_data)
            issue_id = result.data['data']['id']
            issue_ids.append(issue_id)
            print(f"âœ… Created issue: {issue_data['title']} (ID: {issue_id})")
        
        print_step(5, "Request Reviews")
        review_ids = []
        for i, issue_id in enumerate(issue_ids[:2]):  # Review first 2 issues
            result = issue_manager.request_review(issue_id, "bob@company.com")
            if result.success:
                review_id = result.data['data']['id']
                review_ids.append(review_id)
                print(f"âœ… Requested review for issue {issue_id} (Review ID: {review_id})")
        
        print_step(6, "Submit Review Decisions")
        # Approve first review
        if review_ids:
            result = issue_manager.submit_review(
                review_ids[0],
                status="approved",
                comments=["Code looks good", "Tests are comprehensive"],
                decision_notes="Approved for deployment"
            )
            if result.success:
                print("âœ… Submitted approval for first review")
                print_result(result.data['data'], "Review Decision")
        
        # Request changes for second review
        if len(review_ids) > 1:
            result = issue_manager.submit_review(
                review_ids[1],
                status="changes_requested",
                comments=["Need to add error handling", "Consider edge cases"],
                decision_notes="Please address the comments before approval"
            )
            if result.success:
                print("âœ… Requested changes for second review")
        
        print_step(7, "Query and List Data")
        
        # List all keys
        result = storage.list_keys()
        print(f"ðŸ“‹ Total keys in storage: {len(result.data)}")
        print(f"Keys: {', '.join(result.data)}")
        
        # Get updated stats
        stats = storage.get_stats()
        print_result(stats.data, "Final Storage Stats")
        
        print_step(8, "Demonstrate Audit Trail")
        
        # Show commit history (simplified for mock)
        print("ðŸ“œ Audit Trail:")
        print(f"  â€¢ Total commits created: {stats.data['total_commits']}")
        print(f"  â€¢ All operations are tracked and immutable")
        print(f"  â€¢ Each change creates a new commit with timestamp")
        print(f"  â€¢ Complete history available for compliance")
        
        print_step(9, "Demonstrate Issue Workflow")
        
        # Get the approved issue
        if issue_ids:
            result = issue_manager.get_issue(issue_ids[0])
            if result.success:
                issue = result.data['data']
                print(f"ðŸ“‹ Issue Status: {issue['title']}")
                print(f"   Status: {issue['status']}")
                print(f"   Review Status: {issue['review_status']}")
                print(f"   Assignee: {issue['assignee']}")
                print(f"   Reviewer: {issue.get('reviewer', 'None')}")
        
        print_step(10, "Performance Demonstration")
        
        import time
        
        # Batch store performance
        start_time = time.time()
        for i in range(50):
            storage.store(f"perf_test_{i}", {
                "index": i,
                "data": f"Performance test item {i}",
                "timestamp": time.time()
            })
        store_time = time.time() - start_time
        
        # Batch retrieve performance
        start_time = time.time()
        for i in range(50):
            storage.retrieve(f"perf_test_{i}")
        retrieve_time = time.time() - start_time
        
        print(f"âš¡ Performance Results:")
        print(f"   Stored 50 items in {store_time:.3f}s ({50/store_time:.1f} items/sec)")
        print(f"   Retrieved 50 items in {retrieve_time:.3f}s ({50/retrieve_time:.1f} items/sec)")
        
        # Final stats
        final_stats = storage.get_stats()
        print(f"\nðŸ“Š Final Statistics:")
        print(f"   Total objects: {final_stats.data['total_objects']}")
        print(f"   Total commits: {final_stats.data['total_commits']}")
        print(f"   Cache size: {final_stats.data['cache_size']}")
        
        print(f"\n{'='*60}")
        print("ðŸŽ‰ DEMO COMPLETE!")
        print("The Git-based blockchain storage system successfully demonstrated:")
        print("â€¢ Immutable data storage with commit history")
        print("â€¢ Issue management with review workflow")
        print("â€¢ Performance suitable for real applications")
        print("â€¢ Complete audit trail for all operations")
        print("â€¢ Caching for optimized performance")
        print(f"{'='*60}")

if __name__ == "__main__":
    main()