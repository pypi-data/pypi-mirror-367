!function(t,e){if("function"==typeof define&&define.amd)define(["exports"],e);else if("undefined"!=typeof exports)e(exports);else{var a={exports:{}};e(a.exports),t.modAlert=a.exports}}("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:this,(function(t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.alert=void 0;const e=MyAMS.$;if(!e.templates){const t=require("jsrender");e.templates=t.templates}const a=e.templates({markup:'\n\t<div class="alert alert-{{:status}}" role="alert">\n\t\t<button type="button" class="close" data-dismiss="alert" \n\t\t\t\taria-label="{{*: MyAMS.i18n.BTN_CLODE }}">\n\t\t\t<i class="fa fa-times" aria-hidden="true"></i>\t\n\t\t</button>\n\t\t{{if header}}\n\t\t<h5 class="alert-heading">{{:header}}</h5>\n\t\t{{/if}}\n\t\t{{* if (typeof message === \'string\') { }}\n\t\t<ul>\n\t\t\t<li>{{:message}}</li>\n\t\t</ul>\n\t\t{{* } else { }}\n\t\t<ul>\n\t\t{{for message}}\n\t\t\t<li>{{:}}</li>\n\t\t{{/for}}\n\t\t</ul>\n\t\t{{* } }}\n\t</div>',allowCode:!0}),n=e.templates({markup:'\n\t<div role="alert" class="toast toast-{{:status}} fade hide"\n\t\t data-autohide="{{*: Boolean(data.timeout !== 0).toString() }}"\n\t\t data-delay="{{: timeout || 5000}}">\n\t\t<div class="toast-header">\n\t\t{{if icon}}\n\t\t\t<i class="fa {{:icon}} mr-2"></i>\n\t\t{{/if}}\n\t\t\t<strong class="mr-auto">{{:title}}</strong>\n\t\t{{if !hideTimestamp}}\n\t\t\t<small>{{*: new Date().toLocaleTimeString() }}</small>\n\t\t{{/if}}\n\t\t\t<button type="button" class="ml-2 mb-1 close" data-dismiss="toast">\n\t\t\t\t<i class="fa fa-times text-white"></i>\n\t\t\t</button>\n\t\t</div>\n\t\t<div class="toast-body">\n\t\t\t<div>\n\t\t\t{{if content}}\n\t\t\t\t{{:content}}\n\t\t\t{{else}}\n\t\t\t\t<p>{{:message}}</p>\n\t\t\t{{/if}}\n\t\t\t</div>\n\t\t</div>\n\t</div>',allowCode:!0}),s=e.templates({markup:'\n\t<div role="alert" class="toast toast-{{:status}} fade hide"\n\t\t data-autohide="true"\n\t\t data-delay="{{: timeout || 5000}}">\n\t\t<div class="toast-body">\n\t\t\t<div>\n\t\t\t{{if content}}\n\t\t\t\t{{:content}}\n\t\t\t{{else}}\n\t\t\t\t<span>\n\t\t\t\t\t{{if icon}}\n\t\t\t\t\t<i class="fa {{:icon}} mr-2"></i>\n\t\t\t\t\t{{/if}}\n\t\t\t\t\t{{:message}}\n\t\t\t\t</span>\n\t\t\t{{/if}}\n\t\t\t</div>\n\t\t</div>\n\t</div>',allowCode:!0}),o=e.templates({markup:'\n\t<div class="modal fade" data-backdrop="static" role="dialog">\n\t\t<div class="modal-dialog">\n\t\t\t<div class="modal-content">\n\t\t\t\t<div class="modal-header alert-{{:status}}">\n\t\t\t\t\t<h5 class="modal-title">\n\t\t\t\t\t{{if icon}}\n\t\t\t\t\t\t<i class="fa {{:icon}} mr-2"></i>\n\t\t\t\t\t{{/if}}\n\t\t\t\t\t{{:title}}\n\t\t\t\t\t</h5>\n\t\t\t\t\t<button type="button" class="close" \n\t\t\t\t\t\t\tdata-dismiss="modal" data-modal-dismiss-value="cancel">\n\t\t\t\t\t\t<i class="fa fa-times"></i>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div class="modal-body">\n\t\t\t\t\t<p>{{:message}}</p>\n\t\t\t\t</div>\n\t\t\t\t<div class="modal-footer">\n\t\t\t\t\t<button type="button" class="btn btn-primary" \n\t\t\t\t\t\t\tdata-dismiss="modal" data-modal-dismiss-value="success">\n\t\t\t\t\t\t{{*: data.successLabel || MyAMS.i18n.BTN_OK }}\n\t\t\t\t\t</button>\n\t\t\t\t\t<button type="button" class="btn btn-secondary" \n\t\t\t\t\t\t\tdata-dismiss="modal" data-modal-dismiss-value="cancel">\n\t\t\t\t\t\t{{*: data.cancelLabel || MyAMS.i18n.BTN_CANCEL }}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>',allowCode:!0}),i=t.alert={alert:(t={})=>{let n=t.status||"info";"error"===n&&(n="danger"),t.status=n,e(`.alert-${n}`,t.parent).not(".persistent").remove(),e(a.render(t)).prependTo(t.parent),MyAMS.require("helpers").then((()=>{MyAMS.helpers.scrollTo("#content",t.parent,{offset:-15})}))},messageBox:(t={})=>{let a=t.status||"info";"error"===a&&(a="danger"),t.status=a;let s=e(`.${MyAMS.config.alertsContainerClass}`);0===s.length&&(s=e("<div></div>").addClass(MyAMS.config.alertsContainerClass).appendTo(MyAMS.dom.root)),e(n.render(t)).appendTo(s).toast("show").on("hidden.bs.toast",(t=>{e(t.currentTarget).remove()}))},smallBox:(t={})=>{let a=t.status||"info";"error"===a&&(a="danger"),t.status=a;let n=e(`.${MyAMS.config.alertsContainerClass}`);0===n.length&&(n=e("<div></div>").addClass(MyAMS.config.alertsContainerClass).appendTo(MyAMS.dom.root)),e(s.render(t)).appendTo(n).toast("show").on("hidden.bs.toast",(t=>{e(t.currentTarget).remove()}))},bigBox:(t={})=>new Promise(((a,n)=>{let s=t.status||"info";"error"===s&&(s="danger"),t.status=s,MyAMS.require("modal").then((()=>{const n=e(o.render(t)).appendTo(MyAMS.dom.root);n.on("shown.bs.modal",(t=>{e(".btn-primary",t.target).focus()})),n.on("hidden.bs.modal",(()=>{a(n.data("modal-result")),n.remove()})),n.modal("show")}),(()=>{n("Missing 'modal' module!")}))}))};window.MyAMS&&(MyAMS.env.bundle?MyAMS.config.modules.push("alert"):(MyAMS.alert=i,console.debug("MyAMS: alert module loaded...")))}));