!function(e,o){if("function"==typeof define&&define.amd)define(["exports"],o);else if("undefined"!=typeof exports)o(exports);else{var s={exports:{}};o(s.exports),e.modCallbacks=s.exports}}("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:this,(function(e){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.callbacks=void 0;const o=MyAMS.$;let s=!1;const a=e.callbacks={init:()=>{s||(s=!0)},initElement:e=>new Promise(((s,a)=>{const l=[];o("[data-ams-callback]",e).each(((e,s)=>{const a=o(s).data();let n=a.amsCallback;if("string"==typeof n)try{n=JSON.parse(a.amsCallback)}catch(e){n=a.amsCallback.split(/[\s,;]+/)}o.isArray(n)||(n=[n]);for(const e of n){let o,n,c,t;"string"==typeof e?(o=e,n=MyAMS.core.getFunctionByName(o),c=a.amsCallbackOptions,t=a.amsCallbackOptions,"string"==typeof t&&(t=t.unserialize())):(o=e.callback,n=MyAMS.core.getFunctionByName(o),c=e.source,t=e.options),void 0===n?c?l.push(MyAMS.core.getScript(c).then((()=>{n=MyAMS.core.getFunctionByName(o),void 0===n?console.warn(`Missing callback ${o}!`):n.call(document,s,t)}))):console.warn(`Missing source for undefined callback ${e}!`):l.push(Promise.resolve(n.call(document,s,t)))}})),o.when.apply(o,l).then(s,a)}))};window.MyAMS&&(MyAMS.env.bundle?MyAMS.config.modules.push("callbacks"):(MyAMS.callbacks=a,console.debug("MyAMS: callbacks module loaded...")))}));