!function(t,e){if("function"==typeof define&&define.amd)define(["exports"],e);else if("undefined"!=typeof exports)e(exports);else{var i={exports:{}};e(i.exports),t.modNotifications=i.exports}}("undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:this,(function(t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.notifications=void 0;const e=MyAMS.$;if(!e.templates){const t=require("jsrender");e.templates=t.templates}const i=e.templates({markup:'\n\t<li class="p-1 my-1{{if status}} alert-{{:status}}{{/if}}">\n\t\t<a class="d-flex flex-row"{{if url}} href="{{:url}}"{{/if}}{{if modal}} data-toggle="modal"{{/if}}>\n\t\t\t{{if source.avatar}}\n\t\t\t<img class="avatar mx-1 mt-1" src="{{:source.avatar}}"\n\t\t\t\t alt="{{:source.title}}" title="{{:source.title}}" />\n\t\t\t{{else}}\n\t\t\t<i class="avatar fa fa-fw fa-2x fa-user mx-1 mt-1"\n\t\t\t   title="{{:source.title}}"></i>\n\t\t\t{{/if}}\n\t\t\t<div class="flex-grow-1 ml-2">\n\t\t\t\t<small class="timestamp float-right text-muted">\n\t\t\t\t\t{{*: new Date(data.timestamp).toLocaleString()}}\n\t\t\t\t</small>\n\t\t\t\t<strong class="title d-block">\n\t\t\t\t\t{{:title}}\n\t\t\t\t</strong>\n\t\t\t\t<p class="text-muted mb-2">{{:message}}</p>\n\t\t\t</div>\n\t\t</a>\n\t</li>',allowCode:!0}),a=e.templates({markup:'\n\t<ul class="list-style-none flex-grow-1 overflow-auto m-0 p-0">\n\t\t{{for notifications tmpl=~itemTemplate /}}\n\t</ul>\n\t{{if !~options.hideTimestamp}}\n\t<div class="timestamp border-top pt-1">\n\t\t<span>{{*: MyAMS.i18n.LAST_UPDATE }}{{: ~timestamp.toLocaleString() }}</span>\n\t\t<i class="fa fa-fw fa-sync float-right"\n\t\t   data-ams-click-handler="MyAMS.notifications.getNotifications"\n\t\t   data-ams-click-handler-options=\'{"localTimestamp": "{{: ~useLocalTime }}"}\'></i>\n\t</div>\n\t{{/if}}',allowCode:!0});class o{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.values=t,this.options=e}render(t){e(t).html(a.render(this.values,{itemTemplate:i,timestamp:this.options.localTimestamp?new Date:new Date(this.values.timestamp),useLocalTime:this.options.localTimestamp?"true":"false",options:this.options}))}}const n=t.notifications={checkPermission:()=>new Promise(((t,e)=>{"Notification"in window?"denied"!==Notification.permission?"default"===Notification.permission?(()=>{try{Notification.requestPermission().then()}catch(t){return!1}return!0})()?Notification.requestPermission().then((e=>{t("granted"===e)})):Notification.requestPermission((e=>{t("granted"===e)})):t(!0):t(!1):(console.debug("Notifications are not supported by this browser!"),t(!1))})),checkUserPermission:()=>{MyAMS.notifications.checkPermission().then((()=>{}))},getNotifications:(t,i)=>{const a=e.extend({},i,t.data),s=e(t.target),r=e(t.currentTarget),c=r.data("ams-notifications-source")||r.parents("[data-ams-notifications-source]").data("ams-notifications-source");return new Promise(((t,i)=>{MyAMS.require("ajax").then((()=>{MyAMS.ajax.get(c,r.data("ams-notifications-params")||"",r.data("ams-notifications-options")||{}).then((i=>{const c=e(s.data("ams-notifications-target")||s.parents("[data-ams-notifications-target]").data("ams-notifications-target")||r.attr("href"));new o(i,a).render(c),e("#notifications-count").text(""),n.checkUserPermission(),localStorage.setItem("notifications-timestamp",(new Date).toISOString()),t()}),i)}),i)}))},getNotificationsBadge:()=>{const t=e("#user-notifications").data("ams-notifications-source");return new Promise(((i,a)=>{const o=localStorage.getItem("notifications-timestamp");null===o?localStorage.setItem("notifications-timestamp",(new Date).toISOString()):MyAMS.require("ajax").then((()=>{MyAMS.ajax.get(t).then((t=>{const a=new Date(Date.parse(o)),n=(t.notifications||[]).filter((t=>new Date("number"==typeof t.timestamp?t.timestamp:Date.parse(t.timestamp))>a));e("#notifications-count").text(n.length||""),i()}),a)}),a)}))},addNotification:(t,a)=>{const o=e("ul","#notifications-pane"),s=e(i.render(t)),r=e("#notifications-count"),c=parseInt(r.text())||0;o.prepend(s),r.text(c+1),a&&n.showDesktopNotification(t)},showDesktopNotification:t=>{n.checkPermission().then((e=>{if(!e)return;const i={title:t.title,body:t.message,icon:t.source.avatar},a=new Notification(i.title,i);t.url&&(a.onclick=()=>{window.open(t.url)})}))}};MyAMS.env.bundle?MyAMS.config.modules.push("notifications"):(MyAMS.notifications=n,console.debug("MyAMS: notifications module loaded..."))}));