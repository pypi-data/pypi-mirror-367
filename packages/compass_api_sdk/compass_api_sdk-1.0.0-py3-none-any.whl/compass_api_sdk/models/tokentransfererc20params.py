"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .token_enum import TokenEnum
from compass_api_sdk.types import BaseModel
from compass_api_sdk.utils import validate_const
import pydantic
from pydantic.functional_validators import AfterValidator
from typing import Literal, Optional, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


TokenTransferErc20ParamsAmountTypedDict = TypeAliasType(
    "TokenTransferErc20ParamsAmountTypedDict", Union[float, str]
)
r"""Amount of token to transfer"""


TokenTransferErc20ParamsAmount = TypeAliasType(
    "TokenTransferErc20ParamsAmount", Union[float, str]
)
r"""Amount of token to transfer"""


class TokenTransferErc20ParamsTypedDict(TypedDict):
    r"""Parameters model for transferring ERC20 tokens."""

    amount: TokenTransferErc20ParamsAmountTypedDict
    r"""Amount of token to transfer"""
    token: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """
    to: str
    r"""The recipient of the tokens."""
    action_type: Literal["TOKEN_TRANSFER_ERC20"]


class TokenTransferErc20Params(BaseModel):
    r"""Parameters model for transferring ERC20 tokens."""

    amount: TokenTransferErc20ParamsAmount
    r"""Amount of token to transfer"""

    token: TokenEnum
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """

    to: str
    r"""The recipient of the tokens."""

    ACTION_TYPE: Annotated[
        Annotated[
            Optional[Literal["TOKEN_TRANSFER_ERC20"]],
            AfterValidator(validate_const("TOKEN_TRANSFER_ERC20")),
        ],
        pydantic.Field(alias="action_type"),
    ] = "TOKEN_TRANSFER_ERC20"
