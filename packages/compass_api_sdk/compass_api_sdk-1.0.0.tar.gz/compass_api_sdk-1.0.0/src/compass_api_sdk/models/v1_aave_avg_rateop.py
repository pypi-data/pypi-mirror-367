"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from compass_api_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from compass_api_sdk.utils import FieldMetadata, QueryParamMetadata
from enum import Enum
from pydantic import model_serializer
from typing_extensions import Annotated, NotRequired, TypedDict


class V1AaveAvgRateChain(str, Enum):
    ARBITRUM = "arbitrum"
    BASE = "base"
    ETHEREUM = "ethereum"


class V1AaveAvgRateToken(str, Enum):
    r"""A class representing the token.

    This class is used to represent the token in the system. Notice individual
    endpoints' documentation where per chain tokens are presented.
    """

    ONE_INCH = "1INCH"
    AAVE = "AAVE"
    BAL = "BAL"
    CB_BTC = "cbBTC"
    CB_ETH = "cbETH"
    CRV = "CRV"
    CRV_USD = "crvUSD"
    DAI = "DAI"
    ENS = "ENS"
    ET_HX = "ETHx"
    FRAX = "FRAX"
    FXS = "FXS"
    GHO = "GHO"
    KNC = "KNC"
    LDO = "LDO"
    LINK = "LINK"
    LUSD = "LUSD"
    MKR = "MKR"
    OS_ETH = "osETH"
    PYUSD = "PYUSD"
    R_ETH = "rETH"
    RPL = "RPL"
    RS_ETH = "rsETH"
    S_DAI = "sDAI"
    SNX = "SNX"
    STG = "STG"
    S_US_DE = "sUSDe"
    T_BTC = "tBTC"
    UNI = "UNI"
    USDC = "USDC"
    US_DE = "USDe"
    USDS = "USDS"
    USDT = "USDT"
    WBTC = "WBTC"
    WE_ETH = "weETH"
    WETH = "WETH"
    WST_ETH = "wstETH"
    ARB = "ARB"
    EURS = "EURS"
    MAI = "MAI"
    USD_CE = "USDCe"
    ETH = "ETH"
    AERO = "AERO"
    EUR = "EUR"
    VIRTUAL = "VIRTUAL"
    EZ_ETH = "ezETH"
    CYBER = "CYBER"
    WRS_ETH = "wrsETH"
    E_BTC = "eBTC"
    EURC = "EURC"
    E_US_DE = "eUSDe"
    FBTC = "FBTC"
    LBTC = "LBTC"
    PT_E_USDE_14_AUG2025 = "PT-eUSDE-14AUG2025"
    PT_E_USDE_29_MAY2025 = "PT-eUSDE-29MAY2025"
    PT_S_USDE_25_SEP2025 = "PT-sUSDE-25SEP2025"
    PT_S_USDE_31_JUL2025 = "PT-sUSDE-31JUL2025"
    PT_US_DE_31_JUL2025 = "PT-USDe-31JUL2025"
    RLUSD = "RLUSD"
    USD_0 = "USDâ‚®0"
    US_DB_C = "USDbC"
    US_DTB = "USDtb"


class V1AaveAvgRateRequestTypedDict(TypedDict):
    chain: V1AaveAvgRateChain
    block: NotRequired[Nullable[int]]
    r"""Optional block number (defaults to latest)."""
    token: V1AaveAvgRateToken
    r"""The symbol of the token.."""
    days: int
    r"""The number of days for which the average shall be calculated."""


class V1AaveAvgRateRequest(BaseModel):
    chain: Annotated[
        V1AaveAvgRateChain,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = V1AaveAvgRateChain.ETHEREUM

    block: Annotated[
        OptionalNullable[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET
    r"""Optional block number (defaults to latest)."""

    token: Annotated[
        V1AaveAvgRateToken,
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = V1AaveAvgRateToken.USDC
    r"""The symbol of the token.."""

    days: Annotated[
        int, FieldMetadata(query=QueryParamMetadata(style="form", explode=True))
    ] = 2
    r"""The number of days for which the average shall be calculated."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["block"]
        nullable_fields = ["block"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
