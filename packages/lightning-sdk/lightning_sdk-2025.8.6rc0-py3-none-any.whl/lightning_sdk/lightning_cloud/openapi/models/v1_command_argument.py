# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class V1CommandArgument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'defaults': 'list[str]',
        'description': 'str',
        'id': 'str',
        'name': 'str',
        'ready': 'bool',
        'required': 'bool',
        'type': 'CommandArgumentCommandArgumentType',
        'value': 'str'
    }

    attribute_map = {
        'defaults': 'defaults',
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'ready': 'ready',
        'required': 'required',
        'type': 'type',
        'value': 'value'
    }

    def __init__(self, defaults: 'list[str]' =None, description: 'str' =None, id: 'str' =None, name: 'str' =None, ready: 'bool' =None, required: 'bool' =None, type: 'CommandArgumentCommandArgumentType' =None, value: 'str' =None):  # noqa: E501
        """V1CommandArgument - a model defined in Swagger"""  # noqa: E501
        self._defaults = None
        self._description = None
        self._id = None
        self._name = None
        self._ready = None
        self._required = None
        self._type = None
        self._value = None
        self.discriminator = None
        if defaults is not None:
            self.defaults = defaults
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if ready is not None:
            self.ready = ready
        if required is not None:
            self.required = required
        if type is not None:
            self.type = type
        if value is not None:
            self.value = value

    @property
    def defaults(self) -> 'list[str]':
        """Gets the defaults of this V1CommandArgument.  # noqa: E501


        :return: The defaults of this V1CommandArgument.  # noqa: E501
        :rtype: list[str]
        """
        return self._defaults

    @defaults.setter
    def defaults(self, defaults: 'list[str]'):
        """Sets the defaults of this V1CommandArgument.


        :param defaults: The defaults of this V1CommandArgument.  # noqa: E501
        :type: list[str]
        """

        self._defaults = defaults

    @property
    def description(self) -> 'str':
        """Gets the description of this V1CommandArgument.  # noqa: E501


        :return: The description of this V1CommandArgument.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: 'str'):
        """Sets the description of this V1CommandArgument.


        :param description: The description of this V1CommandArgument.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self) -> 'str':
        """Gets the id of this V1CommandArgument.  # noqa: E501


        :return: The id of this V1CommandArgument.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: 'str'):
        """Sets the id of this V1CommandArgument.


        :param id: The id of this V1CommandArgument.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self) -> 'str':
        """Gets the name of this V1CommandArgument.  # noqa: E501


        :return: The name of this V1CommandArgument.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: 'str'):
        """Sets the name of this V1CommandArgument.


        :param name: The name of this V1CommandArgument.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ready(self) -> 'bool':
        """Gets the ready of this V1CommandArgument.  # noqa: E501


        :return: The ready of this V1CommandArgument.  # noqa: E501
        :rtype: bool
        """
        return self._ready

    @ready.setter
    def ready(self, ready: 'bool'):
        """Sets the ready of this V1CommandArgument.


        :param ready: The ready of this V1CommandArgument.  # noqa: E501
        :type: bool
        """

        self._ready = ready

    @property
    def required(self) -> 'bool':
        """Gets the required of this V1CommandArgument.  # noqa: E501


        :return: The required of this V1CommandArgument.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required: 'bool'):
        """Sets the required of this V1CommandArgument.


        :param required: The required of this V1CommandArgument.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def type(self) -> 'CommandArgumentCommandArgumentType':
        """Gets the type of this V1CommandArgument.  # noqa: E501


        :return: The type of this V1CommandArgument.  # noqa: E501
        :rtype: CommandArgumentCommandArgumentType
        """
        return self._type

    @type.setter
    def type(self, type: 'CommandArgumentCommandArgumentType'):
        """Sets the type of this V1CommandArgument.


        :param type: The type of this V1CommandArgument.  # noqa: E501
        :type: CommandArgumentCommandArgumentType
        """

        self._type = type

    @property
    def value(self) -> 'str':
        """Gets the value of this V1CommandArgument.  # noqa: E501


        :return: The value of this V1CommandArgument.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: 'str'):
        """Sets the value of this V1CommandArgument.


        :param value: The value of this V1CommandArgument.  # noqa: E501
        :type: str
        """

        self._value = value

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(V1CommandArgument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'V1CommandArgument') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, V1CommandArgument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'V1CommandArgument') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
