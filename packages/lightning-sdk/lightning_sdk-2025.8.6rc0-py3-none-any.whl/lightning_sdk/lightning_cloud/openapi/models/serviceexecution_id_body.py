# coding: utf-8

"""
    external/v1/auth_service.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    NOTE
    ----
    standard swagger-codegen-cli for this python client has been modified
    by custom templates. The purpose of these templates is to include
    typing information in the API and Model code. Please refer to the
    main grid repository for more info
"""

import pprint
import re  # noqa: F401

from typing import TYPE_CHECKING

import six

if TYPE_CHECKING:
    from datetime import datetime
    from lightning_sdk.lightning_cloud.openapi.models import *

class ServiceexecutionIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'arguments': 'list[V1CommandArgument]',
        'artifacts': 'list[V1ServiceArtifact]',
        'cloudspace_id': 'str',
        'cluster_id': 'str',
        'file_endpoint_cluster_id': 'str',
        'file_endpoint_id': 'str',
        'file_endpoint_project_id': 'str',
        'pipeline_id': 'str',
        'user_id': 'str'
    }

    attribute_map = {
        'arguments': 'arguments',
        'artifacts': 'artifacts',
        'cloudspace_id': 'cloudspaceId',
        'cluster_id': 'clusterId',
        'file_endpoint_cluster_id': 'fileEndpointClusterId',
        'file_endpoint_id': 'fileEndpointId',
        'file_endpoint_project_id': 'fileEndpointProjectId',
        'pipeline_id': 'pipelineId',
        'user_id': 'userId'
    }

    def __init__(self, arguments: 'list[V1CommandArgument]' =None, artifacts: 'list[V1ServiceArtifact]' =None, cloudspace_id: 'str' =None, cluster_id: 'str' =None, file_endpoint_cluster_id: 'str' =None, file_endpoint_id: 'str' =None, file_endpoint_project_id: 'str' =None, pipeline_id: 'str' =None, user_id: 'str' =None):  # noqa: E501
        """ServiceexecutionIdBody - a model defined in Swagger"""  # noqa: E501
        self._arguments = None
        self._artifacts = None
        self._cloudspace_id = None
        self._cluster_id = None
        self._file_endpoint_cluster_id = None
        self._file_endpoint_id = None
        self._file_endpoint_project_id = None
        self._pipeline_id = None
        self._user_id = None
        self.discriminator = None
        if arguments is not None:
            self.arguments = arguments
        if artifacts is not None:
            self.artifacts = artifacts
        if cloudspace_id is not None:
            self.cloudspace_id = cloudspace_id
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if file_endpoint_cluster_id is not None:
            self.file_endpoint_cluster_id = file_endpoint_cluster_id
        if file_endpoint_id is not None:
            self.file_endpoint_id = file_endpoint_id
        if file_endpoint_project_id is not None:
            self.file_endpoint_project_id = file_endpoint_project_id
        if pipeline_id is not None:
            self.pipeline_id = pipeline_id
        if user_id is not None:
            self.user_id = user_id

    @property
    def arguments(self) -> 'list[V1CommandArgument]':
        """Gets the arguments of this ServiceexecutionIdBody.  # noqa: E501


        :return: The arguments of this ServiceexecutionIdBody.  # noqa: E501
        :rtype: list[V1CommandArgument]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments: 'list[V1CommandArgument]'):
        """Sets the arguments of this ServiceexecutionIdBody.


        :param arguments: The arguments of this ServiceexecutionIdBody.  # noqa: E501
        :type: list[V1CommandArgument]
        """

        self._arguments = arguments

    @property
    def artifacts(self) -> 'list[V1ServiceArtifact]':
        """Gets the artifacts of this ServiceexecutionIdBody.  # noqa: E501


        :return: The artifacts of this ServiceexecutionIdBody.  # noqa: E501
        :rtype: list[V1ServiceArtifact]
        """
        return self._artifacts

    @artifacts.setter
    def artifacts(self, artifacts: 'list[V1ServiceArtifact]'):
        """Sets the artifacts of this ServiceexecutionIdBody.


        :param artifacts: The artifacts of this ServiceexecutionIdBody.  # noqa: E501
        :type: list[V1ServiceArtifact]
        """

        self._artifacts = artifacts

    @property
    def cloudspace_id(self) -> 'str':
        """Gets the cloudspace_id of this ServiceexecutionIdBody.  # noqa: E501


        :return: The cloudspace_id of this ServiceexecutionIdBody.  # noqa: E501
        :rtype: str
        """
        return self._cloudspace_id

    @cloudspace_id.setter
    def cloudspace_id(self, cloudspace_id: 'str'):
        """Sets the cloudspace_id of this ServiceexecutionIdBody.


        :param cloudspace_id: The cloudspace_id of this ServiceexecutionIdBody.  # noqa: E501
        :type: str
        """

        self._cloudspace_id = cloudspace_id

    @property
    def cluster_id(self) -> 'str':
        """Gets the cluster_id of this ServiceexecutionIdBody.  # noqa: E501


        :return: The cluster_id of this ServiceexecutionIdBody.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id: 'str'):
        """Sets the cluster_id of this ServiceexecutionIdBody.


        :param cluster_id: The cluster_id of this ServiceexecutionIdBody.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def file_endpoint_cluster_id(self) -> 'str':
        """Gets the file_endpoint_cluster_id of this ServiceexecutionIdBody.  # noqa: E501


        :return: The file_endpoint_cluster_id of this ServiceexecutionIdBody.  # noqa: E501
        :rtype: str
        """
        return self._file_endpoint_cluster_id

    @file_endpoint_cluster_id.setter
    def file_endpoint_cluster_id(self, file_endpoint_cluster_id: 'str'):
        """Sets the file_endpoint_cluster_id of this ServiceexecutionIdBody.


        :param file_endpoint_cluster_id: The file_endpoint_cluster_id of this ServiceexecutionIdBody.  # noqa: E501
        :type: str
        """

        self._file_endpoint_cluster_id = file_endpoint_cluster_id

    @property
    def file_endpoint_id(self) -> 'str':
        """Gets the file_endpoint_id of this ServiceexecutionIdBody.  # noqa: E501


        :return: The file_endpoint_id of this ServiceexecutionIdBody.  # noqa: E501
        :rtype: str
        """
        return self._file_endpoint_id

    @file_endpoint_id.setter
    def file_endpoint_id(self, file_endpoint_id: 'str'):
        """Sets the file_endpoint_id of this ServiceexecutionIdBody.


        :param file_endpoint_id: The file_endpoint_id of this ServiceexecutionIdBody.  # noqa: E501
        :type: str
        """

        self._file_endpoint_id = file_endpoint_id

    @property
    def file_endpoint_project_id(self) -> 'str':
        """Gets the file_endpoint_project_id of this ServiceexecutionIdBody.  # noqa: E501


        :return: The file_endpoint_project_id of this ServiceexecutionIdBody.  # noqa: E501
        :rtype: str
        """
        return self._file_endpoint_project_id

    @file_endpoint_project_id.setter
    def file_endpoint_project_id(self, file_endpoint_project_id: 'str'):
        """Sets the file_endpoint_project_id of this ServiceexecutionIdBody.


        :param file_endpoint_project_id: The file_endpoint_project_id of this ServiceexecutionIdBody.  # noqa: E501
        :type: str
        """

        self._file_endpoint_project_id = file_endpoint_project_id

    @property
    def pipeline_id(self) -> 'str':
        """Gets the pipeline_id of this ServiceexecutionIdBody.  # noqa: E501


        :return: The pipeline_id of this ServiceexecutionIdBody.  # noqa: E501
        :rtype: str
        """
        return self._pipeline_id

    @pipeline_id.setter
    def pipeline_id(self, pipeline_id: 'str'):
        """Sets the pipeline_id of this ServiceexecutionIdBody.


        :param pipeline_id: The pipeline_id of this ServiceexecutionIdBody.  # noqa: E501
        :type: str
        """

        self._pipeline_id = pipeline_id

    @property
    def user_id(self) -> 'str':
        """Gets the user_id of this ServiceexecutionIdBody.  # noqa: E501


        :return: The user_id of this ServiceexecutionIdBody.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: 'str'):
        """Sets the user_id of this ServiceexecutionIdBody.


        :param user_id: The user_id of this ServiceexecutionIdBody.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    def to_dict(self) -> dict:
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceexecutionIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self) -> str:
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self) -> str:
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other: 'ServiceexecutionIdBody') -> bool:
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceexecutionIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other: 'ServiceexecutionIdBody') -> bool:
        """Returns true if both objects are not equal"""
        return not self == other
