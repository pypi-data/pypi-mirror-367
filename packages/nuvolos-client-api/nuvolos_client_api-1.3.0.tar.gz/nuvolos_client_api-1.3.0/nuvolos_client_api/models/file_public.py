# coding: utf-8

"""
    Nuvolos

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: prod
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class FilePublic(BaseModel):
    """
    FilePublic
    """ # noqa: E501
    fid: StrictStr
    short_id: StrictStr
    local_path: StrictStr
    os_path: Optional[StrictStr] = None
    area: StrictStr
    type: StrictStr
    size: Optional[StrictInt] = None
    is_video: Optional[StrictBool] = None
    snapshot_slug: Optional[StrictStr] = None
    creation_timestamp: Optional[StrictStr] = None
    last_modified_timestamp: Optional[StrictStr] = None
    status: Optional[Dict[str, Any]] = None
    history: Optional[Dict[str, Any]] = None
    __properties: ClassVar[List[str]] = ["fid", "short_id", "local_path", "os_path", "area", "type", "size", "is_video", "snapshot_slug", "creation_timestamp", "last_modified_timestamp", "status", "history"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FilePublic from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FilePublic from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "fid": obj.get("fid"),
            "short_id": obj.get("short_id"),
            "local_path": obj.get("local_path"),
            "os_path": obj.get("os_path"),
            "area": obj.get("area"),
            "type": obj.get("type"),
            "size": obj.get("size"),
            "is_video": obj.get("is_video"),
            "snapshot_slug": obj.get("snapshot_slug"),
            "creation_timestamp": obj.get("creation_timestamp"),
            "last_modified_timestamp": obj.get("last_modified_timestamp"),
            "status": obj.get("status"),
            "history": obj.get("history")
        })
        return _obj


