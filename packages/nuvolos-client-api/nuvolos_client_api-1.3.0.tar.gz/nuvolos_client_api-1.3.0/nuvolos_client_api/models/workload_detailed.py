# coding: utf-8

"""
    Nuvolos

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: prod
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkloadDetailed(BaseModel):
    """
    WorkloadDetailed
    """ # noqa: E501
    session_id: Optional[StrictStr] = None
    slug: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    status: Optional[StrictStr] = None
    shared: Optional[StrictStr] = None
    org_slug: Optional[StrictStr] = None
    space_slug: Optional[StrictStr] = None
    instance_slug: Optional[StrictStr] = None
    node_pool: Optional[StrictStr] = None
    current_cpu: Optional[StrictStr] = None
    current_memory: Optional[StrictStr] = None
    compute_units: Optional[StrictStr] = None
    gpu: Optional[StrictStr] = None
    max_cpu: Optional[StrictStr] = None
    max_memory: Optional[StrictStr] = None
    addons_compute_units: Optional[StrictStr] = None
    creation_timestamp: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["session_id", "slug", "name", "status", "shared", "org_slug", "space_slug", "instance_slug", "node_pool", "current_cpu", "current_memory", "compute_units", "gpu", "max_cpu", "max_memory", "addons_compute_units", "creation_timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkloadDetailed from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkloadDetailed from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "session_id": obj.get("session_id"),
            "slug": obj.get("slug"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "shared": obj.get("shared"),
            "org_slug": obj.get("org_slug"),
            "space_slug": obj.get("space_slug"),
            "instance_slug": obj.get("instance_slug"),
            "node_pool": obj.get("node_pool"),
            "current_cpu": obj.get("current_cpu"),
            "current_memory": obj.get("current_memory"),
            "compute_units": obj.get("compute_units"),
            "gpu": obj.get("gpu"),
            "max_cpu": obj.get("max_cpu"),
            "max_memory": obj.get("max_memory"),
            "addons_compute_units": obj.get("addons_compute_units"),
            "creation_timestamp": obj.get("creation_timestamp")
        })
        return _obj


