# coding: utf-8

"""
    Nuvolos

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: prod
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Space(BaseModel):
    """
    Space
    """ # noqa: E501
    slug: StrictStr
    name: StrictStr
    description: Optional[StrictStr] = None
    type: StrictStr
    role: Optional[StrictStr] = None
    visibility_type: StrictStr
    database_tables_enabled: Optional[StrictBool] = None
    video_library_enabled: StrictBool
    archive_by_date: Optional[date] = None
    creation_timestamp: Optional[datetime] = None
    last_modified_timestamp: Optional[datetime] = None
    archival_timestamp: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["slug", "name", "description", "type", "role", "visibility_type", "database_tables_enabled", "video_library_enabled", "archive_by_date", "creation_timestamp", "last_modified_timestamp", "archival_timestamp"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Space from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if database_tables_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.database_tables_enabled is None and "database_tables_enabled" in self.model_fields_set:
            _dict['database_tables_enabled'] = None

        # set to None if archive_by_date (nullable) is None
        # and model_fields_set contains the field
        if self.archive_by_date is None and "archive_by_date" in self.model_fields_set:
            _dict['archive_by_date'] = None

        # set to None if creation_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.creation_timestamp is None and "creation_timestamp" in self.model_fields_set:
            _dict['creation_timestamp'] = None

        # set to None if last_modified_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.last_modified_timestamp is None and "last_modified_timestamp" in self.model_fields_set:
            _dict['last_modified_timestamp'] = None

        # set to None if archival_timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.archival_timestamp is None and "archival_timestamp" in self.model_fields_set:
            _dict['archival_timestamp'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Space from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "slug": obj.get("slug"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "type": obj.get("type"),
            "role": obj.get("role"),
            "visibility_type": obj.get("visibility_type"),
            "database_tables_enabled": obj.get("database_tables_enabled"),
            "video_library_enabled": obj.get("video_library_enabled"),
            "archive_by_date": obj.get("archive_by_date"),
            "creation_timestamp": obj.get("creation_timestamp"),
            "last_modified_timestamp": obj.get("last_modified_timestamp"),
            "archival_timestamp": obj.get("archival_timestamp")
        })
        return _obj


