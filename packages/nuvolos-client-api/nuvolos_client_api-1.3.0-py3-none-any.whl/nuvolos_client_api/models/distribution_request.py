# coding: utf-8

"""
    Nuvolos

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: prod
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class DistributionRequest(BaseModel):
    """
    DistributionRequest
    """ # noqa: E501
    target_instances: List[Dict[str, Any]] = Field(description="List of target instances with org_slug, space_slug, instance_slug. Objects will be distributed to the development snapshot of the target instance.")
    source_applications: Optional[List[StrictStr]] = Field(default=None, description="List of application slugs to distribute.")
    source_files: Optional[List[StrictStr]] = Field(default=None, description="List of file OS paths to distribute. These are the actual paths in the file system, not slugs.")
    source_tables: Optional[List[StrictStr]] = Field(default=None, description="List of table names to distribute. These are the actual table names, not slugs.")
    auto_snapshot: Optional[StrictBool] = Field(default=False, description="Whether to create a snapshot of the target instance before distributing.")
    notify_target_users: Optional[StrictBool] = Field(default=False, description="Whether to notify target users when the distribution is complete.")
    custom_email_message: Optional[StrictStr] = Field(default=None, description="Message to send when the distribution is complete.")
    __properties: ClassVar[List[str]] = ["target_instances", "source_applications", "source_files", "source_tables", "auto_snapshot", "notify_target_users", "custom_email_message"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DistributionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DistributionRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "target_instances": obj.get("target_instances"),
            "source_applications": obj.get("source_applications"),
            "source_files": obj.get("source_files"),
            "source_tables": obj.get("source_tables"),
            "auto_snapshot": obj.get("auto_snapshot") if obj.get("auto_snapshot") is not None else False,
            "notify_target_users": obj.get("notify_target_users") if obj.get("notify_target_users") is not None else False,
            "custom_email_message": obj.get("custom_email_message")
        })
        return _obj


