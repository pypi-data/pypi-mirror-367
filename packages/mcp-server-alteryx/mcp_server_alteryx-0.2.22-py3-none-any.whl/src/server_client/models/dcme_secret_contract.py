# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class DCMESecretContract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"value": "DCMESecretValueContract", "expires_on": "datetime", "parameters": "dict(str, object)"}

    attribute_map = {"value": "value", "expires_on": "expiresOn", "parameters": "parameters"}

    def __init__(self, value=None, expires_on=None, parameters=None, _configuration=None):  # noqa: E501
        """DCMESecretContract - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._value = None
        self._expires_on = None
        self._parameters = None
        self.discriminator = None

        if value is not None:
            self.value = value
        if expires_on is not None:
            self.expires_on = expires_on
        self.parameters = parameters

    @property
    def value(self):
        """Gets the value of this DCMESecretContract.  # noqa: E501


        :return: The value of this DCMESecretContract.  # noqa: E501
        :rtype: DCMESecretValueContract
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this DCMESecretContract.


        :param value: The value of this DCMESecretContract.  # noqa: E501
        :type: DCMESecretValueContract
        """

        self._value = value

    @property
    def expires_on(self):
        """Gets the expires_on of this DCMESecretContract.  # noqa: E501


        :return: The expires_on of this DCMESecretContract.  # noqa: E501
        :rtype: datetime
        """
        return self._expires_on

    @expires_on.setter
    def expires_on(self, expires_on):
        """Sets the expires_on of this DCMESecretContract.


        :param expires_on: The expires_on of this DCMESecretContract.  # noqa: E501
        :type: datetime
        """

        self._expires_on = expires_on

    @property
    def parameters(self):
        """Gets the parameters of this DCMESecretContract.  # noqa: E501


        :return: The parameters of this DCMESecretContract.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DCMESecretContract.


        :param parameters: The parameters of this DCMESecretContract.  # noqa: E501
        :type: dict(str, object)
        """
        if self._configuration.client_side_validation and parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(DCMESecretContract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DCMESecretContract):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DCMESecretContract):
            return True

        return self.to_dict() != other.to_dict()
