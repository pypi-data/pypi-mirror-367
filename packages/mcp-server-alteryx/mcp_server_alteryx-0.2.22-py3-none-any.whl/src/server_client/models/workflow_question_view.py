# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class WorkflowQuestionView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "question_type": "str",
        "description": "str",
        "value": "str",
        "multiple": "bool",
        "items": "list[WorkflowQuestionItemView]",
    }

    attribute_map = {
        "name": "name",
        "question_type": "questionType",
        "description": "description",
        "value": "value",
        "multiple": "multiple",
        "items": "items",
    }

    def __init__(
        self,
        name=None,
        question_type=None,
        description=None,
        value=None,
        multiple=None,
        items=None,
        _configuration=None,
    ):  # noqa: E501
        """WorkflowQuestionView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._question_type = None
        self._description = None
        self._value = None
        self._multiple = None
        self._items = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if question_type is not None:
            self.question_type = question_type
        if description is not None:
            self.description = description
        if value is not None:
            self.value = value
        if multiple is not None:
            self.multiple = multiple
        if items is not None:
            self.items = items

    @property
    def name(self):
        """Gets the name of this WorkflowQuestionView.  # noqa: E501


        :return: The name of this WorkflowQuestionView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowQuestionView.


        :param name: The name of this WorkflowQuestionView.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def question_type(self):
        """Gets the question_type of this WorkflowQuestionView.  # noqa: E501


        :return: The question_type of this WorkflowQuestionView.  # noqa: E501
        :rtype: str
        """
        return self._question_type

    @question_type.setter
    def question_type(self, question_type):
        """Sets the question_type of this WorkflowQuestionView.


        :param question_type: The question_type of this WorkflowQuestionView.  # noqa: E501
        :type: str
        """

        self._question_type = question_type

    @property
    def description(self):
        """Gets the description of this WorkflowQuestionView.  # noqa: E501


        :return: The description of this WorkflowQuestionView.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowQuestionView.


        :param description: The description of this WorkflowQuestionView.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def value(self):
        """Gets the value of this WorkflowQuestionView.  # noqa: E501


        :return: The value of this WorkflowQuestionView.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this WorkflowQuestionView.


        :param value: The value of this WorkflowQuestionView.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def multiple(self):
        """Gets the multiple of this WorkflowQuestionView.  # noqa: E501


        :return: The multiple of this WorkflowQuestionView.  # noqa: E501
        :rtype: bool
        """
        return self._multiple

    @multiple.setter
    def multiple(self, multiple):
        """Sets the multiple of this WorkflowQuestionView.


        :param multiple: The multiple of this WorkflowQuestionView.  # noqa: E501
        :type: bool
        """

        self._multiple = multiple

    @property
    def items(self):
        """Gets the items of this WorkflowQuestionView.  # noqa: E501


        :return: The items of this WorkflowQuestionView.  # noqa: E501
        :rtype: list[WorkflowQuestionItemView]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this WorkflowQuestionView.


        :param items: The items of this WorkflowQuestionView.  # noqa: E501
        :type: list[WorkflowQuestionItemView]
        """

        self._items = items

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(WorkflowQuestionView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowQuestionView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowQuestionView):
            return True

        return self.to_dict() != other.to_dict()
