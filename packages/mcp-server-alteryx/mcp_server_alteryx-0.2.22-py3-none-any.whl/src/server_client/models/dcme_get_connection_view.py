# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class DCMEGetConnectionView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "shared_by": "DCMEUserView",
        "shared_from_connection": "str",
        "connection_id": "str",
        "assigned_connection_ids": "list[str]",
        "created_on": "datetime",
        "last_changed_on": "datetime",
        "owner": "DCMEUserView",
        "sharing": "DCMESharingView",
        "id": "str",
        "name": "str",
        "schema_name": "str",
        "allow_in_sdks": "bool",
        "parameters": "dict(str, object)",
        "data_source": "DCMEDataSourceView",
        "credentials": "dict(str, DCMECredentialView)",
    }

    attribute_map = {
        "shared_by": "sharedBy",
        "shared_from_connection": "sharedFromConnection",
        "connection_id": "connectionId",
        "assigned_connection_ids": "assignedConnectionIds",
        "created_on": "createdOn",
        "last_changed_on": "lastChangedOn",
        "owner": "owner",
        "sharing": "sharing",
        "id": "id",
        "name": "name",
        "schema_name": "schemaName",
        "allow_in_sdks": "allowInSdks",
        "parameters": "parameters",
        "data_source": "dataSource",
        "credentials": "credentials",
    }

    def __init__(
        self,
        shared_by=None,
        shared_from_connection=None,
        connection_id=None,
        assigned_connection_ids=None,
        created_on=None,
        last_changed_on=None,
        owner=None,
        sharing=None,
        id=None,
        name=None,
        schema_name=None,
        allow_in_sdks=None,
        parameters=None,
        data_source=None,
        credentials=None,
        _configuration=None,
    ):  # noqa: E501
        """DCMEGetConnectionView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._shared_by = None
        self._shared_from_connection = None
        self._connection_id = None
        self._assigned_connection_ids = None
        self._created_on = None
        self._last_changed_on = None
        self._owner = None
        self._sharing = None
        self._id = None
        self._name = None
        self._schema_name = None
        self._allow_in_sdks = None
        self._parameters = None
        self._data_source = None
        self._credentials = None
        self.discriminator = None

        if shared_by is not None:
            self.shared_by = shared_by
        if shared_from_connection is not None:
            self.shared_from_connection = shared_from_connection
        if connection_id is not None:
            self.connection_id = connection_id
        self.assigned_connection_ids = assigned_connection_ids
        self.created_on = created_on
        self.last_changed_on = last_changed_on
        self.owner = owner
        if sharing is not None:
            self.sharing = sharing
        self.id = id
        self.name = name
        self.schema_name = schema_name
        self.allow_in_sdks = allow_in_sdks
        self.parameters = parameters
        self.data_source = data_source
        self.credentials = credentials

    @property
    def shared_by(self):
        """Gets the shared_by of this DCMEGetConnectionView.  # noqa: E501


        :return: The shared_by of this DCMEGetConnectionView.  # noqa: E501
        :rtype: DCMEUserView
        """
        return self._shared_by

    @shared_by.setter
    def shared_by(self, shared_by):
        """Sets the shared_by of this DCMEGetConnectionView.


        :param shared_by: The shared_by of this DCMEGetConnectionView.  # noqa: E501
        :type: DCMEUserView
        """

        self._shared_by = shared_by

    @property
    def shared_from_connection(self):
        """Gets the shared_from_connection of this DCMEGetConnectionView.  # noqa: E501


        :return: The shared_from_connection of this DCMEGetConnectionView.  # noqa: E501
        :rtype: str
        """
        return self._shared_from_connection

    @shared_from_connection.setter
    def shared_from_connection(self, shared_from_connection):
        """Sets the shared_from_connection of this DCMEGetConnectionView.


        :param shared_from_connection: The shared_from_connection of this DCMEGetConnectionView.  # noqa: E501
        :type: str
        """

        self._shared_from_connection = shared_from_connection

    @property
    def connection_id(self):
        """Gets the connection_id of this DCMEGetConnectionView.  # noqa: E501

        Deprecated, will (probably) be removed in the future.  # noqa: E501

        :return: The connection_id of this DCMEGetConnectionView.  # noqa: E501
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """Sets the connection_id of this DCMEGetConnectionView.

        Deprecated, will (probably) be removed in the future.  # noqa: E501

        :param connection_id: The connection_id of this DCMEGetConnectionView.  # noqa: E501
        :type: str
        """

        self._connection_id = connection_id

    @property
    def assigned_connection_ids(self):
        """Gets the assigned_connection_ids of this DCMEGetConnectionView.  # noqa: E501


        :return: The assigned_connection_ids of this DCMEGetConnectionView.  # noqa: E501
        :rtype: list[str]
        """
        return self._assigned_connection_ids

    @assigned_connection_ids.setter
    def assigned_connection_ids(self, assigned_connection_ids):
        """Sets the assigned_connection_ids of this DCMEGetConnectionView.


        :param assigned_connection_ids: The assigned_connection_ids of this DCMEGetConnectionView.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and assigned_connection_ids is None:
            raise ValueError("Invalid value for `assigned_connection_ids`, must not be `None`")  # noqa: E501

        self._assigned_connection_ids = assigned_connection_ids

    @property
    def created_on(self):
        """Gets the created_on of this DCMEGetConnectionView.  # noqa: E501


        :return: The created_on of this DCMEGetConnectionView.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this DCMEGetConnectionView.


        :param created_on: The created_on of this DCMEGetConnectionView.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and created_on is None:
            raise ValueError("Invalid value for `created_on`, must not be `None`")  # noqa: E501

        self._created_on = created_on

    @property
    def last_changed_on(self):
        """Gets the last_changed_on of this DCMEGetConnectionView.  # noqa: E501


        :return: The last_changed_on of this DCMEGetConnectionView.  # noqa: E501
        :rtype: datetime
        """
        return self._last_changed_on

    @last_changed_on.setter
    def last_changed_on(self, last_changed_on):
        """Sets the last_changed_on of this DCMEGetConnectionView.


        :param last_changed_on: The last_changed_on of this DCMEGetConnectionView.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and last_changed_on is None:
            raise ValueError("Invalid value for `last_changed_on`, must not be `None`")  # noqa: E501

        self._last_changed_on = last_changed_on

    @property
    def owner(self):
        """Gets the owner of this DCMEGetConnectionView.  # noqa: E501


        :return: The owner of this DCMEGetConnectionView.  # noqa: E501
        :rtype: DCMEUserView
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this DCMEGetConnectionView.


        :param owner: The owner of this DCMEGetConnectionView.  # noqa: E501
        :type: DCMEUserView
        """
        if self._configuration.client_side_validation and owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def sharing(self):
        """Gets the sharing of this DCMEGetConnectionView.  # noqa: E501


        :return: The sharing of this DCMEGetConnectionView.  # noqa: E501
        :rtype: DCMESharingView
        """
        return self._sharing

    @sharing.setter
    def sharing(self, sharing):
        """Sets the sharing of this DCMEGetConnectionView.


        :param sharing: The sharing of this DCMEGetConnectionView.  # noqa: E501
        :type: DCMESharingView
        """

        self._sharing = sharing

    @property
    def id(self):
        """Gets the id of this DCMEGetConnectionView.  # noqa: E501


        :return: The id of this DCMEGetConnectionView.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DCMEGetConnectionView.


        :param id: The id of this DCMEGetConnectionView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this DCMEGetConnectionView.  # noqa: E501


        :return: The name of this DCMEGetConnectionView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DCMEGetConnectionView.


        :param name: The name of this DCMEGetConnectionView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def schema_name(self):
        """Gets the schema_name of this DCMEGetConnectionView.  # noqa: E501


        :return: The schema_name of this DCMEGetConnectionView.  # noqa: E501
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this DCMEGetConnectionView.


        :param schema_name: The schema_name of this DCMEGetConnectionView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and schema_name is None:
            raise ValueError("Invalid value for `schema_name`, must not be `None`")  # noqa: E501

        self._schema_name = schema_name

    @property
    def allow_in_sdks(self):
        """Gets the allow_in_sdks of this DCMEGetConnectionView.  # noqa: E501


        :return: The allow_in_sdks of this DCMEGetConnectionView.  # noqa: E501
        :rtype: bool
        """
        return self._allow_in_sdks

    @allow_in_sdks.setter
    def allow_in_sdks(self, allow_in_sdks):
        """Sets the allow_in_sdks of this DCMEGetConnectionView.


        :param allow_in_sdks: The allow_in_sdks of this DCMEGetConnectionView.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and allow_in_sdks is None:
            raise ValueError("Invalid value for `allow_in_sdks`, must not be `None`")  # noqa: E501

        self._allow_in_sdks = allow_in_sdks

    @property
    def parameters(self):
        """Gets the parameters of this DCMEGetConnectionView.  # noqa: E501


        :return: The parameters of this DCMEGetConnectionView.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DCMEGetConnectionView.


        :param parameters: The parameters of this DCMEGetConnectionView.  # noqa: E501
        :type: dict(str, object)
        """
        if self._configuration.client_side_validation and parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    @property
    def data_source(self):
        """Gets the data_source of this DCMEGetConnectionView.  # noqa: E501


        :return: The data_source of this DCMEGetConnectionView.  # noqa: E501
        :rtype: DCMEDataSourceView
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this DCMEGetConnectionView.


        :param data_source: The data_source of this DCMEGetConnectionView.  # noqa: E501
        :type: DCMEDataSourceView
        """
        if self._configuration.client_side_validation and data_source is None:
            raise ValueError("Invalid value for `data_source`, must not be `None`")  # noqa: E501

        self._data_source = data_source

    @property
    def credentials(self):
        """Gets the credentials of this DCMEGetConnectionView.  # noqa: E501


        :return: The credentials of this DCMEGetConnectionView.  # noqa: E501
        :rtype: dict(str, DCMECredentialView)
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this DCMEGetConnectionView.


        :param credentials: The credentials of this DCMEGetConnectionView.  # noqa: E501
        :type: dict(str, DCMECredentialView)
        """
        if self._configuration.client_side_validation and credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")  # noqa: E501

        self._credentials = credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(DCMEGetConnectionView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DCMEGetConnectionView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DCMEGetConnectionView):
            return True

        return self.to_dict() != other.to_dict()
