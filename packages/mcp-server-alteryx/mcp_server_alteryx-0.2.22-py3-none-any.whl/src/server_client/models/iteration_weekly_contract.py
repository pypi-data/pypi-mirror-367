# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class IterationWeeklyContract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"days_of_week": "list[str]"}

    attribute_map = {"days_of_week": "daysOfWeek"}

    def __init__(self, days_of_week=None, _configuration=None):  # noqa: E501
        """IterationWeeklyContract - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._days_of_week = None
        self.discriminator = None

        self.days_of_week = days_of_week

    @property
    def days_of_week(self):
        """Gets the days_of_week of this IterationWeeklyContract.  # noqa: E501


        :return: The days_of_week of this IterationWeeklyContract.  # noqa: E501
        :rtype: list[str]
        """
        return self._days_of_week

    @days_of_week.setter
    def days_of_week(self, days_of_week):
        """Sets the days_of_week of this IterationWeeklyContract.


        :param days_of_week: The days_of_week of this IterationWeeklyContract.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and days_of_week is None:
            raise ValueError("Invalid value for `days_of_week`, must not be `None`")  # noqa: E501
        allowed_values = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]  # noqa: E501
        if self._configuration.client_side_validation and not set(days_of_week).issubset(set(allowed_values)):  # noqa: E501
            raise ValueError(
                "Invalid values for `days_of_week` [{0}], must be a subset of [{1}]".format(  # noqa: E501
                    ", ".join(map(str, set(days_of_week) - set(allowed_values))),  # noqa: E501
                    ", ".join(map(str, allowed_values)),
                )
            )

        self._days_of_week = days_of_week

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(IterationWeeklyContract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IterationWeeklyContract):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IterationWeeklyContract):
            return True

        return self.to_dict() != other.to_dict()
