# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class InvalidRequestResponseBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"message": "str", "model_state": "dict(str, list[str])"}

    attribute_map = {"message": "message", "model_state": "modelState"}

    def __init__(self, message=None, model_state=None, _configuration=None):  # noqa: E501
        """InvalidRequestResponseBody - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._message = None
        self._model_state = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if model_state is not None:
            self.model_state = model_state

    @property
    def message(self):
        """Gets the message of this InvalidRequestResponseBody.  # noqa: E501


        :return: The message of this InvalidRequestResponseBody.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InvalidRequestResponseBody.


        :param message: The message of this InvalidRequestResponseBody.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def model_state(self):
        """Gets the model_state of this InvalidRequestResponseBody.  # noqa: E501


        :return: The model_state of this InvalidRequestResponseBody.  # noqa: E501
        :rtype: dict(str, list[str])
        """
        return self._model_state

    @model_state.setter
    def model_state(self, model_state):
        """Sets the model_state of this InvalidRequestResponseBody.


        :param model_state: The model_state of this InvalidRequestResponseBody.  # noqa: E501
        :type: dict(str, list[str])
        """

        self._model_state = model_state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(InvalidRequestResponseBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvalidRequestResponseBody):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InvalidRequestResponseBody):
            return True

        return self.to_dict() != other.to_dict()
