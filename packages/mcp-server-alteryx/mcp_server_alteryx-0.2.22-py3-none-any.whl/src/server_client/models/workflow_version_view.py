# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class WorkflowVersionView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "version_id": "str",
        "version_number": "int",
        "date_created": "datetime",
        "upload_source": "str",
        "upload_date": "datetime",
        "package_workflow_type": "str",
        "published": "bool",
        "comments": "str",
        "run_disabled": "bool",
        "execution_mode": "str",
        "workflow_credential_type": "str",
        "credential_id": "str",
        "has_private_data_exemption": "bool",
        "others_may_download": "bool",
        "others_can_view_history": "bool",
        "details": "WorkflowDetails",
    }

    attribute_map = {
        "version_id": "versionId",
        "version_number": "versionNumber",
        "date_created": "dateCreated",
        "upload_source": "uploadSource",
        "upload_date": "uploadDate",
        "package_workflow_type": "packageWorkflowType",
        "published": "published",
        "comments": "comments",
        "run_disabled": "runDisabled",
        "execution_mode": "executionMode",
        "workflow_credential_type": "workflowCredentialType",
        "credential_id": "credentialId",
        "has_private_data_exemption": "hasPrivateDataExemption",
        "others_may_download": "othersMayDownload",
        "others_can_view_history": "othersCanViewHistory",
        "details": "details",
    }

    def __init__(
        self,
        version_id=None,
        version_number=None,
        date_created=None,
        upload_source=None,
        upload_date=None,
        package_workflow_type=None,
        published=None,
        comments=None,
        run_disabled=None,
        execution_mode=None,
        workflow_credential_type=None,
        credential_id=None,
        has_private_data_exemption=None,
        others_may_download=None,
        others_can_view_history=None,
        details=None,
        _configuration=None,
    ):  # noqa: E501
        """WorkflowVersionView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._version_id = None
        self._version_number = None
        self._date_created = None
        self._upload_source = None
        self._upload_date = None
        self._package_workflow_type = None
        self._published = None
        self._comments = None
        self._run_disabled = None
        self._execution_mode = None
        self._workflow_credential_type = None
        self._credential_id = None
        self._has_private_data_exemption = None
        self._others_may_download = None
        self._others_can_view_history = None
        self._details = None
        self.discriminator = None

        self.version_id = version_id
        self.version_number = version_number
        self.date_created = date_created
        self.upload_source = upload_source
        self.upload_date = upload_date
        self.package_workflow_type = package_workflow_type
        self.published = published
        self.comments = comments
        self.run_disabled = run_disabled
        self.execution_mode = execution_mode
        self.workflow_credential_type = workflow_credential_type
        self.credential_id = credential_id
        if has_private_data_exemption is not None:
            self.has_private_data_exemption = has_private_data_exemption
        self.others_may_download = others_may_download
        self.others_can_view_history = others_can_view_history
        self.details = details

    @property
    def version_id(self):
        """Gets the version_id of this WorkflowVersionView.  # noqa: E501


        :return: The version_id of this WorkflowVersionView.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this WorkflowVersionView.


        :param version_id: The version_id of this WorkflowVersionView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and version_id is None:
            raise ValueError("Invalid value for `version_id`, must not be `None`")  # noqa: E501

        self._version_id = version_id

    @property
    def version_number(self):
        """Gets the version_number of this WorkflowVersionView.  # noqa: E501


        :return: The version_number of this WorkflowVersionView.  # noqa: E501
        :rtype: int
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number):
        """Sets the version_number of this WorkflowVersionView.


        :param version_number: The version_number of this WorkflowVersionView.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and version_number is None:
            raise ValueError("Invalid value for `version_number`, must not be `None`")  # noqa: E501

        self._version_number = version_number

    @property
    def date_created(self):
        """Gets the date_created of this WorkflowVersionView.  # noqa: E501


        :return: The date_created of this WorkflowVersionView.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this WorkflowVersionView.


        :param date_created: The date_created of this WorkflowVersionView.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    @property
    def upload_source(self):
        """Gets the upload_source of this WorkflowVersionView.  # noqa: E501


        :return: The upload_source of this WorkflowVersionView.  # noqa: E501
        :rtype: str
        """
        return self._upload_source

    @upload_source.setter
    def upload_source(self, upload_source):
        """Sets the upload_source of this WorkflowVersionView.


        :param upload_source: The upload_source of this WorkflowVersionView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and upload_source is None:
            raise ValueError("Invalid value for `upload_source`, must not be `None`")  # noqa: E501
        allowed_values = ["Designer", "Direct"]  # noqa: E501
        if self._configuration.client_side_validation and upload_source not in allowed_values:
            raise ValueError(
                "Invalid value for `upload_source` ({0}), must be one of {1}".format(upload_source, allowed_values)  # noqa: E501
            )

        self._upload_source = upload_source

    @property
    def upload_date(self):
        """Gets the upload_date of this WorkflowVersionView.  # noqa: E501


        :return: The upload_date of this WorkflowVersionView.  # noqa: E501
        :rtype: datetime
        """
        return self._upload_date

    @upload_date.setter
    def upload_date(self, upload_date):
        """Sets the upload_date of this WorkflowVersionView.


        :param upload_date: The upload_date of this WorkflowVersionView.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and upload_date is None:
            raise ValueError("Invalid value for `upload_date`, must not be `None`")  # noqa: E501

        self._upload_date = upload_date

    @property
    def package_workflow_type(self):
        """Gets the package_workflow_type of this WorkflowVersionView.  # noqa: E501


        :return: The package_workflow_type of this WorkflowVersionView.  # noqa: E501
        :rtype: str
        """
        return self._package_workflow_type

    @package_workflow_type.setter
    def package_workflow_type(self, package_workflow_type):
        """Sets the package_workflow_type of this WorkflowVersionView.


        :param package_workflow_type: The package_workflow_type of this WorkflowVersionView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and package_workflow_type is None:
            raise ValueError("Invalid value for `package_workflow_type`, must not be `None`")  # noqa: E501
        allowed_values = ["App", "Module", "Macro"]  # noqa: E501
        if self._configuration.client_side_validation and package_workflow_type not in allowed_values:
            raise ValueError(
                "Invalid value for `package_workflow_type` ({0}), must be one of {1}".format(  # noqa: E501
                    package_workflow_type, allowed_values
                )
            )

        self._package_workflow_type = package_workflow_type

    @property
    def published(self):
        """Gets the published of this WorkflowVersionView.  # noqa: E501


        :return: The published of this WorkflowVersionView.  # noqa: E501
        :rtype: bool
        """
        return self._published

    @published.setter
    def published(self, published):
        """Sets the published of this WorkflowVersionView.


        :param published: The published of this WorkflowVersionView.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and published is None:
            raise ValueError("Invalid value for `published`, must not be `None`")  # noqa: E501

        self._published = published

    @property
    def comments(self):
        """Gets the comments of this WorkflowVersionView.  # noqa: E501


        :return: The comments of this WorkflowVersionView.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this WorkflowVersionView.


        :param comments: The comments of this WorkflowVersionView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and comments is None:
            raise ValueError("Invalid value for `comments`, must not be `None`")  # noqa: E501

        self._comments = comments

    @property
    def run_disabled(self):
        """Gets the run_disabled of this WorkflowVersionView.  # noqa: E501


        :return: The run_disabled of this WorkflowVersionView.  # noqa: E501
        :rtype: bool
        """
        return self._run_disabled

    @run_disabled.setter
    def run_disabled(self, run_disabled):
        """Sets the run_disabled of this WorkflowVersionView.


        :param run_disabled: The run_disabled of this WorkflowVersionView.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and run_disabled is None:
            raise ValueError("Invalid value for `run_disabled`, must not be `None`")  # noqa: E501

        self._run_disabled = run_disabled

    @property
    def execution_mode(self):
        """Gets the execution_mode of this WorkflowVersionView.  # noqa: E501


        :return: The execution_mode of this WorkflowVersionView.  # noqa: E501
        :rtype: str
        """
        return self._execution_mode

    @execution_mode.setter
    def execution_mode(self, execution_mode):
        """Sets the execution_mode of this WorkflowVersionView.


        :param execution_mode: The execution_mode of this WorkflowVersionView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and execution_mode is None:
            raise ValueError("Invalid value for `execution_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["Safe", "SemiSafe", "Standard"]  # noqa: E501
        if self._configuration.client_side_validation and execution_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `execution_mode` ({0}), must be one of {1}".format(execution_mode, allowed_values)  # noqa: E501
            )

        self._execution_mode = execution_mode

    @property
    def workflow_credential_type(self):
        """Gets the workflow_credential_type of this WorkflowVersionView.  # noqa: E501


        :return: The workflow_credential_type of this WorkflowVersionView.  # noqa: E501
        :rtype: str
        """
        return self._workflow_credential_type

    @workflow_credential_type.setter
    def workflow_credential_type(self, workflow_credential_type):
        """Sets the workflow_credential_type of this WorkflowVersionView.


        :param workflow_credential_type: The workflow_credential_type of this WorkflowVersionView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and workflow_credential_type is None:
            raise ValueError("Invalid value for `workflow_credential_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Default", "Required", "Specific"]  # noqa: E501
        if self._configuration.client_side_validation and workflow_credential_type not in allowed_values:
            raise ValueError(
                "Invalid value for `workflow_credential_type` ({0}), must be one of {1}".format(  # noqa: E501
                    workflow_credential_type, allowed_values
                )
            )

        self._workflow_credential_type = workflow_credential_type

    @property
    def credential_id(self):
        """Gets the credential_id of this WorkflowVersionView.  # noqa: E501


        :return: The credential_id of this WorkflowVersionView.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this WorkflowVersionView.


        :param credential_id: The credential_id of this WorkflowVersionView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and credential_id is None:
            raise ValueError("Invalid value for `credential_id`, must not be `None`")  # noqa: E501

        self._credential_id = credential_id

    @property
    def has_private_data_exemption(self):
        """Gets the has_private_data_exemption of this WorkflowVersionView.  # noqa: E501


        :return: The has_private_data_exemption of this WorkflowVersionView.  # noqa: E501
        :rtype: bool
        """
        return self._has_private_data_exemption

    @has_private_data_exemption.setter
    def has_private_data_exemption(self, has_private_data_exemption):
        """Sets the has_private_data_exemption of this WorkflowVersionView.


        :param has_private_data_exemption: The has_private_data_exemption of this WorkflowVersionView.  # noqa: E501
        :type: bool
        """

        self._has_private_data_exemption = has_private_data_exemption

    @property
    def others_may_download(self):
        """Gets the others_may_download of this WorkflowVersionView.  # noqa: E501


        :return: The others_may_download of this WorkflowVersionView.  # noqa: E501
        :rtype: bool
        """
        return self._others_may_download

    @others_may_download.setter
    def others_may_download(self, others_may_download):
        """Sets the others_may_download of this WorkflowVersionView.


        :param others_may_download: The others_may_download of this WorkflowVersionView.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and others_may_download is None:
            raise ValueError("Invalid value for `others_may_download`, must not be `None`")  # noqa: E501

        self._others_may_download = others_may_download

    @property
    def others_can_view_history(self):
        """Gets the others_can_view_history of this WorkflowVersionView.  # noqa: E501


        :return: The others_can_view_history of this WorkflowVersionView.  # noqa: E501
        :rtype: bool
        """
        return self._others_can_view_history

    @others_can_view_history.setter
    def others_can_view_history(self, others_can_view_history):
        """Sets the others_can_view_history of this WorkflowVersionView.


        :param others_can_view_history: The others_can_view_history of this WorkflowVersionView.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and others_can_view_history is None:
            raise ValueError("Invalid value for `others_can_view_history`, must not be `None`")  # noqa: E501

        self._others_can_view_history = others_can_view_history

    @property
    def details(self):
        """Gets the details of this WorkflowVersionView.  # noqa: E501


        :return: The details of this WorkflowVersionView.  # noqa: E501
        :rtype: WorkflowDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this WorkflowVersionView.


        :param details: The details of this WorkflowVersionView.  # noqa: E501
        :type: WorkflowDetails
        """
        if self._configuration.client_side_validation and details is None:
            raise ValueError("Invalid value for `details`, must not be `None`")  # noqa: E501

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(WorkflowVersionView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowVersionView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowVersionView):
            return True

        return self.to_dict() != other.to_dict()
