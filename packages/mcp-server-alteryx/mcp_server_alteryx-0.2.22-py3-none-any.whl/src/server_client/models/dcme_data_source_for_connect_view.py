# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class DCMEDataSourceForConnectView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "schema_name": "str",
        "drv_name": "str",
        "host": "str",
        "parameters": "dict(str, object)",
    }

    attribute_map = {
        "name": "name",
        "schema_name": "schemaName",
        "drv_name": "drvName",
        "host": "host",
        "parameters": "parameters",
    }

    def __init__(self, name=None, schema_name=None, drv_name=None, host=None, parameters=None, _configuration=None):  # noqa: E501
        """DCMEDataSourceForConnectView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._schema_name = None
        self._drv_name = None
        self._host = None
        self._parameters = None
        self.discriminator = None

        self.name = name
        self.schema_name = schema_name
        if drv_name is not None:
            self.drv_name = drv_name
        if host is not None:
            self.host = host
        if parameters is not None:
            self.parameters = parameters

    @property
    def name(self):
        """Gets the name of this DCMEDataSourceForConnectView.  # noqa: E501


        :return: The name of this DCMEDataSourceForConnectView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DCMEDataSourceForConnectView.


        :param name: The name of this DCMEDataSourceForConnectView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def schema_name(self):
        """Gets the schema_name of this DCMEDataSourceForConnectView.  # noqa: E501


        :return: The schema_name of this DCMEDataSourceForConnectView.  # noqa: E501
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this DCMEDataSourceForConnectView.


        :param schema_name: The schema_name of this DCMEDataSourceForConnectView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and schema_name is None:
            raise ValueError("Invalid value for `schema_name`, must not be `None`")  # noqa: E501

        self._schema_name = schema_name

    @property
    def drv_name(self):
        """Gets the drv_name of this DCMEDataSourceForConnectView.  # noqa: E501


        :return: The drv_name of this DCMEDataSourceForConnectView.  # noqa: E501
        :rtype: str
        """
        return self._drv_name

    @drv_name.setter
    def drv_name(self, drv_name):
        """Sets the drv_name of this DCMEDataSourceForConnectView.


        :param drv_name: The drv_name of this DCMEDataSourceForConnectView.  # noqa: E501
        :type: str
        """

        self._drv_name = drv_name

    @property
    def host(self):
        """Gets the host of this DCMEDataSourceForConnectView.  # noqa: E501


        :return: The host of this DCMEDataSourceForConnectView.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this DCMEDataSourceForConnectView.


        :param host: The host of this DCMEDataSourceForConnectView.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def parameters(self):
        """Gets the parameters of this DCMEDataSourceForConnectView.  # noqa: E501


        :return: The parameters of this DCMEDataSourceForConnectView.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this DCMEDataSourceForConnectView.


        :param parameters: The parameters of this DCMEDataSourceForConnectView.  # noqa: E501
        :type: dict(str, object)
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(DCMEDataSourceForConnectView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DCMEDataSourceForConnectView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DCMEDataSourceForConnectView):
            return True

        return self.to_dict() != other.to_dict()
