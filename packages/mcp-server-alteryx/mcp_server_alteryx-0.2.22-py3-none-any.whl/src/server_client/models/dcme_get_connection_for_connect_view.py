# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class DCMEGetConnectionForConnectView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"object_id": "str", "name": "str", "data_source": "DCMEDataSourceForConnectView"}

    attribute_map = {"object_id": "objectId", "name": "name", "data_source": "dataSource"}

    def __init__(self, object_id=None, name=None, data_source=None, _configuration=None):  # noqa: E501
        """DCMEGetConnectionForConnectView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._object_id = None
        self._name = None
        self._data_source = None
        self.discriminator = None

        self.object_id = object_id
        self.name = name
        self.data_source = data_source

    @property
    def object_id(self):
        """Gets the object_id of this DCMEGetConnectionForConnectView.  # noqa: E501


        :return: The object_id of this DCMEGetConnectionForConnectView.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this DCMEGetConnectionForConnectView.


        :param object_id: The object_id of this DCMEGetConnectionForConnectView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")  # noqa: E501

        self._object_id = object_id

    @property
    def name(self):
        """Gets the name of this DCMEGetConnectionForConnectView.  # noqa: E501


        :return: The name of this DCMEGetConnectionForConnectView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DCMEGetConnectionForConnectView.


        :param name: The name of this DCMEGetConnectionForConnectView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def data_source(self):
        """Gets the data_source of this DCMEGetConnectionForConnectView.  # noqa: E501


        :return: The data_source of this DCMEGetConnectionForConnectView.  # noqa: E501
        :rtype: DCMEDataSourceForConnectView
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this DCMEGetConnectionForConnectView.


        :param data_source: The data_source of this DCMEGetConnectionForConnectView.  # noqa: E501
        :type: DCMEDataSourceForConnectView
        """
        if self._configuration.client_side_validation and data_source is None:
            raise ValueError("Invalid value for `data_source`, must not be `None`")  # noqa: E501

        self._data_source = data_source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(DCMEGetConnectionForConnectView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DCMEGetConnectionForConnectView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DCMEGetConnectionForConnectView):
            return True

        return self.to_dict() != other.to_dict()
