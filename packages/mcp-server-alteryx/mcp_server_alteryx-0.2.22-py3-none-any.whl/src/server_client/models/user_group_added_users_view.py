# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class UserGroupAddedUsersView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "successfully_added_user_count": "int",
        "total_users_submitted_count": "int",
        "failed_user_reasons": "dict(str, str)",
    }

    attribute_map = {
        "successfully_added_user_count": "successfullyAddedUserCount",
        "total_users_submitted_count": "totalUsersSubmittedCount",
        "failed_user_reasons": "failedUserReasons",
    }

    def __init__(
        self,
        successfully_added_user_count=None,
        total_users_submitted_count=None,
        failed_user_reasons=None,
        _configuration=None,
    ):  # noqa: E501
        """UserGroupAddedUsersView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._successfully_added_user_count = None
        self._total_users_submitted_count = None
        self._failed_user_reasons = None
        self.discriminator = None

        self.successfully_added_user_count = successfully_added_user_count
        self.total_users_submitted_count = total_users_submitted_count
        if failed_user_reasons is not None:
            self.failed_user_reasons = failed_user_reasons

    @property
    def successfully_added_user_count(self):
        """Gets the successfully_added_user_count of this UserGroupAddedUsersView.  # noqa: E501


        :return: The successfully_added_user_count of this UserGroupAddedUsersView.  # noqa: E501
        :rtype: int
        """
        return self._successfully_added_user_count

    @successfully_added_user_count.setter
    def successfully_added_user_count(self, successfully_added_user_count):
        """Sets the successfully_added_user_count of this UserGroupAddedUsersView.


        :param successfully_added_user_count: The successfully_added_user_count
          of this UserGroupAddedUsersView.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and successfully_added_user_count is None:
            raise ValueError("Invalid value for `successfully_added_user_count`, must not be `None`")  # noqa: E501

        self._successfully_added_user_count = successfully_added_user_count

    @property
    def total_users_submitted_count(self):
        """Gets the total_users_submitted_count of this UserGroupAddedUsersView.  # noqa: E501


        :return: The total_users_submitted_count of this UserGroupAddedUsersView.  # noqa: E501
        :rtype: int
        """
        return self._total_users_submitted_count

    @total_users_submitted_count.setter
    def total_users_submitted_count(self, total_users_submitted_count):
        """Sets the total_users_submitted_count of this UserGroupAddedUsersView.


        :param total_users_submitted_count: The total_users_submitted_count of
        this UserGroupAddedUsersView.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and total_users_submitted_count is None:
            raise ValueError("Invalid value for `total_users_submitted_count`, must not be `None`")  # noqa: E501

        self._total_users_submitted_count = total_users_submitted_count

    @property
    def failed_user_reasons(self):
        """Gets the failed_user_reasons of this UserGroupAddedUsersView.  # noqa: E501


        :return: The failed_user_reasons of this UserGroupAddedUsersView.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._failed_user_reasons

    @failed_user_reasons.setter
    def failed_user_reasons(self, failed_user_reasons):
        """Sets the failed_user_reasons of this UserGroupAddedUsersView.


        :param failed_user_reasons: The failed_user_reasons of this UserGroupAddedUsersView.  # noqa: E501
        :type: dict(str, str)
        """

        self._failed_user_reasons = failed_user_reasons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(UserGroupAddedUsersView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserGroupAddedUsersView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserGroupAddedUsersView):
            return True

        return self.to_dict() != other.to_dict()
