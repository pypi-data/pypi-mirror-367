# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class JobView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "app_id": "str",
        "create_date_time": "datetime",
        "status": "str",
        "disposition": "str",
        "outputs": "list[OutputDataView]",
        "messages": "list[MessageView]",
        "priority": "str",
        "worker_tag": "str",
        "run_with_e2": "bool",
    }

    attribute_map = {
        "id": "id",
        "app_id": "appId",
        "create_date_time": "createDateTime",
        "status": "status",
        "disposition": "disposition",
        "outputs": "outputs",
        "messages": "messages",
        "priority": "priority",
        "worker_tag": "workerTag",
        "run_with_e2": "runWithE2",
    }

    def __init__(
        self,
        id=None,
        app_id=None,
        create_date_time=None,
        status=None,
        disposition=None,
        outputs=None,
        messages=None,
        priority=None,
        worker_tag=None,
        run_with_e2=None,
        _configuration=None,
    ):  # noqa: E501
        """JobView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._app_id = None
        self._create_date_time = None
        self._status = None
        self._disposition = None
        self._outputs = None
        self._messages = None
        self._priority = None
        self._worker_tag = None
        self._run_with_e2 = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if app_id is not None:
            self.app_id = app_id
        if create_date_time is not None:
            self.create_date_time = create_date_time
        if status is not None:
            self.status = status
        if disposition is not None:
            self.disposition = disposition
        if outputs is not None:
            self.outputs = outputs
        if messages is not None:
            self.messages = messages
        if priority is not None:
            self.priority = priority
        if worker_tag is not None:
            self.worker_tag = worker_tag
        if run_with_e2 is not None:
            self.run_with_e2 = run_with_e2

    @property
    def id(self):
        """Gets the id of this JobView.  # noqa: E501


        :return: The id of this JobView.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this JobView.


        :param id: The id of this JobView.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def app_id(self):
        """Gets the app_id of this JobView.  # noqa: E501


        :return: The app_id of this JobView.  # noqa: E501
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this JobView.


        :param app_id: The app_id of this JobView.  # noqa: E501
        :type: str
        """

        self._app_id = app_id

    @property
    def create_date_time(self):
        """Gets the create_date_time of this JobView.  # noqa: E501


        :return: The create_date_time of this JobView.  # noqa: E501
        :rtype: datetime
        """
        return self._create_date_time

    @create_date_time.setter
    def create_date_time(self, create_date_time):
        """Sets the create_date_time of this JobView.


        :param create_date_time: The create_date_time of this JobView.  # noqa: E501
        :type: datetime
        """

        self._create_date_time = create_date_time

    @property
    def status(self):
        """Gets the status of this JobView.  # noqa: E501


        :return: The status of this JobView.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobView.


        :param status: The status of this JobView.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def disposition(self):
        """Gets the disposition of this JobView.  # noqa: E501


        :return: The disposition of this JobView.  # noqa: E501
        :rtype: str
        """
        return self._disposition

    @disposition.setter
    def disposition(self, disposition):
        """Sets the disposition of this JobView.


        :param disposition: The disposition of this JobView.  # noqa: E501
        :type: str
        """

        self._disposition = disposition

    @property
    def outputs(self):
        """Gets the outputs of this JobView.  # noqa: E501


        :return: The outputs of this JobView.  # noqa: E501
        :rtype: list[OutputDataView]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this JobView.


        :param outputs: The outputs of this JobView.  # noqa: E501
        :type: list[OutputDataView]
        """

        self._outputs = outputs

    @property
    def messages(self):
        """Gets the messages of this JobView.  # noqa: E501


        :return: The messages of this JobView.  # noqa: E501
        :rtype: list[MessageView]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this JobView.


        :param messages: The messages of this JobView.  # noqa: E501
        :type: list[MessageView]
        """

        self._messages = messages

    @property
    def priority(self):
        """Gets the priority of this JobView.  # noqa: E501


        :return: The priority of this JobView.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this JobView.


        :param priority: The priority of this JobView.  # noqa: E501
        :type: str
        """
        allowed_values = ["Default", "Low", "Medium", "High", "Critical"]  # noqa: E501
        if self._configuration.client_side_validation and priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}".format(priority, allowed_values)  # noqa: E501
            )

        self._priority = priority

    @property
    def worker_tag(self):
        """Gets the worker_tag of this JobView.  # noqa: E501


        :return: The worker_tag of this JobView.  # noqa: E501
        :rtype: str
        """
        return self._worker_tag

    @worker_tag.setter
    def worker_tag(self, worker_tag):
        """Sets the worker_tag of this JobView.


        :param worker_tag: The worker_tag of this JobView.  # noqa: E501
        :type: str
        """

        self._worker_tag = worker_tag

    @property
    def run_with_e2(self):
        """Gets the run_with_e2 of this JobView.  # noqa: E501


        :return: The run_with_e2 of this JobView.  # noqa: E501
        :rtype: bool
        """
        return self._run_with_e2

    @run_with_e2.setter
    def run_with_e2(self, run_with_e2):
        """Sets the run_with_e2 of this JobView.


        :param run_with_e2: The run_with_e2 of this JobView.  # noqa: E501
        :type: bool
        """

        self._run_with_e2 = run_with_e2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(JobView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobView):
            return True

        return self.to_dict() != other.to_dict()
