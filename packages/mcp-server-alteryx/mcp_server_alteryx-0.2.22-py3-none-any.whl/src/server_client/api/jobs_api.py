# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from src.server_client.api_client import ApiClient


class JobsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def jobs_get_job_messages(self, job_id, **kwargs):  # noqa: E501
        """Retrieve all messages of a specific job.  # noqa: E501

        Only Curators can use this endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_job_messages(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: Identifier for a job that has been run. (required)
        :return: JobMessageView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.jobs_get_job_messages_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_get_job_messages_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def jobs_get_job_messages_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Retrieve all messages of a specific job.  # noqa: E501

        Only Curators can use this endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_job_messages_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: Identifier for a job that has been run. (required)
        :return: JobMessageView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["job_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method jobs_get_job_messages" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ("job_id" not in params or params["job_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `jobs_get_job_messages`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "job_id" in params:
            path_params["jobId"] = params["job_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["oauth2"]  # noqa: E501

        return self.api_client.call_api(
            "/v3/jobs/{jobId}/messages",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="JobMessageView",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def jobs_get_job_v3(self, job_id, **kwargs):  # noqa: E501
        """Retrieve details about an existing job and its current state.  # noqa: E501

        Only app workflows can be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_job_v3(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: Identifier for a job that's running or in queue. (required)
        :param bool include_messages:
        :return: JobView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.jobs_get_job_v3_with_http_info(job_id, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_get_job_v3_with_http_info(job_id, **kwargs)  # noqa: E501
            return data

    def jobs_get_job_v3_with_http_info(self, job_id, **kwargs):  # noqa: E501
        """Retrieve details about an existing job and its current state.  # noqa: E501

        Only app workflows can be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_job_v3_with_http_info(job_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str job_id: Identifier for a job that's running or in queue. (required)
        :param bool include_messages:
        :return: JobView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["job_id", "include_messages"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError("Got an unexpected keyword argument '%s' to method jobs_get_job_v3" % key)
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'job_id' is set
        if self.api_client.client_side_validation and ("job_id" not in params or params["job_id"] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `job_id` when calling `jobs_get_job_v3`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "job_id" in params:
            path_params["jobId"] = params["job_id"]  # noqa: E501

        query_params = []
        if "include_messages" in params:
            query_params.append(("includeMessages", params["include_messages"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["oauth2"]  # noqa: E501

        return self.api_client.call_api(
            "/v3/jobs/{jobId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="JobView",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def jobs_get_output_file(self, id, output_id, format, **kwargs):  # noqa: E501
        """Get output for a given job  # noqa: E501

        Only app workflows can be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_output_file(id, output_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:  (required)
        :param str output_id:  (required)
        :param str format:  (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.jobs_get_output_file_with_http_info(id, output_id, format, **kwargs)  # noqa: E501
        else:
            (data) = self.jobs_get_output_file_with_http_info(id, output_id, format, **kwargs)  # noqa: E501
            return data

    def jobs_get_output_file_with_http_info(self, id, output_id, format, **kwargs):  # noqa: E501
        """Get output for a given job  # noqa: E501

        Only app workflows can be used.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.jobs_get_output_file_with_http_info(id, output_id, format, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id:  (required)
        :param str output_id:  (required)
        :param str format:  (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'output_id', 'format']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method jobs_get_output_file" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `jobs_get_output_file`")  # noqa: E501
        # verify the required parameter 'output_id' is set
        if self.api_client.client_side_validation and ('output_id' not in params or
                                                       params['output_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `output_id` when calling `jobs_get_output_file`")  # noqa: E501
        # verify the required parameter 'format' is set
        if self.api_client.client_side_validation and ('format' not in params or
                                                       params['format'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `format` when calling `jobs_get_output_file`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501
        if 'output_id' in params:
            path_params['outputId'] = params['output_id']  # noqa: E501

        query_params = []
        if 'format' in params:
            query_params.append(('format', params['format']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = ['oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/jobs/{id}/output/{outputId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
