# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from src.server_client.api_client import ApiClient


class DCMEAdminApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def d_cme_admin_delete_connection_admin(self, object_id, **kwargs):  # noqa: E501
        """Delete a DCM Connection  # noqa: E501

        Only Curators can use this API endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_delete_connection_admin(object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id:  (required)
        :return: DCMEDeleteConnectionView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.d_cme_admin_delete_connection_admin_with_http_info(object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.d_cme_admin_delete_connection_admin_with_http_info(object_id, **kwargs)  # noqa: E501
            return data

    def d_cme_admin_delete_connection_admin_with_http_info(self, object_id, **kwargs):  # noqa: E501
        """Delete a DCM Connection  # noqa: E501

        Only Curators can use this API endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_delete_connection_admin_with_http_info(object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id:  (required)
        :return: DCMEDeleteConnectionView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["object_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s' to method d_cme_admin_delete_connection_admin" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ("object_id" not in params or params["object_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `object_id` when calling `d_cme_admin_delete_connection_admin`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "object_id" in params:
            path_params["objectId"] = params["object_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["oauth2"]  # noqa: E501

        return self.api_client.call_api(
            "/v3/dcm/admin/connections/{objectId}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DCMEDeleteConnectionView",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def d_cme_admin_delete_dcme_connection_handling_rule(self, id, **kwargs):  # noqa: E501
        """Deletes an existing DCM.E ConnectionHandlingRule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_delete_dcme_connection_handling_rule(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The DCME ConnectionHandlingRule to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.d_cme_admin_delete_dcme_connection_handling_rule_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.d_cme_admin_delete_dcme_connection_handling_rule_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def d_cme_admin_delete_dcme_connection_handling_rule_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes an existing DCM.E ConnectionHandlingRule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_delete_dcme_connection_handling_rule_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The DCME ConnectionHandlingRule to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method d_cme_admin_delete_dcme_connection_handling_rule" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ("id" not in params or params["id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `d_cme_admin_delete_dcme_connection_handling_rule`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["oauth2"]  # noqa: E501

        return self.api_client.call_api(
            "/v3/dcm/admin/connectionhandlingrules/{id}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def d_cme_admin_get_all_connections_admin(self, **kwargs):  # noqa: E501
        """Retrieve a list of DCM Connection records  # noqa: E501

        Only Curators can use this API endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_get_all_connections_admin(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connection_id: Filters Connections by it's Connection Id
        :param str visible_by: If present, returns same result as for the user
        :return: DCMEGetConnectionView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.d_cme_admin_get_all_connections_admin_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.d_cme_admin_get_all_connections_admin_with_http_info(**kwargs)  # noqa: E501
            return data

    def d_cme_admin_get_all_connections_admin_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve a list of DCM Connection records  # noqa: E501

        Only Curators can use this API endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_get_all_connections_admin_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str connection_id: Filters Connections by it's Connection Id
        :param str visible_by: If present, returns same result as for the user
        :return: DCMEGetConnectionView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["connection_id", "visible_by"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s' to method d_cme_admin_get_all_connections_admin" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "connection_id" in params:
            query_params.append(("connectionId", params["connection_id"]))  # noqa: E501
        if "visible_by" in params:
            query_params.append(("visibleBy", params["visible_by"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["oauth2"]  # noqa: E501

        return self.api_client.call_api(
            "/v3/dcm/admin/connections",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DCMEGetConnectionView",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def d_cme_admin_get_all_dcme_connection_handling_rules(self, **kwargs):  # noqa: E501
        """Returns all DCME ConnectionHandlingRules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_get_all_dcme_connection_handling_rules(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.d_cme_admin_get_all_dcme_connection_handling_rules_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.d_cme_admin_get_all_dcme_connection_handling_rules_with_http_info(**kwargs)  # noqa: E501
            return data

    def d_cme_admin_get_all_dcme_connection_handling_rules_with_http_info(self, **kwargs):  # noqa: E501
        """Returns all DCME ConnectionHandlingRules  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_get_all_dcme_connection_handling_rules_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method d_cme_admin_get_all_dcme_connection_handling_rules" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["oauth2"]  # noqa: E501

        return self.api_client.call_api(
            "/v3/dcm/admin/connectionhandlingrules",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def d_cme_admin_get_connection_admin(self, object_id, **kwargs):  # noqa: E501
        """Retrieve a DCM Connection record  # noqa: E501

        Only Curators can use this API endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_get_connection_admin(object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id:  (required)
        :return: DCMEGetConnectionView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.d_cme_admin_get_connection_admin_with_http_info(object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.d_cme_admin_get_connection_admin_with_http_info(object_id, **kwargs)  # noqa: E501
            return data

    def d_cme_admin_get_connection_admin_with_http_info(self, object_id, **kwargs):  # noqa: E501
        """Retrieve a DCM Connection record  # noqa: E501

        Only Curators can use this API endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_get_connection_admin_with_http_info(object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id:  (required)
        :return: DCMEGetConnectionView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["object_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s' to method d_cme_admin_get_connection_admin" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ("object_id" not in params or params["object_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `object_id` when calling `d_cme_admin_get_connection_admin`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "object_id" in params:
            path_params["objectId"] = params["object_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["oauth2"]  # noqa: E501

        return self.api_client.call_api(
            "/v3/dcm/admin/connections/{objectId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DCMEGetConnectionView",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def d_cme_admin_get_dcme_connection_handling_rule(self, id, **kwargs):  # noqa: E501
        """Gets a DCM.E ConnectionHandlingRule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_get_dcme_connection_handling_rule(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the DCME ConnectionHandlingRule to return (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.d_cme_admin_get_dcme_connection_handling_rule_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.d_cme_admin_get_dcme_connection_handling_rule_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def d_cme_admin_get_dcme_connection_handling_rule_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets a DCM.E ConnectionHandlingRule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_get_dcme_connection_handling_rule_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: The ID of the DCME ConnectionHandlingRule to return (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method d_cme_admin_get_dcme_connection_handling_rule" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ("id" not in params or params["id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `id` when calling `d_cme_admin_get_dcme_connection_handling_rule`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "id" in params:
            path_params["id"] = params["id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["oauth2"]  # noqa: E501

        return self.api_client.call_api(
            "/v3/dcm/admin/connectionhandlingrules/{id}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def d_cme_admin_unshare_connection_for_collaboration_admin(self, object_id, **kwargs):  # noqa: E501
        """Unshares a DCM Connection shared for collaboration  # noqa: E501

        Only Curators can use this API endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_unshare_connection_for_collaboration_admin(object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.d_cme_admin_unshare_connection_for_collaboration_admin_with_http_info(object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.d_cme_admin_unshare_connection_for_collaboration_admin_with_http_info(object_id, **kwargs)  # noqa: E501
            return data

    def d_cme_admin_unshare_connection_for_collaboration_admin_with_http_info(self, object_id, **kwargs):  # noqa: E501
        """Unshares a DCM Connection shared for collaboration  # noqa: E501

        Only Curators can use this API endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_unshare_connection_for_collaboration_admin_with_http_info(object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["object_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method d_cme_admin_unshare_connection_for_collaboration_admin" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ("object_id" not in params or params["object_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `object_id` when calling `d_cme_admin_unshare_connection_for_collaboration_admin`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "object_id" in params:
            path_params["objectId"] = params["object_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["oauth2"]  # noqa: E501

        return self.api_client.call_api(
            "/v3/dcm/admin/connections/{objectId}/sharing/collaboration",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def d_cme_admin_unshare_connection_for_execution_admin(self, object_id, **kwargs):  # noqa: E501
        """Unshares a DCM Connection shared for execution  # noqa: E501

        Only Curators can use this API endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_unshare_connection_for_execution_admin(object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.d_cme_admin_unshare_connection_for_execution_admin_with_http_info(object_id, **kwargs)  # noqa: E501
        else:
            (data) = self.d_cme_admin_unshare_connection_for_execution_admin_with_http_info(object_id, **kwargs)  # noqa: E501
            return data

    def d_cme_admin_unshare_connection_for_execution_admin_with_http_info(self, object_id, **kwargs):  # noqa: E501
        """Unshares a DCM Connection shared for execution  # noqa: E501

        Only Curators can use this API endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_unshare_connection_for_execution_admin_with_http_info(object_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str object_id:  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["object_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method d_cme_admin_unshare_connection_for_execution_admin" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'object_id' is set
        if self.api_client.client_side_validation and ("object_id" not in params or params["object_id"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `object_id` when calling `d_cme_admin_unshare_connection_for_execution_admin`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "object_id" in params:
            path_params["objectId"] = params["object_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["oauth2"]  # noqa: E501

        return self.api_client.call_api(
            "/v3/dcm/admin/connections/{objectId}/sharing/execution",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def d_cme_admin_upsert_dcm_connection(self, upsert_connection_contract, **kwargs):  # noqa: E501
        """Create or update a DCM Connection on behalf of user.  # noqa: E501

        Only Curators can use this API endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_upsert_dcm_connection(upsert_connection_contract, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DCMEUpsertConnectionAdminContract upsert_connection_contract:  (required)
        :return: DCMEGetConnectionView
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.d_cme_admin_upsert_dcm_connection_with_http_info(upsert_connection_contract, **kwargs)  # noqa: E501
        else:
            (data) = self.d_cme_admin_upsert_dcm_connection_with_http_info(upsert_connection_contract, **kwargs)  # noqa: E501
            return data

    def d_cme_admin_upsert_dcm_connection_with_http_info(self, upsert_connection_contract, **kwargs):  # noqa: E501
        """Create or update a DCM Connection on behalf of user.  # noqa: E501

        Only Curators can use this API endpoint.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_upsert_dcm_connection_with_http_info(upsert_connection_contract, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DCMEUpsertConnectionAdminContract upsert_connection_contract:  (required)
        :return: DCMEGetConnectionView
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["upsert_connection_contract"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s' to method d_cme_admin_upsert_dcm_connection" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'upsert_connection_contract' is set
        if self.api_client.client_side_validation and (
            "upsert_connection_contract" not in params or params["upsert_connection_contract"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `upsert_connection_contract` when calling `d_cme_admin_upsert_dcm_connection`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "upsert_connection_contract" in params:
            body_params = params["upsert_connection_contract"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["oauth2"]  # noqa: E501

        return self.api_client.call_api(
            "/v3/dcm/admin/connections",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="DCMEGetConnectionView",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def d_cme_admin_upsert_dcme_connection_handling_rule(self, rule, **kwargs):  # noqa: E501
        """Adds (when id is null) or updates (when id is defined) a new DCM.E ConnectionHandlingRule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_upsert_dcme_connection_handling_rule(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DCMEConnectionHandlingRuleContract rule: The DCME ConnectionHandlingRule to create or update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.d_cme_admin_upsert_dcme_connection_handling_rule_with_http_info(rule, **kwargs)  # noqa: E501
        else:
            (data) = self.d_cme_admin_upsert_dcme_connection_handling_rule_with_http_info(rule, **kwargs)  # noqa: E501
            return data

    def d_cme_admin_upsert_dcme_connection_handling_rule_with_http_info(self, rule, **kwargs):  # noqa: E501
        """Adds (when id is null) or updates (when id is defined) a new DCM.E ConnectionHandlingRule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.d_cme_admin_upsert_dcme_connection_handling_rule_with_http_info(rule, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DCMEConnectionHandlingRuleContract rule: The DCME ConnectionHandlingRule to create or update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["rule"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method d_cme_admin_upsert_dcme_connection_handling_rule" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'rule' is set
        if self.api_client.client_side_validation and ("rule" not in params or params["rule"] is None):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `rule` when calling `d_cme_admin_upsert_dcme_connection_handling_rule`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "rule" in params:
            body_params = params["rule"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = self.api_client.select_header_content_type(  # noqa: E501
            ["application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = ["oauth2"]  # noqa: E501

        return self.api_client.call_api(
            "/v3/dcm/admin/connectionhandlingrules",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
