# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class ReducedUserView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "first_name": "str",
        "last_name": "str",
        "email": "str",
        "is_active": "bool",
        "role": "str",
        "date_created": "datetime",
    }

    attribute_map = {
        "id": "id",
        "first_name": "firstName",
        "last_name": "lastName",
        "email": "email",
        "is_active": "isActive",
        "role": "role",
        "date_created": "dateCreated",
    }

    def __init__(
        self,
        id=None,
        first_name=None,
        last_name=None,
        email=None,
        is_active=None,
        role=None,
        date_created=None,
        _configuration=None,
    ):  # noqa: E501
        """ReducedUserView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._first_name = None
        self._last_name = None
        self._email = None
        self._is_active = None
        self._role = None
        self._date_created = None
        self.discriminator = None

        self.id = id
        self.first_name = first_name
        self.last_name = last_name
        self.email = email
        self.is_active = is_active
        self.role = role
        self.date_created = date_created

    @property
    def id(self):
        """Gets the id of this ReducedUserView.  # noqa: E501


        :return: The id of this ReducedUserView.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReducedUserView.


        :param id: The id of this ReducedUserView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this ReducedUserView.  # noqa: E501


        :return: The first_name of this ReducedUserView.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ReducedUserView.


        :param first_name: The first_name of this ReducedUserView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this ReducedUserView.  # noqa: E501


        :return: The last_name of this ReducedUserView.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ReducedUserView.


        :param last_name: The last_name of this ReducedUserView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this ReducedUserView.  # noqa: E501


        :return: The email of this ReducedUserView.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this ReducedUserView.


        :param email: The email of this ReducedUserView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def is_active(self):
        """Gets the is_active of this ReducedUserView.  # noqa: E501


        :return: The is_active of this ReducedUserView.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this ReducedUserView.


        :param is_active: The is_active of this ReducedUserView.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_active is None:
            raise ValueError("Invalid value for `is_active`, must not be `None`")  # noqa: E501

        self._is_active = is_active

    @property
    def role(self):
        """Gets the role of this ReducedUserView.  # noqa: E501


        :return: The role of this ReducedUserView.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ReducedUserView.


        :param role: The role of this ReducedUserView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501
        allowed_values = ["NoAccess", "Viewer", "Member", "Artisan", "Curator", "Evaluated"]  # noqa: E501
        if self._configuration.client_side_validation and role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}".format(role, allowed_values)  # noqa: E501
            )

        self._role = role

    @property
    def date_created(self):
        """Gets the date_created of this ReducedUserView.  # noqa: E501


        :return: The date_created of this ReducedUserView.  # noqa: E501
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created):
        """Sets the date_created of this ReducedUserView.


        :param date_created: The date_created of this ReducedUserView.  # noqa: E501
        :type: datetime
        """
        if self._configuration.client_side_validation and date_created is None:
            raise ValueError("Invalid value for `date_created`, must not be `None`")  # noqa: E501

        self._date_created = date_created

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ReducedUserView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReducedUserView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReducedUserView):
            return True

        return self.to_dict() != other.to_dict()
