# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class ReducedScheduleView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "str",
        "name": "str",
        "workflow_id": "str",
        "owner_id": "str",
        "run_date_time": "str",
        "time_zone": "str",
    }

    attribute_map = {
        "id": "id",
        "name": "name",
        "workflow_id": "workflowId",
        "owner_id": "ownerId",
        "run_date_time": "runDateTime",
        "time_zone": "timeZone",
    }

    def __init__(
        self,
        id=None,
        name=None,
        workflow_id=None,
        owner_id=None,
        run_date_time=None,
        time_zone=None,
        _configuration=None,
    ):  # noqa: E501
        """ReducedScheduleView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._workflow_id = None
        self._owner_id = None
        self._run_date_time = None
        self._time_zone = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.workflow_id = workflow_id
        self.owner_id = owner_id
        self.run_date_time = run_date_time
        self.time_zone = time_zone

    @property
    def id(self):
        """Gets the id of this ReducedScheduleView.  # noqa: E501


        :return: The id of this ReducedScheduleView.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReducedScheduleView.


        :param id: The id of this ReducedScheduleView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this ReducedScheduleView.  # noqa: E501


        :return: The name of this ReducedScheduleView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ReducedScheduleView.


        :param name: The name of this ReducedScheduleView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def workflow_id(self):
        """Gets the workflow_id of this ReducedScheduleView.  # noqa: E501

        The application id for the workflow in the gallery DB.  Will be null if the workflow has been deleted.

        :return: The workflow_id of this ReducedScheduleView.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this ReducedScheduleView.

        The application id for the workflow in the gallery DB.  Will be null if the workflow has been deleted.

        :param workflow_id: The workflow_id of this ReducedScheduleView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")  # noqa: E501

        self._workflow_id = workflow_id

    @property
    def owner_id(self):
        """Gets the owner_id of this ReducedScheduleView.  # noqa: E501


        :return: The owner_id of this ReducedScheduleView.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this ReducedScheduleView.


        :param owner_id: The owner_id of this ReducedScheduleView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")  # noqa: E501

        self._owner_id = owner_id

    @property
    def run_date_time(self):
        """Gets the run_date_time of this ReducedScheduleView.  # noqa: E501

        RunDateTime will either be the next time the schedule will be run, OR  the next run time in the specified window
          of a search range.  # noqa: E501

        :return: The run_date_time of this ReducedScheduleView.  # noqa: E501
        :rtype: str
        """
        return self._run_date_time

    @run_date_time.setter
    def run_date_time(self, run_date_time):
        """Sets the run_date_time of this ReducedScheduleView.

        RunDateTime will either be the next time the schedule will be run, OR  the next run time in the specified window
          of a search range.  # noqa: E501

        :param run_date_time: The run_date_time of this ReducedScheduleView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and run_date_time is None:
            raise ValueError("Invalid value for `run_date_time`, must not be `None`")  # noqa: E501

        self._run_date_time = run_date_time

    @property
    def time_zone(self):
        """Gets the time_zone of this ReducedScheduleView.  # noqa: E501


        :return: The time_zone of this ReducedScheduleView.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this ReducedScheduleView.


        :param time_zone: The time_zone of this ReducedScheduleView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and time_zone is None:
            raise ValueError("Invalid value for `time_zone`, must not be `None`")  # noqa: E501

        self._time_zone = time_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(ReducedScheduleView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReducedScheduleView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReducedScheduleView):
            return True

        return self.to_dict() != other.to_dict()
