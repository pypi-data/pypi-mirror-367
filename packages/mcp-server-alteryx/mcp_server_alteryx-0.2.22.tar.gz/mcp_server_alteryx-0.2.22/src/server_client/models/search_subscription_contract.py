# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class SearchSubscriptionContract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "name": "str",
        "can_share_schedule": "bool",
        "default_workflow_credential_id": "str",
        "user_count_greater_than_equals": "int",
        "user_count_less_than_equals": "int",
        "workflow_count_greater_than_equals": "int",
        "workflow_count_less_than_equals": "int",
    }

    attribute_map = {
        "name": "name",
        "can_share_schedule": "canShareSchedule",
        "default_workflow_credential_id": "defaultWorkflowCredentialId",
        "user_count_greater_than_equals": "userCountGreaterThanEquals",
        "user_count_less_than_equals": "userCountLessThanEquals",
        "workflow_count_greater_than_equals": "workflowCountGreaterThanEquals",
        "workflow_count_less_than_equals": "workflowCountLessThanEquals",
    }

    def __init__(
        self,
        name=None,
        can_share_schedule=None,
        default_workflow_credential_id=None,
        user_count_greater_than_equals=None,
        user_count_less_than_equals=None,
        workflow_count_greater_than_equals=None,
        workflow_count_less_than_equals=None,
        _configuration=None,
    ):  # noqa: E501
        """SearchSubscriptionContract - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._name = None
        self._can_share_schedule = None
        self._default_workflow_credential_id = None
        self._user_count_greater_than_equals = None
        self._user_count_less_than_equals = None
        self._workflow_count_greater_than_equals = None
        self._workflow_count_less_than_equals = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if can_share_schedule is not None:
            self.can_share_schedule = can_share_schedule
        if default_workflow_credential_id is not None:
            self.default_workflow_credential_id = default_workflow_credential_id
        if user_count_greater_than_equals is not None:
            self.user_count_greater_than_equals = user_count_greater_than_equals
        if user_count_less_than_equals is not None:
            self.user_count_less_than_equals = user_count_less_than_equals
        if workflow_count_greater_than_equals is not None:
            self.workflow_count_greater_than_equals = workflow_count_greater_than_equals
        if workflow_count_less_than_equals is not None:
            self.workflow_count_less_than_equals = workflow_count_less_than_equals

    @property
    def name(self):
        """Gets the name of this SearchSubscriptionContract.  # noqa: E501


        :return:
            The name of this SearchSubscriptionContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SearchSubscriptionContract.


        :param name:
            The name of this SearchSubscriptionContract.
        :type: str
        """

        self._name = name

    @property
    def can_share_schedule(self):
        """Gets the can_share_schedule of this SearchSubscriptionContract.  # noqa: E501


        :return: The can_share_schedule of this SearchSubscriptionContract.  # noqa: E501
        :rtype: bool
        """
        return self._can_share_schedule

    @can_share_schedule.setter
    def can_share_schedule(self, can_share_schedule):
        """Sets the can_share_schedule of this SearchSubscriptionContract.


        :param can_share_schedule:
            The can_share_schedule of this SearchSubscriptionContract.
        :type: bool
        """

        self._can_share_schedule = can_share_schedule

    @property
    def default_workflow_credential_id(self):
        """Gets the default_workflow_credential_id of this SearchSubscriptionContract.  # noqa: E501


        :return: The default_workflow_credential_id of this SearchSubscriptionContract.  # noqa: E501
        :rtype: str
        """
        return self._default_workflow_credential_id

    @default_workflow_credential_id.setter
    def default_workflow_credential_id(self, default_workflow_credential_id):
        """Sets the default_workflow_credential_id of this SearchSubscriptionContract.


        :param default_workflow_credential_id:
            The default_workflow_credential_id of this SearchSubscriptionContract.
        :type: str
        """

        self._default_workflow_credential_id = default_workflow_credential_id

    @property
    def user_count_greater_than_equals(self):
        """Gets the user_count_greater_than_equals of this SearchSubscriptionContract.  # noqa: E501


        :return: The user_count_greater_than_equals of this SearchSubscriptionContract.  # noqa: E501
        :rtype: int
        """
        return self._user_count_greater_than_equals

    @user_count_greater_than_equals.setter
    def user_count_greater_than_equals(self, user_count_greater_than_equals):
        """Sets the user_count_greater_than_equals of this SearchSubscriptionContract.


        :param user_count_greater_than_equals: The user_count_greater_than_equals of 
            this SearchSubscriptionContract.  # noqa: E501  
        :type: int
        """

        self._user_count_greater_than_equals = user_count_greater_than_equals

    @property
    def user_count_less_than_equals(self):
        """Gets the user_count_less_than_equals of this SearchSubscriptionContract.  # noqa: E501


        :return: The user_count_less_than_equals of this SearchSubscriptionContract.  # noqa: E501
        :rtype: int
        """
        return self._user_count_less_than_equals

    @user_count_less_than_equals.setter
    def user_count_less_than_equals(self, user_count_less_than_equals):
        """Sets the user_count_less_than_equals of this SearchSubscriptionContract.


        :param user_count_less_than_equals:
            The user_count_less_than_equals of this SearchSubscriptionContract.
        :type: int
        """

        self._user_count_less_than_equals = user_count_less_than_equals

    @property
    def workflow_count_greater_than_equals(self):
        """Gets the workflow_count_greater_than_equals of this SearchSubscriptionContract.  # noqa: E501


        :return: The workflow_count_greater_than_equals of this SearchSubscriptionContract.  # noqa: E501
        :rtype: int
        """
        return self._workflow_count_greater_than_equals

    @workflow_count_greater_than_equals.setter
    def workflow_count_greater_than_equals(self, workflow_count_greater_than_equals):
        """Sets the workflow_count_greater_than_equals of this SearchSubscriptionContract.


        :param workflow_count_greater_than_equals:
            The workflow_count_greater_than_equals of this SearchSubscriptionContract.
        :type: int
        """

        self._workflow_count_greater_than_equals = workflow_count_greater_than_equals

    @property
    def workflow_count_less_than_equals(self):
        """Gets the workflow_count_less_than_equals of this SearchSubscriptionContract.  # noqa: E501


        :return: The workflow_count_less_than_equals of this SearchSubscriptionContract.  # noqa: E501
        :rtype: int
        """
        return self._workflow_count_less_than_equals

    @workflow_count_less_than_equals.setter
    def workflow_count_less_than_equals(self, workflow_count_less_than_equals):
        """Sets the workflow_count_less_than_equals of this SearchSubscriptionContract.


        :param workflow_count_less_than_equals:
            The workflow_count_less_than_equals of this SearchSubscriptionContract.
        :type: int
        """

        self._workflow_count_less_than_equals = workflow_count_less_than_equals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(SearchSubscriptionContract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchSubscriptionContract):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchSubscriptionContract):
            return True

        return self.to_dict() != other.to_dict()
