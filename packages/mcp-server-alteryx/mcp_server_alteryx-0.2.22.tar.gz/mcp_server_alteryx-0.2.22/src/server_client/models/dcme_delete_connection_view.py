# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class DCMEDeleteConnectionView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "deleted_connections": "list[DeletedConnectionView]",
        "deleted_data_sources": "list[DeletedDataSourceView]",
        "deleted_credentials": "list[DeletedCredentialView]",
    }

    attribute_map = {
        "deleted_connections": "deletedConnections",
        "deleted_data_sources": "deletedDataSources",
        "deleted_credentials": "deletedCredentials",
    }

    def __init__(
        self, deleted_connections=None, deleted_data_sources=None, deleted_credentials=None, _configuration=None
    ):  # noqa: E501
        """DCMEDeleteConnectionView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._deleted_connections = None
        self._deleted_data_sources = None
        self._deleted_credentials = None
        self.discriminator = None

        self.deleted_connections = deleted_connections
        self.deleted_data_sources = deleted_data_sources
        self.deleted_credentials = deleted_credentials

    @property
    def deleted_connections(self):
        """Gets the deleted_connections of this DCMEDeleteConnectionView.  # noqa: E501


        :return: The deleted_connections of this DCMEDeleteConnectionView.  # noqa: E501
        :rtype: list[DeletedConnectionView]
        """
        return self._deleted_connections

    @deleted_connections.setter
    def deleted_connections(self, deleted_connections):
        """Sets the deleted_connections of this DCMEDeleteConnectionView.


        :param deleted_connections: The deleted_connections of this DCMEDeleteConnectionView.  # noqa: E501
        :type: list[DeletedConnectionView]
        """
        if self._configuration.client_side_validation and deleted_connections is None:
            raise ValueError("Invalid value for `deleted_connections`, must not be `None`")  # noqa: E501

        self._deleted_connections = deleted_connections

    @property
    def deleted_data_sources(self):
        """Gets the deleted_data_sources of this DCMEDeleteConnectionView.  # noqa: E501


        :return: The deleted_data_sources of this DCMEDeleteConnectionView.  # noqa: E501
        :rtype: list[DeletedDataSourceView]
        """
        return self._deleted_data_sources

    @deleted_data_sources.setter
    def deleted_data_sources(self, deleted_data_sources):
        """Sets the deleted_data_sources of this DCMEDeleteConnectionView.


        :param deleted_data_sources: The deleted_data_sources of this DCMEDeleteConnectionView.  # noqa: E501
        :type: list[DeletedDataSourceView]
        """
        if self._configuration.client_side_validation and deleted_data_sources is None:
            raise ValueError("Invalid value for `deleted_data_sources`, must not be `None`")  # noqa: E501

        self._deleted_data_sources = deleted_data_sources

    @property
    def deleted_credentials(self):
        """Gets the deleted_credentials of this DCMEDeleteConnectionView.  # noqa: E501


        :return: The deleted_credentials of this DCMEDeleteConnectionView.  # noqa: E501
        :rtype: list[DeletedCredentialView]
        """
        return self._deleted_credentials

    @deleted_credentials.setter
    def deleted_credentials(self, deleted_credentials):
        """Sets the deleted_credentials of this DCMEDeleteConnectionView.


        :param deleted_credentials: The deleted_credentials of this DCMEDeleteConnectionView.  # noqa: E501
        :type: list[DeletedCredentialView]
        """
        if self._configuration.client_side_validation and deleted_credentials is None:
            raise ValueError("Invalid value for `deleted_credentials`, must not be `None`")  # noqa: E501

        self._deleted_credentials = deleted_credentials

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(DCMEDeleteConnectionView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DCMEDeleteConnectionView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DCMEDeleteConnectionView):
            return True

        return self.to_dict() != other.to_dict()
