# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class JobMessageView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"status": "int", "text": "str", "tool_id": "int"}

    attribute_map = {"status": "status", "text": "text", "tool_id": "toolId"}

    def __init__(self, status=None, text=None, tool_id=None, _configuration=None):  # noqa: E501
        """JobMessageView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._status = None
        self._text = None
        self._tool_id = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if text is not None:
            self.text = text
        if tool_id is not None:
            self.tool_id = tool_id

    @property
    def status(self):
        """Gets the status of this JobMessageView.  # noqa: E501

        The status of the job.  # noqa: E501

        :return: The status of this JobMessageView.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this JobMessageView.

        The status of the job.  # noqa: E501

        :param status: The status of this JobMessageView.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def text(self):
        """Gets the text of this JobMessageView.  # noqa: E501

        Human-readable message of the job message.  # noqa: E501

        :return: The text of this JobMessageView.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this JobMessageView.

        Human-readable message of the job message.  # noqa: E501

        :param text: The text of this JobMessageView.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def tool_id(self):
        """Gets the tool_id of this JobMessageView.  # noqa: E501

        The tool identifier within the workflow producing the message.  # noqa: E501

        :return: The tool_id of this JobMessageView.  # noqa: E501
        :rtype: int
        """
        return self._tool_id

    @tool_id.setter
    def tool_id(self, tool_id):
        """Sets the tool_id of this JobMessageView.

        The tool identifier within the workflow producing the message.  # noqa: E501

        :param tool_id: The tool_id of this JobMessageView.  # noqa: E501
        :type: int
        """

        self._tool_id = tool_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(JobMessageView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobMessageView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobMessageView):
            return True

        return self.to_dict() != other.to_dict()
