# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class WorkflowDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "is_amp": "bool",
        "file_name": "str",
        "author": "str",
        "copyright": "str",
        "description": "str",
        "name": "str",
        "no_output_files_message": "str",
        "output_message": "str",
        "url": "str",
        "url_text": "str",
    }

    attribute_map = {
        "is_amp": "isAmp",
        "file_name": "fileName",
        "author": "author",
        "copyright": "copyright",
        "description": "description",
        "name": "name",
        "no_output_files_message": "noOutputFilesMessage",
        "output_message": "outputMessage",
        "url": "url",
        "url_text": "urlText",
    }

    def __init__(
        self,
        is_amp=None,
        file_name=None,
        author=None,
        copyright=None,
        description=None,
        name=None,
        no_output_files_message=None,
        output_message=None,
        url=None,
        url_text=None,
        _configuration=None,
    ):  # noqa: E501
        """WorkflowDetails - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._is_amp = None
        self._file_name = None
        self._author = None
        self._copyright = None
        self._description = None
        self._name = None
        self._no_output_files_message = None
        self._output_message = None
        self._url = None
        self._url_text = None
        self.discriminator = None

        self.is_amp = is_amp
        self.file_name = file_name
        self.author = author
        self.copyright = copyright
        self.description = description
        self.name = name
        self.no_output_files_message = no_output_files_message
        self.output_message = output_message
        self.url = url
        self.url_text = url_text

    @property
    def is_amp(self):
        """Gets the is_amp of this WorkflowDetails.  # noqa: E501


        :return: The is_amp of this WorkflowDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_amp

    @is_amp.setter
    def is_amp(self, is_amp):
        """Sets the is_amp of this WorkflowDetails.


        :param is_amp: The is_amp of this WorkflowDetails.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_amp is None:
            raise ValueError("Invalid value for `is_amp`, must not be `None`")  # noqa: E501

        self._is_amp = is_amp

    @property
    def file_name(self):
        """Gets the file_name of this WorkflowDetails.  # noqa: E501


        :return: The file_name of this WorkflowDetails.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this WorkflowDetails.


        :param file_name: The file_name of this WorkflowDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def author(self):
        """Gets the author of this WorkflowDetails.  # noqa: E501


        :return: The author of this WorkflowDetails.  # noqa: E501
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this WorkflowDetails.


        :param author: The author of this WorkflowDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def copyright(self):
        """Gets the copyright of this WorkflowDetails.  # noqa: E501


        :return: The copyright of this WorkflowDetails.  # noqa: E501
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this WorkflowDetails.


        :param copyright: The copyright of this WorkflowDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and copyright is None:
            raise ValueError("Invalid value for `copyright`, must not be `None`")  # noqa: E501

        self._copyright = copyright

    @property
    def description(self):
        """Gets the description of this WorkflowDetails.  # noqa: E501


        :return: The description of this WorkflowDetails.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this WorkflowDetails.


        :param description: The description of this WorkflowDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def name(self):
        """Gets the name of this WorkflowDetails.  # noqa: E501


        :return: The name of this WorkflowDetails.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowDetails.


        :param name: The name of this WorkflowDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def no_output_files_message(self):
        """Gets the no_output_files_message of this WorkflowDetails.  # noqa: E501


        :return: The no_output_files_message of this WorkflowDetails.  # noqa: E501
        :rtype: str
        """
        return self._no_output_files_message

    @no_output_files_message.setter
    def no_output_files_message(self, no_output_files_message):
        """Sets the no_output_files_message of this WorkflowDetails.


        :param no_output_files_message: The no_output_files_message of this WorkflowDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and no_output_files_message is None:
            raise ValueError("Invalid value for `no_output_files_message`, must not be `None`")  # noqa: E501

        self._no_output_files_message = no_output_files_message

    @property
    def output_message(self):
        """Gets the output_message of this WorkflowDetails.  # noqa: E501


        :return: The output_message of this WorkflowDetails.  # noqa: E501
        :rtype: str
        """
        return self._output_message

    @output_message.setter
    def output_message(self, output_message):
        """Sets the output_message of this WorkflowDetails.


        :param output_message: The output_message of this WorkflowDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and output_message is None:
            raise ValueError("Invalid value for `output_message`, must not be `None`")  # noqa: E501

        self._output_message = output_message

    @property
    def url(self):
        """Gets the url of this WorkflowDetails.  # noqa: E501


        :return: The url of this WorkflowDetails.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WorkflowDetails.


        :param url: The url of this WorkflowDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def url_text(self):
        """Gets the url_text of this WorkflowDetails.  # noqa: E501


        :return: The url_text of this WorkflowDetails.  # noqa: E501
        :rtype: str
        """
        return self._url_text

    @url_text.setter
    def url_text(self, url_text):
        """Sets the url_text of this WorkflowDetails.


        :param url_text: The url_text of this WorkflowDetails.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and url_text is None:
            raise ValueError("Invalid value for `url_text`, must not be `None`")  # noqa: E501

        self._url_text = url_text

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(WorkflowDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WorkflowDetails):
            return True

        return self.to_dict() != other.to_dict()
