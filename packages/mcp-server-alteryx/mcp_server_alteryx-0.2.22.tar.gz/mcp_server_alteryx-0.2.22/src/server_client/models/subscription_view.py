# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class SubscriptionView(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {"id": "str", "name": "str", "credential_id": "str", "can_share_schedules": "bool"}

    attribute_map = {
        "id": "id",
        "name": "name",
        "credential_id": "credentialId",
        "can_share_schedules": "canShareSchedules",
    }

    def __init__(self, id=None, name=None, credential_id=None, can_share_schedules=None, _configuration=None):  # noqa: E501
        """SubscriptionView - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._name = None
        self._credential_id = None
        self._can_share_schedules = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.credential_id = credential_id
        self.can_share_schedules = can_share_schedules

    @property
    def id(self):
        """Gets the id of this SubscriptionView.  # noqa: E501


        :return: The id of this SubscriptionView.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionView.


        :param id: The id of this SubscriptionView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this SubscriptionView.  # noqa: E501


        :return: The name of this SubscriptionView.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SubscriptionView.


        :param name: The name of this SubscriptionView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def credential_id(self):
        """Gets the credential_id of this SubscriptionView.  # noqa: E501


        :return: The credential_id of this SubscriptionView.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this SubscriptionView.


        :param credential_id: The credential_id of this SubscriptionView.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and credential_id is None:
            raise ValueError("Invalid value for `credential_id`, must not be `None`")  # noqa: E501

        self._credential_id = credential_id

    @property
    def can_share_schedules(self):
        """Gets the can_share_schedules of this SubscriptionView.  # noqa: E501


        :return: The can_share_schedules of this SubscriptionView.  # noqa: E501
        :rtype: bool
        """
        return self._can_share_schedules

    @can_share_schedules.setter
    def can_share_schedules(self, can_share_schedules):
        """Sets the can_share_schedules of this SubscriptionView.


        :param can_share_schedules: The can_share_schedules of this SubscriptionView.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and can_share_schedules is None:
            raise ValueError("Invalid value for `can_share_schedules`, must not be `None`")  # noqa: E501

        self._can_share_schedules = can_share_schedules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(SubscriptionView, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionView):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscriptionView):
            return True

        return self.to_dict() != other.to_dict()
