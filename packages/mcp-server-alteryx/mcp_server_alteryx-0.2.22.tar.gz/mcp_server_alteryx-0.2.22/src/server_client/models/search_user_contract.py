# coding: utf-8

"""
Alteryx Server API V3

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: 3

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

from src.server_client.configuration import Configuration


class SearchUserContract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "active": "bool",
        "email": "str",
        "role": "str",
        "first_name": "str",
        "last_name": "str",
        "created_after": "datetime",
        "created_before": "datetime",
    }

    attribute_map = {
        "active": "active",
        "email": "email",
        "role": "role",
        "first_name": "firstName",
        "last_name": "lastName",
        "created_after": "createdAfter",
        "created_before": "createdBefore",
    }

    def __init__(
        self,
        active=None,
        email=None,
        role=None,
        first_name=None,
        last_name=None,
        created_after=None,
        created_before=None,
        _configuration=None,
    ):  # noqa: E501
        """SearchUserContract - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active = None
        self._email = None
        self._role = None
        self._first_name = None
        self._last_name = None
        self._created_after = None
        self._created_before = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if email is not None:
            self.email = email
        if role is not None:
            self.role = role
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if created_after is not None:
            self.created_after = created_after
        if created_before is not None:
            self.created_before = created_before

    @property
    def active(self):
        """Gets the active of this SearchUserContract.  # noqa: E501


        :return: The active of this SearchUserContract.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SearchUserContract.


        :param active: The active of this SearchUserContract.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def email(self):
        """Gets the email of this SearchUserContract.  # noqa: E501


        :return: The email of this SearchUserContract.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SearchUserContract.


        :param email: The email of this SearchUserContract.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def role(self):
        """Gets the role of this SearchUserContract.  # noqa: E501


        :return: The role of this SearchUserContract.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this SearchUserContract.


        :param role: The role of this SearchUserContract.  # noqa: E501
        :type: str
        """
        allowed_values = ["NoAccess", "Viewer", "Member", "Artisan", "Curator", "Evaluated"]  # noqa: E501
        if self._configuration.client_side_validation and role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}".format(role, allowed_values)  # noqa: E501
            )

        self._role = role

    @property
    def first_name(self):
        """Gets the first_name of this SearchUserContract.  # noqa: E501


        :return: The first_name of this SearchUserContract.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SearchUserContract.


        :param first_name: The first_name of this SearchUserContract.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this SearchUserContract.  # noqa: E501


        :return: The last_name of this SearchUserContract.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SearchUserContract.


        :param last_name: The last_name of this SearchUserContract.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def created_after(self):
        """Gets the created_after of this SearchUserContract.  # noqa: E501


        :return: The created_after of this SearchUserContract.  # noqa: E501
        :rtype: datetime
        """
        return self._created_after

    @created_after.setter
    def created_after(self, created_after):
        """Sets the created_after of this SearchUserContract.


        :param created_after: The created_after of this SearchUserContract.  # noqa: E501
        :type: datetime
        """

        self._created_after = created_after

    @property
    def created_before(self):
        """Gets the created_before of this SearchUserContract.  # noqa: E501


        :return: The created_before of this SearchUserContract.  # noqa: E501
        :rtype: datetime
        """
        return self._created_before

    @created_before.setter
    def created_before(self, created_before):
        """Sets the created_before of this SearchUserContract.


        :param created_before: The created_before of this SearchUserContract.  # noqa: E501
        :type: datetime
        """

        self._created_before = created_before

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], "to_dict") else item,
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(SearchUserContract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SearchUserContract):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SearchUserContract):
            return True

        return self.to_dict() != other.to_dict()
