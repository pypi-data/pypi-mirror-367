from __future__ import annotations

from collections.abc import Iterator, MutableMapping, MutableSequence, Sequence
from enum import Enum
from typing import Any, Callable, ParamSpec, TypeVar

_P = ParamSpec("_P")
_R = TypeVar("_R")

class _Annotation(Enum):
    Str = "str"
    Bool = "bool"
    Int = "int"
    Float = "float"
    List = "list"
    Dict = "dict"

def main() -> None: ...

class _Client:
    @staticmethod
    def default() -> _Client: ...
    def run(self, job: _Job, args: list[_Arg]) -> _JobHandle: ...

class _Function:
    @staticmethod
    def from_code(py_name: str, py_code: str, py_args: list[_Param]) -> _Function: ...
    @staticmethod
    def from_callable(py_name: str, py_callable: Callable[_P, _R], py_args: list[_Param]) -> _Function: ...

class _Job:
    name: str
    main: _Function | None
    @staticmethod
    def new(name: str, env: _Env) -> _Job: ...

class _JobHandle:
    job_id: str
    job_url: str
    space_id: str

class _Env:
    @staticmethod
    def new(python_version: str) -> _Env: ...
    @property
    def environ(self) -> dict[str, str]: ...
    @environ.setter
    def environ(self, env: dict[str, str]) -> None: ...
    @property
    def secrets(self) -> MutableSequence[Secret]: ...
    @secrets.setter
    def secrets(self, secrets: Sequence[Secret]) -> None: ...
    def include(self, paths: list[str]) -> _Env: ...
    def pip_install(self, requirements: list[str]) -> _Env: ...
    def dump(self) -> dict[str, Any]: ...

class _Environ(MutableMapping[str, str]):
    def __getitem__(self, key: str) -> str: ...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...

class Secret(MutableMapping[str, str]):
    @classmethod
    def from_pydict(cls: type[Secret], d: dict[str, str]) -> Secret: ...
    def to_pydict(self) -> dict[str, str]: ...
    def __getitem__(self, key: str) -> str: ...
    def __setitem__(self, key: str, value: str) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def __iter__(self) -> Iterator[str]: ...
    def __len__(self) -> int: ...
    def __eq__(self, other: object) -> bool: ...

class _Value:
    def __init__(self, value: Any) -> None: ...  # noqa: ANN401

class _Arg:
    def __init__(self, name: str, value: _Value) -> None: ...

class _Param:
    def __init__(self, name: str, annotation: _Annotation) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def annotation(self) -> _Annotation: ...
