import aiohttp
import asyncio
import json
import time
import urllib.parse
from pathlib import Path
from bs4 import BeautifulSoup
from urllib.parse import urlencode

CLIENT_ID = ""
EXPIRE_THRESHOLD_MS = 6 * 60 * 60 * 1000    # 6 —á–∞—Å–æ–≤
TOKEN_LIFETIME_MS = 7 * 24 * 60 * 60 * 1000  # 7 –¥–Ω–µ–π
AUTH_FILE = "auth.json" 

class BoostyAPI:
    BASE_URL = "https://boosty.to"
    BASE_API_URL = "https://api.boosty.to"

    def __init__(self, session_cookie: str, bearer_token: str):
        self.auth_cookie = session_cookie
        self.bearer_token = bearer_token
        self.session: aiohttp.ClientSession | None = None
        self.blog_href: str | None = None
        self._token_task = None

    @staticmethod
    def load_auth(path = AUTH_FILE) -> dict:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)

    @staticmethod
    def save_auth(data: dict, path = AUTH_FILE):
        with open(path, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=2)

    @classmethod
    async def create(cls, path: str) -> "BoostyAPI":
        if not Path(path).exists():
            raise FileNotFoundError(f"–§–∞–π–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
        cls.AUTH_FILE = Path(path)
        data = cls.load_auth(path=path)
        cls.CLIENT_ID = data.get("_clientId", "")
        if not cls.CLIENT_ID:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω CLIENT_ID –≤ auth.json")
        obj = cls._from_data(data)
        await obj._start_token_loop()
        return obj

    @classmethod
    def _from_data(cls, data: dict) -> "BoostyAPI":
        encoded_cookie = urllib.parse.quote(json.dumps(data, separators=(",", ":")))
        return cls(encoded_cookie, data["accessToken"])

    async def _start_token_loop(self):
        async def loop():
            print("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞...(–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ä–∞–∑ –≤ —á–∞—Å)")
            while True:
                await self._check_and_refresh_token()
                await asyncio.sleep(3600)  # –†–∞–∑ –≤ —á–∞—Å

        self._token_task = asyncio.create_task(loop())

    async def _check_and_refresh_token(self):
        auth_data = self.load_auth()
        now_ms = int(time.time() * 1000)
        expires_at_ms = int(auth_data.get("expiresAt", "0"))

        if expires_at_ms - now_ms > EXPIRE_THRESHOLD_MS:
            return  # –µ—â—ë —Ä–∞–Ω–æ

        print("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...")
        url = f"{self.BASE_API_URL}/oauth/token/"
        payload = {
            "device_id": CLIENT_ID,
            "device_os": "web",
            "grant_type": "refresh_token",
            "refresh_token": auth_data["refreshToken"]
        }
        headers = {
            "Content-Type": "application/x-www-form-urlencoded",
            "Authorization": f"Bearer {auth_data['accessToken']}",
            "User-Agent": "Mozilla/5.0"
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=payload, headers=headers) as resp:
                if resp.status != 200:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω:", resp.status)
                    return
                data = await resp.json()

        now = int(time.time() * 1000)
        new_data = {
            "accessToken": data["access_token"],
            "refreshToken": data["refresh_token"],
            "expiresAt": str(now + TOKEN_LIFETIME_MS),
            "isEmptyUser": "0",
            "redirectAppId": "web",
            "_clientId": CLIENT_ID
        }

        self.auth_cookie = urllib.parse.quote(json.dumps(new_data, separators=(",", ":")))
        self.bearer_token = new_data["accessToken"]
        self.save_auth(new_data)
        print("‚úÖ –¢–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω")

    async def init_session(self):
        if self.session is None:
            self.session = aiohttp.ClientSession(
                cookies={"auth": self.auth_cookie},
                headers={
                    "Authorization": f"Bearer {self.bearer_token}",
                    "User-Agent": "Mozilla/5.0",
                }
            )

    async def close(self):
        if self._token_task:
            self._token_task.cancel()
        if self.session:
            await self.session.close()
            self.session = None

    async def get_blog_href(self) -> str:
        await self.init_session()
        async with self.session.get(self.BASE_URL) as resp:
            html = await resp.text()
        soup = BeautifulSoup(html, "html.parser")
        tag = soup.find("a", {"data-test-id": "MAINFEED:ownBlogButton"})
        if not tag or not tag.has_attr("href"):
            raise RuntimeError("‚ùå –ö–Ω–æ–ø–∫–∞ –±–ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        self.blog_href = tag["href"]
        return self.blog_href

    def get_bearer(self) -> str:
        return self.bearer_token

    async def get_blog_stats(self) -> dict:
        if not self.blog_href:
            raise RuntimeError("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ get_blog_href()")
        url = f"{self.BASE_API_URL}/v1/blog/stat/{self.blog_href}/current"
        headers = {
            "Authorization": f"Bearer {self.bearer_token}",
            "X-Currency": "RUB",
            "X-Locale": "ru_RU",
            "X-App": "web"
        }
        async with self.session.get(url, headers=headers) as resp:
            if resp.status != 200:
                raise RuntimeError(f"üö´ –û—à–∏–±–∫–∞: {resp.status}")
            return await resp.json()

    async def get_subscribers(self, limit=20, sort_by="on_time", order="gt") -> dict:
        if not self.blog_href:
            raise RuntimeError("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–∑–æ–≤–∏ get_blog_href()")
        url = (
            f"{self.BASE_API_URL}/v1/blog/{self.blog_href}/subscribers"
            f"?sort_by={sort_by}&limit={limit}&order={order}"
        )
        headers = {
            "Authorization": f"Bearer {self.bearer_token}",
            "X-Currency": "RUB",
            "X-Locale": "ru_RU",
            "X-App": "web"
        }
        async with self.session.get(url, headers=headers) as resp:
            if resp.status != 200:
                raise RuntimeError(f"üö´ –û—à–∏–±–∫–∞: {resp.status}")
            return await resp.json()

    async def get_contacts(self, limit: int = 100, sort_by: str = "name", sort_order: str = "asc") -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –µ—Å—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫–∞).
        """
        url = f"{self.BASE_API_URL}/v1/dialog/contacts"
        headers = {
            "Authorization": f"Bearer {self.bearer_token}",
            "X-Currency": "RUB",
            "X-Locale": "ru_RU",
            "X-App": "web"
        }
        params = {
            "sort_by": sort_by,
            "sort_order": sort_order,
            "limit": limit
        }

        async with self.session.get(url, headers=headers, params=params) as resp:
            if resp.status != 200:
                raise RuntimeError(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {resp.status}")
            return await resp.json()

    async def get_user_dialog(self, user_id: int) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —á–∞—Ç —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ ID.
        –ï—Å–ª–∏ —á–∞—Ç–∞ –Ω–µ –±—ã–ª–æ, –æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        """
        url = f"{self.BASE_API_URL}/v1/dialog"
        headers = {
            "Authorization": f"Bearer {self.bearer_token}",
            "X-Currency": "RUB",
            "X-Locale": "ru_RU",
            "X-App": "web"
        }
        params = {
            "user_id": str(user_id)
        }

        async with self.session.get(url, headers=headers, params=params) as resp:
            if resp.status not in (200, 201):
                raise RuntimeError(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}: {resp.status}")
            
            try:
                return await resp.json()
            except aiohttp.ContentTypeError:
                return {"message": f"‚úÖ –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –±—ã–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ JSON"}

    async def get_subscription_levels(self, show_deleted: bool = True, show_free_level: bool = True) -> list[dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —É—Ä–æ–≤–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –±–ª–æ–≥–∞.

        :param blog: –°–ª–∞–≥ –±–ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "makskraftteam")
        :param show_deleted: –í–∫–ª—é—á–∞—Ç—å –ª–∏ —É–¥–∞–ª—ë–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
        :param show_free_level: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
        :return: –°–ø–∏—Å–æ–∫ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏
        """
        url = f"{self.BASE_API_URL}/v1/blog/{self.blog_href}/subscription_level/"
        headers = {
            "Authorization": f"Bearer {self.bearer_token}",
            "X-Currency": "RUB",
            "X-Locale": "ru_RU",
            "X-App": "web"
        }
        params = {
            "show_deleted": str(show_deleted).lower(),       # "true" / "false"
            "show_free_level": str(show_free_level).lower()  # "true" / "false"
        }

        async with self.session.get(url, headers=headers, params=params) as resp:
            if resp.status != 200:
                raise RuntimeError(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {resp.status}")
            return await resp.json()

    async def get_blog_metrics(self, time_from: int, time_to: int) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–ª–æ–≥–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥.

        :param blog: –°–ª–∞–≥ –±–ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "makskraftteam")
        :param time_from: –ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∞ (UNIX timestamp)
        :param time_to: –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ (UNIX timestamp)
        :return: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (dict)
        """
        url = f"{self.BASE_API_URL}/v1/blog/stat/{self.blog_href}/metrics"
        headers = {
            "Authorization": f"Bearer {self.bearer_token}",
            "X-Currency": "RUB",
            "X-Locale": "ru_RU",
            "X-App": "web"
        }
        params = {
            "from": str(time_from),
            "to": str(time_to)
        }

        async with self.session.get(url, headers=headers, params=params) as resp:
            if resp.status != 200:
                raise RuntimeError(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ –±–ª–æ–≥–∞: {resp.status}")
            return await resp.json()

    async def get_donations(self, limit: int = 10, offset: int = 0, sort_by: str = "time", order: str = "gt") -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–Ω–∞—Ç–æ–≤ –±–ª–æ–≥–∞.

        :param limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
        :param offset: –°–º–µ—â–µ–Ω–∏–µ (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
        :param sort_by: –ü–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–æ–±—ã—á–Ω–æ "time")
        :param order: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ("gt" - –ø–æ —É–±—ã–≤–∞–Ω–∏—é, "lt" - –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
        :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –¥–æ–Ω–∞—Ç–∞–º
        """
        if not self.blog_href:
            self.blog_href = await self.get_blog_href()

        url = f"{self.BASE_API_URL}/v1/blog/{self.blog_href}/sales/donation/"
        headers = {
            "Authorization": f"Bearer {self.bearer_token}",
            "X-Currency": "RUB",
            "X-Locale": "ru_RU",
            "X-App": "web"
        }
        params = {
            "limit": str(limit),
            "offset": str(offset),
            "sort_by": sort_by,
            "order": order
        }

        async with self.session.get(url, headers=headers, params=params) as resp:
            if resp.status != 200:
                raise RuntimeError(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ–Ω–∞—Ç–æ–≤: {resp.status}")
            return await resp.json()

    async def get_post_sales(self, limit: int = 10, offset: int = 0, sort_by: str = "time", order: str = "gt") -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥–∞–∂ –ø–æ—Å—Ç–æ–≤ –±–ª–æ–≥–∞.

        :param limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
        :param offset: –°–º–µ—â–µ–Ω–∏–µ (–¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
        :param sort_by: –ü–æ–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–æ–±—ã—á–Ω–æ "time")
        :param order: –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ ("gt" - –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É, "lt" - —Å—Ç–∞—Ä—ã–µ —Å–≤–µ—Ä—Ö—É)
        :return: –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º –ø–æ—Å—Ç–æ–≤
        """
        if not self.blog_href:
            self.blog_href = await self.get_blog_href()

        url = f"{self.BASE_API_URL}/v1/blog/{self.blog_href}/sales/post/"
        headers = {
            "Authorization": f"Bearer {self.bearer_token}",
            "X-Currency": "RUB",
            "X-Locale": "ru_RU",
            "X-App": "web"
        }
        params = {
            "limit": str(limit),
            "offset": str(offset),
            "sort_by": sort_by,
            "order": order
        }

        async with self.session.get(url, headers=headers, params=params) as resp:
            if resp.status != 200:
                raise RuntimeError(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–¥–∞–∂ –ø–æ—Å—Ç–æ–≤: {resp.status}")
            return await resp.json()

    async def get_posts(self, blog_name: str = None) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤ –±–ª–æ–≥–∞.

        :param limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10)
        :param offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        :return: –°–ª–æ–≤–∞—Ä—å —Å –ø–æ—Å—Ç–∞–º–∏
        """
        if not self.blog_href:
            self.blog_href = await self.get_blog_href()
            
        if blog_name is None:
            blog_name = self.blog_href

        url = f"{self.BASE_API_URL}/v1/blog/{blog_name}/post/"
        headers = {
            "Authorization": f"Bearer {self.bearer_token}",
            "X-Currency": "RUB",
            "X-Locale": "ru_RU",
            "X-App": "web"
        }

        async with self.session.get(url, headers=headers) as resp:
            if resp.status != 200:
                raise RuntimeError(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤: {resp.status}")
            return await resp.json()

    async def get_blog_info(self, blog_name: str = None) -> dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–≥–µ –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏.
        """

        if not self.blog_href:
            self.blog_href = await self.get_blog_href()
        if blog_name is None:
            blog_name = self.blog_href

        url = f"{self.BASE_API_URL}/v1/blog/{blog_name}"
        headers = {
            "Authorization": f"Bearer {self.bearer_token}",
            "X-Currency": "RUB",
            "X-Locale": "ru_RU",
            "X-App": "web"
        }

        async with self.session.get(url, headers=headers) as resp:
            if resp.status != 200:
                raise RuntimeError(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–≥–µ: {resp.status}")
            return await resp.json()

    async def create_post(
        self,
        title: str,
        content: str,
        subscription_level_id: int,
        price: int = 0,
        tags: str = "",
        deny_comments: bool = False,
        wait_video: bool = False,
        has_chat: bool = False
    ) -> dict:
        url = f"{self.BASE_API_URL}/v1/blog/{self.blog_href}/post/"
        
        headers = {
            "Authorization": f"Bearer {self.bearer_token}",
            "X-Currency": "RUB",
            "X-Locale": "ru_RU",
            "X-App": "web",
            "Content-Type": "application/x-www-form-urlencoded",
            "Referer": f"https://boosty.to/{self.blog_href}/new-post"
        }

        # –í–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ content-–ø–æ–ª–µ
        data_field = json.dumps([
            {
                "type": "text",
                "content": json.dumps([content, "unstyled", []], ensure_ascii=False),
                "modificator": ""
            },
            {
                "type": "text",
                "content": "",
                "modificator": "BLOCK_END"
            }
        ], ensure_ascii=False)

        payload = {
            "title": title,
            "data": data_field,
            "subscription_level_id": str(subscription_level_id),
            "price": str(price),
            "teaser_data": "[]",
            "tags": tags,
            "deny_comments": str(deny_comments).lower(),
            "wait_video": str(wait_video).lower(),
            "has_chat": str(has_chat).lower(),
            "advertiser_info": ""
        }

        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏:", payload)

        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=headers, data=urlencode(payload, encoding='utf-8')) as response:
                if response.status == 200:
                    return await response.json()
                text = await response.text()
                raise RuntimeError(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {response.status}, {text}")
            
    async def get_media_posts(
        self,
        blog_name: str = None,
        media_type: str = "all",
        limit: int = 15,
        limit_by: str = "media"
    ) -> dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞-–ø–æ—Å—Ç–æ–≤ –∏–∑ –∞–ª—å–±–æ–º–∞ –±–ª–æ–≥–∞ Boosty.

        :param media_type: –¢–∏–ø –º–µ–¥–∏–∞ ("all", "image", "video", "audio")
        :param limit: –ö–æ–ª-–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        :param limit_by: –ö—Ä–∏—Ç–µ—Ä–∏–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ("media" –∏–ª–∏ "album")
        :return: JSON —Å –º–µ–¥–∏–∞-–ø–æ—Å—Ç–∞–º–∏
        """
        if not self.blog_href:
            self.blog_href = await self.get_blog_href()
            
        if blog_name is None:
            blog_name = self.blog_href
        
        if media_type not in ["all", "image", "video", "audio"]:
            raise ValueError("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 'all', 'image', 'video', 'audio'")

        url = f"https://api.boosty.to/v1/blog/{blog_name}/media_album/"
        headers = {
            "Authorization": f"Bearer {self.bearer_token}",
            "X-Currency": "RUB",
            "X-Locale": "ru_RU",
            "X-App": "web",
        }
        params = {
            "type": media_type,
            "limit": str(limit),
            "limit_by": limit_by
        }

        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers, params=params) as response:
                if response.status == 200:
                    return await response.json()
                text = await response.text()
                raise RuntimeError(f"üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–µ–¥–∏–∞: {response.status}, {text}")
