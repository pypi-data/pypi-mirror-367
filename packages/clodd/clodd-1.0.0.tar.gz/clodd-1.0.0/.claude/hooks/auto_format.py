#!/usr/bin/env -S uv run python
"""
Auto Format hook for Claude Code.
Automatically runs formatting when Claude Code stops.
Generated by clod hooks.
"""

import datetime
import subprocess
import sys
import tempfile
from pathlib import Path

from cchooks import StopContext, create_context

print(f"🔧 Auto-format hook starting at {Path.cwd()}", file=sys.stderr)

# Write execution log to temp file for verification
log_file = Path(tempfile.gettempdir()) / "claude_auto_format_hook.log"
with open(log_file, "a") as f:
    f.write(f"{datetime.datetime.now().isoformat()} - Hook executed in {Path.cwd()}\n")
print(f"📝 Logged execution to {log_file}", file=sys.stderr)

# Create context - this handles all the input parsing
try:
    c = create_context()
    assert isinstance(c, StopContext)
    print("✅ Successfully created StopContext", file=sys.stderr)
    print(f"📥 Session ID: {c.session_id}", file=sys.stderr)
    print(f"📥 Transcript path: {c.transcript_path}", file=sys.stderr)
except Exception as e:
    print(f"❌ Failed to create context: {e}", file=sys.stderr)
    sys.exit(1)

try:
    # Check if we're in a project with format script
    format_script = Path("scripts/format.py")
    print(f"🔍 Checking for format script at {format_script.absolute()}", file=sys.stderr)

    if format_script.exists():
        print("🎨 Running auto-format on stop...", file=sys.stderr)
        # Run the format script
        cmd = ["uv", "run", "python", "scripts/format.py"]
        print(f"🏃 Executing: {' '.join(cmd)}", file=sys.stderr)

        result = subprocess.run(
            cmd,
            capture_output=True,
            text=True,
        )

        print(f"📊 Format script exit code: {result.returncode}", file=sys.stderr)
        if result.stdout:
            print(f"📤 stdout: {result.stdout}", file=sys.stderr)
        if result.stderr:
            print(f"📤 stderr: {result.stderr}", file=sys.stderr)

        if result.returncode == 0:
            print("✅ Auto-format completed successfully", file=sys.stderr)
        else:
            print(
                f"⚠️  Auto-format had issues (exit code {result.returncode})",
                file=sys.stderr,
            )
    else:
        # Fallback to ruff format and check
        print("🎨 Running ruff format and check on stop...", file=sys.stderr)

        # Format first
        print("🏃 Running: ruff format .", file=sys.stderr)
        format_result = subprocess.run(["ruff", "format", "."], capture_output=True, text=True)
        print(f"📊 ruff format exit code: {format_result.returncode}", file=sys.stderr)
        if format_result.stdout:
            print(f"📤 format stdout: {format_result.stdout}", file=sys.stderr)
        if format_result.stderr:
            print(f"📤 format stderr: {format_result.stderr}", file=sys.stderr)

        # Then check and fix
        print("🏃 Running: ruff check --fix .", file=sys.stderr)
        check_result = subprocess.run(["ruff", "check", "--fix", "."], capture_output=True, text=True)
        print(f"📊 ruff check exit code: {check_result.returncode}", file=sys.stderr)
        if check_result.stdout:
            print(f"📤 check stdout: {check_result.stdout}", file=sys.stderr)
        if check_result.stderr:
            print(f"📤 check stderr: {check_result.stderr}", file=sys.stderr)

        if format_result.returncode == 0 and check_result.returncode == 0:
            print("✅ Auto-format and lint completed", file=sys.stderr)
        else:
            if format_result.returncode != 0:
                print(f"⚠️  Format issues (exit code {format_result.returncode})", file=sys.stderr)
            if check_result.returncode != 0:
                print(f"⚠️  Lint issues (exit code {check_result.returncode})", file=sys.stderr)

except Exception as e:
    print(f"❌ Auto-format error: {e}", file=sys.stderr)
    import traceback
    print(f"🔍 Traceback: {traceback.format_exc()}", file=sys.stderr)

# Always approve - formatting shouldn't block Claude Code from stopping
print("🏁 Hook execution complete, exiting with success", file=sys.stderr)
c.output.exit_success()
print("✅ Hook finished", file=sys.stderr)
