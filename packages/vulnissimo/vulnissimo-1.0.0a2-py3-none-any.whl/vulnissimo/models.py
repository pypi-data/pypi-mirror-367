# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2025-07-04T09:58:59+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import AnyUrl, BaseModel, EmailStr, Field


class CVSS(BaseModel):
    v2: Optional[float] = Field(None, title="V2")
    v3: Optional[float] = Field(None, title="V3")


class EvidenceType(Enum):
    TEXT = "text"
    TABLE = "table"
    HTML = "html"


class ExceptionDetailData(BaseModel):
    msg: str = Field(..., title="Msg")


class ExceptionResponseData(BaseModel):
    detail: List[ExceptionDetailData] = Field(..., title="Detail")


class IpInfo(BaseModel):
    ip_address: str = Field(..., title="Ip Address")
    country: Optional[str] = Field(None, title="Country")
    network_name: Optional[str] = Field(None, title="Network Name")
    asn: Optional[str] = Field(None, title="Asn")


class OWASP(BaseModel):
    v2017: Optional[str] = Field(None, title="V2017")
    v2021: Optional[str] = Field(None, title="V2021")


class PortStatus(Enum):
    OPEN = "open"
    CLOSED = "closed"
    FILTERED = "filtered"


class RiskLevel(Enum):
    INFO = "info"
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"


class ScanCreated(BaseModel):
    id: Optional[UUID] = Field(None, title="Id")
    created_at: Optional[int] = Field(None, title="Created At")
    html_result: Optional[AnyUrl] = Field(None, title="Html Result")
    json_result: Optional[AnyUrl] = Field(None, title="Json Result")


class ScanStatus(Enum):
    RUNNING = "running"
    FINISHED = "finished"
    ERROR = "error"


class ScanType(Enum):
    PASSIVE = "passive"
    ACTIVE = "active"


class Stats(BaseModel):
    num_running_scans: int = Field(..., title="Num Running Scans")
    num_finished_scans: int = Field(..., title="Num Finished Scans")


class UserPublic(BaseModel):
    id: Optional[UUID] = Field(None, title="Id")
    email: EmailStr = Field(..., title="Email")
    created_at: Optional[int] = Field(None, title="Created At")
    credits: Optional[int] = Field(0, title="Credits")


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class VulnerabilityCategory(Enum):
    WEB = "web"
    NETWORK = "network"


class WebTechnology(BaseModel):
    name: str = Field(..., title="Name")
    version: Optional[str] = Field(None, title="Version")
    category: str = Field(..., title="Category")


class Evidence(BaseModel):
    type: EvidenceType
    content: Union[Dict[str, Any], str] = Field(..., title="Content")


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")


class Port(BaseModel):
    port: int = Field(..., title="Port")
    status: PortStatus
    service: Optional[str] = Field(None, title="Service")
    product: Optional[str] = Field(None, title="Product")
    version: Optional[str] = Field(None, title="Version")


class Recon(BaseModel):
    ports: Optional[List[Port]] = Field([], title="Ports")
    ip_info: Optional[List[IpInfo]] = Field([], title="Ip Info")
    web_technologies: Optional[List[WebTechnology]] = Field(
        [], title="Web Technologies"
    )
    title: Optional[str] = Field(None, title="Title")
    description: Optional[str] = Field(None, title="Description")
    screenshot_url: Optional[AnyUrl] = Field(None, title="Screenshot Url")


class ScanCreate(BaseModel):
    target: AnyUrl = Field(..., title="Target")
    type: Optional[ScanType] = ScanType.PASSIVE
    is_private: Optional[bool] = Field(False, title="Is Private")


class ScanInfo(BaseModel):
    type: ScanType
    is_private: bool = Field(..., title="Is Private")
    cost: int = Field(..., title="Cost")
    created_at: datetime = Field(..., title="Created At")
    status: ScanStatus
    progress: int = Field(..., title="Progress")
    risk_level: Optional[RiskLevel]
    target: AnyUrl = Field(..., title="Target")
    redirect_url: Optional[AnyUrl] = Field(None, title="Redirect Url")
    user_country: Optional[str] = Field(..., title="User Country")


class Vulnerability(BaseModel):
    title: str = Field(..., title="Title")
    description: Optional[str] = Field(None, title="Description")
    risk_description: Optional[str] = Field(None, title="Risk Description")
    recommendation: Optional[str] = Field(None, title="Recommendation")
    category: VulnerabilityCategory
    cves: Optional[List[str]] = Field([], title="Cves")
    cwe: Optional[str] = Field(None, title="Cwe")
    port: Optional[int] = Field(None, title="Port")
    service: Optional[str] = Field(None, title="Service")
    protocol: Optional[str] = Field(None, title="Protocol")
    cvss: CVSS
    owasp: OWASP
    risk_level: RiskLevel
    evidence: Evidence
    confirmed: Optional[bool] = Field(False, title="Confirmed")
    verified: Optional[bool] = Field(False, title="Verified")
    references: Optional[List[AnyUrl]] = Field([], title="References")


class ScanBasicResult(BaseModel):
    id: UUID = Field(..., title="Id")
    scan_info: ScanInfo


class ScanResult(BaseModel):
    id: UUID = Field(..., title="Id")
    scan_info: ScanInfo
    vulnerabilities: List[Vulnerability] = Field(..., title="Vulnerabilities")
    recon: Recon

    def is_finished(self) -> bool:
        return self.scan_info.status == ScanStatus.FINISHED
