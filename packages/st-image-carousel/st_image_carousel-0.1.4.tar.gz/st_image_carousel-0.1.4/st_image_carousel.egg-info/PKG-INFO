Metadata-Version: 2.4
Name: st-image-carousel
Version: 0.1.4
Summary: Un composant Streamlit pour afficher un carrousel d'images
Home-page: https://github.com/2nzi/st_image_carousel
Author: Antoine Verdon
Author-email: antoineverdon.pro@gmail.com
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: streamlit>=0.63
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# üé† Streamlit Image Carousel

Un composant Streamlit personnalis√© pour cr√©er des carrousels d'images interactifs et modernes avec navigation infinie et personnalisation compl√®te.

## ‚ú® Fonctionnalit√©s

- üé† **Carrousel infini** avec navigation fluide
- üñ±Ô∏è **Navigation intuitive** par clic sur les images ou fl√®ches
- üîÑ **Double orientation** (horizontale et verticale)
- üé® **Personnalisation compl√®te** des couleurs et styles
- üì± **Design responsive** adapt√© √† tous les √©crans
- üîç **Compatible avec URLs et Base64** pour les images
- ‚ö° **Performance optimis√©e** avec lazy loading
- üéØ **Interface moderne** avec effets de lueur et transitions

## üöÄ Installationon basique

```python
result = image_carousel(
    images=images,
    key="basic_carousel"
)
```

### Carrousel avec 7 images visibles

```python
result = image_carousel(
    images=images,
    max_visible=7,
    key="large_carousel"
)
```

### Orientation verticale

```python
result = image_carousel(
    images=images,
    orientation="vertical",
    max_visible=5,
    key="vertical_carousel"
)
```

### Th√®me sombre personnalis√©

```python
result = image_carousel(
    images=images,
    max_visible=5,
    background_color="#0f0f23",
    active_border_color="#00ff88",
    active_glow_color="rgba(0, 255, 136, 0.6)",
    fallback_background="#1a1a2e",
    fallback_gradient_end="#0a0a1a",
    text_color="#ffffff",
    arrow_color="#00ff88",
    key="dark_theme"
)
```

### Th√®me clair moderne

```python
result = image_carousel(
    images=images,
    max_visible=5,
    background_color="#f8fafc",
    active_border_color="#3b82f6",
    active_glow_color="rgba(59, 130, 246, 0.5)",
    fallback_background="#e2e8f0",
    fallback_gradient_end="#cbd5e1",
    text_color="#1e293b",
    arrow_color="#3b82f6",
    key="light_theme"
)
```

### Avec image pr√©s√©lectionn√©e

```python
result = image_carousel(
    images=images,
    selected_image="Lionel Messi",  # Image centr√©e au d√©marrage
    background_color="#1e3a8a",
    active_border_color="#fbbf24",
    active_glow_color="rgba(251, 191, 36, 0.7)",
    text_color="#ffffff",
    key="preselected"
)
```

## üîß API de r√©f√©rence

### Param√®tres

| Param√®tre | Type | D√©faut | Description |
|-----------|------|---------|-------------|
| `images` | `list` | **Requis** | Liste des images `[{"name": "nom", "url": "url"}, ...]` |
| `selected_image` | `str` | `None` | Nom de l'image √† centrer au d√©marrage |
| `max_visible` | `int` | `5` | Nombre d'images visibles simultan√©ment |
| `orientation` | `str` | `"horizontal"` | Orientation : `"horizontal"` ou `"vertical"` |
| `background_color` | `str` | `"#1a1a2e"` | Couleur de fond du composant |
| `active_border_color` | `str` | `"#ffffff"` | Couleur de bordure de l'image active |
| `active_glow_color` | `str` | `"rgba(255, 255, 255, 0.5)"` | Couleur de l'effet de lueur |
| `fallback_background` | `str` | `"#2a2a3e"` | Couleur de fond des images en chargement |
| `fallback_gradient_end` | `str` | `"rgb(0, 0, 0)"` | Couleur de fin du gradient de fallback |
| `text_color` | `str` | `"#ffffff"` | Couleur du texte des noms |
| `arrow_color` | `str` | `"#ffffff"` | Couleur des fl√®ches de navigation |
| `key` | `str` | `None` | Cl√© unique pour Streamlit |

### Format des images

```python
images = [
    {
        "name": "Nom affich√©",           # Requis : texte sous l'image
        "url": "https://example.com/..."  # Requis : URL ou Base64
    },
    # ... autres images
]
```

### Valeur de retour

Le composant retourne un dictionnaire :

```python
{
    "selected_image": "Nom de l'image",    # Nom de l'image s√©lectionn√©e
    "selected_url": "URL de l'image",      # URL de l'image s√©lectionn√©e
    "current_index": 2                     # Index de l'image (0-based)
}
```

## üéØ Utilisation avanc√©e

### Int√©gration avec recherche

```python
import streamlit as st
from st_image_carousel import image_carousel

# Images de joueurs
players = [
    {"name": "Lionel Messi", "url": "https://example.com/messi.jpg"},
    {"name": "Cristiano Ronaldo", "url": "https://example.com/ronaldo.jpg"},
    # ... autres joueurs
]

# Barre de recherche
search = st.text_input("üîç Rechercher un joueur")

# Filtrer les r√©sultats
if search:
    filtered_players = [p for p in players if search.lower() in p["name"].lower()]
    if filtered_players:
        st.success(f"‚úÖ {len(filtered_players)} joueur(s) trouv√©(s)")
    else:
        st.warning("‚ùå Aucun joueur trouv√©")
        filtered_players = players
else:
    filtered_players = players

# Carrousel avec r√©sultats
result = image_carousel(
    images=filtered_players,
    max_visible=5,
    key="search_carousel"
)

# Afficher les informations
if result:
    st.success(f"Joueur s√©lectionn√© : {result['selected_image']}")
    st.image(result['selected_url'], width=200)
```

### Images en Base64

```python
import base64

def image_to_base64(image_path):
    with open(image_path, "rb") as file:
        return f"data:image/jpeg;base64,{base64.b64encode(file.read()).decode()}"

images = [
    {
        "name": "Image locale",
        "url": image_to_base64("path/to/image.jpg")
    }
]
```

### Comparaison d'orientations

```python
col1, col2 = st.columns(2)

with col1:
    st.subheader("üìè Horizontal")
    result_h = image_carousel(
        images=images,
        orientation="horizontal",
        max_visible=5,
        key="horizontal"
    )

with col2:
    st.subheader("üìê Vertical")
    result_v = image_carousel(
        images=images,
        orientation="vertical",
        max_visible=5,
        key="vertical"
    )
```

## üé® Th√®mes pr√©d√©finis

### Th√®me Gaming (Sombre)
```python
gaming_theme = {
    "background_color": "#0f0f23",
    "active_border_color": "#00ff88",
    "active_glow_color": "rgba(0, 255, 136, 0.6)",
    "fallback_background": "#1a1a2e",
    "fallback_gradient_end": "#0a0a1a",
    "text_color": "#ffffff",
    "arrow_color": "#00ff88"
}
```

### Th√®me Business (Clair)
```python
business_theme = {
    "background_color": "#f8fafc",
    "active_border_color": "#3b82f6",
    "active_glow_color": "rgba(59, 130, 246, 0.5)",
    "fallback_background": "#e2e8f0",
    "fallback_gradient_end": "#cbd5e1",
    "text_color": "#1e293b",
    "arrow_color": "#3b82f6"
}
```

### Th√®me Sport (Bleu/Or)
```python
sport_theme = {
    "background_color": "#1e3a8a",
    "active_border_color": "#fbbf24",
    "active_glow_color": "rgba(251, 191, 36, 0.7)",
    "fallback_background": "#3b82f6",
    "fallback_gradient_end": "#1e40af",
    "text_color": "#ffffff",
    "arrow_color": "#fbbf24"
}
```
