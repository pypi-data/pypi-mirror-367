
# The project's basic metadata and dependencies
[project]

# General project information, the Project supports Python 3.11, 3.12 and 3.13; the version of the project is automatically determined from the latest
# Git tag using the Hatch-VCS plugin and the read me is dynamically generated using the Hatch Fancy PyPI Readme plugin (this is necessary, because the
# screenshots of ViRelAy in the read me needs to be replaced for the PyPI page)
name = "virelay"
description = """\
    ViRelAy is a web-based XAI tool for analyzing classifiers and their datasets by visualizing the source-data, attributions, clusterings, and \
    embeddings as generated by tools like CoRelAy.\
    """
keywords = [
    "ViRelAy",
    "Spectral Relevance Analysis",
    "SpRAy",
    "Explainable AI",
    "XAI",
    "Interpretability",
    "Visual Analytics",
    "Machine Learning",
    "Deep Learning",
    "Artificial Intelligence"
]
license = "AGPL-3.0-or-later"
requires-python = ">=3.11.13"
dynamic = [
    "readme",
    "version"
]

# The maintainers (people actively working on the project) and authors (people who have contributed to the project)
maintainers = [
    {name = "David Neumann", email = "david.neumann@lecode.de"},
    {name = "Christopher J. Anders", email = "contact@cjanders.de"}
]
authors = [
    {name = "Christopher J. Anders", email = "contact@cjanders.de"},
    {name = "David Neumann", email = "david.neumann@lecode.de"},
    {name = "Talmaj Marinc", email = "talmaj@gmail.com"},
    {name = "Sebastian Lapuschkin", email = "sebastian.lapuschkin@hhi.fraunhofer.de"},
    {name = "Pattarawat Chormai", email = "pat.chormai@gmail.com"}
]

# The project's dependencies, which are included in the requirements of the published package
dependencies = [
    "flask-cors>=6.0.1,<7.0.0",
    "flask>=3.1.1,<4.0.0",
    "gunicorn>=23.0.0,<24.0.0",
    "h5py>=3.14.0,<4.0.0",
    "matplotlib>=3.10.5,<4.0.0",
    "numpy>=2.2.6,<2.3.0",
    "pillow>=11.3.0,<12.0.0",
    "pyyaml>=6.0.2,<7.0.0",
    "typing-extensions>=4.14.1,<5.0.0"
]

# The PyPI classifiers that describe the project
classifiers = [
    "Natural Language :: English",
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Intended Audience :: Science/Research",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Typing :: Typed"
]

# Groups of extra dependencies that are not included in the requirements of the published package, but users may install them optionally; installing
# them provides additional functionality, but is not required to use the package
[project.optional-dependencies]

# Dependencies required for running the example scripts in the documentation
examples = [
    "numba>=0.61.2,<1.0.0",
    "corelay[umap, hdbscan]>=1.0.0,<2.0.0",
    "zennit>=1.0.0,<2.0.0",
    "scipy>=1.16.1,<2.0.0",
    "scikit-image>=0.25.2,<1.0.0"
]

# Groups of development dependencies that are not included in the requirements of the published package; they can be installed separately or
# all-in-one with the "dev" group, which includes all development dependencies
[dependency-groups]

# Dependencies required for development; this group includes all other groups
dev = [
    { include-group = "testing" },
    { include-group = "linting" },
    { include-group = "docs" }
]

# Extra dependencies of the project, which may be installed optionally when installing the package; these are needed for testing and linting
optional-dependencies = [
    "numba>=0.61.2,<1.0.0",
    "corelay[umap, hdbscan]>=1.0.0,<2.0.0",
    "zennit>=1.0.0,<2.0.0",
    "scipy>=1.16.1,<2.0.0",
    "scikit-image>=0.25.2,<1.0.0"
]

# Dependencies required for testing
testing = [
    "tox>=4.28.4,<5.0.0",
    "tox-uv>=1.26.2,<2.0.0",
    "pytest>=8.4.1,<9.0.0",
    "pytest-cov>=6.2.1,<7.0.0",
    "coverage>=7.10.2,<8.0.0",
    { include-group = "optional-dependencies" }
]

# Dependencies required for linting
linting = [
    "pylint>=3.3.7,<4.0.0",
    "pycodestyle>=2.14.0,<3.0.0",
    "pydoclint>=0.6.6,<1.0.0",
    "mypy>=1.17.1,<2.0.0",
    "pytest-mypy>=1.0.1,<2.0.0",
    "scipy-stubs>=1.16.1.0,<2.0.0",
    "types-Flask-Cors>=6.0.0.20250520,<7.0.0",
    "types-PyYAML>=6.0.12.20250516,<7.0.0",
    { include-group = "optional-dependencies" }
]

# Dependencies required for building the documentation
docs = [
    "sphinx>=8.2.3,<9.0.0",
    "sphinx-copybutton>=0.5.2,<1.0.0",
    "sphinx-new-tab-link>=0.8.0,<1.0.0",
    "sphinx-rtd-theme>=3.0.2,<4.0.0",
    "sphinxcontrib.bibtex>=2.6.5,<3.0.0",
    "sphinxcontrib.datatemplates>=0.11.0,<1.0.0"
]

# The URLs to the documentation, the repository, the issue tracker, and the changelog
[project.urls]
Documentation = "https://virelay.readthedocs.io/en/latest/"
Repository = "https://github.com/virelay/virelay.git"
Issues = "https://github.com/virelay/virelay/issues"
Changelog = "https://github.com/virelay/virelay/blob/main/CHANGELOG.md"

# Entrypoints for the project (these are installed as scripts when the package is installed)
[project.scripts]
virelay = "virelay.application:run_cli_app"

# Configuration specified to the UV Python package manager
[tool.uv]

# Packages are built and installed into the virtual environment in editable mode and thus require a build backend, while virtual projects are not
# built or installed; instead, only their dependencies are included in the virtual environment
package = true

# Configures which build system is used by UV to build the project
[build-system]
requires = [
    "hatchling>=1.27.0,<2.0.0",
    "hatch-build-scripts>=1.0.0,<2.0.0",
    "hatch-vcs>=0.5.0,<1.0.0",
    "hatch-fancy-pypi-readme>=25.1.0,<26.0.0"
]
build-backend = "hatchling.build"

# Specifies where the ViRelAy backend package is located, which should be included in the source distribution and the wheel; using the "packages"
# option causes Hatch to only include the files in the specified package directory and to collapse the directory structure to the last component,
# i.e., the source distribution and wheel will only contain the "virelay" directory and not the "source/backend/virelay" directory; for the wheel,
# we need to specify both the "virelay" and the "source/backend/virelay" directories to be included as packages, because when the wheel is built, it
# will be build from the source distribution, which now only contains the "virelay" directory, but when ViRelAy is installed as an editable package,
# for example, when "uv run" is used, the package will be built from the repository, which means that the "source/backend/virelay" directory is
# available; luckily, Hatch will automatically include directories that are available and ignore directories that are not available, so we can specify
# both directories without causing any issues
[tool.hatch.build.targets.sdist]
packages = ["source/backend/virelay"]
[tool.hatch.build.targets.wheel]
packages = ["virelay", "source/backend/virelay"]

# Configures the "Hatch-VCS" plugin that is used to dynamically determine the version of the project based on the current Git tag
[tool.hatch.version]
source = "vcs"
fallback-version = "0.0.0"

# Configures the "Hatch-VCS" build hook, which is used to write the version of the project to the version file (here, the version file is only
# included in the source distribution, because the wheel is built from the source distribution by extracting it into a temporary directory, therefore,
# the "source/backend/virelay" directory will not be available during the wheel build; also, the version file is already included in the source
# distribution, so it does not need to be copied again)
[tool.hatch.build.targets.sdist.hooks.vcs]
version-file = "source/backend/virelay/version.py"

# Configures the "Hatch Fancy PyPI Readme" plugin to compose the content of the read me file from the project's read me file; the screenshot of
# ViRelAy in the read me uses a GitHub feature that allows us to display a screenshot of ViRelAy's light-mode UI when the user uses GitHub's
# light-mode, and a screenshot of the dark-mode UI, if the user uses GitHub's dark mode; PyPI does not support this feature, therefore, these two
# screenshots are replaced with a single image that contains a split-screen montage of ViRelAy's light-mode and dark-mode UIs, using the Hatch Fancy
# PyPI Readme plugin
[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/markdown"
[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.md"
[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
pattern = '\!\[[^\]]+\]\([^\)]+#gh-(light|dark)-mode-only\)\n\!\[[^\]]+\]\([^\)]+#gh-(light|dark)-mode-only\)'
replacement = '![ViRelAy Light & Dark Mode UI](https://raw.githubusercontent.com/virelay/virelay/refs/heads/main/design/virelay-ui.png)'

# Configures the "hatch-build-script" plugin, which uses build hooks to run arbitrary build scripts during the build of the project; this is used to
# build the Angular frontend of the project and include its files in the source distribution (the wheel will be build by extracting the source
# distribution into a temporary directory, therefore, the script is only run for the source distribution because it will already include the frontend
# files; also, the relative path "source/frontend" is no longer available in the temporary directory from where the wheel is build; no artifacts are
# copied here, because the "hatch-build-script" plugin would copy the entire directory structure, which is not the way we want the files to be
# included; instead, the frontend files are included using the force-include configuration below)
[[tool.hatch.build.targets.sdist.hooks.build-scripts.scripts]]
work_dir = "source/frontend"
commands = [
    "npm install",
    "npm run build"
]

# Includes the build artifacts of the Angular frontend in the source distribution of the project; since the wheel is built from the source
# distribution, the frontend files will also be included in the wheel
[tool.hatch.build.targets.sdist.force-include]
"source/frontend/distribution/browser" = "virelay/frontend"
