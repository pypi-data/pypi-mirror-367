Metadata-Version: 2.3
Name: pysr-abc-events
Version: 1.0.0
Summary: 
Author: Alexey Volkov
Author-email: webwizardry@hotmail.com
Requires-Python: >=3.12,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Description-Content-Type: text/markdown

# PYSR Events
Диспетчеризация событий (Event Dispatching) - это распространенный и хорошо проверенный механизм, 
позволяющий разработчикам легко и последовательно внедрять логику в приложение.

Цель данного PSR (Python Standard Recommendation) - установить общий механизм для событийного 
расширения и взаимодействия, чтобы библиотеки и компоненты могли свободно использоваться 
в различных приложениях и фреймворках.

Ключевые слова "**должен**", "**не должен**", "**требуется**", "**обязательно**", "**необходимо**", 
"**следует**", "**не следует**", "**рекомендуется**", "**может**" и "**опционально**" в этом документе 
интерпретируются, как описано в RFC 2119.

## Цель
Наличие общих интерфейсов для диспетчеризации и обработки событий позволяет разработчикам 
создавать библиотеки, которые могут взаимодействовать с различными фреймворками и другими 
библиотеками единообразно.

## Примеры использования:
- Система безопасности, предотвращающая сохранение/доступ к данным без разрешения
- Общая система кэширования страниц
- Библиотеки, расширяющие другие библиотеки независимо от фреймворка
- Пакет для логирования всех действий в приложении

## Определения
- Событие (Event) - сообщение, созданное источником (Emitter). **может** быть любым Python-объектом.
- Обработчик (Listener) - любой вызываемый Python-объект, принимающий событие. **может** быть ноль 
или более обработчиков для одного события. Обработчик **может** ставить задачи в очередь.
- Источник (Emitter) - код, который инициирует событие ("вызывающий код").
- Диспетчер (Dispatcher) - сервисный объект, получающий событие от источника. Отвечает за передачу 
события соответствующим обработчикам, но *должен* делегировать определение подходящих обработчиков 
поставщику обработчиков.
- Поставщик обработчиков (Listener Provider) - определяет, какие обработчики подходят для данного 
события, но НЕ *должен* вызывать их сам.

## События
События - это объекты, выступающие единицей коммуникации между источником и обработчиками.

События МОГУТ быть изменяемыми, если **требуется** двусторонняя коммуникация. Если это не нужно, 
**рекомендуется** делать их неизменяемыми.

Реализации ДОЛЖНЫ предполагать, что один и тот же объект события будет передан всем обработчикам.

**Рекомендуется** (но не **обязательно**), чтобы события поддерживали сериализацию: 
`event == pickle.loads(pickle.dumps(event))` должно быть верным.

### Останавливаемые события
Особый тип событий, которые могут предотвратить вызов последующих обработчиков. 
Должны реализовывать интерфейс StoppableEventInterface.

## Обработчики
Обработчик - любой вызываемый Python-объект с одним параметром (событие). 
**Рекомендуется** указывать тип параметра. Возвращаемое значение должно быть None.

Обработчик **может** делегировать выполнение другому коду или ставить задачи в очередь.

## Диспетчер
Диспетчер - сервисный объект, реализующий EventDispatcherInterface. Отвечает за:
- Синхронный вызов обработчиков в порядке их получения от поставщика
- Возврат того же объекта события после выполнения всех обработчиков
- Ожидание завершения всех обработчиков перед возвратом управления

### Для останавливаемых событий:
- Проверять is_propagation_stopped() перед каждым вызовом обработчика
- Прекращать выполнение, если возвращается True

### Обработка ошибок
Исключение в обработчике должно:
- Блокировать выполнение последующих обработчиков
- Пробрасываться в вызывающий код

Диспетчер **может** логировать ошибку, но *должен* пробросить её дальше.

## Поставщик обработчиков
Определяет подходящие обработчики для события и порядок их вызова. **может** использовать:
- Систему регистрации обработчиков
- Интроспекцию типа события
- Предварительно скомпилированный список
- Контроль доступа
- Делегирование другим поставщикам

*должен* учитывать иерархию типов: обработчик для родительского класса *должен* считаться 
подходящим для дочернего.

## Композиция объектов
Диспетчер *должен* использовать поставщика обработчиков. **рекомендуется** реализовывать 
их как отдельные объекты.
