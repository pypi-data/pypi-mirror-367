from abc import ABC, abstractmethod
from typing import TypeVar


TEvent = TypeVar('TEvent')


class EventDispatcherInterface(ABC):
    """
    Интерфейс диспетчера событий.
    Определяет контракт для обработки и распространения событий.
    """

    @abstractmethod
    def dispatch(self, event: TEvent) -> TEvent:
        """
        Передает событие всем зарегистрированным слушателям для обработки.

        Примечания:
            - Реализация должна гарантировать вызов всех соответствующих слушателей
            - Слушатели могут модифицировать переданное событие

        :param event: Событие для обработки. Это должен быть объект любого типа,
                      но обычно используется конкретный класс события.
        :type event: Object

        :returns: Модифицированное событие после обработки всеми слушателями.
                  Возвращается тот же объект, но потенциально измененный слушателями.
        :rtype: Object

        """
        raise NotImplementedError
