"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .exhaustiveobject import ExhaustiveObject, ExhaustiveObjectTypedDict
from enum import Enum
from speakeasy.new_openapi.types import BaseModel
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class Type(str, Enum):
    SUPER_TYPE1 = "type1"
    SUPER_TYPE2 = "type2"


class Test2RequestTypedDict(TypedDict):
    __test__ = False  # pyright: ignore[reportGeneralTypeIssues]

    obj: ExhaustiveObjectTypedDict
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://speakeasy.com - A link to the external docs.
    """
    type: NotRequired[Type]


class Test2Request(BaseModel):
    __test__ = False

    obj: ExhaustiveObject
    r"""A simple object that uses all our supported primitive types and enums and has optional properties.
    https://speakeasy.com - A link to the external docs.
    """

    type: Optional[Type] = None
