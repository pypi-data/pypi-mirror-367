"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from ._version import (
    __gen_version__,
    __openapi_doc_version__,
    __user_agent__,
    __version__,
)
from .httpclient import AsyncHttpClient, HttpClient
from .utils import Logger, RetryConfig, remove_suffix
from dataclasses import dataclass, field
from enum import Enum
from pydantic import Field
from speakeasy.new_openapi import models
from speakeasy.new_openapi.models import internal
from speakeasy.new_openapi.types import OptionalNullable, UNSET
from typing import Callable, Dict, List, Optional, Tuple, Union


SERVERS = [
    "http://localhost:35123",
    # The default server.
    "http://{subdomain}.domain.com/v{version}",
    "http://{HostName}:{PORT}",
    # A server with an enum variable.
]
"""Contains the list of servers available to the SDK"""


class ServerPORT(str, Enum):
    r"""The port on which the server is running."""

    EIGHTY = "80"
    EIGHT_THOUSAND_AND_EIGHTY = "8080"
    FOUR_HUNDRED_AND_FORTY_THREE = "443"


@dataclass
class SDKConfiguration:
    client: Union[HttpClient, None]
    client_supplied: bool
    async_client: Union[AsyncHttpClient, None]
    async_client_supplied: bool
    debug_logger: Logger
    globals: internal.Globals
    security: Optional[Union[models.Security, Callable[[], models.Security]]] = None
    server_url: Optional[str] = ""
    server_idx: Optional[int] = 0
    server_defaults: List[Dict[str, str]] = field(default_factory=List)
    language: str = "python"
    openapi_doc_version: str = __openapi_doc_version__
    sdk_version: str = __version__
    gen_version: str = __gen_version__
    user_agent: str = __user_agent__
    retry_config: OptionalNullable[RetryConfig] = Field(default_factory=lambda: UNSET)
    timeout_ms: Optional[int] = None

    def get_server_details(self) -> Tuple[str, Dict[str, str]]:
        if self.server_url is not None and self.server_url:
            return remove_suffix(self.server_url, "/"), {}
        if self.server_idx is None:
            self.server_idx = 0

        return SERVERS[self.server_idx], self.server_defaults[self.server_idx]
