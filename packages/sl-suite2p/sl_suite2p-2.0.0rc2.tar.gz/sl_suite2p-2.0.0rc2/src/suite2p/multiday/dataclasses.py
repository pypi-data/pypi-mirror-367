"""This module provides the classes used to organize and temporarily store processed data during the first step
(registration) of the multi-session suite2p processing pipeline."""

from typing import Any
from pathlib import Path
from dataclasses import field, dataclass

from pirt import DeformationFieldBackward
import numpy as np
from numpy.typing import NDArray

from .utils import create_mask_image


@dataclass()
class Session:
    """Stores all data used by the multi-day suite2p pipeline for a single session.

    This class aggregates all data used by the multi-day suite2p pipeline to register multiple sessions across days and
    extract fluorescence data from cells tracked across sessions. It includes both the single-day processed data loaded
    at the beginning of the multi-day pipeline and the multi-day data generated by the pipeline during runtime.
    """

    session_id: str
    """Stores the ID of the session. Typically, the Id is expected to sort naturally based on the order the sessions 
    were acquired. Usually, this means that the sessions are either named based on acquisitions sequence (e.g.: 1, 2, 
    3) or based on their timestamp (e.g.: 2022_01_01, 2022_03_05, 2026_12_12)."""

    suite2p_folder: Path
    """Stores the path to the root suite2p output folder. Typically, this is the path to the session's 'suite2p' folder
    generated as part of the single-session suite2p processing. During multiday processing, additional (multi-day) data
    is added to the same directory hierarchy as used by the single-day pipeline."""

    reference_images: dict[str, NDArray[np.uint32 | np.float32]]
    """Stores a dictionary of reference images generated for single-session registered session movie. The images 
    are stored as two-dimensional NumPy arrays that match teh dimensions of the session movie. Valid image query keys 
    are: 'mean', 'enhanced', and 'max'."""

    cell_masks: tuple[dict[str, Any], ...]
    """For each cell ROI discovered during single-day suite2p processing, stores a dictionary that contains cell 
    mask data."""

    image_size: tuple[int, int]
    """Stores the dimensions of the registered session movie in the order of: height, width."""

    transformed_images: dict[str, NDArray[np.uint32 | np.float32]] = field(init=False)
    """Same as 'images', but stores the reference images after multi-day registration deform offsets have been applied 
    to each image to align it to all other processed sessions. Specifically, this represents the session in the 
    registered (deformed) visual space."""

    deform: DeformationFieldBackward = field(init=False)
    """Stores the DeformationField instance used to deform the session to register it to the same visual space as all 
    other sessions. Due to how pirt is implemented and the multiday pipeline is configured, this field always stores 
    the backward-mapped DeformationField."""

    deformed_cell_masks: tuple[dict[str, Any], ...] = field(init=False)
    """Same as 'cell_masks', but stores cell ROI data after multi-day registration deform offsets have been applied 
    to the spatial coordinates of each ROI. Specifically, this represents all session cell masks in the registered 
    (deformed) visual space."""

    shared_cell_masks: tuple[dict[str, Any], ...] = field(init=False)
    """Same as 'cell_masks' but stores cell ROI data for the 'template' (across-session tracked) cells in the shared 
    (deformed / registered) visual space. This data is generated as an intermediate output before masks are 
    backwards-transformed to the original session visual space to generate the final set of 'session_template_masks'."""

    template_cell_masks: tuple[dict[str, Any], ...] = field(init=False)
    """Same as 'cell_masks', but stores cell ROI data for the 'template' (across-session tracked) cells mapped back to 
    the original session's visual space. This allows extracting the fluorescence data for these cells from all 
    individual sessions where the cell was active."""

    @property
    def unregistered_masks(self) -> NDArray[Any]:
        """Returns an image that shows all single-day cell masks in the original visual space of the session."""
        return create_mask_image(self.cell_masks, self.image_size, mark_overlap=True)

    @property
    def registered_masks(self) -> NDArray[Any]:
        """Returns an image that shows all single-day cell masks in the multi-day deformed (registered) visual space."""
        return create_mask_image(self.deformed_cell_masks, image_size=self.deform.field_shape, mark_overlap=True)

    @property
    def shared_template_masks(self) -> NDArray[Any]:
        """Returns an image that shows all template (across-day-tracked) cell masks in the shared \
        (registered / deformed) visual space.
        """
        return create_mask_image(self.shared_cell_masks, self.image_size, mark_overlap=True)

    @property
    def session_template_masks(self) -> NDArray[Any]:
        """Returns an image that shows all template (across-day-tracked) cell masks in the original session visual
        space.
        """
        return create_mask_image(self.template_cell_masks, self.deform.field_shape, mark_overlap=True)


@dataclass()
class MultiDayData:
    """This class stores multiple Session class instances and exposes the API for extracting and adding data generated
    by the multiday suite2p pipeline.

    This class functions as the central multi-day data storage hub. During multi-day registration (step 1) runtime, it
    is iteratively modified with additional processing data. At the end of the registration runtime, the data is cached
    to disk using a dedicated method. The class is designed as a temporary in-memory storage and does not have built-in
    methods to facilitate long-term (disk) storage.
    """

    sessions: list[Session]
    """Stores Session class instances for each session that needs to be registered across days."""

    template_cell_masks: tuple[dict[str, Any], ...] = field(init=False)
    """For each cell ROI tracked over sessions as part of multi-day processing, stores a dictionary that contains cell 
    mask data."""
