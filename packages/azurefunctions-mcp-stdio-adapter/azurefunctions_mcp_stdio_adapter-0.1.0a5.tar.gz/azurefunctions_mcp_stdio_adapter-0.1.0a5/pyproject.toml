[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "azurefunctions-mcp-stdio-adapter"
version = "0.1.0a5"
description = "Azure Functions Python extension for MCP STDIO adapter - converts STDIO MCP servers to streamable HTTP endpoints"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "Microsoft Corporation", email = "azpysdkhelp@microsoft.com" },
]
maintainers = [
    { name = "Microsoft Corporation", email = "azpysdkhelp@microsoft.com" },
]
keywords = [
    "azure", 
    "functions", 
    "azure-functions", 
    "mcp", 
    "stdio", 
    "model-context-protocol",
    "authentication",
    "oauth2",
    "azure-ad"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: System :: Networking",
    "Topic :: Security :: Cryptography",
    "Framework :: AsyncIO",
    "Environment :: Web Environment",
]

dependencies = [
    "azure-functions>=1.18.0,<2.0.0",
    "azurefunctions-extensions-base",
    "azurefunctions-extensions-http-fastapi>=0.1.0",
    "mcp>=1.0.0,<2.0.0",
    "pydantic>=2.0.0,<3.0.0",
    "uv>=0.8.0,<1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-asyncio>=0.23.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "black>=24.0.0,<25.0.0",
    "isort>=5.13.0,<6.0.0",
    "mypy>=1.8.0,<2.0.0",
    "ruff>=0.2.0,<1.0.0",
    "pre-commit>=3.6.0,<4.0.0",
    "bandit>=1.7.0,<2.0.0",
]

test = [
    "pytest>=8.0.0,<9.0.0",
    "pytest-asyncio>=0.23.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "pytest-mock>=3.12.0,<4.0.0",
    "httpx>=0.26.0,<1.0.0",
    "responses>=0.24.0,<1.0.0",
]

build = [
    "build>=1.0.0,<2.0.0",
    "twine>=4.0.0,<6.0.0",
    "hatchling>=1.18.0,<2.0.0",
    "wheel>=0.42.0,<1.0.0",
    "setuptools>=69.0.0,<71.0.0",
    "check-manifest>=0.49,<1.0",
]

docs = [
    "sphinx>=7.0.0,<8.0.0",
    "sphinx-rtd-theme>=2.0.0,<3.0.0",
    "myst-parser>=2.0.0,<4.0.0",
    "sphinx-autodoc-typehints>=1.25.0,<3.0.0",
]

auth = [
    "azure-identity>=1.15.0,<2.0.0",
    "PyJWT>=2.8.0,<3.0.0",
    "cryptography>=41.0.0,<43.0.0",
]

[project.urls]
Homepage = "https://github.com/Azure/azure-functions-python-extensions"
Repository = "https://github.com/Azure/azure-functions-python-extensions.git"
Documentation = "https://docs.microsoft.com/azure/azure-functions/"
"Bug Reports" = "https://github.com/Azure/azure-functions-python-extensions/issues"
"Source Code" = "https://github.com/Azure/azure-functions-python-extensions/tree/main/azurefunctions-mcp-stdio-adapter"
Changelog = "https://github.com/Azure/azure-functions-python-extensions/blob/main/azurefunctions-mcp-stdio-adapter/CHANGELOG.md"
Funding = "https://github.com/sponsors/Azure"

[tool.hatch.build.targets.wheel]
packages = ["azurefunctions"]
exclude = [
    "tests",
    "*.tests",
    "*.tests.*",
    "tests.*",
    "examples",
    "docs",
    "AUTHENTICATION.md",
]

[tool.hatch.build.targets.sdist]
include = [
    "azurefunctions/",
    "README.md",
    "LICENSE",
    "CHANGELOG.md",
]
exclude = [
    "tests/",
    "examples/",
    "docs/",
    "*.pyc",
    "__pycache__/",
    ".pytest_cache/",
    ".coverage",
    "htmlcov/",
]

[tool.hatch.version]
path = "azurefunctions/extensions/mcp_server/__init__.py"

[project.license]
file = "LICENSE"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
src_paths = ["azurefunctions", "tests"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=azurefunctions",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "unit: marks tests as unit tests (deselect with '-m \"not unit\"')",
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

[tool.ruff]
line-length = 88
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "S",   # bandit security
    "T20", # flake8-print
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "S101",  # use of assert
    "T201",  # print statements (allow for debugging)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011", "S101"]

[tool.coverage.run]
source = ["azurefunctions"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
]

# PyPI publishing helper scripts
[tool.hatch.envs.release]
dependencies = [
    "build",
    "twine",
    "wheel",
    "check-manifest",
]

[tool.hatch.envs.release.scripts]
check = "check-manifest"
build = "python -m build"
upload-test = "twine upload --repository testpypi dist/*"
upload = "twine upload dist/*"
clean = "rm -rf dist/ build/ *.egg-info/"

# Development environment
[tool.hatch.envs.default]
dependencies = [
    "pytest",
    "pytest-asyncio", 
    "pytest-cov",
    "pytest-mock",
    "black",
    "isort",
    "mypy",
    "ruff",
]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov=azurefunctions {args:tests}"
lint = "ruff check {args:.}"
format = "black {args:.}"
format-check = "black --check {args:.}"
type-check = "mypy {args:azurefunctions}"
