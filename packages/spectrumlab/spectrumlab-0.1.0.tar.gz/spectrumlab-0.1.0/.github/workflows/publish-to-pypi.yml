name: Publish to PyPI / Github

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:  
    inputs:
      test_only:
        description: 'Only publish to TestPyPI (for testing)'
        required: false
        default: false
        type: boolean
      version:
        description: 'Version to publish (e.g., 0.1.0)'
        required: true
        type: string

jobs:
  build-and-publish-pypi:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install uv
        run: pip install uv

      - name: Install dependencies for validation
        run: pip install toml

      - name: Extract version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION=$(echo $GITHUB_REF | sed -n 's/refs\/tags\/v//p')
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "üè∑Ô∏è Extracted version: $VERSION"

      - name: Process README for PyPI
        run: |
          echo "üìù Processing README for PyPI compatibility..."
          
          # Create a backup of original README
          cp README.md README.original.md
          
          # Process README for PyPI
          python3 << 'EOF'
          import re
          
          # Read the original README
          with open('README.md', 'r', encoding='utf-8') as f:
              content = f.read()
          
          print("üîÑ Processing README content...")
          
          # Convert relative image paths to absolute GitHub URLs
          repo_url = "https://github.com/little1d/SpectrumLab/raw/main"
          content = re.sub(
              r'!\[([^\]]*)\]\((?!https?://)([^)]+)\)',
              f'![\\1]({repo_url}/\\2)',
              content
          )
          
          # Convert relative links to absolute GitHub URLs
          content = re.sub(
              r'\[([^\]]+)\]\((?!https?://)(?!#)([^)]+)\)',
              f'[\\1](https://github.com/little1d/SpectrumLab/blob/main/\\2)',
              content
          )
          
          # Remove GitHub-specific badges that might not render well on PyPI
          # Keep essential badges but remove workflow status badges
          content = re.sub(
              r'!\[.*?\]\(https://github\.com/[^/]+/[^/]+/workflows/.*?\)',
              '',
              content
          )
          
          # Add PyPI-specific header if needed
          pypi_header = "<!-- This README is automatically synced from GitHub repository -->\n\n"
          
          # Only add header if it's not already there
          if not content.startswith("<!-- This README is automatically synced"):
              content = pypi_header + content
          
          # Write the processed README
          with open('README.md', 'w', encoding='utf-8') as f:
              f.write(content)
          
          print("‚úÖ README processed successfully for PyPI")
          EOF

      - name: Update version in pyproject.toml
        run: |
          echo "üìù Updating version to $VERSION in pyproject.toml"
          
          # Show current version before update
          echo "Current version in pyproject.toml:"
          grep 'version = ' pyproject.toml || echo "Version line not found"
          
          # Update version
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml
          
          # Show updated version
          echo "Updated version in pyproject.toml:"
          grep 'version = ' pyproject.toml
          
          # Verify the change was made
          if grep -q "version = \"$VERSION\"" pyproject.toml; then
            echo "‚úÖ Version successfully updated to $VERSION"
          else
            echo "‚ùå Failed to update version"
            exit 1
          fi

      - name: Validate pyproject.toml
        run: |
          echo "üîç Validating pyproject.toml..."
          python3 << 'EOF'
          import toml
          import sys
          
          try:
              with open('pyproject.toml', 'r') as f:
                  data = toml.load(f)
              
              print('‚úÖ pyproject.toml is valid')
              print(f'üì¶ Package: {data["project"]["name"]}')
              print(f'üè∑Ô∏è  Version: {data["project"]["version"]}')
              print(f'üìÑ README: {data["project"].get("readme", "Not specified")}')
              
              # Verify version matches expected
              import os
              expected_version = os.environ.get('VERSION')
              actual_version = data["project"]["version"]
              
              if expected_version and actual_version == expected_version:
                  print(f'‚úÖ Version verification passed: {actual_version}')
              elif expected_version:
                  print(f'‚ùå Version mismatch: expected {expected_version}, got {actual_version}')
                  sys.exit(1)
              else:
                  print(f'‚ÑπÔ∏è  Version check skipped (no expected version)')
                  
          except Exception as e:
              print(f'‚ùå pyproject.toml validation failed: {e}')
              sys.exit(1)
          EOF

      - name: Build package
        run: |
          echo "üî® Building package..."
          uv build
          echo "üì¶ Package built successfully!"
          ls -la dist/

      - name: Verify package contents
        run: |
          echo "üîç Verifying package contents..."
          pip install twine
          twine check dist/*
          echo "‚úÖ Package verification completed!"

      - name: Publish to TestPyPI
        if: github.event_name == 'workflow_dispatch' && inputs.test_only
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.TEST_PYPI_API_KEY }}
        run: |
          if [ -z "$UV_PUBLISH_TOKEN" ]; then
            echo "‚ùå TEST_PYPI_API_KEY secret not found"
            exit 1
          fi
          echo "üöÄ Publishing to TestPyPI..."
          uv publish --publish-url https://test.pypi.org/legacy/
          echo "‚úÖ Published to TestPyPI successfully!"

      - name: Publish to PyPI
        if: |
          (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
          (github.event_name == 'workflow_dispatch' && !inputs.test_only)
        env:
          UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_KEY }}
        run: |
          if [ -z "$UV_PUBLISH_TOKEN" ]; then
            echo "‚ùå PYPI_API_KEY secret not found"
            exit 1
          fi
          echo "üöÄ Publishing to PyPI..."
          uv publish --publish-url https://upload.pypi.org/legacy/
          echo "‚úÖ Published to PyPI successfully!"

      - name: Restore original README
        if: always()
        run: |
          echo "üîÑ Restoring original README..."
          if [ -f README.original.md ]; then
            mv README.original.md README.md
            echo "‚úÖ Original README restored"
          fi

      - name: Upload built artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-publish-pypi
    if: |
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) ||
      (github.event_name == 'workflow_dispatch' && !inputs.test_only)
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist

      - name: Check tag for pre-release
        id: prerelease_check
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # ÊâãÂä®Ëß¶ÂèëÊó∂ÔºåÊ†πÊçÆÁâàÊú¨Âè∑Âà§Êñ≠ÊòØÂê¶‰∏∫È¢ÑÂèëÂ∏ÉÁâàÊú¨
            if [[ "${{ inputs.version }}" == *"alpha"* ]] || [[ "${{ inputs.version }}" == *"beta"* ]] || [[ "${{ inputs.version }}" == *"rc"* ]]; then
              echo "prerelease=true" >> $GITHUB_OUTPUT
            else
              echo "prerelease=false" >> $GITHUB_OUTPUT
            fi
          else
            # Git Ê†áÁ≠æËß¶ÂèëÊó∂ÔºåÊ†πÊçÆÊ†áÁ≠æÂêçÂà§Êñ≠
            if [[ "${{ github.ref_name }}" == *"alpha"* ]] || [[ "${{ github.ref_name }}" == *"beta"* ]] || [[ "${{ github.ref_name }}" == *"rc"* ]]; then
              echo "prerelease=true" >> $GITHUB_OUTPUT
            else
              echo "prerelease=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          echo "üìù Generating release notes..."
          cat > release_notes.md << 'EOF'
          ## üöÄ SpectrumLab Release
          
          This release includes the latest updates to SpectrumLab, a pioneering unified platform for spectroscopy research.
          
          ### üì¶ Installation
          
          ```bash
          pip install spectrumlab
          ```
          
          ### üìö Documentation
          
          - [GitHub Repository](https://github.com/little1d/SpectrumLab)
          - [PyPI Package](https://pypi.org/project/spectrumlab/)
          
          ### üîó Links
          
          - **Source Code**: [GitHub](https://github.com/little1d/SpectrumLab)
          - **Documentation**: [README](https://github.com/little1d/SpectrumLab/blob/main/README.md)
          - **Issues**: [GitHub Issues](https://github.com/little1d/SpectrumLab/issues)
          
          EOF
          echo "‚úÖ Release notes generated"

      - name: Release to GitHub
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', inputs.version) || github.ref_name }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ steps.prerelease_check.outputs.prerelease }}
          files: dist/*

  sync-readme-status:
    name: README Sync Status
    runs-on: ubuntu-latest
    needs: build-and-publish-pypi
    if: always()
    
    steps:
      - name: README Sync Summary
        run: |
          echo "üìã README Sync Summary"
          echo "===================="
          echo "‚úÖ GitHub README: Always stays as-is"
          echo "üîÑ PyPI README: Automatically processed and synced during package build"
          echo "üì¶ Package Status: ${{ needs.build-and-publish-pypi.result }}"
          
          if [ "${{ needs.build-and-publish-pypi.result }}" = "success" ]; then
            echo "üéâ README successfully synced to PyPI!"
          else
            echo "‚ùå README sync failed - check build logs"
          fi