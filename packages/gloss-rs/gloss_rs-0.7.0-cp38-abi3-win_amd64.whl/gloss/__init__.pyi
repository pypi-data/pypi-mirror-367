from __future__ import annotations
from typing import Any, Optional, List, Type, TypeVar, Tuple
import numpy as np
from numpy.typing import NDArray

T = TypeVar('T')
from gloss.types import IndirRemovalPolicy, SplatType
from gloss.log import LogLevel, LogLevelCaps
from gloss.components import Colors, DiffuseImg, Edges, Faces, Normals, Tangents, UVs, Verts, VisLines, VisMesh, VisPoints, ModelMatrix, VisOutline
from gloss.builders import EntityBuilder

class Camera:
    def get_lookat(self) -> Tuple[float, float, float]: ...
    def get_near_far(self) -> Tuple[float, float]: ...
    def get_position(self) -> Tuple[float, float, float]: ...
    def get_up(self) -> Tuple[float, float, float]: ...
    def orbit_y(self, degrees: float) -> None: ...
    def set_extrinsics(self, array: NDArray[np.float32]) -> None: ...
    def set_intrinsics(self, fx: float, fy: float, cx: float, cy: float, near: Optional[float], far: Optional[float]) -> None: ...
    def set_lookat(self, array: NDArray[np.float32]) -> None: ...
    def set_position(self, array: NDArray[np.float32]) -> None: ...
    def set_up(self, array: NDArray[np.float32]) -> None: ...
    def set_width_height(self, width: int, height: int) -> None: ...

class Device:
    pass

class DynImage:
    def channels(self) -> int: ...
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def height(self) -> int: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def new_from_file(self, path: str) -> DynImage: ...
    def new_from_numpy(self, array: NDArray[np.float32]) -> DynImage: ...
    def numpy(self) -> NDArray[np.float32]: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...
    def width(self) -> int: ...

class Entity:
    def apply_model_matrix(self) -> None: ...
    def entity(self) -> int: ...
    def get(self, cls: Type[T]) -> T: ...
    def has(self, cls: Type[T]) -> bool: ...
    def insert(self, component: Any) -> Entity: ...
    def insert_builder(self, builder: Any) -> Entity: ...
    def remove(self, cls: Type[T]) -> bool: ...
    def save_obj(self, path: str) -> None: ...
    def save_ply(self, path: str) -> None: ...

class PluginList:
    pass

class Queue:
    pass

class Scene:
    def add_resource(self, component: Any) -> None: ...
    def get_or_create_entity(self, name: str) -> Entity: ...
    def get_renderable_names(self) -> List[str]: ...
    def get_resource(self, cls: Type[T]) -> T: ...
    def ptr_idx(self) -> int: ...
    def remove_entity(self, name: str) -> None: ...
    def remove_resource(self, cls: Type[T]) -> T: ...

class Texture:
    def depth_linearize(self, device: Device, queue: Queue, near: float, far: float) -> NDArray[np.float32]: ...
    def numpy(self, device: Device, queue: Queue) -> NDArray[np.float32]: ...
    def save_to_file(self, device: Device, queue: Queue, path: str) -> None: ...

class Viewer:
    def add_resource(self, component: Any) -> None: ...
    def get_camera(self) -> Camera: ...
    def get_device(self) -> Device: ...
    def get_final_depth(self) -> Texture: ...
    def get_final_tex(self) -> Texture: ...
    def get_linearised_depth(self) -> NDArray[np.float32]: ...
    def get_or_create_entity(self, name: str) -> Entity: ...
    def get_plugin_list(self) -> PluginList: ...
    def get_plugin_list_ptr(self) -> int: ...
    def get_ptr_viewer(self) -> int: ...
    def get_queue(self) -> Queue: ...
    def get_scene(self) -> Scene: ...
    def insert_plugin(self, plugin: Any) -> None: ...
    def override_dt(*args: Any, **kwargs: Any) -> Any: ...
    def render_next_frame(self) -> None: ...
    def run(self) -> None: ...
    def run_manual_plugins(self) -> None: ...
    def save_last_render(self, path: str) -> None: ...
    def start_frame(self) -> float: ...
    def update(self) -> None: ...
    def update_offscreen_texture(self) -> None: ...

class ViewerDummy:
    def add_resource(self, component: Any) -> None: ...
    def get_camera(self) -> Camera: ...
    def get_or_create_entity(self, name: str) -> Entity: ...
    def get_plugin_list_ptr(self) -> int: ...
    def get_scene(self) -> Scene: ...
    def insert_plugin(self, plugin: Any) -> None: ...
    def run_manual_plugins(self) -> None: ...

class ViewerHeadless:
    def add_resource(self, component: Any) -> None: ...
    def get_camera(self) -> Camera: ...
    def get_device(self) -> Device: ...
    def get_final_depth(self) -> Texture: ...
    def get_final_tex(self) -> Texture: ...
    def get_linearised_depth(self) -> NDArray[np.float32]: ...
    def get_or_create_entity(self, name: str) -> Entity: ...
    def get_plugin_list_ptr(self) -> int: ...
    def get_queue(self) -> Queue: ...
    def get_scene(self) -> Scene: ...
    def insert_plugin(self, plugin: Any) -> None: ...
    def render_from_cam(self, camera: Camera) -> None: ...
    def render_next_frame(self) -> None: ...
    def run_manual_plugins(self) -> None: ...
    def save_last_render(self, path: str) -> None: ...
    def start_frame(self) -> float: ...
    def update(self) -> None: ...

class geom:
    def apply_indirection(self, mat: NDArray[np.uint32], indices_orig2destin: NDArray[np.int32], removal_policy: IndirRemovalPolicy) -> Tuple[NDArray[np.uint32], NDArray[np.bool_]]: ...
    def filter_rows(self, mat: NDArray[np.float32], mask: NDArray[np.bool_], keep: bool) -> Tuple[NDArray[np.float32], NDArray[np.int32], NDArray[np.int32]]: ...
    def get_bounding_points(self, verts: NDArray[np.float32], mm: Optional[ModelMatrix]) -> Tuple[NDArray[np.float32], NDArray[np.float32]]: ...
    def sample_img_with_uvs(self, img: DynImage, uvs: NDArray[np.float32], is_srgb: bool) -> NDArray[np.float32]: ...
    def splat_rows(self, mat: NDArray[np.float32], indices_orig2splatted: NDArray[np.uint32], splat_type: SplatType) -> NDArray[np.float32]: ...
    def transform_verts(self, verts: NDArray[np.float32], mat: ModelMatrix) -> NDArray[np.float32]: ...

