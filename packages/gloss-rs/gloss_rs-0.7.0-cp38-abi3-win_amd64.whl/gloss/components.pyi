from __future__ import annotations
from typing import Any, Optional, List, Type, TypeVar, Tuple
import numpy as np
from numpy.typing import NDArray

T = TypeVar('T')


class Colors:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def numpy(self) -> NDArray[np.float32]: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class DiffuseImg:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class Edges:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def numpy(self) -> NDArray[np.uint32]: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class Faces:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def numpy(self) -> NDArray[np.uint32]: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class ModelMatrix:
    def default(self) -> ModelMatrix: ...
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def numpy(self) -> NDArray[np.float32]: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...
    def with_rotation_axis_angle(self, array: NDArray[np.float32]) -> ModelMatrix: ...
    def with_rotation_euler(self, array: NDArray[np.float32]) -> ModelMatrix: ...
    def with_rotation_rot3(self, rot3: NDArray[np.float32]) -> ModelMatrix: ...
    def with_translation(self, array: NDArray[np.float32]) -> ModelMatrix: ...

class NormalImg:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class Normals:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def numpy(self) -> NDArray[np.float32]: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class Tangents:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def numpy(self) -> NDArray[np.float32]: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class UVs:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def numpy(self) -> NDArray[np.float32]: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class Verts:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def numpy(self) -> NDArray[np.float32]: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class VisLines:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class VisMesh:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class VisOutline:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

class VisPoints:
    def exists(*args: Any, **kwargs: Any) -> Any: ...
    def get(*args: Any, **kwargs: Any) -> Any: ...
    def insert_to_entity(*args: Any, **kwargs: Any) -> Any: ...
    def remove(*args: Any, **kwargs: Any) -> Any: ...

