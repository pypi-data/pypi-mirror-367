[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"

[project]
authors = []
requires-python = ">=3.9, <4.0"
dependencies = [
    "langchain-core<1.0.0,>=0.4.0.dev0",
    "langchain-text-splitters<1.0.0,>=0.3.9",
    "langsmith>=0.1.17",
    "pydantic<3.0.0,>=2.7.4",
    "SQLAlchemy<3,>=1.4",
    "requests<3,>=2",
    "PyYAML>=5.3",
    "async-timeout<5.0.0,>=4.0.0; python_version < \"3.11\"",
]
name = "langchain"
version = "0.4.0.dev0"
description = "Building applications with LLMs through composability"
readme = "README.md"

[project.license]
text = "MIT"

[project.optional-dependencies]
community = [
    "langchain-community",
]
anthropic = [
    "langchain-anthropic",
]
openai = [
    "langchain-openai",
]
google-genai = [
    "langchain-google-genai",
]
fireworks = [
    "langchain-fireworks",
]
ollama = [
    "langchain-ollama",
]
together = [
    "langchain-together",
]
mistralai = [
    "langchain-mistralai",
]
huggingface = [
    "langchain-huggingface",
]
groq = [
    "langchain-groq",
]
deepseek = [
    "langchain-deepseek",
]
perplexity = [
    "langchain-perplexity",
]

[project.urls]
"Source Code" = "https://github.com/langchain-ai/langchain/tree/master/libs/langchain"
"Release Notes" = "https://github.com/langchain-ai/langchain/releases?q=tag%3A%22langchain%3D%3D0%22&expanded=true"
repository = "https://github.com/langchain-ai/langchain"

[dependency-groups]
test = [
    "pytest<9,>=8",
    "pytest-cov<5.0.0,>=4.0.0",
    "pytest-dotenv<1.0.0,>=0.5.2",
    "duckdb-engine<1.0.0,>=0.9.2",
    "pytest-watcher<1.0.0,>=0.2.6",
    "freezegun<2.0.0,>=1.2.2",
    "responses<1.0.0,>=0.22.0",
    "pytest-asyncio<1.0.0,>=0.23.2",
    "lark<2.0.0,>=1.1.5",
    "pandas<3.0.0,>=2.0.0",
    "pytest-mock<4.0.0,>=3.10.0",
    "pytest-socket<1.0.0,>=0.6.0",
    "syrupy<5.0.0,>=4.0.2",
    "requests-mock<2.0.0,>=1.11.0",
    "pytest-xdist<4.0.0,>=3.6.1",
    "blockbuster<1.6,>=1.5.18",
    "cffi<1.17.1; python_version < \"3.10\"",
    "cffi; python_version >= \"3.10\"",
    "langchain-tests",
    "langchain-core",
    "langchain-text-splitters",
    "langchain-openai",
    "toml>=0.10.2",
    "packaging>=24.2",
    "numpy>=1.26.4; python_version<'3.13'",
    "numpy>=2.1.0; python_version>='3.13'",
]
codespell = [
    "codespell<3.0.0,>=2.2.0",
]
test_integration = [
    "vcrpy>=7.0",
    "urllib3<2; python_version < \"3.10\"",
    "wrapt<2.0.0,>=1.15.0",
    "python-dotenv<2.0.0,>=1.0.0",
    "cassio<1.0.0,>=0.1.0",
    "langchainhub<1.0.0,>=0.1.16",
    "langchain-core",
    "langchain-text-splitters",
]
lint = [
    "ruff<0.13,>=0.12.2",
    "cffi<1.17.1; python_version < \"3.10\"",
    "cffi; python_version >= \"3.10\"",
]
typing = [
    "mypy<1.16,>=1.15",
    "types-pyyaml<7.0.0.0,>=6.0.12.2",
    "types-requests<3.0.0.0,>=2.28.11.5",
    "types-toml<1.0.0.0,>=0.10.8.1",
    "types-redis<5.0.0.0,>=4.3.21.6",
    "types-pytz<2024.0.0.0,>=2023.3.0.0",
    "types-chardet<6.0.0.0,>=5.0.4.6",
    "mypy-protobuf<4.0.0,>=3.0.0",
    "langchain-core",
    "langchain-text-splitters",
    "numpy>=1.26.4; python_version < '3.13'",
    "numpy>=2.1.0; python_version >= '3.13'",
]
dev = [
    "jupyter<2.0.0,>=1.0.0",
    "playwright<2.0.0,>=1.28.0",
    "setuptools<68.0.0,>=67.6.1",
    "langchain-core",
    "langchain-text-splitters",
]

[tool.uv.sources.langchain-core]
path = "../core"
editable = true

[tool.uv.sources.langchain-tests]
path = "../standard-tests"
editable = true

[tool.uv.sources.langchain-text-splitters]
path = "../text-splitters"
editable = true

[tool.uv.sources.langchain-openai]
path = "../partners/openai"
editable = true

[tool.ruff]
target-version = "py39"
exclude = [
    "tests/integration_tests/examples/non-utf8-encoding.py",
]

[tool.ruff.lint]
select = [
    "A",
    "ARG",
    "ASYNC",
    "B",
    "C4",
    "COM",
    "D1",
    "DTZ",
    "E",
    "EM",
    "F",
    "FA",
    "FBT",
    "FLY",
    "G",
    "I",
    "ICN",
    "INT",
    "ISC",
    "PERF",
    "PGH",
    "PIE",
    "PL",
    "PT",
    "PTH",
    "PYI",
    "Q",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "SLF",
    "SLOT",
    "T10",
    "T20",
    "TC",
    "TID",
    "TRY",
    "UP",
    "W",
    "YTT",
]
ignore = [
    "COM812",
    "ISC001",
    "PERF203",
    "PLR09",
    "S112",
    "RUF012",
    "TC001",
    "TC002",
    "TC003",
    "UP007",
    "D100",
    "D104",
    "PLC0415",
    "TRY301",
]
unfixable = [
    "B028",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.ruff.lint.extend-per-file-ignores]
"tests/**/*.py" = [
    "D1",
    "S101",
    "S311",
    "SLF001",
    "PLR2004",
]
"langchain/chains/constitutional_ai/principles.py" = [
    "E501",
]
"**/retrievers/*time_weighted_retriever.py" = [
    "DTZ001",
    "DTZ005",
    "DTZ006",
]

[tool.mypy]
strict = "True"
strict_bytes = "True"
ignore_missing_imports = "True"
enable_error_code = "deprecated"
report_deprecated_as_note = "True"
disallow_untyped_calls = "False"
disallow_any_generics = "False"
disallow_untyped_decorators = "False"
warn_return_any = "False"
strict_equality = "False"

[tool.codespell]
skip = ".git,*.pdf,*.svg,*.pdf,*.yaml,*.ipynb,poetry.lock,*.min.js,*.css,package-lock.json,example_data,_dist,examples,*.trig"
ignore-regex = ".*(Stati Uniti|Tense=Pres).*"
ignore-words-list = "momento,collison,ned,foor,reworkd,parth,whats,aapply,mysogyny,unsecure,damon,crate,aadd,symbl,precesses,accademia,nin"

[tool.coverage.run]
omit = [
    "tests/*",
]

[tool.pytest.ini_options]
addopts = "--strict-markers --strict-config --durations=5 --snapshot-warn-unused -vv"
markers = [
    "requires: mark tests as requiring a specific library",
    "scheduled: mark tests to run in scheduled testing",
    "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::langchain_core._api.beta_decorator.LangChainBetaWarning",
    "ignore::langchain_core._api.deprecation.LangChainDeprecationWarning:tests",
    "ignore::langchain_core._api.deprecation.LangChainPendingDeprecationWarning:tests",
]
