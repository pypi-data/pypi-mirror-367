[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "moml-ca"
version = "0.1.0"
description = "Molecular Machine Learning for Chemical Applications - A comprehensive Python package for molecular representation learning and property prediction using Graph Neural Networks"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "SAKETH11111", email = "sakethbaddam10@gmail.com"},
]
keywords = ["molecular", "machine learning", "graph neural networks", "chemistry", "PFAS"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Topic :: Scientific/Engineering :: Chemistry",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
dependencies = [
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "pandas>=1.3.0",
    "torch>=1.12.0",
    "torch-geometric>=2.0.0",
    "torch-scatter>=2.1.0",
    "rdkit>=2022.03.1",
    "openmm>=7.5.0",
    "mdtraj>=1.9.5",
    "MDAnalysis>=2.4.0",
    "pdbfixer>=1.11",
    "dask>=2022.2.0",
    "distributed>=2022.2.0",
    "pyyaml>=6.0",
    "python-json-logger>=2.0.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "scikit-learn>=1.0.0",
    "networkx>=2.6.0",
    "plotly>=5.3.0",
    "h5py>=3.6.0",
    "luigi>=3.0.0",
    "mlflow>=2.0.0",
    "tqdm>=4.62.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "black>=21.12b0",
    "flake8>=4.0.0",
    "isort>=5.10.0",
]
ff = [
    "openff-toolkit>=0.11.0",
]

[project.urls]
Homepage = "https://github.com/SAKETH11111/MoML-CA"
Repository = "https://github.com/SAKETH11111/MoML-CA"
Issues = "https://github.com/SAKETH11111/MoML-CA/issues"

[project.scripts]
moml-pipeline = "moml.pipeline.pipeline_orchestrator:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["moml*"]
exclude = ["tests*", "scripts*"]

[tool.black]
line-length = 79
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | data
)/
'''

[tool.isort]
profile = "black"
line_length = 79
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 79
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    "data",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --strict-markers --tb=short"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["moml"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]