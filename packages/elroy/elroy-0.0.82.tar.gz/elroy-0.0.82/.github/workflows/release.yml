name: Create and Publish Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags
    branches-ignore:
      - '**'  # Ignore branch pushes, only trigger on tags

jobs:
  pytest:
    environment:
      name: release
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector:v0.5.1
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: elroy
          POSTGRES_USER: elroy
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: ./.github/actions/setup-elroy-env
    - uses: ./.github/actions/setup-postgres

    - name: Run Tests
      run: |
        source .venv/bin/activate
        pytest -x --chat-models gpt-4o-mini --db-type "postgres,sqlite"
      env:
        PYTHONWARNINGS: "ignore::DeprecationWarning"
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

  test-install:
    environment:
      name: release
    runs-on: ubuntu-latest
    services:
      postgres:
        image: ankane/pgvector:v0.5.1
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: elroy
          POSTGRES_USER: elroy
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: ./.github/actions/setup-postgres
    - uses: ./.github/actions/build-elroy

    - name: Test built package
      run: |
        source .venv/bin/activate
        uv pip install ./dist/elroy-*.whl
        bash scripts/test_cli.sh
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}

  publish-pypi:
    environment:
      name: release
    needs: [pytest, test-install]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: ./.github/actions/build-elroy

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        pip install --user uv
        uv venv
        source .venv/bin/activate
        uv pip install twine
        twine upload dist/*

  create-github-release:
    environment:
      name: release
    needs: [pytest, test-install]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Create GitHub Release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
        body_path: CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  wait-five-minutes:
    environment:
      name: release
    needs: [publish-pypi]
    runs-on: ubuntu-latest
    steps:
    - name: Wait 5 minutes for PyPI propagation
      run: |
        echo "Waiting 5 minutes for PyPI package propagation..."
        sleep 300

  publish-docker:
    environment:
      name: release
    needs: [pytest, test-install, wait-five-minutes]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Get version from tag
      id: version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GH_PUBLISHING_TOKEN}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        build-args: |
          ELROY_VERSION=${{ steps.version.outputs.version }}
        tags: |
          ghcr.io/elroy-bot/elroy:latest
          ghcr.io/elroy-bot/elroy:${{ steps.version.outputs.version }}


  update-stable-and-deploy-branch:
    environment:
      name: release
    needs: [publish-docker]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - name: Update stable branch
      run: |
        git config --global user.name 'GitHub Actions'
        git config --global user.email 'actions@github.com'
        git checkout stable || git checkout -b stable
        git reset --hard ${GITHUB_REF}
        git push -f origin stable
        git checkout deploy || git checkout -b deploy
        git reset --hard ${GITHUB_REF}
        git push -f origin deploy

  announce-discord:
    environment:
      name: release
    needs: [publish-docker, update-stable-and-deploy-branch, wait-five-minutes]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: ./.github/actions/setup-elroy-env

    - name: Install discord.py
      run: |
        pip install --user uv
        uv venv
        source .venv/bin/activate
        uv pip install discord.py

    - name: Announce on Discord
      env:
        ELROY_DISCORD_TOKEN: ${{ secrets.ELROY_DISCORD_TOKEN }}
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        source .venv/bin/activate
        python scripts/discord/announce_release.py $VERSION

