from typing import Any, Dict


async def gather_and_compile(state: Dict[str, Any]) -> Dict[str, Any]:
    """Gather all subtask results and compile them into a final response."""
    try:
        # Check for validation errors
        if state.get("error"):
            return {
                **state,
                "final_output": (
                    f"# Error\n\n{state['error']}\n\n"
                    "Please check your input and try again."
                ),
                "subtask_count": 0,
            }

        original_query = state["original_query"]
        subtask_results = state["subtask_results"]

        if not subtask_results:
            return {
                **state,
                "final_output": (
                    "# No Results\n\n"
                    "No subtasks were processed successfully. "
                    "Please check your configuration and try again."
                ),
                "subtask_count": 0,
            }

        # Compile sections from subtask results
        sections = []
        successful_tasks = 0

        for item in subtask_results:
            task = item.get("task", "Unknown Task")
            result = item.get("result", "")

            # Check if this was a successful result
            if (
                result
                and not result.startswith("[Error:")
                and not result.startswith("[Info:")
            ):
                successful_tasks += 1

            sections.append(f"### {task}\n\n{result}")

        # Create final output
        conclusion_text = (
            "The above findings provide a comprehensive analysis addressing the "
            "original research query. Each section contains detailed information "
            "from web search and internal knowledge base sources."
        )

        final_output = f"""# Research Response: {original_query}

## Summary

This research response addresses the query: "{original_query}"

**Tasks Processed:** {len(subtask_results)}
**Successful Tasks:** {successful_tasks}

## Detailed Findings

{chr(10).join(sections)}

## Conclusion

{conclusion_text}

---
*Generated by PromptLifter - LLM-powered contextual expansion*
"""

        return {
            **state,
            "final_output": final_output,
            "subtask_count": len(subtask_results),
        }

    except Exception as e:
        return {
            **state,
            "final_output": (
                f"# Error\n\nAn error occurred while compiling results: {str(e)}\n\n"
                "Please try again or check your configuration."
            ),
            "subtask_count": 0,
        }
