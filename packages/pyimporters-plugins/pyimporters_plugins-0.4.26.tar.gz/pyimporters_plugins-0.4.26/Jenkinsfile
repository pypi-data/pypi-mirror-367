#!groovy
// to test groovy snippets online:
//    https://www.jdoodle.com/execute-groovy-online

pipeline {

  agent none

  // variables declared in environment block can not be changed in any steps/stages
  environment {
    PATH_HOME = '/home/jenkins'
    TEST_REPORT_DIR = '/root/test-reports'
    PYTHONPYCACHEPREFIX = '/tmp/.pytest_cache'
    PYTHONDONTWRITEBYTECODE = '1'
    JENKINS_UIDGID = '1004:1004'

    MAJOR_VERSION = '0'
    MINOR_VERSION = '4'
  }

  stages {
    stage('Catch build termination') {
      agent {
        node {
          label 'built-in'
          customWorkspace "${PATH_HOME}/${JOB_NAME}"
        }
      }
      stages {
        stage('Analyse build cause') {
          steps {
            script {
              analyseBuildCause()
            }
          }
        }
      }
    }

    stage('Generate new version') {
      when {
        environment name: 'SKIP_JOB', value: '0'
      }

      agent {
        node {
          label 'built-in'
          customWorkspace "${PATH_HOME}/${JOB_NAME}"
        }
      }

      stages {
        stage('Add credentials') {
          steps {
            script {
              // Add password file for flit publishing
              sh "cp ${PATH_HOME}/.passwd-pypi .env"
            }
          }
        }

        stage('Commit new version') {
          steps {
            script {
              println("attempt to publish ${JOB_NAME} with version: ${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD_ID}")

              // push updates of file __init__.py
              withCredentials([gitUsernamePassword(credentialsId: 'bitbucket-user', gitToolName: 'git-tool')]) {
                sh 'git pull'
                sh "echo '\"\"\"Sherpa knowledge import plugins\"\"\"' > pyimporters_plugins/__init__.py"
                sh "echo '__version__ = \"${MAJOR_VERSION}.${MINOR_VERSION}.${BUILD_ID}\"' >> pyimporters_plugins/__init__.py"
                sh 'git commit pyimporters_plugins/__init__.py -m "[Jenkins CI] Commit on version files" || echo "No changes to commit"'
                sh 'git push'
              }
            }
          }
        }
      }
    }

    stage('Build, test and publish') {
      when {
        beforeAgent true
        environment name: 'SKIP_JOB', value: '0'
      }

      agent {
        // dockerfile agent
        // Mounted volume for Junit reports
        //   - docker: /root/test-reports
        //   - host  : /tmp/_${JOB_NAME}/test-reports
        dockerfile {
          label 'built-in'
          customWorkspace "${PATH_HOME}/${JOB_NAME}"
          filename 'Dockerfile'
          args "-u root --privileged -v /tmp/_${JOB_NAME}/test-reports:${TEST_REPORT_DIR}"
        }
      }

      stages {
        stage('Install flit & flake8') {
          steps {
            sh 'python -m pip install pip==22.0.3'
            sh 'pip install --no-cache-dir flit==3.2.0 flake8==3.9.2 flakehell'
            sh 'flit install'
          }
        }

        stage('Lint python code') {
          steps {
            sh 'flakehell lint'
          }
        }

        stage('Test with pytest') {
          steps {
            // purge python cache from any previous run
            sh "rm -rf ${PYTHONPYCACHEPREFIX}"
            // remove any previous results.xml file
            sh "rm -f ${TEST_REPORT_DIR}/results.xml"
            sh "pytest --verbose -o cache_dir=${PYTHONPYCACHEPREFIX} --junit-xml ${TEST_REPORT_DIR}/results.xml"
            // purge python cache
            sh "rm -rf ${PYTHONPYCACHEPREFIX}"
          }
        }

        stage('Publish on PyPI') {
          environment {
            FLIT_USERNAME = getUserName '.env'
            FLIT_PASSWORD = getUserPass '.env'
          }
          steps {
            // remove any previous folder dist
            sh 'rm -rf dist'
            // create (as root) folder dist
            sh 'mkdir dist'
            // pull recent updates of file __init__.py
            withCredentials([gitUsernamePassword(credentialsId: 'bitbucket-user', gitToolName: 'git-tool')]) {
              sh 'git config --global pull.rebase false'
              sh "git config --global --add safe.directory ${WORKSPACE}"
              sh 'git pull'
            }
            // put back owner of .git folder
            sh "chown -R ${JENKINS_UIDGID} ${WORKSPACE}/.git"
            // put back owner of pulled file
            sh "chown ${JENKINS_UIDGID} pyimporters_plugins/__init__.py"
            // get git status
            sh 'git status'
            // publish on PyPI
            sh '''
               export COMMIT_VERSION=$( cat pyimporters_plugins/__init__.py|grep version|cut -d '"' -f2|tr -s '[:blank:]' )
               export BUILD_VERSION="${MAJOR_VERSION}"."${MINOR_VERSION}"."${BUILD_ID}"
               if [ "${COMMIT_VERSION}" = "${BUILD_VERSION}" ] ; then flit publish ; fi
               '''
            // remove current folder dist
            sh 'rm -rf dist'
            // remove current folder .hypothesis
            sh 'rm -rf .hypothesis'
            // remove current folder .tox
            sh 'rm -rf .tox'
          }
        }
      }
    }
  }

  post {
    // only triggered when blue or green sign
    success {
      // node is specified here to get an agent
      node('built-in') {
        // keep using customWorkspace to store Junit report
        ws("${PATH_HOME}/${JOB_NAME}") {
          script {
            try {
              sh 'rm -f results.xml'
              sh "cp /tmp/_${JOB_NAME}/test-reports/results.xml results.xml"
            } catch (Exception e) {
              println 'Exception occurred: ' + e.toString()
            }
            try {
              junit 'results.xml'
            } catch (Exception e) {
              println 'Exception occurred: ' + e.toString()
            }
            if (sendEmailNotif("${PATH_HOME}/${JOB_NAME}", "${BUILD_NUMBER}")) {
              println 'sending Success Build notification'
              def CUSTOM_SUBJECT = '[CI - Jenkinzz SUCCESS] ' + CUSTOM_SUBJECT
              emailext(
                  mimeType: 'text/html',
                  subject: CUSTOM_SUBJECT,
                  body: '${DEFAULT_CONTENT}',
                  replyTo: '${DEFAULT_REPLYTO}',
                  to: '${ADMIN_RECIPIENTS}' + ';' + CUSTOM_RECIPIENTS
              )
              switchEmailNotif(false, BUILD_NUMBER)
            } else {
              println 'preventing Success Build notification'
            }
          }
        }
      }
    }
    // triggered when red sign
    failure {
      // node is specified here to get an agent
      node('built-in') {
        // keep using customWorkspace to store Junit report
        ws("${PATH_HOME}/${JOB_NAME}") {
          script {
            try {
              sh 'rm -f results.xml'
              sh "cp /tmp/_${JOB_NAME}/test-reports/results.xml results.xml"
            } catch (Exception e) {
              println 'Exception occurred: ' + e.toString()
            }
            try {
              junit 'results.xml'
            } catch (Exception e) {
              println 'Exception occurred: ' + e.toString()
            }
            println 'sending Failure Build notification'
            def CUSTOM_SUBJECT = '[CI - Jenkinzz FAILURE] ' + CUSTOM_SUBJECT
            emailext(
                mimeType: 'text/html',
                subject: CUSTOM_SUBJECT,
                body: '${DEFAULT_CONTENT}',
                replyTo: '${DEFAULT_REPLYTO}',
                to: '${ADMIN_RECIPIENTS}' + ';' + CUSTOM_RECIPIENTS
            )
          }
        }
      }
    }
    // triggered when black sign
    aborted {
      println 'post-declarative message: abort job'
    }
    // trigger every-works
    //always {
    //}
  }
}

// return FLIT_USERNAME from given file
def getUserName(path) {
  def USERNAME = sh(
                 script: "grep FLIT_USERNAME ${path}|cut -d '=' -f2",
                 returnStdout: true
               ).trim()
  return USERNAME
}

// return FLIT_PASSWORD from given file
def getUserPass(path) {
  def USERPASS = sh(
                 script: "grep FLIT_PASSWORD ${path}|cut -d '=' -f2",
                 returnStdout: true
               ).trim()
  return USERPASS
}

// create/remove emailNotif file to trigger email notification
def switchEmailNotif(toggle, build) {
  if (toggle) {
    sh 'echo ' + build + ' > .emailNotif'
  } else {
    if (build == BUILD_NUMBER) {
      sh 'rm -f .emailNotif'
    }
  }
}

// return true if emailNotif file present
boolean sendEmailNotif(path, build) {
  def emailNotif = sh(
                 script: "find ${path} -name '.emailNotif'|wc -l",
                 returnStdout: true
               ).trim()
  def emailContent = ''
  if (emailNotif == '1') {
    emailContent = sh(
                     script: "cat ${path}/.emailNotif",
                     returnStdout: true
                   ).trim()
  }
  return (emailContent == build)
}

def analyseBuildCause() {
  // Catch if build has been triggered by User
  boolean isStartedByUser = currentBuild.rawBuild.getCause(hudson.model.Cause$UserIdCause) != null
  if (isStartedByUser) {
    env.SKIP_JOB = '0'
    env.CUSTOM_SUBJECT = JOB_NAME + ' - Manual Build #' + BUILD_NUMBER
    env.CUSTOM_RECIPIENTS = emailextrecipients([[$class: 'RequesterRecipientProvider']])
    switchEmailNotif(true, BUILD_NUMBER)
    println 'Job started by User, proceeding'
  }

  // Catch if build has been triggered by User Commit
  boolean isStartedByCommit = currentBuild.rawBuild.getCause(jenkins.branch.BranchEventCause) != null
  if (isStartedByCommit) {
    env.SKIP_JOB = '0'
    env.CUSTOM_SUBJECT = JOB_NAME + ' - SCM Build #' + BUILD_NUMBER
    env.CUSTOM_RECIPIENTS = emailextrecipients([[$class: 'DevelopersRecipientProvider'], [$class:'CulpritsRecipientProvider']])
    switchEmailNotif(true, BUILD_NUMBER)
    println 'Job started by User Commit, proceeding'
  }

  // Catch if build has been triggered by cron
  boolean isStartedByCron = currentBuild.rawBuild.getCause(hudson.triggers.TimerTrigger$TimerTriggerCause) != null
  if (isStartedByCron) {
    env.SKIP_JOB = '0'
    env.CUSTOM_SUBJECT = JOB_NAME + ' - CRON Build #' + BUILD_NUMBER
    env.CUSTOM_RECIPIENTS = emailextrecipients([[$class: 'DevelopersRecipientProvider'], [$class:'CulpritsRecipientProvider']])
    switchEmailNotif(true, BUILD_NUMBER)
    println 'Job started by Cron, proceeding'
  }

  // Catch if build has been triggered by branch discovery
  boolean isStartedByBranchDiscovery = currentBuild.rawBuild.getCause(jenkins.branch.BranchIndexingCause) != null
  if (isStartedByBranchDiscovery) {
    env.SKIP_JOB = '0'
    env.CUSTOM_SUBJECT = JOB_NAME + ' - BranchDiscovery Build #' + BUILD_NUMBER
    env.CUSTOM_RECIPIENTS = emailextrecipients([[$class: 'DevelopersRecipientProvider'], [$class:'CulpritsRecipientProvider']])
    switchEmailNotif(true, BUILD_NUMBER)
    println 'Job started by Branch Discovery, proceeding'
  }
}
