#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è OFFERS_CHECK_DATA_DIR.
"""

import os
import sys
import tempfile
import shutil
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.insert(0, str(Path(__file__).parent))

from offers_check_marketplaces.user_data_manager import (
    UserDataManager, PathResolver, PlatformDetector,
    DirectoryCreationError, PermissionError
)


def test_environment_variable_override():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    print("=== –¢–µ—Å—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ OFFERS_CHECK_DATA_DIR ===")
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    with tempfile.TemporaryDirectory() as temp_dir:
        custom_data_dir = Path(temp_dir) / "custom_offers_data"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['OFFERS_CHECK_DATA_DIR'] = str(custom_data_dir)
        
        try:
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö
            manager = UserDataManager()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            success = manager.initialize_directories()
            assert success, "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —É—Å–ø–µ—à–Ω–æ–π"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
            data_dir = manager.get_data_directory()
            assert data_dir == custom_data_dir, f"–û–∂–∏–¥–∞–ª–∞—Å—å {custom_data_dir}, –ø–æ–ª—É—á–µ–Ω–∞ {data_dir}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
            assert custom_data_dir.exists(), "–ö–∞—Å—Ç–æ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞"
            assert (custom_data_dir / "database").exists(), "–ü–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è database –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
            assert (custom_data_dir / "cache").exists(), "–ü–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è cache –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
            assert (custom_data_dir / "logs").exists(), "–ü–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
            assert (custom_data_dir / "temp").exists(), "–ü–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è temp –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
            db_path = manager.get_database_path()
            expected_db_path = custom_data_dir / "database" / "products.db"
            assert db_path == expected_db_path, f"–û–∂–∏–¥–∞–ª—Å—è –ø—É—Ç—å –∫ –ë–î {expected_db_path}, –ø–æ–ª—É—á–µ–Ω {db_path}"
            
            print(f"‚úì –ö–∞—Å—Ç–æ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {custom_data_dir}")
            print(f"‚úì –ü—É—Ç—å –∫ –ë–î: {db_path}")
            print(f"‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
        finally:
            # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if 'OFFERS_CHECK_DATA_DIR' in os.environ:
                del os.environ['OFFERS_CHECK_DATA_DIR']


def test_path_resolver_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—É—Ç–µ–π –≤ PathResolver."""
    print("\n=== –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Ç–µ–π ===")
    
    resolver = PathResolver(PlatformDetector())
    
    # –¢–µ—Å—Ç —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø—É—Ç–µ–º
    with tempfile.TemporaryDirectory() as temp_dir:
        custom_path = Path(temp_dir) / "valid_path"
        os.environ['OFFERS_CHECK_DATA_DIR'] = str(custom_path)
        
        try:
            resolved_path = resolver.resolve_data_directory()
            assert resolved_path == custom_path, "–ü—É—Ç—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
            assert custom_path.exists(), "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞"
            print(f"‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—É—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω: {resolved_path}")
            
        finally:
            if 'OFFERS_CHECK_DATA_DIR' in os.environ:
                del os.environ['OFFERS_CHECK_DATA_DIR']
    
    # –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –ø—É—Ç–µ–º (—Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏)
    with tempfile.NamedTemporaryFile(delete=False) as temp_file:
        try:
            os.environ['OFFERS_CHECK_DATA_DIR'] = temp_file.name
            
            try:
                resolver.resolve_data_directory()
                assert False, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±—Ä–æ—à–µ–Ω–∞ –æ—à–∏–±–∫–∞ –¥–ª—è —Ñ–∞–π–ª–∞ –≤–º–µ—Å—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
            except DirectoryCreationError as e:
                print(f"‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∞–π–ª –≤–º–µ—Å—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {e}")
            
        finally:
            if 'OFFERS_CHECK_DATA_DIR' in os.environ:
                del os.environ['OFFERS_CHECK_DATA_DIR']
            os.unlink(temp_file.name)


def test_permission_handling():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞."""
    print("\n=== –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ ===")
    
    # –≠—Ç–æ—Ç —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ Unix-—Å–∏—Å—Ç–µ–º–∞—Ö
    if os.name != 'posix':
        print("‚ö† –¢–µ—Å—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ Unix —Å–∏—Å—Ç–µ–º–∞)")
        return
    
    resolver = PathResolver(PlatformDetector())
    
    with tempfile.TemporaryDirectory() as temp_dir:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –±–µ–∑ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å
        restricted_dir = Path(temp_dir) / "restricted"
        restricted_dir.mkdir()
        restricted_dir.chmod(0o444)  # –¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ
        
        custom_path = restricted_dir / "data"
        os.environ['OFFERS_CHECK_DATA_DIR'] = str(custom_path)
        
        try:
            resolver.resolve_data_directory()
            assert False, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±—Ä–æ—à–µ–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
        except (DirectoryCreationError, PermissionError) as e:
            print(f"‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞: {e}")
        finally:
            if 'OFFERS_CHECK_DATA_DIR' in os.environ:
                del os.environ['OFFERS_CHECK_DATA_DIR']
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            restricted_dir.chmod(0o755)


def test_standard_directory_fallback():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π."""
    print("\n=== –¢–µ—Å—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ===")
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
    if 'OFFERS_CHECK_DATA_DIR' in os.environ:
        del os.environ['OFFERS_CHECK_DATA_DIR']
    
    resolver = PathResolver(PlatformDetector())
    resolved_path = resolver.resolve_data_directory()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å
    detector = PlatformDetector()
    expected_base = detector.get_user_data_dir() / "offers-check-marketplaces"
    
    assert resolved_path == expected_base, f"–û–∂–∏–¥–∞–ª—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å {expected_base}, –ø–æ–ª—É—á–µ–Ω {resolved_path}"
    print(f"‚úì –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {resolved_path}")


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è OFFERS_CHECK_DATA_DIR\n")
    
    try:
        test_environment_variable_override()
        test_path_resolver_validation()
        test_permission_handling()
        test_standard_directory_fallback()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()