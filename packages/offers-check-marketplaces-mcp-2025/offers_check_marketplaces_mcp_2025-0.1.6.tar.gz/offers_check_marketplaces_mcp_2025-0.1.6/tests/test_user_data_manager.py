#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.
"""

import os
import sys
import tempfile
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.insert(0, str(Path(__file__).parent))

from offers_check_marketplaces.user_data_manager import (
    UserDataManager, 
    PlatformDetector, 
    Platform,
    PlatformConfig,
    DirectoryManager
)


def test_platform_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
    print("=== –¢–ï–°–¢ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–õ–ê–¢–§–û–†–ú–´ ===")
    
    detector = PlatformDetector()
    platform = detector.get_platform()
    
    print(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.value}")
    
    data_dir = detector.get_user_data_dir()
    cache_dir = detector.get_user_cache_dir()
    
    print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö: {data_dir}")
    print(f"–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–µ—à–∞: {cache_dir}")
    print(f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ XDG: {detector.supports_xdg_base_directory()}")
    
    return True


def test_platform_config():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
    print("\n=== –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ü–õ–ê–¢–§–û–†–ú–´ ===")
    
    config = PlatformConfig.for_current_platform()
    
    print(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {config.platform.value}")
    print(f"–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {config.base_directory}")
    print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–µ—à–∞: {config.cache_directory}")
    print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: {config.logs_directory}")
    print(f"–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {config.permissions}")
    
    return True


def test_directory_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
    print("\n=== –¢–ï–°–¢ –°–¢–†–£–ö–¢–£–†–´ –î–ò–†–ï–ö–¢–û–†–ò–ô ===")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    with tempfile.TemporaryDirectory() as temp_dir:
        base_path = Path(temp_dir) / "test_offers_check"
        
        config = PlatformConfig.for_current_platform()
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        config.base_directory = base_path
        config.cache_directory = base_path / "cache"
        config.logs_directory = base_path / "logs"
        
        manager = DirectoryManager(config)
        
        try:
            structure = manager.create_directory_structure(base_path)
            
            print(f"–°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤: {base_path}")
            print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {structure.database}")
            print(f"–ö–µ—à: {structure.cache}")
            print(f"–õ–æ–≥–∏: {structure.logs}")
            print(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ: {structure.temp}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã
            assert structure.base.exists(), "–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
            assert structure.database.exists(), "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ë–î –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
            assert structure.cache.exists(), "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–µ—à–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
            assert structure.logs.exists(), "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
            assert structure.temp.exists(), "–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            assert manager.validate_directory_access(structure.base), "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"
            
            print("‚úÖ –í—Å–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}")
            return False


def test_environment_override():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    print("\n=== –¢–ï–°–¢ –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ß–ï–†–ï–ó –ü–ï–†–ï–ú–ï–ù–ù–£–Æ –û–ö–†–£–ñ–ï–ù–ò–Ø ===")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        custom_path = Path(temp_dir) / "custom_data"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
        os.environ['OFFERS_CHECK_DATA_DIR'] = str(custom_path)
        
        try:
            manager = UserDataManager()
            data_dir = manager.get_data_directory()
            
            print(f"–ö–∞—Å—Ç–æ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {data_dir}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—É—Ç—å
            assert str(data_dir) == str(custom_path), f"–û–∂–∏–¥–∞–ª—Å—è {custom_path}, –ø–æ–ª—É—á–µ–Ω {data_dir}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞
            assert data_dir.exists(), "–ö–∞—Å—Ç–æ–º–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
            
            print("‚úÖ –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: {e}")
            return False
        finally:
            # –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if 'OFFERS_CHECK_DATA_DIR' in os.environ:
                del os.environ['OFFERS_CHECK_DATA_DIR']


def test_user_data_manager():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å UserDataManager."""
    print("\n=== –¢–ï–°–¢ USER DATA MANAGER ===")
    
    with tempfile.TemporaryDirectory() as temp_dir:
        custom_path = Path(temp_dir) / "test_data"
        os.environ['OFFERS_CHECK_DATA_DIR'] = str(custom_path)
        
        try:
            manager = UserDataManager()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–µ–π
            data_dir = manager.get_data_directory()
            db_path = manager.get_database_path()
            cache_dir = manager.get_cache_directory()
            logs_dir = manager.get_logs_directory()
            temp_dir = manager.get_temp_directory()
            
            print(f"–î–∞–Ω–Ω—ã–µ: {data_dir}")
            print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_path}")
            print(f"–ö–µ—à: {cache_dir}")
            print(f"–õ–æ–≥–∏: {logs_dir}")
            print(f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ: {temp_dir}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø—É—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            assert data_dir.exists(), "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
            assert db_path.parent.exists(), "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ë–î –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
            assert cache_dir.exists(), "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–µ—à–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
            assert logs_dir.exists(), "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
            assert temp_dir.exists(), "–í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞"
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            info = manager.get_directory_info()
            print(f"\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö:")
            for key, value in info.items():
                print(f"  {key}: {value}")
            
            print("‚úÖ UserDataManager —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ UserDataManager: {e}")
            import traceback
            traceback.print_exc()
            return False
        finally:
            if 'OFFERS_CHECK_DATA_DIR' in os.environ:
                del os.environ['OFFERS_CHECK_DATA_DIR']


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã."""
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ú–ò –î–ê–ù–ù–´–ú–ò")
    print("=" * 60)
    
    tests = [
        test_platform_detection,
        test_platform_config,
        test_directory_structure,
        test_environment_override,
        test_user_data_manager
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            if test():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå –¢–µ—Å—Ç {test.__name__} —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π: {e}")
            failed += 1
    
    print("\n" + "=" * 60)
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
    print(f"üìä –í—Å–µ–≥–æ: {passed + failed}")
    
    if failed == 0:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        return 0
    else:
        print(f"\nüí• {failed} –¢–ï–°–¢–û–í –ü–†–û–í–ê–õ–ï–ù–û")
        return 1


if __name__ == "__main__":
    sys.exit(main())