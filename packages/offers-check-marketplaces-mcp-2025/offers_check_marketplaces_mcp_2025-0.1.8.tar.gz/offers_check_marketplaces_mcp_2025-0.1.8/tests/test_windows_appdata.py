#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Windows APPDATA –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
"""

import os
import sys
import tempfile
from pathlib import Path
from unittest.mock import patch, MagicMock

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é
sys.path.insert(0, str(Path(__file__).parent))

from offers_check_marketplaces.user_data_manager import (
    PlatformDetector, Platform, PlatformConfig, UserDataManager
)


def test_windows_appdata_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ APPDATA –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ Windows."""
    print("=== –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è APPDATA –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ===")
    
    detector = PlatformDetector()
    
    # –ú–æ–∫–∞–µ–º Windows –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
    with patch.object(detector, 'get_platform', return_value=Platform.WINDOWS):
        # –¢–µ—Å—Ç —Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π APPDATA
        with patch.dict(os.environ, {'APPDATA': 'C:\\Users\\Test\\AppData\\Roaming'}):
            data_dir = detector.get_user_data_dir()
            print(f"APPDATA –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {data_dir}")
            assert str(data_dir) == 'C:\\Users\\Test\\AppData\\Roaming'
        
        # –¢–µ—Å—Ç –±–µ–∑ APPDATA, –Ω–æ —Å USERPROFILE
        with patch.dict(os.environ, {'USERPROFILE': 'C:\\Users\\Test'}, clear=True):
            with patch('pathlib.Path.exists', return_value=True):
                data_dir = detector.get_user_data_dir()
                print(f"USERPROFILE/AppData/Roaming –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {data_dir}")
                expected = Path('C:\\Users\\Test') / 'AppData' / 'Roaming'
                assert data_dir == expected
        
        # –¢–µ—Å—Ç —Å HOMEDRIVE –∏ HOMEPATH
        with patch.dict(os.environ, {
            'HOMEDRIVE': 'C:',
            'HOMEPATH': '\\Users\\Test'
        }, clear=True):
            with patch('pathlib.Path.exists', return_value=True):
                data_dir = detector.get_user_data_dir()
                print(f"HOMEDRIVE/HOMEPATH/AppData/Roaming –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {data_dir}")
                expected = Path('C:\\Users\\Test') / 'AppData' / 'Roaming'
                assert data_dir == expected
    
    print("‚úì –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è APPDATA –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")


def test_windows_cache_directory():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–µ—à–∞ –Ω–∞ Windows."""
    print("\n=== –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–µ—à–∞ Windows ===")
    
    detector = PlatformDetector()
    
    with patch.object(detector, 'get_platform', return_value=Platform.WINDOWS):
        # –¢–µ—Å—Ç —Å LOCALAPPDATA
        with patch.dict(os.environ, {'LOCALAPPDATA': 'C:\\Users\\Test\\AppData\\Local'}):
            with patch('pathlib.Path.exists', return_value=True):
                cache_dir = detector.get_user_cache_dir()
                print(f"LOCALAPPDATA –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {cache_dir}")
                assert str(cache_dir) == 'C:\\Users\\Test\\AppData\\Local'
        
        # –¢–µ—Å—Ç fallback –∫ APPDATA
        with patch.dict(os.environ, {'APPDATA': 'C:\\Users\\Test\\AppData\\Roaming'}, clear=True):
            with patch('pathlib.Path.exists', return_value=True):
                cache_dir = detector.get_user_cache_dir()
                print(f"Fallback –∫ APPDATA: {cache_dir}")
                assert str(cache_dir) == 'C:\\Users\\Test\\AppData\\Roaming'
    
    print("‚úì –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∫–µ—à–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")


def test_windows_directory_structure():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è Windows."""
    print("\n=== –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π Windows ===")
    
    with patch('sys.platform', 'win32'):
        with patch.dict(os.environ, {
            'APPDATA': 'C:\\Users\\Test\\AppData\\Roaming',
            'LOCALAPPDATA': 'C:\\Users\\Test\\AppData\\Local'
        }):
            config = PlatformConfig.for_current_platform()
            
            print(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {config.platform}")
            print(f"–ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {config.base_directory}")
            print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–µ—à–∞: {config.cache_directory}")
            print(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ª–æ–≥–æ–≤: {config.logs_directory}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—É—Ç–µ–π
            assert config.platform == Platform.WINDOWS
            assert 'offers-check-marketplaces' in str(config.base_directory)
            assert 'AppData' in str(config.base_directory)
            assert config.cache_directory is not None
            assert config.logs_directory is not None
    
    print("‚úì –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π Windows –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")


def test_windows_fallback_scenarios():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç fallback —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è Windows."""
    print("\n=== –¢–µ—Å—Ç fallback —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ Windows ===")
    
    detector = PlatformDetector()
    
    with patch.object(detector, 'get_platform', return_value=Platform.WINDOWS):
        # –¢–µ—Å—Ç –∫–æ–≥–¥–∞ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
        with patch.dict(os.environ, {}, clear=True):
            with patch('pathlib.Path.home') as mock_home:
                mock_home.return_value = Path('C:\\Users\\Test')
                data_dir = detector.get_user_data_dir()
                print(f"Fallback –∫ Path.home(): {data_dir}")
                expected = Path('C:\\Users\\Test') / 'AppData' / 'Roaming'
                assert data_dir == expected
        
        # –¢–µ—Å—Ç –∫–æ–≥–¥–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        with patch.dict(os.environ, {'APPDATA': 'C:\\NonExistent\\Path'}):
            with patch('pathlib.Path.exists', return_value=False):
                with patch('pathlib.Path.home') as mock_home:
                    mock_home.return_value = Path('C:\\Users\\Test')
                    data_dir = detector.get_user_data_dir()
                    print(f"Fallback –ø—Ä–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö: {data_dir}")
                    expected = Path('C:\\Users\\Test') / 'AppData' / 'Roaming'
                    assert data_dir == expected
    
    print("‚úì –¢–µ—Å—Ç fallback —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")


if __name__ == "__main__":
    try:
        test_windows_appdata_detection()
        test_windows_cache_directory()
        test_windows_directory_structure()
        test_windows_fallback_scenarios()
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã Windows APPDATA –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)