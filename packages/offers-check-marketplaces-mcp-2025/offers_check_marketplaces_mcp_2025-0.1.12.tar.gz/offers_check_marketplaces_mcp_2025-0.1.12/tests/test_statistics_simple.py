#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è statistics.py (–∑–∞–¥–∞—á–∞ 7.1).

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø–æ–ª–Ω—è–µ—Ç –µ—ë –¥–∞–Ω–Ω—ã–º–∏
–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ StatisticsGenerator.
"""

import asyncio
import tempfile
import os
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –Ω–∞—à–µ–≥–æ –º–æ–¥—É–ª—è
from offers_check_marketplaces.database_manager import DatabaseManager
from offers_check_marketplaces.statistics import StatisticsGenerator


async def create_test_data(db_manager: DatabaseManager):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑–µ."""
    print("–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
    test_products = [
        {
            "code": 195385.0,
            "model_name": "–ü–æ–ª–æ—Ç–Ω–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –ë–Ø–ó–¨ –û–¢–ë–ï–õ–ï–ù–ù–ê–Ø –ì–û–°–¢",
            "category": "–•–æ–∑—Ç–æ–≤–∞—Ä—ã –∏ –ø–æ—Å—É–¥–∞",
            "unit": "–º",
            "priority_1_source": "–ö–æ–º—É—Å",
            "priority_2_source": "–í—Å–µ–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã"
        },
        {
            "code": 195386.0,
            "model_name": "–†—É—á–∫–∞ —à–∞—Ä–∏–∫–æ–≤–∞—è —Å–∏–Ω—è—è",
            "category": "–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã",
            "unit": "—à—Ç",
            "priority_1_source": "–û–∑–æ–Ω",
            "priority_2_source": "Wildberries"
        },
        {
            "code": 195387.0,
            "model_name": "–î—Ä–µ–ª—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è",
            "category": "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
            "unit": "—à—Ç",
            "priority_1_source": "–í—Å–µ–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
            "priority_2_source": "–ö–æ–º—É—Å"
        },
        {
            "code": 195388.0,
            "model_name": "–ß–∞—à–∫–∞ –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∞—è",
            "category": "–•–æ–∑—Ç–æ–≤–∞—Ä—ã –∏ –ø–æ—Å—É–¥–∞",
            "unit": "—à—Ç",
            "priority_1_source": "–ö–æ–º—É—Å",
            "priority_2_source": "–û–∑–æ–Ω"
        },
        {
            "code": 195389.0,
            "model_name": "–ë–ª–æ–∫–Ω–æ—Ç –ê5",
            "category": "–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã",
            "unit": "—à—Ç",
            "priority_1_source": "Wildberries",
            "priority_2_source": "–ö–æ–º—É—Å"
        }
    ]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –ø–æ–ª—É—á–∞–µ–º –∏—Ö ID
    product_ids = []
    for i, product_data in enumerate(test_products):
        try:
            product_id = await db_manager.save_product(product_data)
            product_ids.append(product_id)
            print(f"  –ü—Ä–æ–¥—É–∫—Ç {i+1}: {product_data['model_name'][:30]}... (ID: {product_id})")
        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ {i+1}: {e}")

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Ü–µ–Ω—ã
    test_prices = [
        # –ü—Ä–æ–¥—É–∫—Ç 1 - —Ü–µ–Ω—ã –Ω–∞ 3 –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö (—Ö–æ—Ä–æ—à–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ)
        {"product_id": product_ids[0], "marketplace": "–ö–æ–º—É—Å", "price": 1500.0, "currency": "RUB", "availability": "–í –Ω–∞–ª–∏—á–∏–∏", "product_url": "https://komus.ru/1"},
        {"product_id": product_ids[0], "marketplace": "–í—Å–µ–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "price": 1600.0, "currency": "RUB", "availability": "–í –Ω–∞–ª–∏—á–∏–∏", "product_url": "https://vseinstrumenti.ru/1"},
        {"product_id": product_ids[0], "marketplace": "–û–∑–æ–Ω", "price": 1450.0, "currency": "RUB", "availability": "–í –Ω–∞–ª–∏—á–∏–∏", "product_url": "https://ozon.ru/1"},
        
        # –ü—Ä–æ–¥—É–∫—Ç 2 - —Ü–µ–Ω—ã –Ω–∞ 2 –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö
        {"product_id": product_ids[1], "marketplace": "–û–∑–æ–Ω", "price": 25.0, "currency": "RUB", "availability": "–í –Ω–∞–ª–∏—á–∏–∏", "product_url": "https://ozon.ru/2"},
        {"product_id": product_ids[1], "marketplace": "Wildberries", "price": 30.0, "currency": "RUB", "availability": "–í –Ω–∞–ª–∏—á–∏–∏", "product_url": "https://wildberries.ru/2"},
        
        # –ü—Ä–æ–¥—É–∫—Ç 3 - —Ü–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ 1 –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–µ
        {"product_id": product_ids[2], "marketplace": "–í—Å–µ–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "price": 3500.0, "currency": "RUB", "availability": "–í –Ω–∞–ª–∏—á–∏–∏", "product_url": "https://vseinstrumenti.ru/3"},
        
        # –ü—Ä–æ–¥—É–∫—Ç 4 - —Ü–µ–Ω—ã –Ω–∞ 2 –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö —Å –±–æ–ª—å—à–æ–π —Ä–∞–∑–Ω–∏—Ü–µ–π
        {"product_id": product_ids[3], "marketplace": "–ö–æ–º—É—Å", "price": 150.0, "currency": "RUB", "availability": "–í –Ω–∞–ª–∏—á–∏–∏", "product_url": "https://komus.ru/4"},
        {"product_id": product_ids[3], "marketplace": "–û–∑–æ–Ω", "price": 200.0, "currency": "RUB", "availability": "–í –Ω–∞–ª–∏—á–∏–∏", "product_url": "https://ozon.ru/4"},
        
        # –ü—Ä–æ–¥—É–∫—Ç 5 - –±–µ–∑ —Ü–µ–Ω (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –±–µ–∑ –ø–æ–∫—Ä—ã—Ç–∏—è)
    ]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—ã
    for i, price_data in enumerate(test_prices):
        try:
            await db_manager.save_price(price_data["product_id"], price_data)
            print(f"  –¶–µ–Ω–∞ {i+1}: {price_data['marketplace']} - {price_data['price']} —Ä—É–±.")
        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã {i+1}: {e}")

    print(f"–°–æ–∑–¥–∞–Ω–æ {len(product_ids)} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ {len(test_prices)} —Ü–µ–Ω")
    return product_ids


async def test_statistics_functionality():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø STATISTICS.PY (–ó–ê–î–ê–ß–ê 7.1)")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    temp_dir = tempfile.mkdtemp()
    db_path = os.path.join(temp_dir, "test_statistics.db")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        db_manager = DatabaseManager(db_path)
        await db_manager.init_database()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        product_ids = await create_test_data(db_manager)
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\n–°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        stats_generator = StatisticsGenerator(db_manager)
        print("StatisticsGenerator —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è 5.1-5.5)
        print("\n" + "="*50)
        print("–¢–ï–°–¢ 1: –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è 5.1-5.5)")
        print("="*50)
        
        statistics = await stats_generator.generate_full_statistics()
        
        print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: {statistics.total_products}")
        print(f"–¢–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏: {statistics.products_with_prices}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: {statistics.success_rate:.1f}%")
        print(f"–°—Ä–µ–¥–Ω—è—è –¥–µ–ª—å—Ç–∞ —Ü–µ–Ω: {statistics.average_delta_percent:.2f}%")
        
        print(f"\n–†–∞–∑–±–∏–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, count in statistics.category_breakdown.items():
            print(f"  ‚Ä¢ {category}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        print(f"\n–ü–æ–∫—Ä—ã—Ç–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤:")
        for marketplace, count in statistics.marketplace_coverage.items():
            print(f"  ‚Ä¢ {marketplace}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –¢–µ—Å—Ç 2: –£—Å–ø–µ—à–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        print("\n" + "="*50)
        print("–¢–ï–°–¢ 2: –†–∞—Å—á–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π")
        print("="*50)
        
        success_matches = await stats_generator.calculate_success_matches()
        
        print(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É 1: {success_matches['priority_1_source_matches']}")
        print(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É 2: {success_matches['priority_2_source_matches']}")
        print(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –æ–±–æ–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º: {success_matches['both_priorities_matches']}")
        print(f"–¢–æ–≤–∞—Ä—ã –Ω–∞ 3+ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö: {success_matches['multiple_marketplace_matches']}")
        
        # –¢–µ—Å—Ç 3: –ü–æ–∫—Ä—ã—Ç–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
        print("\n" + "="*50)
        print("–¢–ï–°–¢ 3: –î–µ—Ç–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤")
        print("="*50)
        
        coverage = await stats_generator.calculate_marketplace_coverage()
        
        for marketplace, data in coverage.items():
            print(f"\n{marketplace}:")
            print(f"  –¢–æ–≤–∞—Ä–æ–≤: {data['total_products']}")
            print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ: {data['coverage_percentage']:.1f}%")
            print(f"  –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
            for category, count in data['category_breakdown'].items():
                print(f"    ‚Ä¢ {category}: {count}")
        
        # –¢–µ—Å—Ç 4: –°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        print("\n" + "="*50)
        print("–¢–ï–°–¢ 4: –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π")
        print("="*50)
        
        averages = await stats_generator.calculate_average_values()
        
        print(f"–°—Ä–µ–¥–Ω—è—è –¥–µ–ª—å—Ç–∞: {averages['average_delta_percent']:.2f}%")
        print(f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {averages['overall_average_price']:.2f} —Ä—É–±.")
        print(f"–ú–µ–¥–∏–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞: {averages['median_price']:.2f} —Ä—É–±.")
        
        print(f"\n–°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
        for category, avg_price in averages['category_averages'].items():
            print(f"  ‚Ä¢ {category}: {avg_price:.2f} —Ä—É–±.")
        
        print(f"\n–°—Ä–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º:")
        for marketplace, avg_price in averages['marketplace_averages'].items():
            print(f"  ‚Ä¢ {marketplace}: {avg_price:.2f} —Ä—É–±.")
        
        # –¢–µ—Å—Ç 5: –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        print("\n" + "="*50)
        print("–¢–ï–°–¢ 5: –î–µ—Ç–∞–ª—å–Ω–∞—è —Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        print("="*50)
        
        category_breakdown = await stats_generator.get_category_breakdown()
        
        for category, data in category_breakdown.items():
            print(f"\n{category}:")
            print(f"  –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {data['total_products']}")
            print(f"  –° —Ü–µ–Ω–∞–º–∏: {data['products_with_prices']}")
            print(f"  –ü–æ–∫—Ä—ã—Ç–∏–µ: {data['coverage_percentage']:.1f}%")
        
        # –¢–µ—Å—Ç 6: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤
        print("\n" + "="*50)
        print("–¢–ï–°–¢ 6: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤")
        print("="*50)
        
        comparison = await stats_generator.generate_marketplace_comparison()
        
        for marketplace, data in comparison.items():
            print(f"\n{marketplace}:")
            print(f"  –¢–æ–≤–∞—Ä–æ–≤: {data['products_count']}")
            print(f"  –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {data['average_price']:.2f} —Ä—É–±.")
            print(f"  –ú–∏–Ω. —Ü–µ–Ω–∞: {data['min_price']:.2f} —Ä—É–±.")
            print(f"  –ú–∞–∫—Å. —Ü–µ–Ω–∞: {data['max_price']:.2f} —Ä—É–±.")
            print(f"  –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å: {data['availability_percentage']:.1f}%")
            print(f"  –í—Å–µ–≥–æ –ø–æ–∑–∏—Ü–∏–π: {data['total_listings']}")
        
        # –¢–µ—Å—Ç 7: –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
        print("\n" + "="*50)
        print("–¢–ï–°–¢ 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞")
        print("="*50)
        
        summary_report = await stats_generator.generate_summary_report()
        
        print(f"–í—Ä–µ–º—è –æ—Ç—á–µ—Ç–∞: {summary_report['report_timestamp']}")
        print(f"–†–∞–∑–¥–µ–ª–æ–≤ –≤ –æ—Ç—á–µ—Ç–µ: {len(summary_report)}")
        
        overview = summary_report['overview']
        print(f"\n–û–±–∑–æ—Ä:")
        print(f"  –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤: {overview['total_products']}")
        print(f"  –° —Ü–µ–Ω–∞–º–∏: {overview['products_with_prices']}")
        print(f"  –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {overview['success_rate_percentage']:.1f}%")
        print(f"  –°—Ä–µ–¥–Ω—è—è –¥–µ–ª—å—Ç–∞: {overview['average_delta_percent']:.2f}%")
        
        print(f"\nüèÜ –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
        for category, count in summary_report['top_categories'].items():
            print(f"  ‚Ä¢ {category}: {count} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        print("\n" + "="*60)
        print("–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("="*60)
        
        print(f"\n–ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê:")
        print(f"  –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 5.1 (–æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤): {statistics.total_products}")
        print(f"  –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 5.2 (—Ç–æ–≤–∞—Ä—ã —Å —Ü–µ–Ω–∞–º–∏): {statistics.products_with_prices}")
        print(f"  –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 5.3 (—Å—Ä–µ–¥–Ω–∏–µ –¥–µ–ª—å—Ç—ã): {statistics.average_delta_percent:.2f}%")
        print(f"  –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 5.4 (—Ä–∞–∑–±–∏–≤–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º): {len(statistics.category_breakdown)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        print(f"  –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 5.5 (–ø–æ–∫—Ä—ã—Ç–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤): {len(statistics.marketplace_coverage)} –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"\n–û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        return False
        
    finally:
        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        try:
            if os.path.exists(db_path):
                os.remove(db_path)
            os.rmdir(temp_dir)
            print(f"\n–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        success = asyncio.run(test_statistics_functionality())
        if success:
            print("\n–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
            exit(0)
        else:
            print("\nüí• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ò–õ–û–°–¨ –° –û–®–ò–ë–ö–ê–ú–ò!")
            exit(1)
    except KeyboardInterrupt:
        print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        exit(1)
    except Exception as e:
        print(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        exit(1)


if __name__ == "__main__":
    main()