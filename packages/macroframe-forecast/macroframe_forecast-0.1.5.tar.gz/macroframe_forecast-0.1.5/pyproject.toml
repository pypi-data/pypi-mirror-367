[project]
name = "macroframe-forecast"
version = "0.1.5"
description = "Macroframework forecasting with accounting identities"
readme = "README.md"
requires-python = ">=3.11"
maintainers = [
    { name = "Sakai Ando", email = "sando@imf.org" },
    { name = "Sultan Orazbayev", email = "sorazbayev@imf.org" },
]
keywords = [
    "macroframework",
    "forecasting",
    "macroeconomic identities",
    "high-dimensional forecasting",
    "econometrics",
]
# https://pypi.org/classifiers/
classifiers = [
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3 :: Only",
    "Intended Audience :: Developers",
    "Intended Audience :: Other Audience",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Education",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Mathematics",
]
# tbd
dependencies = [
    "pandas >= 2.2.0",
    "numpy >= 1.26.3",
    "scipy >= 1.12.0",
    "scikit-learn >= 1.4.0",
    "dask[dataframe] >= 2024.8.1",
    "distributed >= 2024.2.0",
    "sktime >= 0.27.0",
    "sympy >= 1.12",
    "cvxpy >= 1.5.3",
    "statsmodels>=0.14.4",
    "matplotlib>=3.10.3",
]
[project.urls]
homepage = "https://github.com/sakaiando/macroframe-forecast"
repository = "https://github.com/sakaiando/macroframe-forecast"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[dependency-groups]
dev = [
    "furo>=2024.8.6",
    "numpydoc>=1.9.0",
    "pre-commit>=4.2.0",
    "pytest>=8.4.0",
    "ruff>=0.11.13",
    "sphinx>=8.2.3",
]

[tool.pytest.ini_options]
addopts = [
    "--strict-config",  # Force error if config is mispelled
    "--strict-markers", # Force error if marker is mispelled (must be defined in config)
    "-ra",              # Print summary of all fails/errors
    "-m not slow",      # Skip slow tests
]
markers = ["slow: Skipped unless '-m slow' passed"]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
pydocstyle = { convention = "numpy" }
