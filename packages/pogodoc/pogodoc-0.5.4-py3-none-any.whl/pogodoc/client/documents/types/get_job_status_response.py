# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ...core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ...core.serialization import FieldMetadata
from .get_job_status_response_output import GetJobStatusResponseOutput
from .get_job_status_response_target import GetJobStatusResponseTarget
from .get_job_status_response_type import GetJobStatusResponseType


class GetJobStatusResponse(UniversalBaseModel):
    type: GetJobStatusResponseType = pydantic.Field()
    """
    Type of template to be rendered
    """

    job_id: typing_extensions.Annotated[str, FieldMetadata(alias="jobId")] = pydantic.Field()
    """
    ID of the render job
    """

    target: GetJobStatusResponseTarget = pydantic.Field()
    """
    Type of output to be rendered
    """

    output: typing.Optional[GetJobStatusResponseOutput] = None
    success: typing.Optional[bool] = None
    status: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
