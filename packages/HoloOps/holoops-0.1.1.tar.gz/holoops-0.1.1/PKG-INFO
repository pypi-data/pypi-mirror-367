Metadata-Version: 2.4
Name: HoloOps
Version: 0.1.1
Summary: Unified, production-ready file and directory management for modern Python applications.
Author: Tristan McBride Sr.
Author-email: "Tristan McBride Sr." <142635792+TristanMcBrideSr@users.noreply.github.com>
Maintainer-email: "Tristan McBride Sr." <142635792+TristanMcBrideSr@users.noreply.github.com>
License-Expression: Apache-2.0
Project-URL: Homepage, https://github.com/TristanMcBrideSr
Keywords: Python,File Management,Directory Management,Project Root Detection,Cloud Storage,Automation,AI Tools,Productivity
Classifier: Programming Language :: Python :: 3
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Developers
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Dynamic: author

﻿
---

# HoloOps

## Overview

**HoloOps** is a unified, production-ready system for advanced directory and file operations in Python applications.
It manages directory structures, file access, storage strategies, and project layout for modern, scalable software ecosystems.

**Highlights:**

* **Automatic project location detection:** Instantly detects where your project lives on the system—no manual path setup required.
* **Centralized directory and file management:** Organize, create, move, and remove directories and files with a consistent API.
* **Thread-safe singleton design:** Safe for use in multi-threaded and concurrent applications.
* **Cloud and local storage support:** Seamlessly migrate or sync directories between local and cloud environments.
* **Extensible mapping:** Map and resolve project assets, resources, or configuration layouts dynamically.
* **Clean project architecture:** Detects project root, enforces marker files, and keeps your structure organized.

---

## Why HoloOps?

Typical file/directory utilities are limited in scope:

* Manual, repetitive directory and file management code.
* No awareness of cloud storage, project roots, or naming conventions.
* Prone to errors in concurrent or large-scale environments.

**HoloOps** solves these challenges by:

* **Automatically detecting your project location** anywhere on the system, reducing configuration friction.
* Providing a **centralized system** to manage all directories and files according to project needs.
* Offering robust helpers for all major operations—creation, deletion, movement, permissions, and more.
* Supporting dynamic base directory mappings and configuration.
* Handling cloud and local storage strategies with automatic migration tools.

---

## Key Features

* **Automatic Project Root Detection:**
  Instantly find your project’s root directory—no manual paths, no guessing.

* **Unified Directory Management:**
  Define, create, move, or remove project directories with one API.

* **Comprehensive File Operations:**
  Write, read, append, copy, move, remove, and list files with robust helpers.

* **Project-Aware:**
  Auto-detect project root and enforce marker files for reliable setup.

* **Cloud and Local Flexibility:**
  Seamless migration and support for leading cloud storage providers.

* **Thread-Safe Singleton:**
  Safe, consistent instance across multi-threaded and parallel apps.

* **Customizable Mapping:**
  Easily map logical names to directory or file paths for your ecosystem.

---

## How It Works

1. **Initialize the HoloOps manager** at application start—project location is auto-detected.
2. **Configure your directory and file mappings** according to project requirements.
3. **Use the unified API** for any file or directory operation—local or cloud, utility or class-based.

---

## FAQ

**Q: Do I need to specify my project’s location?**
A: No. HoloOps automatically detects your project root and sets up all necessary paths.

**Q: Can I use HoloOps for both cloud and local storage?**
A: Yes. HoloOps is designed for seamless switching or migration between storage strategies.

**Q: Is HoloOps suitable for concurrent or multi-threaded applications?**
A: Yes. The thread-safe singleton pattern ensures reliable usage in all environments.

---

## Code Examples

You can find code examples on my [GitHub repository](https://github.com/TristanMcBrideSr/TechBook).

---

## License

This project is licensed under the [Apache License, Version 2.0](LICENSE).
Copyright 2025 Tristan McBride Sr.

---

## Acknowledgements

Project by:
- Tristan McBride Sr.
- Sybil
