from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ferelight.models.base_model import Model
from ferelight import util


class Scoredsegment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, segmentid=None, score=None):  # noqa: E501
        """Scoredsegment - a model defined in OpenAPI

        :param segmentid: The segmentid of this Scoredsegment.  # noqa: E501
        :type segmentid: str
        :param score: The score of this Scoredsegment.  # noqa: E501
        :type score: float
        """
        self.openapi_types = {
            'segmentid': str,
            'score': float
        }

        self.attribute_map = {
            'segmentid': 'segmentid',
            'score': 'score'
        }

        self._segmentid = segmentid
        self._score = score

    @classmethod
    def from_dict(cls, dikt) -> 'Scoredsegment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The scoredsegment of this Scoredsegment.  # noqa: E501
        :rtype: Scoredsegment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def segmentid(self) -> str:
        """Gets the segmentid of this Scoredsegment.

        The unique identifier of the segment.  # noqa: E501

        :return: The segmentid of this Scoredsegment.
        :rtype: str
        """
        return self._segmentid

    @segmentid.setter
    def segmentid(self, segmentid: str):
        """Sets the segmentid of this Scoredsegment.

        The unique identifier of the segment.  # noqa: E501

        :param segmentid: The segmentid of this Scoredsegment.
        :type segmentid: str
        """

        self._segmentid = segmentid

    @property
    def score(self) -> float:
        """Gets the score of this Scoredsegment.

        The similarity score of the segment.  # noqa: E501

        :return: The score of this Scoredsegment.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score: float):
        """Sets the score of this Scoredsegment.

        The similarity score of the segment.  # noqa: E501

        :param score: The score of this Scoredsegment.
        :type score: float
        """

        self._score = score
