from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ferelight.models.base_model import Model
from ferelight import util


class QuerybyexamplePostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, database=None, segmentid=None, limit=10):  # noqa: E501
        """QuerybyexamplePostRequest - a model defined in OpenAPI

        :param database: The database of this QuerybyexamplePostRequest.  # noqa: E501
        :type database: str
        :param segmentid: The segmentid of this QuerybyexamplePostRequest.  # noqa: E501
        :type segmentid: str
        :param limit: The limit of this QuerybyexamplePostRequest.  # noqa: E501
        :type limit: int
        """
        self.openapi_types = {
            'database': str,
            'segmentid': str,
            'limit': int
        }

        self.attribute_map = {
            'database': 'database',
            'segmentid': 'segmentid',
            'limit': 'limit'
        }

        self._database = database
        self._segmentid = segmentid
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt) -> 'QuerybyexamplePostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _querybyexample_post_request of this QuerybyexamplePostRequest.  # noqa: E501
        :rtype: QuerybyexamplePostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def database(self) -> str:
        """Gets the database of this QuerybyexamplePostRequest.

        The name of the database to query.  # noqa: E501

        :return: The database of this QuerybyexamplePostRequest.
        :rtype: str
        """
        return self._database

    @database.setter
    def database(self, database: str):
        """Sets the database of this QuerybyexamplePostRequest.

        The name of the database to query.  # noqa: E501

        :param database: The database of this QuerybyexamplePostRequest.
        :type database: str
        """

        self._database = database

    @property
    def segmentid(self) -> str:
        """Gets the segmentid of this QuerybyexamplePostRequest.

        The segment ID to find neighbors for.  # noqa: E501

        :return: The segmentid of this QuerybyexamplePostRequest.
        :rtype: str
        """
        return self._segmentid

    @segmentid.setter
    def segmentid(self, segmentid: str):
        """Sets the segmentid of this QuerybyexamplePostRequest.

        The segment ID to find neighbors for.  # noqa: E501

        :param segmentid: The segmentid of this QuerybyexamplePostRequest.
        :type segmentid: str
        """

        self._segmentid = segmentid

    @property
    def limit(self) -> int:
        """Gets the limit of this QuerybyexamplePostRequest.

        The maximum number of results to return.  # noqa: E501

        :return: The limit of this QuerybyexamplePostRequest.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit: int):
        """Sets the limit of this QuerybyexamplePostRequest.

        The maximum number of results to return.  # noqa: E501

        :param limit: The limit of this QuerybyexamplePostRequest.
        :type limit: int
        """

        self._limit = limit
