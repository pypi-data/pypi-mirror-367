from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from ferelight.models.base_model import Model
from ferelight import util


class Multimediasegment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, segmentid=None, objectid=None, segmentnumber=None, segmentstart=None, segmentend=None, segmentstartabs=None, segmentendabs=None):  # noqa: E501
        """Multimediasegment - a model defined in OpenAPI

        :param segmentid: The segmentid of this Multimediasegment.  # noqa: E501
        :type segmentid: str
        :param objectid: The objectid of this Multimediasegment.  # noqa: E501
        :type objectid: str
        :param segmentnumber: The segmentnumber of this Multimediasegment.  # noqa: E501
        :type segmentnumber: int
        :param segmentstart: The segmentstart of this Multimediasegment.  # noqa: E501
        :type segmentstart: int
        :param segmentend: The segmentend of this Multimediasegment.  # noqa: E501
        :type segmentend: int
        :param segmentstartabs: The segmentstartabs of this Multimediasegment.  # noqa: E501
        :type segmentstartabs: float
        :param segmentendabs: The segmentendabs of this Multimediasegment.  # noqa: E501
        :type segmentendabs: float
        """
        self.openapi_types = {
            'segmentid': str,
            'objectid': str,
            'segmentnumber': int,
            'segmentstart': int,
            'segmentend': int,
            'segmentstartabs': float,
            'segmentendabs': float
        }

        self.attribute_map = {
            'segmentid': 'segmentid',
            'objectid': 'objectid',
            'segmentnumber': 'segmentnumber',
            'segmentstart': 'segmentstart',
            'segmentend': 'segmentend',
            'segmentstartabs': 'segmentstartabs',
            'segmentendabs': 'segmentendabs'
        }

        self._segmentid = segmentid
        self._objectid = objectid
        self._segmentnumber = segmentnumber
        self._segmentstart = segmentstart
        self._segmentend = segmentend
        self._segmentstartabs = segmentstartabs
        self._segmentendabs = segmentendabs

    @classmethod
    def from_dict(cls, dikt) -> 'Multimediasegment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The multimediasegment of this Multimediasegment.  # noqa: E501
        :rtype: Multimediasegment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def segmentid(self) -> str:
        """Gets the segmentid of this Multimediasegment.

        The unique identifier of the segment.  # noqa: E501

        :return: The segmentid of this Multimediasegment.
        :rtype: str
        """
        return self._segmentid

    @segmentid.setter
    def segmentid(self, segmentid: str):
        """Sets the segmentid of this Multimediasegment.

        The unique identifier of the segment.  # noqa: E501

        :param segmentid: The segmentid of this Multimediasegment.
        :type segmentid: str
        """

        self._segmentid = segmentid

    @property
    def objectid(self) -> str:
        """Gets the objectid of this Multimediasegment.

        The unique identifier of the object.  # noqa: E501

        :return: The objectid of this Multimediasegment.
        :rtype: str
        """
        return self._objectid

    @objectid.setter
    def objectid(self, objectid: str):
        """Sets the objectid of this Multimediasegment.

        The unique identifier of the object.  # noqa: E501

        :param objectid: The objectid of this Multimediasegment.
        :type objectid: str
        """

        self._objectid = objectid

    @property
    def segmentnumber(self) -> int:
        """Gets the segmentnumber of this Multimediasegment.

        The segment number.  # noqa: E501

        :return: The segmentnumber of this Multimediasegment.
        :rtype: int
        """
        return self._segmentnumber

    @segmentnumber.setter
    def segmentnumber(self, segmentnumber: int):
        """Sets the segmentnumber of this Multimediasegment.

        The segment number.  # noqa: E501

        :param segmentnumber: The segmentnumber of this Multimediasegment.
        :type segmentnumber: int
        """

        self._segmentnumber = segmentnumber

    @property
    def segmentstart(self) -> int:
        """Gets the segmentstart of this Multimediasegment.

        The start frame of the segment.  # noqa: E501

        :return: The segmentstart of this Multimediasegment.
        :rtype: int
        """
        return self._segmentstart

    @segmentstart.setter
    def segmentstart(self, segmentstart: int):
        """Sets the segmentstart of this Multimediasegment.

        The start frame of the segment.  # noqa: E501

        :param segmentstart: The segmentstart of this Multimediasegment.
        :type segmentstart: int
        """

        self._segmentstart = segmentstart

    @property
    def segmentend(self) -> int:
        """Gets the segmentend of this Multimediasegment.

        The end frame of the segment.  # noqa: E501

        :return: The segmentend of this Multimediasegment.
        :rtype: int
        """
        return self._segmentend

    @segmentend.setter
    def segmentend(self, segmentend: int):
        """Sets the segmentend of this Multimediasegment.

        The end frame of the segment.  # noqa: E501

        :param segmentend: The segmentend of this Multimediasegment.
        :type segmentend: int
        """

        self._segmentend = segmentend

    @property
    def segmentstartabs(self) -> float:
        """Gets the segmentstartabs of this Multimediasegment.

        The double value of the start time in seconds of the segment.  # noqa: E501

        :return: The segmentstartabs of this Multimediasegment.
        :rtype: float
        """
        return self._segmentstartabs

    @segmentstartabs.setter
    def segmentstartabs(self, segmentstartabs: float):
        """Sets the segmentstartabs of this Multimediasegment.

        The double value of the start time in seconds of the segment.  # noqa: E501

        :param segmentstartabs: The segmentstartabs of this Multimediasegment.
        :type segmentstartabs: float
        """

        self._segmentstartabs = segmentstartabs

    @property
    def segmentendabs(self) -> float:
        """Gets the segmentendabs of this Multimediasegment.

        The double value of the end time in seconds of the segment.  # noqa: E501

        :return: The segmentendabs of this Multimediasegment.
        :rtype: float
        """
        return self._segmentendabs

    @segmentendabs.setter
    def segmentendabs(self, segmentendabs: float):
        """Sets the segmentendabs of this Multimediasegment.

        The double value of the end time in seconds of the segment.  # noqa: E501

        :param segmentendabs: The segmentendabs of this Multimediasegment.
        :type segmentendabs: float
        """

        self._segmentendabs = segmentendabs
