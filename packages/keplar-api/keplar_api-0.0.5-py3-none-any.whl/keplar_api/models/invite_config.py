# coding: utf-8

"""
    Fastify Template API

    API documentation using Swagger

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from keplar_api.models.rep_data_config_legacy import RepDataConfigLegacy
from keplar_api.models.repdata_survey import RepdataSurvey
from typing import Optional, Set
from typing_extensions import Self

class InviteConfig(BaseModel):
    """
    InviteConfig
    """ # noqa: E501
    max_responses: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxResponses")
    max_responses_per_participant: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="maxResponsesPerParticipant")
    allowed_origins: List[StrictStr] = Field(alias="allowedOrigins")
    allow_anonymous_responses: StrictBool = Field(alias="allowAnonymousResponses")
    collect_email: Optional[StrictBool] = Field(default=None, alias="collectEmail")
    privacy_notice: Optional[StrictStr] = Field(default=None, alias="privacyNotice")
    show_call_metadata: Optional[StrictBool] = Field(default=None, alias="showCallMetadata")
    rep_data: Optional[RepDataConfigLegacy] = Field(default=None, alias="repData")
    rep_data_survey: Optional[RepdataSurvey] = Field(default=None, alias="repDataSurvey")
    test_participant_invite_code: Optional[StrictStr] = Field(default=None, alias="testParticipantInviteCode")
    __properties: ClassVar[List[str]] = ["maxResponses", "maxResponsesPerParticipant", "allowedOrigins", "allowAnonymousResponses", "collectEmail", "privacyNotice", "showCallMetadata", "repData", "repDataSurvey", "testParticipantInviteCode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InviteConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rep_data
        if self.rep_data:
            _dict['repData'] = self.rep_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rep_data_survey
        if self.rep_data_survey:
            _dict['repDataSurvey'] = self.rep_data_survey.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InviteConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "maxResponses": obj.get("maxResponses"),
            "maxResponsesPerParticipant": obj.get("maxResponsesPerParticipant"),
            "allowedOrigins": obj.get("allowedOrigins"),
            "allowAnonymousResponses": obj.get("allowAnonymousResponses"),
            "collectEmail": obj.get("collectEmail"),
            "privacyNotice": obj.get("privacyNotice"),
            "showCallMetadata": obj.get("showCallMetadata"),
            "repData": RepDataConfigLegacy.from_dict(obj["repData"]) if obj.get("repData") is not None else None,
            "repDataSurvey": RepdataSurvey.from_dict(obj["repDataSurvey"]) if obj.get("repDataSurvey") is not None else None,
            "testParticipantInviteCode": obj.get("testParticipantInviteCode")
        })
        return _obj


