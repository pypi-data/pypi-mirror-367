# coding: utf-8

"""
    Fastify Template API

    API documentation using Swagger

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from keplar_api.models.rep_data_config_legacy import RepDataConfigLegacy

class TestRepDataConfigLegacy(unittest.TestCase):
    """RepDataConfigLegacy unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RepDataConfigLegacy:
        """Test RepDataConfigLegacy
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RepDataConfigLegacy`
        """
        model = RepDataConfigLegacy()
        if include_optional:
            return RepDataConfigLegacy(
                enabled = True,
                config = None,
                study = keplar_api.models.rep_data_study_legacy.RepDataStudyLegacy(
                    name = '', 
                    compensation = 1.337, 
                    length_of_interview = 1.337, 
                    incidence_rate = 1.337, 
                    country_code = '', 
                    language_code = '', 
                    device_compatibility = [
                        ''
                        ], 
                    min_age = 1.337, 
                    max_age = 1.337, 
                    genders = [
                        ''
                        ], 
                    qualifications = [
                        keplar_api.models.rep_data_study_legacy_qualifications_inner.RepDataStudyLegacy_qualifications_inner(
                            qualification_id = 1.337, 
                            qualification_options = [
                                1.337
                                ], )
                        ], ),
                survey = keplar_api.models.rep_data_survey_legacy.RepDataSurveyLegacy(
                    id = '', 
                    status = 'LIVE', 
                    project = keplar_api.models.rep_data_survey_legacy_project.RepDataSurveyLegacy_project(
                        id = '', ), ),
                project = keplar_api.models.rep_data_project_legacy.RepDataProjectLegacy(
                    id = '', )
            )
        else:
            return RepDataConfigLegacy(
                enabled = True,
        )
        """

    def testRepDataConfigLegacy(self):
        """Test RepDataConfigLegacy"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
