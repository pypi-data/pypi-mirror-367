[tool.poetry]
name = "django-survey-axsapronov"
version = "2.0.3"
description = "Мощное Django приложение для создания и управления опросами, анкетами и тестами с поддержкой различных типов вопросов, категорий и аналитики"
authors = [
  "Pierre SASSOULAS <pierre.sassoulas@gmail.com>",
  "Alexander Sapronov <axsapronov@gmail.com>"
]
maintainers = [
  "Alexander Sapronov <axsapronov@gmail.com>"
]
readme = "README.md"
license = "AGPL-3.0"
homepage = "https://github.com/Pierre-Sassoulas/django-survey"
repository = "https://github.com/Pierre-Sassoulas/django-survey"
documentation = "https://github.com/Pierre-Sassoulas/django-survey#readme"
keywords = [
  "django",
  "survey",
  "poll",
  "questionnaire",
  "quiz",
  "forms",
  "data-collection",
  "analytics",
  "statistics",
  "web-application"
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Web Environment",
  "Framework :: Django",
  "Framework :: Django :: 4.0",
  "Framework :: Django :: 4.1",
  "Framework :: Django :: 4.2",
  "Framework :: Django :: 5.0",
  "Framework :: Django :: 5.1",
  "Framework :: Django :: 5.2",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: End Users/Desktop",
  "License :: OSI Approved :: GNU Affero General Public License v3",
  "Natural Language :: English",
  "Natural Language :: Russian",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Utilities",
  "Typing :: Typed"
]
package-mode = true
packages = [ { include = "survey" } ]

[tool.poetry.dependencies]
python = ">=3.12,<3.15"
django = "^5.2"
pytz = "^2025.1"
pyyaml = "^6.0.1"
django-meta = "^2.5.0"
django-pluralize-ru = "^0.1.2"
django-crispy-forms = ">=2.4"
crispy-bootstrap5 = "^2025.6"

[tool.poetry.group.dev.dependencies]
twine = "^6.1.0"
factory-boy = "^3.3.3"
pylint-django = "^2.6.1"
pre-commit = "^4.2.0"
pylint = "^3.3.5"
pytest = "^8.4.1"
pytest-django = "^4.8.0"
pytest-xdist = "^3.8.0"
coverage = "^7.4.1"
ruff = "^0.12.7"
bump-my-version = "^0.12.0"

[tool.setuptools.packages.find]
include = [ "survey*" ]


[build-system]
build-backend = "poetry.core.masonry.api"
requires = [ "poetry-core>=1" ]

[tool.ruff]
# Assume Python 3.8
target-version = "py312"

# Same as Black.
line-length = 119
indent-width = 4

# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".git-rewrite",
  ".hg",
  ".ipynb_checkpoints",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pyenv",
  ".pytest_cache",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  ".vscode",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "migrations",
  "node_modules",
  "site-packages",
  "venv",
]

# Like Black, indent with spaces, rather than tabs.
format.indent-style = "space"
# Like Black, use double quotes for strings.
format.quote-style = "double"
# Like Black, automatically detect the appropriate line ending.
format.line-ending = "auto"
# Like Black, respect magic trailing commas.
format.skip-magic-trailing-comma = false
# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
format.docstring-code-line-length = "dynamic"
# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
format.docstring-code-format = false
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
lint.select = [ "E4", "E7", "E9", "F", "I" ]
lint.ignore = [ "F811" ]
# Allow fix for all enabled rules (when `--fix`) is provided.
lint.fixable = [ "ALL" ]
lint.unfixable = [  ]
# Allow unused variables when underscore-prefixed.
lint.dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
lint.isort.force-single-line = true

[tool.isort]
profile = "black"
line_length = 119
multi_line_output = 3
include_trailing_comma = true
force_single_line = true
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = [
  "project",
  "config",
]
skip = [ "venv/", "deploy/" ]
skip_glob = [ "**/migrations/*.py" ]

# ==== PyLint ====

[tool.pylint.MASTER]
load-plugins = [
  "pylint_django",
]
django-settings-module = "project.settings.base"

[tool.pylint.FORMAT]
max-line-length = 119

[tool.pylint."MESSAGES CONTROL"]
disable = [
  "missing-docstring",
  "invalid-name",
]

[tool.pylint.DESIGN]
max-parents = 13

[tool.pylint.TYPECHECK]
generated-members = [
  "REQUEST",
  "acl_users",
  "aq_parent",
  "[a-zA-Z]+_set{1,2}",
  "save",
  "delete",
]

# ==== djLint ====

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
  "--ds=survey.settings",
  "--reuse-db",
  "--import-mode=importlib",
  "--strict-markers",
  "--strict-config",
  "--tb=short",
  "--maxfail=10",
  "--durations=10"
]
python_files = [
  "tests.py",
  "test_*.py",
  "*_tests.py",
]
python_classes = [
  "Test*",
]
python_functions = [
  "test_*",
]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
  "django_db: marks tests that require database access",
]
testpaths = [
  "survey/tests",
]
filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
include = [
  "survey/**",
  "project/**"
]
omit = [
  "*/migrations/*",
  "*/tests/*",
  "*/test_*.py",
  "*/__pycache__/*",
  "*/venv/*",
  "*/env/*",
  "*/build/*",
  "*/dist/*",
  "*/site-packages/*",
  "*/manage.py",
  "*/wsgi.py",
  "*/asgi.py",
  "*/settings.py",
  "*/urls.py"
]
plugins = [
  "django_coverage_plugin"
]
branch = true
source = [
  "survey",
  "project"
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2
fail_under = 80

[tool.coverage.html]
directory = "htmlcov"
title = "Django Survey Coverage Report"

# ==== isort ====

[tool.django-stubs]
django_settings_module = "project.settings.test"

# ==== Coverage ====

[tool.djlint]
blank_line_after_tag = "load,extends"
close_void_tags = true
format_css = true
format_js = true
# TODO: remove T002 when fixed https://github.com/Riverside-Healthcare/djLint/issues/687
ignore = "H006,H030,H031,T002"
include = "H017,H035"
indent = 2
max_line_length = 119
profile = "django"

[tool.djlint.css]
indent_size = 2

[tool.djlint.js]
indent_size = 2


[tool.bumpversion]
current_version = "2.0.3"
commit = true
commit_args = "--no-verify"
tag = false
tag_name = "{new_version}"
allow_dirty = true
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = [
    "{major}.{minor}.{patch}"
]
message = "Version updated from {current_version} to {new_version}"

[[tool.bumpversion.files]]
filename = "pyproject.toml"
