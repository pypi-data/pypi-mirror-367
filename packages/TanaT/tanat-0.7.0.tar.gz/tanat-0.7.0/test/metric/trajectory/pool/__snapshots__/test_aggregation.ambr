# serializer version: 1
# name: TestAggregationTrajectoryMetric.test_collect_as_dict_equivalence_with_snapshot[dtw]
  dict({
    tuple(
      1,
      1,
    ): np.float64(5.666666666666667),
    tuple(
      1,
      2,
    ): np.float64(8.0),
    tuple(
      1,
      3,
    ): np.float64(6.333333333333333),
    tuple(
      1,
      4,
    ): np.float64(7.0),
    tuple(
      1,
      5,
    ): np.float64(8.666666666666666),
    tuple(
      1,
      6,
    ): np.float64(8.0),
    tuple(
      1,
      7,
    ): np.float64(4.666666666666667),
    tuple(
      1,
      8,
    ): np.float64(5.666666666666667),
    tuple(
      1,
      9,
    ): np.float64(4.333333333333333),
    tuple(
      1,
      10,
    ): np.float64(5.666666666666667),
    tuple(
      2,
      1,
    ): np.float64(6.0),
    tuple(
      2,
      2,
    ): np.float64(6.0),
    tuple(
      2,
      3,
    ): np.float64(6.0),
    tuple(
      2,
      4,
    ): np.float64(6.333333333333333),
    tuple(
      2,
      5,
    ): np.float64(8.333333333333334),
    tuple(
      2,
      6,
    ): np.float64(7.333333333333333),
    tuple(
      2,
      7,
    ): np.float64(4.666666666666667),
    tuple(
      2,
      8,
    ): np.float64(5.666666666666667),
    tuple(
      2,
      9,
    ): np.float64(4.333333333333333),
    tuple(
      2,
      10,
    ): np.float64(5.333333333333333),
    tuple(
      3,
      1,
    ): np.float64(6.0),
    tuple(
      3,
      2,
    ): np.float64(8.0),
    tuple(
      3,
      3,
    ): np.float64(5.0),
    tuple(
      3,
      4,
    ): np.float64(6.666666666666667),
    tuple(
      3,
      5,
    ): np.float64(8.666666666666666),
    tuple(
      3,
      6,
    ): np.float64(7.666666666666667),
    tuple(
      3,
      7,
    ): np.float64(4.0),
    tuple(
      3,
      8,
    ): np.float64(5.666666666666667),
    tuple(
      3,
      9,
    ): np.float64(4.0),
    tuple(
      3,
      10,
    ): np.float64(5.666666666666667),
    tuple(
      4,
      1,
    ): np.float64(6.0),
    tuple(
      4,
      2,
    ): np.float64(7.666666666666667),
    tuple(
      4,
      3,
    ): np.float64(6.0),
    tuple(
      4,
      4,
    ): np.float64(5.666666666666667),
    tuple(
      4,
      5,
    ): np.float64(7.666666666666667),
    tuple(
      4,
      6,
    ): np.float64(7.666666666666667),
    tuple(
      4,
      7,
    ): np.float64(4.333333333333333),
    tuple(
      4,
      8,
    ): np.float64(5.666666666666667),
    tuple(
      4,
      9,
    ): np.float64(4.0),
    tuple(
      4,
      10,
    ): np.float64(5.333333333333333),
    tuple(
      5,
      1,
    ): np.float64(6.0),
    tuple(
      5,
      2,
    ): np.float64(7.333333333333333),
    tuple(
      5,
      3,
    ): np.float64(6.333333333333333),
    tuple(
      5,
      4,
    ): np.float64(7.0),
    tuple(
      5,
      5,
    ): np.float64(7.0),
    tuple(
      5,
      6,
    ): np.float64(8.0),
    tuple(
      5,
      7,
    ): np.float64(4.666666666666667),
    tuple(
      5,
      8,
    ): np.float64(5.666666666666667),
    tuple(
      5,
      9,
    ): np.float64(4.333333333333333),
    tuple(
      5,
      10,
    ): np.float64(5.666666666666667),
    tuple(
      6,
      1,
    ): np.float64(5.666666666666667),
    tuple(
      6,
      2,
    ): np.float64(8.0),
    tuple(
      6,
      3,
    ): np.float64(5.666666666666667),
    tuple(
      6,
      4,
    ): np.float64(6.333333333333333),
    tuple(
      6,
      5,
    ): np.float64(8.0),
    tuple(
      6,
      6,
    ): np.float64(6.666666666666667),
    tuple(
      6,
      7,
    ): np.float64(4.666666666666667),
    tuple(
      6,
      8,
    ): np.float64(5.666666666666667),
    tuple(
      6,
      9,
    ): np.float64(4.0),
    tuple(
      6,
      10,
    ): np.float64(5.666666666666667),
    tuple(
      7,
      1,
    ): np.float64(6.0),
    tuple(
      7,
      2,
    ): np.float64(8.0),
    tuple(
      7,
      3,
    ): np.float64(6.333333333333333),
    tuple(
      7,
      4,
    ): np.float64(6.666666666666667),
    tuple(
      7,
      5,
    ): np.float64(8.666666666666666),
    tuple(
      7,
      6,
    ): np.float64(8.0),
    tuple(
      7,
      7,
    ): np.float64(3.6666666666666665),
    tuple(
      7,
      8,
    ): np.float64(5.666666666666667),
    tuple(
      7,
      9,
    ): np.float64(4.333333333333333),
    tuple(
      7,
      10,
    ): np.float64(5.333333333333333),
    tuple(
      8,
      1,
    ): np.float64(6.0),
    tuple(
      8,
      2,
    ): np.float64(8.0),
    tuple(
      8,
      3,
    ): np.float64(6.333333333333333),
    tuple(
      8,
      4,
    ): np.float64(7.0),
    tuple(
      8,
      5,
    ): np.float64(8.666666666666666),
    tuple(
      8,
      6,
    ): np.float64(8.0),
    tuple(
      8,
      7,
    ): np.float64(4.666666666666667),
    tuple(
      8,
      8,
    ): np.float64(5.0),
    tuple(
      8,
      9,
    ): np.float64(4.333333333333333),
    tuple(
      8,
      10,
    ): np.float64(5.666666666666667),
    tuple(
      9,
      1,
    ): np.float64(6.0),
    tuple(
      9,
      2,
    ): np.float64(7.333333333333333),
    tuple(
      9,
      3,
    ): np.float64(5.666666666666667),
    tuple(
      9,
      4,
    ): np.float64(6.666666666666667),
    tuple(
      9,
      5,
    ): np.float64(8.666666666666666),
    tuple(
      9,
      6,
    ): np.float64(8.0),
    tuple(
      9,
      7,
    ): np.float64(4.666666666666667),
    tuple(
      9,
      8,
    ): np.float64(5.333333333333333),
    tuple(
      9,
      9,
    ): np.float64(3.3333333333333335),
    tuple(
      9,
      10,
    ): np.float64(5.666666666666667),
    tuple(
      10,
      1,
    ): np.float64(6.0),
    tuple(
      10,
      2,
    ): np.float64(7.666666666666667),
    tuple(
      10,
      3,
    ): np.float64(6.0),
    tuple(
      10,
      4,
    ): np.float64(6.333333333333333),
    tuple(
      10,
      5,
    ): np.float64(8.333333333333334),
    tuple(
      10,
      6,
    ): np.float64(7.666666666666667),
    tuple(
      10,
      7,
    ): np.float64(4.666666666666667),
    tuple(
      10,
      8,
    ): np.float64(5.666666666666667),
    tuple(
      10,
      9,
    ): np.float64(4.333333333333333),
    tuple(
      10,
      10,
    ): np.float64(4.333333333333333),
  })
# ---
# name: TestAggregationTrajectoryMetric.test_collect_as_dict_equivalence_with_snapshot[edit]
  dict({
    tuple(
      1,
      1,
    ): np.float64(2.0),
    tuple(
      1,
      2,
    ): np.float64(7.666666666666667),
    tuple(
      1,
      3,
    ): np.float64(6.666666666666667),
    tuple(
      1,
      4,
    ): np.float64(7.0),
    tuple(
      1,
      5,
    ): np.float64(8.333333333333334),
    tuple(
      1,
      6,
    ): np.float64(7.333333333333333),
    tuple(
      1,
      7,
    ): np.float64(6.333333333333333),
    tuple(
      1,
      8,
    ): np.float64(6.666666666666667),
    tuple(
      1,
      9,
    ): np.float64(5.666666666666667),
    tuple(
      1,
      10,
    ): np.float64(5.666666666666667),
    tuple(
      2,
      1,
    ): np.float64(7.666666666666667),
    tuple(
      2,
      2,
    ): np.float64(1.0),
    tuple(
      2,
      3,
    ): np.float64(7.666666666666667),
    tuple(
      2,
      4,
    ): np.float64(8.0),
    tuple(
      2,
      5,
    ): np.float64(8.0),
    tuple(
      2,
      6,
    ): np.float64(8.666666666666666),
    tuple(
      2,
      7,
    ): np.float64(8.333333333333334),
    tuple(
      2,
      8,
    ): np.float64(8.0),
    tuple(
      2,
      9,
    ): np.float64(7.0),
    tuple(
      2,
      10,
    ): np.float64(7.666666666666667),
    tuple(
      3,
      1,
    ): np.float64(6.666666666666667),
    tuple(
      3,
      2,
    ): np.float64(7.666666666666667),
    tuple(
      3,
      3,
    ): np.float64(0.6666666666666666),
    tuple(
      3,
      4,
    ): np.float64(7.333333333333333),
    tuple(
      3,
      5,
    ): np.float64(9.0),
    tuple(
      3,
      6,
    ): np.float64(8.0),
    tuple(
      3,
      7,
    ): np.float64(6.0),
    tuple(
      3,
      8,
    ): np.float64(7.333333333333333),
    tuple(
      3,
      9,
    ): np.float64(6.0),
    tuple(
      3,
      10,
    ): np.float64(6.0),
    tuple(
      4,
      1,
    ): np.float64(7.0),
    tuple(
      4,
      2,
    ): np.float64(8.0),
    tuple(
      4,
      3,
    ): np.float64(7.333333333333333),
    tuple(
      4,
      4,
    ): np.float64(0.6666666666666666),
    tuple(
      4,
      5,
    ): np.float64(8.666666666666666),
    tuple(
      4,
      6,
    ): np.float64(7.666666666666667),
    tuple(
      4,
      7,
    ): np.float64(6.333333333333333),
    tuple(
      4,
      8,
    ): np.float64(6.666666666666667),
    tuple(
      4,
      9,
    ): np.float64(6.333333333333333),
    tuple(
      4,
      10,
    ): np.float64(7.0),
    tuple(
      5,
      1,
    ): np.float64(8.333333333333334),
    tuple(
      5,
      2,
    ): np.float64(8.0),
    tuple(
      5,
      3,
    ): np.float64(9.0),
    tuple(
      5,
      4,
    ): np.float64(8.666666666666666),
    tuple(
      5,
      5,
    ): np.float64(2.0),
    tuple(
      5,
      6,
    ): np.float64(9.0),
    tuple(
      5,
      7,
    ): np.float64(9.0),
    tuple(
      5,
      8,
    ): np.float64(8.666666666666666),
    tuple(
      5,
      9,
    ): np.float64(8.0),
    tuple(
      5,
      10,
    ): np.float64(8.333333333333334),
    tuple(
      6,
      1,
    ): np.float64(7.333333333333333),
    tuple(
      6,
      2,
    ): np.float64(8.666666666666666),
    tuple(
      6,
      3,
    ): np.float64(8.0),
    tuple(
      6,
      4,
    ): np.float64(7.666666666666667),
    tuple(
      6,
      5,
    ): np.float64(9.0),
    tuple(
      6,
      6,
    ): np.float64(0.6666666666666666),
    tuple(
      6,
      7,
    ): np.float64(7.666666666666667),
    tuple(
      6,
      8,
    ): np.float64(8.0),
    tuple(
      6,
      9,
    ): np.float64(7.666666666666667),
    tuple(
      6,
      10,
    ): np.float64(8.0),
    tuple(
      7,
      1,
    ): np.float64(6.333333333333333),
    tuple(
      7,
      2,
    ): np.float64(8.333333333333334),
    tuple(
      7,
      3,
    ): np.float64(6.0),
    tuple(
      7,
      4,
    ): np.float64(6.333333333333333),
    tuple(
      7,
      5,
    ): np.float64(9.0),
    tuple(
      7,
      6,
    ): np.float64(7.666666666666667),
    tuple(
      7,
      7,
    ): np.float64(0.6666666666666666),
    tuple(
      7,
      8,
    ): np.float64(6.333333333333333),
    tuple(
      7,
      9,
    ): np.float64(5.0),
    tuple(
      7,
      10,
    ): np.float64(5.333333333333333),
    tuple(
      8,
      1,
    ): np.float64(6.666666666666667),
    tuple(
      8,
      2,
    ): np.float64(8.0),
    tuple(
      8,
      3,
    ): np.float64(7.333333333333333),
    tuple(
      8,
      4,
    ): np.float64(6.666666666666667),
    tuple(
      8,
      5,
    ): np.float64(8.666666666666666),
    tuple(
      8,
      6,
    ): np.float64(8.0),
    tuple(
      8,
      7,
    ): np.float64(6.333333333333333),
    tuple(
      8,
      8,
    ): np.float64(2.0),
    tuple(
      8,
      9,
    ): np.float64(5.333333333333333),
    tuple(
      8,
      10,
    ): np.float64(6.333333333333333),
    tuple(
      9,
      1,
    ): np.float64(5.666666666666667),
    tuple(
      9,
      2,
    ): np.float64(7.0),
    tuple(
      9,
      3,
    ): np.float64(6.0),
    tuple(
      9,
      4,
    ): np.float64(6.333333333333333),
    tuple(
      9,
      5,
    ): np.float64(8.0),
    tuple(
      9,
      6,
    ): np.float64(7.666666666666667),
    tuple(
      9,
      7,
    ): np.float64(5.0),
    tuple(
      9,
      8,
    ): np.float64(5.333333333333333),
    tuple(
      9,
      9,
    ): np.float64(0.3333333333333333),
    tuple(
      9,
      10,
    ): np.float64(5.333333333333333),
    tuple(
      10,
      1,
    ): np.float64(5.666666666666667),
    tuple(
      10,
      2,
    ): np.float64(7.666666666666667),
    tuple(
      10,
      3,
    ): np.float64(6.0),
    tuple(
      10,
      4,
    ): np.float64(7.0),
    tuple(
      10,
      5,
    ): np.float64(8.333333333333334),
    tuple(
      10,
      6,
    ): np.float64(8.0),
    tuple(
      10,
      7,
    ): np.float64(5.333333333333333),
    tuple(
      10,
      8,
    ): np.float64(6.333333333333333),
    tuple(
      10,
      9,
    ): np.float64(5.333333333333333),
    tuple(
      10,
      10,
    ): np.float64(0.0),
  })
# ---
# name: TestAggregationTrajectoryMetric.test_collect_as_dict_equivalence_with_snapshot[lcp]
  dict({
    tuple(
      1,
      1,
    ): np.float64(1.0),
    tuple(
      1,
      2,
    ): np.float64(0.0),
    tuple(
      1,
      3,
    ): np.float64(0.0),
    tuple(
      1,
      4,
    ): np.float64(0.0),
    tuple(
      1,
      5,
    ): np.float64(0.0),
    tuple(
      1,
      6,
    ): np.float64(0.0),
    tuple(
      1,
      7,
    ): np.float64(0.0),
    tuple(
      1,
      8,
    ): np.float64(0.0),
    tuple(
      1,
      9,
    ): np.float64(0.0),
    tuple(
      1,
      10,
    ): np.float64(0.3333333333333333),
    tuple(
      2,
      1,
    ): np.float64(0.0),
    tuple(
      2,
      2,
    ): np.float64(3.3333333333333335),
    tuple(
      2,
      3,
    ): np.float64(0.0),
    tuple(
      2,
      4,
    ): np.float64(0.0),
    tuple(
      2,
      5,
    ): np.float64(0.0),
    tuple(
      2,
      6,
    ): np.float64(0.0),
    tuple(
      2,
      7,
    ): np.float64(0.0),
    tuple(
      2,
      8,
    ): np.float64(0.0),
    tuple(
      2,
      9,
    ): np.float64(0.0),
    tuple(
      2,
      10,
    ): np.float64(0.0),
    tuple(
      3,
      1,
    ): np.float64(0.0),
    tuple(
      3,
      2,
    ): np.float64(0.0),
    tuple(
      3,
      3,
    ): np.float64(3.0),
    tuple(
      3,
      4,
    ): np.float64(0.0),
    tuple(
      3,
      5,
    ): np.float64(0.0),
    tuple(
      3,
      6,
    ): np.float64(0.0),
    tuple(
      3,
      7,
    ): np.float64(0.3333333333333333),
    tuple(
      3,
      8,
    ): np.float64(0.0),
    tuple(
      3,
      9,
    ): np.float64(0.0),
    tuple(
      3,
      10,
    ): np.float64(0.0),
    tuple(
      4,
      1,
    ): np.float64(0.0),
    tuple(
      4,
      2,
    ): np.float64(0.0),
    tuple(
      4,
      3,
    ): np.float64(0.0),
    tuple(
      4,
      4,
    ): np.float64(6.0),
    tuple(
      4,
      5,
    ): np.float64(0.0),
    tuple(
      4,
      6,
    ): np.float64(0.0),
    tuple(
      4,
      7,
    ): np.float64(0.0),
    tuple(
      4,
      8,
    ): np.float64(0.0),
    tuple(
      4,
      9,
    ): np.float64(0.0),
    tuple(
      4,
      10,
    ): np.float64(0.0),
    tuple(
      5,
      1,
    ): np.float64(0.0),
    tuple(
      5,
      2,
    ): np.float64(0.0),
    tuple(
      5,
      3,
    ): np.float64(0.0),
    tuple(
      5,
      4,
    ): np.float64(0.0),
    tuple(
      5,
      5,
    ): np.float64(1.6666666666666667),
    tuple(
      5,
      6,
    ): np.float64(0.0),
    tuple(
      5,
      7,
    ): np.float64(0.0),
    tuple(
      5,
      8,
    ): np.float64(0.0),
    tuple(
      5,
      9,
    ): np.float64(0.3333333333333333),
    tuple(
      5,
      10,
    ): np.float64(0.0),
    tuple(
      6,
      1,
    ): np.float64(0.0),
    tuple(
      6,
      2,
    ): np.float64(0.0),
    tuple(
      6,
      3,
    ): np.float64(0.0),
    tuple(
      6,
      4,
    ): np.float64(0.0),
    tuple(
      6,
      5,
    ): np.float64(0.0),
    tuple(
      6,
      6,
    ): np.float64(5.0),
    tuple(
      6,
      7,
    ): np.float64(0.0),
    tuple(
      6,
      8,
    ): np.float64(0.0),
    tuple(
      6,
      9,
    ): np.float64(0.0),
    tuple(
      6,
      10,
    ): np.float64(0.0),
    tuple(
      7,
      1,
    ): np.float64(0.0),
    tuple(
      7,
      2,
    ): np.float64(0.0),
    tuple(
      7,
      3,
    ): np.float64(0.3333333333333333),
    tuple(
      7,
      4,
    ): np.float64(0.0),
    tuple(
      7,
      5,
    ): np.float64(0.0),
    tuple(
      7,
      6,
    ): np.float64(0.0),
    tuple(
      7,
      7,
    ): np.float64(3.6666666666666665),
    tuple(
      7,
      8,
    ): np.float64(0.0),
    tuple(
      7,
      9,
    ): np.float64(0.0),
    tuple(
      7,
      10,
    ): np.float64(0.0),
    tuple(
      8,
      1,
    ): np.float64(0.0),
    tuple(
      8,
      2,
    ): np.float64(0.0),
    tuple(
      8,
      3,
    ): np.float64(0.0),
    tuple(
      8,
      4,
    ): np.float64(0.0),
    tuple(
      8,
      5,
    ): np.float64(0.0),
    tuple(
      8,
      6,
    ): np.float64(0.0),
    tuple(
      8,
      7,
    ): np.float64(0.0),
    tuple(
      8,
      8,
    ): np.float64(0.6666666666666666),
    tuple(
      8,
      9,
    ): np.float64(0.3333333333333333),
    tuple(
      8,
      10,
    ): np.float64(0.0),
    tuple(
      9,
      1,
    ): np.float64(0.0),
    tuple(
      9,
      2,
    ): np.float64(0.0),
    tuple(
      9,
      3,
    ): np.float64(0.0),
    tuple(
      9,
      4,
    ): np.float64(0.0),
    tuple(
      9,
      5,
    ): np.float64(0.3333333333333333),
    tuple(
      9,
      6,
    ): np.float64(0.0),
    tuple(
      9,
      7,
    ): np.float64(0.0),
    tuple(
      9,
      8,
    ): np.float64(0.3333333333333333),
    tuple(
      9,
      9,
    ): np.float64(4.0),
    tuple(
      9,
      10,
    ): np.float64(0.0),
    tuple(
      10,
      1,
    ): np.float64(0.3333333333333333),
    tuple(
      10,
      2,
    ): np.float64(0.0),
    tuple(
      10,
      3,
    ): np.float64(0.0),
    tuple(
      10,
      4,
    ): np.float64(0.0),
    tuple(
      10,
      5,
    ): np.float64(0.0),
    tuple(
      10,
      6,
    ): np.float64(0.0),
    tuple(
      10,
      7,
    ): np.float64(0.0),
    tuple(
      10,
      8,
    ): np.float64(0.0),
    tuple(
      10,
      9,
    ): np.float64(0.0),
    tuple(
      10,
      10,
    ): np.float64(5.666666666666667),
  })
# ---
# name: TestAggregationTrajectoryMetric.test_collect_as_dict_equivalence_with_snapshot[lcs]
  dict({
    tuple(
      1,
      1,
    ): np.float64(4.0),
    tuple(
      1,
      2,
    ): np.float64(0.6666666666666666),
    tuple(
      1,
      3,
    ): np.float64(0.3333333333333333),
    tuple(
      1,
      4,
    ): np.float64(0.6666666666666666),
    tuple(
      1,
      5,
    ): np.float64(0.3333333333333333),
    tuple(
      1,
      6,
    ): np.float64(0.6666666666666666),
    tuple(
      1,
      7,
    ): np.float64(0.6666666666666666),
    tuple(
      1,
      8,
    ): np.float64(0.0),
    tuple(
      1,
      9,
    ): np.float64(0.3333333333333333),
    tuple(
      1,
      10,
    ): np.float64(0.6666666666666666),
    tuple(
      2,
      1,
    ): np.float64(0.6666666666666666),
    tuple(
      2,
      2,
    ): np.float64(7.0),
    tuple(
      2,
      3,
    ): np.float64(0.6666666666666666),
    tuple(
      2,
      4,
    ): np.float64(1.0),
    tuple(
      2,
      5,
    ): np.float64(1.6666666666666667),
    tuple(
      2,
      6,
    ): np.float64(1.0),
    tuple(
      2,
      7,
    ): np.float64(0.3333333333333333),
    tuple(
      2,
      8,
    ): np.float64(0.6666666666666666),
    tuple(
      2,
      9,
    ): np.float64(1.0),
    tuple(
      2,
      10,
    ): np.float64(0.6666666666666666),
    tuple(
      3,
      1,
    ): np.float64(0.3333333333333333),
    tuple(
      3,
      2,
    ): np.float64(0.6666666666666666),
    tuple(
      3,
      3,
    ): np.float64(5.666666666666667),
    tuple(
      3,
      4,
    ): np.float64(1.0),
    tuple(
      3,
      5,
    ): np.float64(0.3333333333333333),
    tuple(
      3,
      6,
    ): np.float64(1.0),
    tuple(
      3,
      7,
    ): np.float64(0.6666666666666666),
    tuple(
      3,
      8,
    ): np.float64(0.3333333333333333),
    tuple(
      3,
      9,
    ): np.float64(1.0),
    tuple(
      3,
      10,
    ): np.float64(0.6666666666666666),
    tuple(
      4,
      1,
    ): np.float64(0.6666666666666666),
    tuple(
      4,
      2,
    ): np.float64(1.0),
    tuple(
      4,
      3,
    ): np.float64(1.0),
    tuple(
      4,
      4,
    ): np.float64(6.333333333333333),
    tuple(
      4,
      5,
    ): np.float64(1.0),
    tuple(
      4,
      6,
    ): np.float64(1.3333333333333333),
    tuple(
      4,
      7,
    ): np.float64(0.6666666666666666),
    tuple(
      4,
      8,
    ): np.float64(0.6666666666666666),
    tuple(
      4,
      9,
    ): np.float64(1.0),
    tuple(
      4,
      10,
    ): np.float64(1.0),
    tuple(
      5,
      1,
    ): np.float64(0.3333333333333333),
    tuple(
      5,
      2,
    ): np.float64(1.6666666666666667),
    tuple(
      5,
      3,
    ): np.float64(0.3333333333333333),
    tuple(
      5,
      4,
    ): np.float64(1.0),
    tuple(
      5,
      5,
    ): np.float64(6.666666666666667),
    tuple(
      5,
      6,
    ): np.float64(1.3333333333333333),
    tuple(
      5,
      7,
    ): np.float64(0.3333333333333333),
    tuple(
      5,
      8,
    ): np.float64(0.3333333333333333),
    tuple(
      5,
      9,
    ): np.float64(0.6666666666666666),
    tuple(
      5,
      10,
    ): np.float64(0.6666666666666666),
    tuple(
      6,
      1,
    ): np.float64(0.6666666666666666),
    tuple(
      6,
      2,
    ): np.float64(1.0),
    tuple(
      6,
      3,
    ): np.float64(1.0),
    tuple(
      6,
      4,
    ): np.float64(1.3333333333333333),
    tuple(
      6,
      5,
    ): np.float64(1.3333333333333333),
    tuple(
      6,
      6,
    ): np.float64(7.333333333333333),
    tuple(
      6,
      7,
    ): np.float64(0.3333333333333333),
    tuple(
      6,
      8,
    ): np.float64(0.0),
    tuple(
      6,
      9,
    ): np.float64(0.6666666666666666),
    tuple(
      6,
      10,
    ): np.float64(0.3333333333333333),
    tuple(
      7,
      1,
    ): np.float64(0.6666666666666666),
    tuple(
      7,
      2,
    ): np.float64(0.3333333333333333),
    tuple(
      7,
      3,
    ): np.float64(0.6666666666666666),
    tuple(
      7,
      4,
    ): np.float64(0.6666666666666666),
    tuple(
      7,
      5,
    ): np.float64(0.3333333333333333),
    tuple(
      7,
      6,
    ): np.float64(0.3333333333333333),
    tuple(
      7,
      7,
    ): np.float64(4.0),
    tuple(
      7,
      8,
    ): np.float64(0.3333333333333333),
    tuple(
      7,
      9,
    ): np.float64(0.3333333333333333),
    tuple(
      7,
      10,
    ): np.float64(1.0),
    tuple(
      8,
      1,
    ): np.float64(0.0),
    tuple(
      8,
      2,
    ): np.float64(0.6666666666666666),
    tuple(
      8,
      3,
    ): np.float64(0.3333333333333333),
    tuple(
      8,
      4,
    ): np.float64(0.6666666666666666),
    tuple(
      8,
      5,
    ): np.float64(0.3333333333333333),
    tuple(
      8,
      6,
    ): np.float64(0.0),
    tuple(
      8,
      7,
    ): np.float64(0.3333333333333333),
    tuple(
      8,
      8,
    ): np.float64(3.6666666666666665),
    tuple(
      8,
      9,
    ): np.float64(0.3333333333333333),
    tuple(
      8,
      10,
    ): np.float64(0.3333333333333333),
    tuple(
      9,
      1,
    ): np.float64(0.3333333333333333),
    tuple(
      9,
      2,
    ): np.float64(1.0),
    tuple(
      9,
      3,
    ): np.float64(1.0),
    tuple(
      9,
      4,
    ): np.float64(1.0),
    tuple(
      9,
      5,
    ): np.float64(0.6666666666666666),
    tuple(
      9,
      6,
    ): np.float64(0.6666666666666666),
    tuple(
      9,
      7,
    ): np.float64(0.3333333333333333),
    tuple(
      9,
      8,
    ): np.float64(0.3333333333333333),
    tuple(
      9,
      9,
    ): np.float64(4.0),
    tuple(
      9,
      10,
    ): np.float64(0.3333333333333333),
    tuple(
      10,
      1,
    ): np.float64(0.6666666666666666),
    tuple(
      10,
      2,
    ): np.float64(0.6666666666666666),
    tuple(
      10,
      3,
    ): np.float64(0.6666666666666666),
    tuple(
      10,
      4,
    ): np.float64(1.0),
    tuple(
      10,
      5,
    ): np.float64(0.6666666666666666),
    tuple(
      10,
      6,
    ): np.float64(0.3333333333333333),
    tuple(
      10,
      7,
    ): np.float64(1.0),
    tuple(
      10,
      8,
    ): np.float64(0.3333333333333333),
    tuple(
      10,
      9,
    ): np.float64(0.3333333333333333),
    tuple(
      10,
      10,
    ): np.float64(5.666666666666667),
  })
# ---
# name: TestAggregationTrajectoryMetric.test_collect_as_dict_equivalence_with_snapshot[linearpairwise]
  dict({
    tuple(
      1,
      1,
    ): np.float64(0.35454545454545455),
    tuple(
      1,
      2,
    ): np.float64(1.0),
    tuple(
      1,
      3,
    ): np.float64(0.9696969696969697),
    tuple(
      1,
      4,
    ): np.float64(1.0),
    tuple(
      1,
      5,
    ): np.float64(1.0),
    tuple(
      1,
      6,
    ): np.float64(1.0),
    tuple(
      1,
      7,
    ): np.float64(1.0),
    tuple(
      1,
      8,
    ): np.float64(1.0),
    tuple(
      1,
      9,
    ): np.float64(1.0),
    tuple(
      1,
      10,
    ): np.float64(0.8333333333333334),
    tuple(
      2,
      1,
    ): np.float64(1.0),
    tuple(
      2,
      2,
    ): np.float64(0.09722222222222221),
    tuple(
      2,
      3,
    ): np.float64(1.0),
    tuple(
      2,
      4,
    ): np.float64(0.9696969696969697),
    tuple(
      2,
      5,
    ): np.float64(0.9791666666666666),
    tuple(
      2,
      6,
    ): np.float64(0.9743589743589745),
    tuple(
      2,
      7,
    ): np.float64(0.9523809523809524),
    tuple(
      2,
      8,
    ): np.float64(1.0),
    tuple(
      2,
      9,
    ): np.float64(0.9166666666666666),
    tuple(
      2,
      10,
    ): np.float64(1.0),
    tuple(
      3,
      1,
    ): np.float64(0.9696969696969697),
    tuple(
      3,
      2,
    ): np.float64(1.0),
    tuple(
      3,
      3,
    ): np.float64(0.05128205128205129),
    tuple(
      3,
      4,
    ): np.float64(0.9696969696969697),
    tuple(
      3,
      5,
    ): np.float64(1.0),
    tuple(
      3,
      6,
    ): np.float64(1.0),
    tuple(
      3,
      7,
    ): np.float64(0.9523809523809524),
    tuple(
      3,
      8,
    ): np.float64(1.0),
    tuple(
      3,
      9,
    ): np.float64(1.0),
    tuple(
      3,
      10,
    ): np.float64(0.8030303030303031),
    tuple(
      4,
      1,
    ): np.float64(1.0),
    tuple(
      4,
      2,
    ): np.float64(0.9696969696969697),
    tuple(
      4,
      3,
    ): np.float64(0.9696969696969697),
    tuple(
      4,
      4,
    ): np.float64(0.16666666666666666),
    tuple(
      4,
      5,
    ): np.float64(0.9696969696969697),
    tuple(
      4,
      6,
    ): np.float64(1.0),
    tuple(
      4,
      7,
    ): np.float64(1.0),
    tuple(
      4,
      8,
    ): np.float64(0.9444444444444445),
    tuple(
      4,
      9,
    ): np.float64(1.0),
    tuple(
      4,
      10,
    ): np.float64(1.0),
    tuple(
      5,
      1,
    ): np.float64(1.0),
    tuple(
      5,
      2,
    ): np.float64(0.9791666666666666),
    tuple(
      5,
      3,
    ): np.float64(1.0),
    tuple(
      5,
      4,
    ): np.float64(0.9696969696969697),
    tuple(
      5,
      5,
    ): np.float64(0.14814814814814814),
    tuple(
      5,
      6,
    ): np.float64(0.9444444444444445),
    tuple(
      5,
      7,
    ): np.float64(0.9523809523809524),
    tuple(
      5,
      8,
    ): np.float64(1.0),
    tuple(
      5,
      9,
    ): np.float64(0.8333333333333334),
    tuple(
      5,
      10,
    ): np.float64(1.0),
    tuple(
      6,
      1,
    ): np.float64(1.0),
    tuple(
      6,
      2,
    ): np.float64(0.9743589743589745),
    tuple(
      6,
      3,
    ): np.float64(1.0),
    tuple(
      6,
      4,
    ): np.float64(1.0),
    tuple(
      6,
      5,
    ): np.float64(0.9444444444444445),
    tuple(
      6,
      6,
    ): np.float64(0.05128205128205129),
    tuple(
      6,
      7,
    ): np.float64(1.0),
    tuple(
      6,
      8,
    ): np.float64(1.0),
    tuple(
      6,
      9,
    ): np.float64(0.9523809523809524),
    tuple(
      6,
      10,
    ): np.float64(1.0),
    tuple(
      7,
      1,
    ): np.float64(1.0),
    tuple(
      7,
      2,
    ): np.float64(0.9523809523809524),
    tuple(
      7,
      3,
    ): np.float64(0.9523809523809524),
    tuple(
      7,
      4,
    ): np.float64(1.0),
    tuple(
      7,
      5,
    ): np.float64(0.9523809523809524),
    tuple(
      7,
      6,
    ): np.float64(1.0),
    tuple(
      7,
      7,
    ): np.float64(0.15873015873015872),
    tuple(
      7,
      8,
    ): np.float64(1.0),
    tuple(
      7,
      9,
    ): np.float64(1.0),
    tuple(
      7,
      10,
    ): np.float64(0.8888888888888888),
    tuple(
      8,
      1,
    ): np.float64(1.0),
    tuple(
      8,
      2,
    ): np.float64(1.0),
    tuple(
      8,
      3,
    ): np.float64(1.0),
    tuple(
      8,
      4,
    ): np.float64(0.9444444444444445),
    tuple(
      8,
      5,
    ): np.float64(1.0),
    tuple(
      8,
      6,
    ): np.float64(1.0),
    tuple(
      8,
      7,
    ): np.float64(1.0),
    tuple(
      8,
      8,
    ): np.float64(0.38095238095238093),
    tuple(
      8,
      9,
    ): np.float64(0.9523809523809524),
    tuple(
      8,
      10,
    ): np.float64(1.0),
    tuple(
      9,
      1,
    ): np.float64(1.0),
    tuple(
      9,
      2,
    ): np.float64(0.9166666666666666),
    tuple(
      9,
      3,
    ): np.float64(1.0),
    tuple(
      9,
      4,
    ): np.float64(1.0),
    tuple(
      9,
      5,
    ): np.float64(0.8333333333333334),
    tuple(
      9,
      6,
    ): np.float64(0.9523809523809524),
    tuple(
      9,
      7,
    ): np.float64(1.0),
    tuple(
      9,
      8,
    ): np.float64(0.9523809523809524),
    tuple(
      9,
      9,
    ): np.float64(0.16666666666666666),
    tuple(
      9,
      10,
    ): np.float64(0.9523809523809524),
    tuple(
      10,
      1,
    ): np.float64(0.8333333333333334),
    tuple(
      10,
      2,
    ): np.float64(1.0),
    tuple(
      10,
      3,
    ): np.float64(0.8030303030303031),
    tuple(
      10,
      4,
    ): np.float64(1.0),
    tuple(
      10,
      5,
    ): np.float64(1.0),
    tuple(
      10,
      6,
    ): np.float64(1.0),
    tuple(
      10,
      7,
    ): np.float64(0.8888888888888888),
    tuple(
      10,
      8,
    ): np.float64(1.0),
    tuple(
      10,
      9,
    ): np.float64(0.9523809523809524),
    tuple(
      10,
      10,
    ): np.float64(0.0),
  })
# ---
# name: TestAggregationTrajectoryMetric.test_collect_as_dict_equivalence_with_snapshot[softdtw]
  dict({
    tuple(
      1,
      1,
    ): np.float64(-1.768900904561337),
    tuple(
      1,
      2,
    ): np.float64(1.2592889443471578),
    tuple(
      1,
      3,
    ): np.float64(1.1481704351562587),
    tuple(
      1,
      4,
    ): np.float64(1.2621455149076162),
    tuple(
      1,
      5,
    ): np.float64(1.5473183254315632),
    tuple(
      1,
      6,
    ): np.float64(1.2087178949923816),
    tuple(
      1,
      7,
    ): np.float64(1.782331449354203),
    tuple(
      1,
      8,
    ): np.float64(1.4791543789235977),
    tuple(
      1,
      9,
    ): np.float64(1.4949396849010057),
    tuple(
      1,
      10,
    ): np.float64(0.7931779064923288),
    tuple(
      2,
      1,
    ): np.float64(1.2592889443471578),
    tuple(
      2,
      2,
    ): np.float64(-4.3377050942583955),
    tuple(
      2,
      3,
    ): np.float64(1.0888575183332592),
    tuple(
      2,
      4,
    ): np.float64(1.3597196292362925),
    tuple(
      2,
      5,
    ): np.float64(0.3647153215170979),
    tuple(
      2,
      6,
    ): np.float64(1.289822498637175),
    tuple(
      2,
      7,
    ): np.float64(2.6129231359573093),
    tuple(
      2,
      8,
    ): np.float64(1.8645986549442124),
    tuple(
      2,
      9,
    ): np.float64(2.0052124657290986),
    tuple(
      2,
      10,
    ): np.float64(1.1330506580717492),
    tuple(
      3,
      1,
    ): np.float64(1.148170435156259),
    tuple(
      3,
      2,
    ): np.float64(1.0888575183332594),
    tuple(
      3,
      3,
    ): np.float64(-3.360283609049231),
    tuple(
      3,
      4,
    ): np.float64(1.237561375668622),
    tuple(
      3,
      5,
    ): np.float64(1.5638177201593202),
    tuple(
      3,
      6,
    ): np.float64(1.240450496506529),
    tuple(
      3,
      7,
    ): np.float64(1.4747872097287171),
    tuple(
      3,
      8,
    ): np.float64(1.8060008662922709),
    tuple(
      3,
      9,
    ): np.float64(1.6117561722538347),
    tuple(
      3,
      10,
    ): np.float64(0.9416850490024314),
    tuple(
      4,
      1,
    ): np.float64(1.2621455149076162),
    tuple(
      4,
      2,
    ): np.float64(1.3597196292362927),
    tuple(
      4,
      3,
    ): np.float64(1.237561375668622),
    tuple(
      4,
      4,
    ): np.float64(-3.673276047910982),
    tuple(
      4,
      5,
    ): np.float64(1.5879397763285892),
    tuple(
      4,
      6,
    ): np.float64(1.24671125718118),
    tuple(
      4,
      7,
    ): np.float64(1.4709017306759546),
    tuple(
      4,
      8,
    ): np.float64(1.1078778184900517),
    tuple(
      4,
      9,
    ): np.float64(1.3819683584894342),
    tuple(
      4,
      10,
    ): np.float64(1.259732551662408),
    tuple(
      5,
      1,
    ): np.float64(1.5473183254315632),
    tuple(
      5,
      2,
    ): np.float64(0.3647153215170979),
    tuple(
      5,
      3,
    ): np.float64(1.5638177201593206),
    tuple(
      5,
      4,
    ): np.float64(1.5879397763285887),
    tuple(
      5,
      5,
    ): np.float64(-4.0230964922975545),
    tuple(
      5,
      6,
    ): np.float64(1.002704763753245),
    tuple(
      5,
      7,
    ): np.float64(3.1017945726010603),
    tuple(
      5,
      8,
    ): np.float64(2.2733805800426565),
    tuple(
      5,
      9,
    ): np.float64(2.291856124421068),
    tuple(
      5,
      10,
    ): np.float64(1.5768365787447198),
    tuple(
      6,
      1,
    ): np.float64(1.2087178949923814),
    tuple(
      6,
      2,
    ): np.float64(1.289822498637175),
    tuple(
      6,
      3,
    ): np.float64(1.240450496506529),
    tuple(
      6,
      4,
    ): np.float64(1.24671125718118),
    tuple(
      6,
      5,
    ): np.float64(1.002704763753245),
    tuple(
      6,
      6,
    ): np.float64(-4.231287470639429),
    tuple(
      6,
      7,
    ): np.float64(2.208852981113988),
    tuple(
      6,
      8,
    ): np.float64(1.818762517784308),
    tuple(
      6,
      9,
    ): np.float64(1.9461356667793757),
    tuple(
      6,
      10,
    ): np.float64(1.657833134202231),
    tuple(
      7,
      1,
    ): np.float64(1.7823314493542035),
    tuple(
      7,
      2,
    ): np.float64(2.6129231359573093),
    tuple(
      7,
      3,
    ): np.float64(1.474787209728717),
    tuple(
      7,
      4,
    ): np.float64(1.4709017306759546),
    tuple(
      7,
      5,
    ): np.float64(3.1017945726010603),
    tuple(
      7,
      6,
    ): np.float64(2.208852981113988),
    tuple(
      7,
      7,
    ): np.float64(-1.8323453977434843),
    tuple(
      7,
      8,
    ): np.float64(1.7979416906358507),
    tuple(
      7,
      9,
    ): np.float64(1.2979102852234463),
    tuple(
      7,
      10,
    ): np.float64(1.3275096483883886),
    tuple(
      8,
      1,
    ): np.float64(1.4791543789235977),
    tuple(
      8,
      2,
    ): np.float64(1.8645986549442124),
    tuple(
      8,
      3,
    ): np.float64(1.8060008662922709),
    tuple(
      8,
      4,
    ): np.float64(1.1078778184900517),
    tuple(
      8,
      5,
    ): np.float64(2.2733805800426565),
    tuple(
      8,
      6,
    ): np.float64(1.818762517784308),
    tuple(
      8,
      7,
    ): np.float64(1.7979416906358507),
    tuple(
      8,
      8,
    ): np.float64(-1.6942192088535502),
    tuple(
      8,
      9,
    ): np.float64(1.1948704387731206),
    tuple(
      8,
      10,
    ): np.float64(1.4101921900815944),
    tuple(
      9,
      1,
    ): np.float64(1.4949396849010057),
    tuple(
      9,
      2,
    ): np.float64(2.0052124657290986),
    tuple(
      9,
      3,
    ): np.float64(1.6117561722538347),
    tuple(
      9,
      4,
    ): np.float64(1.3819683584894342),
    tuple(
      9,
      5,
    ): np.float64(2.291856124421068),
    tuple(
      9,
      6,
    ): np.float64(1.9461356667793754),
    tuple(
      9,
      7,
    ): np.float64(1.2979102852234465),
    tuple(
      9,
      8,
    ): np.float64(1.1948704387731204),
    tuple(
      9,
      9,
    ): np.float64(-1.979104900014062),
    tuple(
      9,
      10,
    ): np.float64(1.4071208810140903),
    tuple(
      10,
      1,
    ): np.float64(0.7931779064923287),
    tuple(
      10,
      2,
    ): np.float64(1.133050658071749),
    tuple(
      10,
      3,
    ): np.float64(0.9416850490024317),
    tuple(
      10,
      4,
    ): np.float64(1.2597325516624076),
    tuple(
      10,
      5,
    ): np.float64(1.5768365787447196),
    tuple(
      10,
      6,
    ): np.float64(1.657833134202231),
    tuple(
      10,
      7,
    ): np.float64(1.3275096483883886),
    tuple(
      10,
      8,
    ): np.float64(1.4101921900815941),
    tuple(
      10,
      9,
    ): np.float64(1.4071208810140903),
    tuple(
      10,
      10,
    ): np.float64(-3.437245033368189),
  })
# ---
# name: TestAggregationTrajectoryMetric.test_collect_as_matrix_equivalence_with_snapshot[dtw]
  '''
  ,1,2,3,4,5,6,7,8,9,10
  1,5.666666666666667,8.0,6.333333333333333,7.0,8.666666666666666,8.0,4.666666666666667,5.666666666666667,4.333333333333333,5.666666666666667
  2,6.0,6.0,6.0,6.333333333333333,8.333333333333334,7.333333333333333,4.666666666666667,5.666666666666667,4.333333333333333,5.333333333333333
  3,6.0,8.0,5.0,6.666666666666667,8.666666666666666,7.666666666666667,4.0,5.666666666666667,4.0,5.666666666666667
  4,6.0,7.666666666666667,6.0,5.666666666666667,7.666666666666667,7.666666666666667,4.333333333333333,5.666666666666667,4.0,5.333333333333333
  5,6.0,7.333333333333333,6.333333333333333,7.0,7.0,8.0,4.666666666666667,5.666666666666667,4.333333333333333,5.666666666666667
  6,5.666666666666667,8.0,5.666666666666667,6.333333333333333,8.0,6.666666666666667,4.666666666666667,5.666666666666667,4.0,5.666666666666667
  7,6.0,8.0,6.333333333333333,6.666666666666667,8.666666666666666,8.0,3.6666666666666665,5.666666666666667,4.333333333333333,5.333333333333333
  8,6.0,8.0,6.333333333333333,7.0,8.666666666666666,8.0,4.666666666666667,5.0,4.333333333333333,5.666666666666667
  9,6.0,7.333333333333333,5.666666666666667,6.666666666666667,8.666666666666666,8.0,4.666666666666667,5.333333333333333,3.3333333333333335,5.666666666666667
  10,6.0,7.666666666666667,6.0,6.333333333333333,8.333333333333334,7.666666666666667,4.666666666666667,5.666666666666667,4.333333333333333,4.333333333333333
  
  '''
# ---
# name: TestAggregationTrajectoryMetric.test_collect_as_matrix_equivalence_with_snapshot[edit]
  '''
  ,1,2,3,4,5,6,7,8,9,10
  1,2.0,7.666666666666667,6.666666666666667,7.0,8.333333333333334,7.333333333333333,6.333333333333333,6.666666666666667,5.666666666666667,5.666666666666667
  2,7.666666666666667,1.0,7.666666666666667,8.0,8.0,8.666666666666666,8.333333333333334,8.0,7.0,7.666666666666667
  3,6.666666666666667,7.666666666666667,0.6666666666666666,7.333333333333333,9.0,8.0,6.0,7.333333333333333,6.0,6.0
  4,7.0,8.0,7.333333333333333,0.6666666666666666,8.666666666666666,7.666666666666667,6.333333333333333,6.666666666666667,6.333333333333333,7.0
  5,8.333333333333334,8.0,9.0,8.666666666666666,2.0,9.0,9.0,8.666666666666666,8.0,8.333333333333334
  6,7.333333333333333,8.666666666666666,8.0,7.666666666666667,9.0,0.6666666666666666,7.666666666666667,8.0,7.666666666666667,8.0
  7,6.333333333333333,8.333333333333334,6.0,6.333333333333333,9.0,7.666666666666667,0.6666666666666666,6.333333333333333,5.0,5.333333333333333
  8,6.666666666666667,8.0,7.333333333333333,6.666666666666667,8.666666666666666,8.0,6.333333333333333,2.0,5.333333333333333,6.333333333333333
  9,5.666666666666667,7.0,6.0,6.333333333333333,8.0,7.666666666666667,5.0,5.333333333333333,0.3333333333333333,5.333333333333333
  10,5.666666666666667,7.666666666666667,6.0,7.0,8.333333333333334,8.0,5.333333333333333,6.333333333333333,5.333333333333333,0.0
  
  '''
# ---
# name: TestAggregationTrajectoryMetric.test_collect_as_matrix_equivalence_with_snapshot[lcp]
  '''
  ,1,2,3,4,5,6,7,8,9,10
  1,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.3333333333333333
  2,0.0,3.3333333333333335,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0
  3,0.0,0.0,3.0,0.0,0.0,0.0,0.3333333333333333,0.0,0.0,0.0
  4,0.0,0.0,0.0,6.0,0.0,0.0,0.0,0.0,0.0,0.0
  5,0.0,0.0,0.0,0.0,1.6666666666666667,0.0,0.0,0.0,0.3333333333333333,0.0
  6,0.0,0.0,0.0,0.0,0.0,5.0,0.0,0.0,0.0,0.0
  7,0.0,0.0,0.3333333333333333,0.0,0.0,0.0,3.6666666666666665,0.0,0.0,0.0
  8,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.6666666666666666,0.3333333333333333,0.0
  9,0.0,0.0,0.0,0.0,0.3333333333333333,0.0,0.0,0.3333333333333333,4.0,0.0
  10,0.3333333333333333,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,5.666666666666667
  
  '''
# ---
# name: TestAggregationTrajectoryMetric.test_collect_as_matrix_equivalence_with_snapshot[lcs]
  '''
  ,1,2,3,4,5,6,7,8,9,10
  1,4.0,0.6666666666666666,0.3333333333333333,0.6666666666666666,0.3333333333333333,0.6666666666666666,0.6666666666666666,0.0,0.3333333333333333,0.6666666666666666
  2,0.6666666666666666,7.0,0.6666666666666666,1.0,1.6666666666666667,1.0,0.3333333333333333,0.6666666666666666,1.0,0.6666666666666666
  3,0.3333333333333333,0.6666666666666666,5.666666666666667,1.0,0.3333333333333333,1.0,0.6666666666666666,0.3333333333333333,1.0,0.6666666666666666
  4,0.6666666666666666,1.0,1.0,6.333333333333333,1.0,1.3333333333333333,0.6666666666666666,0.6666666666666666,1.0,1.0
  5,0.3333333333333333,1.6666666666666667,0.3333333333333333,1.0,6.666666666666667,1.3333333333333333,0.3333333333333333,0.3333333333333333,0.6666666666666666,0.6666666666666666
  6,0.6666666666666666,1.0,1.0,1.3333333333333333,1.3333333333333333,7.333333333333333,0.3333333333333333,0.0,0.6666666666666666,0.3333333333333333
  7,0.6666666666666666,0.3333333333333333,0.6666666666666666,0.6666666666666666,0.3333333333333333,0.3333333333333333,4.0,0.3333333333333333,0.3333333333333333,1.0
  8,0.0,0.6666666666666666,0.3333333333333333,0.6666666666666666,0.3333333333333333,0.0,0.3333333333333333,3.6666666666666665,0.3333333333333333,0.3333333333333333
  9,0.3333333333333333,1.0,1.0,1.0,0.6666666666666666,0.6666666666666666,0.3333333333333333,0.3333333333333333,4.0,0.3333333333333333
  10,0.6666666666666666,0.6666666666666666,0.6666666666666666,1.0,0.6666666666666666,0.3333333333333333,1.0,0.3333333333333333,0.3333333333333333,5.666666666666667
  
  '''
# ---
# name: TestAggregationTrajectoryMetric.test_collect_as_matrix_equivalence_with_snapshot[linearpairwise]
  '''
  ,1,2,3,4,5,6,7,8,9,10
  1,0.35454545454545455,1.0,0.9696969696969697,1.0,1.0,1.0,1.0,1.0,1.0,0.8333333333333334
  2,1.0,0.09722222222222221,1.0,0.9696969696969697,0.9791666666666666,0.9743589743589745,0.9523809523809524,1.0,0.9166666666666666,1.0
  3,0.9696969696969697,1.0,0.05128205128205129,0.9696969696969697,1.0,1.0,0.9523809523809524,1.0,1.0,0.8030303030303031
  4,1.0,0.9696969696969697,0.9696969696969697,0.16666666666666666,0.9696969696969697,1.0,1.0,0.9444444444444445,1.0,1.0
  5,1.0,0.9791666666666666,1.0,0.9696969696969697,0.14814814814814814,0.9444444444444445,0.9523809523809524,1.0,0.8333333333333334,1.0
  6,1.0,0.9743589743589745,1.0,1.0,0.9444444444444445,0.05128205128205129,1.0,1.0,0.9523809523809524,1.0
  7,1.0,0.9523809523809524,0.9523809523809524,1.0,0.9523809523809524,1.0,0.15873015873015872,1.0,1.0,0.8888888888888888
  8,1.0,1.0,1.0,0.9444444444444445,1.0,1.0,1.0,0.38095238095238093,0.9523809523809524,1.0
  9,1.0,0.9166666666666666,1.0,1.0,0.8333333333333334,0.9523809523809524,1.0,0.9523809523809524,0.16666666666666666,0.9523809523809524
  10,0.8333333333333334,1.0,0.8030303030303031,1.0,1.0,1.0,0.8888888888888888,1.0,0.9523809523809524,0.0
  
  '''
# ---
# name: TestAggregationTrajectoryMetric.test_collect_as_matrix_equivalence_with_snapshot[softdtw]
  '''
  ,1,2,3,4,5,6,7,8,9,10
  1,-1.768900904561337,1.2592889443471578,1.1481704351562587,1.2621455149076162,1.5473183254315632,1.2087178949923816,1.782331449354203,1.4791543789235977,1.4949396849010057,0.7931779064923288
  2,1.2592889443471578,-4.3377050942583955,1.0888575183332592,1.3597196292362925,0.3647153215170979,1.289822498637175,2.6129231359573093,1.8645986549442124,2.0052124657290986,1.1330506580717492
  3,1.148170435156259,1.0888575183332594,-3.360283609049231,1.237561375668622,1.5638177201593202,1.240450496506529,1.4747872097287171,1.8060008662922709,1.6117561722538347,0.9416850490024314
  4,1.2621455149076162,1.3597196292362927,1.237561375668622,-3.673276047910982,1.5879397763285892,1.24671125718118,1.4709017306759546,1.1078778184900517,1.3819683584894342,1.259732551662408
  5,1.5473183254315632,0.3647153215170979,1.5638177201593206,1.5879397763285887,-4.0230964922975545,1.002704763753245,3.1017945726010603,2.2733805800426565,2.291856124421068,1.5768365787447198
  6,1.2087178949923814,1.289822498637175,1.240450496506529,1.24671125718118,1.002704763753245,-4.231287470639429,2.208852981113988,1.818762517784308,1.9461356667793757,1.657833134202231
  7,1.7823314493542035,2.6129231359573093,1.474787209728717,1.4709017306759546,3.1017945726010603,2.208852981113988,-1.8323453977434843,1.7979416906358507,1.2979102852234463,1.3275096483883886
  8,1.4791543789235977,1.8645986549442124,1.8060008662922709,1.1078778184900517,2.2733805800426565,1.818762517784308,1.7979416906358507,-1.6942192088535502,1.1948704387731206,1.4101921900815944
  9,1.4949396849010057,2.0052124657290986,1.6117561722538347,1.3819683584894342,2.291856124421068,1.9461356667793754,1.2979102852234465,1.1948704387731204,-1.979104900014062,1.4071208810140903
  10,0.7931779064923287,1.133050658071749,0.9416850490024317,1.2597325516624076,1.5768365787447196,1.657833134202231,1.3275096483883886,1.4101921900815941,1.4071208810140903,-3.437245033368189
  
  '''
# ---
