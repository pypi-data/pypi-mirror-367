name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  PYTHONPATH: ${{ github.workspace }}
  UV_CACHE_DIR: ~/.cache/uv

jobs:
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync --all-extras --dev

      # Tests temporarily disabled for faster CI
      # - name: Run smoke tests
      #   run: ./scripts/test-smoke.sh

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit
        run: uv run pre-commit run --all-files

      - name: Run ruff check
        run: uv run ruff check .

      - name: Run mypy
        run: uv run mypy glovebox/

  fast-tests:
    name: Fast Tests - Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    needs: [smoke-tests, lint]
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --all-extras --dev

      # Tests temporarily disabled for faster CI
      # - name: Run fast unit tests
      #   run: ./scripts/test-fast.sh

  integration-tests:
    name: Integration Tests - Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    needs: [fast-tests]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'run-integration-tests'))
    
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12"]  # Reduced matrix for integration tests
        os: [ubuntu-latest, macos-latest]  # Skip Windows for integration tests
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python ${{ matrix.python-version }}
        run: uv python install ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Set up Docker (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo systemctl start docker
          sudo usermod -aG docker $USER

      - name: Set up Docker (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install docker
          colima start

      # Tests temporarily disabled for faster CI
      # - name: Run integration tests
      #   run: ./scripts/test-integration.sh

  full-test-coverage:
    name: Full Test Suite with Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [fast-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Set up Docker
        run: |
          sudo systemctl start docker
          sudo usermod -aG docker $USER

      # Tests temporarily disabled for faster CI
      # - name: Run full test suite with coverage
      #   run: ./scripts/test-full.sh

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [lint, fast-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            glovebox/glovebox
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [docker-build]
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Set up Docker
        run: |
          sudo systemctl start docker
          sudo usermod -aG docker $USER
          newgrp docker

      - name: Pull built Docker image
        run: docker pull glovebox/glovebox:${{ github.ref_name }}

      # Tests temporarily disabled for faster CI
      # - name: Run integration tests
      #   run: uv run pytest tests/ -m integration -v
        env:
          GLOVEBOX_DOCKER_IMAGE: glovebox/glovebox:${{ github.ref_name }}