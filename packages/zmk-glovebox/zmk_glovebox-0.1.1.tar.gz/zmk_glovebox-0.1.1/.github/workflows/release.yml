name: Release

on:
  push:
    tags:
      - 'v*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Pre-release Checks
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync --all-extras --dev

      # Tests temporarily disabled for faster releases
      # - name: Run tests (optional)
      #   run: uv run pytest -v || echo "::warning::Tests failed but continuing with release"
      #   continue-on-error: true

      - name: Run linting (optional)
        run: |
          uv run ruff check . || echo "::warning::Ruff check failed but continuing with release"
          uv run mypy glovebox/ || echo "::warning::Mypy check failed but continuing with release"
        continue-on-error: true

  build-python:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v4

      - name: Set up Python
        run: uv python install 3.11

      - name: Install dependencies
        run: uv sync --all-extras --dev

      - name: Build package
        run: uv build

      - name: Store package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build-python
    timeout-minutes: 10
    environment:
      name: pypi
      url: https://pypi.org/p/glovebox
    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing
    
    steps:
      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish package to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: publish-pypi
    timeout-minutes: 10
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download package artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Extract version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: changelog
        run: |
          # Generate changelog from git commits since last tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "## Changes since $PREVIOUS_TAG" >> $GITHUB_OUTPUT
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG=First release" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.version.outputs.VERSION }}
          body: |
            # Glovebox ${{ steps.version.outputs.VERSION }}

            ${{ steps.changelog.outputs.CHANGELOG }}

            ## Installation

            ### Via pip
            ```bash
            pip install glovebox==${{ steps.version.outputs.VERSION }}
            ```

            ## Full Changelog
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.changelog.outputs.PREVIOUS_TAG }}...${{ github.ref_name }}
          files: dist/*
          draft: false
          prerelease: ${{ contains(steps.version.outputs.VERSION, '-') }}
          generate_release_notes: true