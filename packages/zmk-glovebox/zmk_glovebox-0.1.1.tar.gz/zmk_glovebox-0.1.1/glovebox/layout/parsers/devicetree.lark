// ZMK Device Tree Grammar for Lark Parser
// Supports ZMK keymap files, behaviors, combos, macros, and custom sections

start: item*

?item: include_statement
     | preprocessor_directive  
     | node
     | property
     | comment
     | deletion
     | semicolon
     | NEWLINE

// Include statements (#include)
include_statement: INCLUDE_DIRECTIVE include_path

include_path: STRING                    // "file.h"
            | "<" include_file_path ">" // <dt-bindings/zmk/keys.h>

include_file_path: path_component ("/" path_component)*

path_component: IDENTIFIER ("." IDENTIFIER)?

// Enhanced preprocessor directives support
preprocessor_directive: preprocessor_if
                      | preprocessor_ifdef  
                      | preprocessor_ifndef
                      | preprocessor_define
                      | preprocessor_undef
                      | preprocessor_else
                      | preprocessor_elif
                      | preprocessor_endif
                      | preprocessor_error

// Conditional preprocessor directives
preprocessor_if: "#if" preprocessor_expression
preprocessor_ifdef: "#ifdef" IDENTIFIER
preprocessor_ifndef: "#ifndef" IDENTIFIER
preprocessor_else: "#else"
preprocessor_elif: "#elif" preprocessor_expression
preprocessor_endif: "#endif"

// Define/undefine directives  
preprocessor_define: "#define" IDENTIFIER [define_value] [SINGLE_LINE_COMMENT]
preprocessor_undef: "#undef" IDENTIFIER
preprocessor_error: "#error" STRING

define_value: define_token+

define_token: AMPERSAND IDENTIFIER     // &identifier
            | function_call            // Function calls like RGB_COLOR_HSB(0,100,50) or _C(LS(Z))
            | arithmetic_expression    // Arithmetic expressions like ((6 - DIFFICULTY_LEVEL) * 100)
            | preprocessor_value       // String, number, identifier

// Arithmetic expressions for #define directives
arithmetic_expression: "(" arithmetic_expr ")"

arithmetic_expr: arithmetic_term (arithmetic_op arithmetic_term)*

arithmetic_op: "+" | "-" | "*" | "/" | "%" | "<<" | ">>"

arithmetic_term: "(" arithmetic_expr ")"     // Parenthetical expressions
               | IDENTIFIER                   // Variables like DIFFICULTY_LEVEL
               | HEX_NUMBER                   // Hex numbers
               | DEC_NUMBER                   // Decimal numbers
               | function_call                // Function calls

// Simple preprocessor lines (fallback for unknown directives)
// Note: Removed generic fallback to avoid conflicts with #property syntax

// Preprocessor expressions with logical operators and functions
preprocessor_expression: preprocessor_term (logical_op preprocessor_term)*

logical_op: "||" | "&&" | "==" | "!=" | "<" | ">" | "<=" | ">="

preprocessor_term: defined_function
                 | builtin_function
                 | negation_term
                 | paren_expression
                 | simple_term

defined_function: "defined" "(" IDENTIFIER ")"

builtin_function: IDENTIFIER "(" builtin_args ")"

builtin_args: [builtin_arg ("," builtin_arg)*]

builtin_arg: "<" include_file_path ">"  // <file.h>
           | STRING                     // "file.h"
           | IDENTIFIER                 // identifier
           | HEX_NUMBER                 // 0x123
           | DEC_NUMBER                 // 123

negation_term: "!" preprocessor_term

paren_expression: "(" preprocessor_expression ")"

simple_term: IDENTIFIER
           | HEX_NUMBER
           | DEC_NUMBER
           | STRING
           | CHAR_LITERAL

CHAR_LITERAL: /'[^']*'/

// Preprocessor values for #define
preprocessor_value: STRING
                  | HEX_NUMBER
                  | DEC_NUMBER
                  | IDENTIFIER
                  | CHAR_LITERAL

// Node definitions
node: label? node_path "{" item* "}" [";"]
    | reference_node_modification

// Node reference modification (e.g., &existing_node { ... })
reference_node_modification: "&" IDENTIFIER "{" item* "}" [";"]

label: IDENTIFIER ":"

node_path: path_segment ("/" path_segment)*
         | "/"

path_segment: IDENTIFIER
            | IDENTIFIER "@" HEX_NUMBER

// Property definitions  
property: property_name "=" property_values ";"
        | property_name ";"

property_name: IDENTIFIER | hash_property

hash_property: "#" IDENTIFIER

// Property values can be comma-separated with possible preprocessor directives
property_values: property_value_item ("," property_value_item)*

property_value_item: value | preprocessor_directive

// Standalone semicolons (common in device tree)
semicolon: ";"

// Value types
?value: string_value
      | number_value
      | array_value
      | reference_value
      | boolean_value
      | identifier_value

identifier_value: IDENTIFIER

string_value: STRING

number_value: HEX_NUMBER
            | DEC_NUMBER

array_value: "<" array_content ">"

array_content: [array_item*]

array_item: array_token
          | preprocessor_directive

array_token: reference_token    // References like &kp
           | function_call      // Function calls like LS(END)
           | IDENTIFIER         // Identifiers like Q, A, etc.
           | HEX_NUMBER        // Numbers like 0x1234
           | DEC_NUMBER        // Numbers like 123  
           | STRING            // Strings like "text"

// Function call syntax (e.g., LS(END), LCTRL(A), _C(LS(Z)))
function_call: IDENTIFIER "(" function_args ")"

function_args: [function_arg ("," function_arg)*]

function_arg: function_call    // Nested function calls like LS(Z) in _C(LS(Z))
            | IDENTIFIER       // Identifiers like LEFT, RIGHT, Z, etc.
            | HEX_NUMBER       // Hex numbers
            | DEC_NUMBER       // Decimal numbers  
            | STRING           // String literals
            | CHAR_LITERAL     // Character literals

reference_token: AMPERSAND IDENTIFIER

reference_value: "&" IDENTIFIER
               | "&{" path "}"

path: "/" path_segment*
    | path_segment ("/" path_segment)*

boolean_value: "true" | "false"

// Node deletions
deletion: "/delete-node/" IDENTIFIER ";"
        | "/delete-property/" IDENTIFIER ";"

// Comments
comment: SINGLE_LINE_COMMENT
       | MULTI_LINE_COMMENT

// Terminals
INCLUDE_DIRECTIVE: "#include"

// Support for line continuations in preprocessor directives
LINE_CONTINUATION: /\\\r?\n/

IDENTIFIER: /[a-zA-Z_][a-zA-Z0-9_-]*/

STRING: /"[^"]*"/
      | /'[^']*'/

HEX_NUMBER: /0x[0-9a-fA-F]+/
DEC_NUMBER: /[0-9]+/

SINGLE_LINE_COMMENT: /\/\/[^\r\n]*/
MULTI_LINE_COMMENT: /\/\*(.|\n)*?\*\//

AMPERSAND: "&"
HASH: "#"

// Whitespace and newlines
%import common.WS
%ignore WS

NEWLINE: /\r?\n/