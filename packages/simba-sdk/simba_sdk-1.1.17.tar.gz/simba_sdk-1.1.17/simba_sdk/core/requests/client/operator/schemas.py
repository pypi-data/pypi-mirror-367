# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2025-05-13T20:28:28+00:00

from __future__ import annotations

import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import BaseModel, Field, RootModel
from typing_extensions import Annotated


class Total(RootModel[int]):
    root: Annotated[int, Field(ge=0, title="Total")]


class Page(RootModel[int]):
    root: Annotated[int, Field(ge=1, title="Page")]


class Size(RootModel[int]):
    root: Annotated[int, Field(ge=1, title="Size")]


class Pages(RootModel[int]):
    root: Annotated[int, Field(ge=0, title="Pages")]


class Purpose(str, Enum):
    """
    The purpose of a Job/DeploymentSet
    """

    SEE = "SEE"


class SEEState(str, Enum):
    """
    Representation of the actual state of the SEE resource
    """

    PENDING = "PENDING"
    BUILDING = "BUILDING"
    READY = "READY"
    SHUTDOWN = "SHUTDOWN"
    ERRORED = "ERRORED"


class SeeRequestedState(str, Enum):
    """
    Representation of the requested state of the SEE resource
    """

    RUNNING = "RUNNING"
    STOPPED = "STOPPED"


class SimbaState(str, Enum):
    """
    A Representation of the state of the SEE in Kubernetes
    """

    PENDING = "PENDING"
    BUILDING = "BUILDING"
    READY = "READY"
    SHUTDOWN = "SHUTDOWN"
    ERRORED = "ERRORED"


class ValidationError(BaseModel):
    loc: Annotated[List[Union[str, int]], Field(title="Location")]
    msg: Annotated[str, Field(title="Message")]
    type: Annotated[str, Field(title="Error Type")]


class HTTPValidationError(BaseModel):
    detail: Annotated[Optional[List[ValidationError]], Field(None, title="Detail")]


class JobRequestStatusEvent(BaseModel):
    """
    An internal event to signal that a Job status has changed
    """

    id: Annotated[UUID, Field(title="Id")]
    purpose: Purpose
    current_state: SeeRequestedState
    job_state: Optional[SimbaState] = SimbaState.PENDING
    hostname: Annotated[Optional[str], Field(None, title="Hostname")]


class SeeRequestCreate(BaseModel):
    id: Annotated[Optional[UUID], Field(None, title="Id")]
    deleted_at: Annotated[Optional[datetime.datetime], Field(None, title="Deleted At")]
    created_on: Annotated[Optional[datetime.datetime], Field(None, title="Created On")]
    updated_at: Annotated[Optional[datetime.datetime], Field(None, title="Updated At")]
    template: Annotated[str, Field(title="Template")]
    requested_state: Optional[SeeRequestedState] = None
    ttl_in_seconds: Annotated[Optional[int], Field(None, title="Ttl In Seconds")]
    config: Annotated[Optional[Dict[str, Any]], Field(None, title="Config")]


class SeeRequestPublic(BaseModel):
    id: Annotated[Optional[UUID], Field(None, title="Id")]
    deleted_at: Annotated[Optional[datetime.datetime], Field(None, title="Deleted At")]
    created_on: Annotated[Optional[datetime.datetime], Field(None, title="Created On")]
    updated_at: Annotated[Optional[datetime.datetime], Field(None, title="Updated At")]
    template: Annotated[str, Field(title="Template")]
    requested_state: Optional[SeeRequestedState] = None
    ttl_in_seconds: Annotated[Optional[int], Field(title="Ttl In Seconds")]
    config: Annotated[Optional[Dict[str, Any]], Field(None, title="Config")]
    user: Annotated[str, Field(title="User")]
    hostname: Annotated[Optional[str], Field(title="Hostname")]
    status: Optional[SEEState] = None


class SeeRequestUpdate(BaseModel):
    id: Annotated[Optional[UUID], Field(None, title="Id")]
    template: Annotated[Optional[str], Field(None, title="Template")]
    requested_state: Optional[SeeRequestedState] = None
    config: Annotated[Optional[Dict[str, Any]], Field(None, title="Config")]
    ttl_in_seconds: Annotated[Optional[int], Field(None, title="Ttl In Seconds")]


class CloudEventModelJobRequestStatusEvent(BaseModel):
    data: Optional[JobRequestStatusEvent] = None
    datacontenttype: Annotated[str, Field(title="Datacontenttype")]
    id: Annotated[str, Field(title="Id")]
    pubsubname: Annotated[str, Field(title="Pubsubname")]
    source: Annotated[str, Field(title="Source")]
    specversion: Annotated[str, Field(title="Specversion")]
    topic: Annotated[str, Field(title="Topic")]
    traceid: Annotated[str, Field(title="Traceid")]
    traceparent: Annotated[str, Field(title="Traceparent")]
    tracestate: Annotated[str, Field(title="Tracestate")]
    type: Annotated[str, Field(title="Type")]


class PageSeeRequestPublic(BaseModel):
    items: Annotated[List[SeeRequestPublic], Field(title="Items")]
    total: Annotated[Optional[Total], Field(title="Total")]
    page: Annotated[Optional[Page], Field(title="Page")]
    size: Annotated[Optional[Size], Field(title="Size")]
    pages: Annotated[Optional[Pages], Field(None, title="Pages")]
