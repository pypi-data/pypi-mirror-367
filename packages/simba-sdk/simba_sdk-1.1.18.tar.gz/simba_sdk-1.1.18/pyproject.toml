[tool.poetry]
name = "simba-sdk"
version = "1.1.18"
description = "Python SDK for interacting with SIMBA Ensure"
authors = ["SIMBA Chain, Inc."]
maintainers = ["Liam Hiley <liam.hiley@simbachain.com>"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules"
]
readme = "README.md"
homepage = "https://github.com/SIMBAChain/simba-sdk-for-python"
documentation = "https://simbachain.github.io/simba-sdk-for-python"

packages = [
    { include = "simba_sdk"}
]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/SIMBAChain/simba-sdk-for-python/issues"

[tool.poetry.dependencies]
python = "^3.10.0"

urllib3 = "^2.2.2"
keyring = "^25.2.1"
pydantic = {version = "^2.8.2", extras = ["email"]}

datamodel-code-generator = "^0.25.9"
httpx = "^0.28.1"
pydantic-settings = {version = ">=2.6.1,<3.0.0"}
openapi-pydantic = "^0.4.1"
eth-account = "^0.13.4"
typeguard = "^4.4.2"


[tool.poetry.group.dev.dependencies]
pytest-dotenv = "^0.5.2"
typeguard = "^4.4.3"
ruff = "^0.9.9"
pytest-cov = "^5.0.0"
commitizen = "^3.27.0"
pre-commit = "^3.7.1"
python-semantic-release = "^9.8.3"
coverage = "^7.5.4"
lxml = "^5.2.2"
pymdown-extensions = "^10.9"
mkdocs = "^1.6.0"
mkdocs-material = "^9.5.33"
mkdocs-autorefs = "^1.1.0"
mkdocstrings = "^0.25.2"
pytest = {version = "^8.3.2", extras = ["{asyncio}"]}
pytest-asyncio = "^0.23.8"
taskipy = "^1.14.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.taskipy.settings]
use_vars = true

[tool.taskipy.variables]
test_artifacts = "--cov=simba_sdk --cov-report term:skip-covered --cov-config=.coveragerc"

[tool.taskipy.tasks]
pre-commit = "pre-commit install -t pre-commit -t pre-push"

check = {cmd = "ruff check" }
watch = {cmd = "ruff check --fix --watch" }
fix = {cmd = "ruff check --fix" }
format = {cmd = "ruff format" }

isort = { cmd = "isort simba-sdk tests", help = "Sort imports" }

# Tests
test_unit = { cmd = "pytest tests/unit {test_artifacts} --rootdir=." }
test_integration = { cmd = "pytest tests/integration {test_artifacts} --rootdir=." }

tests = { cmd = "pytest tests" }

[tool.semantic_release]
version_variable = [
    'simba_sdk/__init__.py:__version__',
]
version_toml = [
    "pyproject.toml:tool.poetry.version"
]
version_source = 'tag'
major_on_zero = false
branch = "main"
upload_to_pypi = false
upload_to_release = true
hvcs = "gitlab"
build_command = "pip install poetry && poetry build"
commit_version_number = true
commit_subject = "chore(release): {version}"

[tool.isort]
profile="black"
atomic=true
include_trailing_comma=true
lines_after_imports=2
lines_between_types=1
use_parentheses=true
skip_glob="*/setup.py"
filter_files=true
known_first_party="poetry"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F", "I"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
pythonpath = [
    "simba-sdk"
]
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
env_files = ".env"
addopts = [
    "--import-mode=importlib",
]

[tool.coverage.run]
branch=true
source=[
    "simba_sdk"
]
omit = ["tests", ".venv"]
