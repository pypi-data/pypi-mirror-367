[build-system]
requires = [ "hatchling",]
build-backend = "hatchling.build"

[project]
name = "datason"
version = "0.12.0"
description = "A comprehensive Python package for intelligent serialization that handles complex data types with ease."
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
keywords = [ "serialization", "json", "pandas", "datetime", "numpy", "ml", "ai", "data-science",]
classifiers = [ "Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: 3.10", "Programming Language :: Python :: 3.11", "Programming Language :: Python :: 3.12", "Programming Language :: Python :: 3.13", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Utilities", "Typing :: Typed",]
dependencies = []
[[project.authors]]
name = "datason Contributors"

[[project.maintainers]]
name = "datason Maintainers"
email = "maintainers@datason.dev"

[project.optional-dependencies]
pandas = [ "pandas>=1.3.0",]
numpy = [ "numpy>=1.21.0",]
ml = [ "torch>=1.12.0", "tensorflow>=2.10.0", "scikit-learn>=1.1.0", "scipy>=1.9.0", "Pillow>=9.0.0", "catboost>=1.2.0", "optuna>=3.0.0", "plotly>=5.0.0", "polars>=0.20.0",]
ml-extra = [ "jax[cpu]>=0.4.0", "transformers>=4.20.0", "keras>=3.0.0",]
crypto = [ "cryptography>=42.0.0",]
all = [ "pandas>=1.3.0", "numpy>=1.21.0", "torch>=1.12.0", "tensorflow>=2.10.0", "scikit-learn>=1.1.0", "scipy>=1.9.0", "Pillow>=9.0.0", "catboost>=1.2.0", "optuna>=3.0.0", "plotly>=5.0.0", "polars>=0.20.0", "cryptography>=42.0.0",]
dev = [ "pytest>=7.4.0", "pytest-cov>=4.1.0", "pytest-xdist>=3.3.0", "pytest-benchmark>=4.0.0", "ruff>=0.1.6", "mypy>=1.6.0", "types-requests>=2.31.0", "bandit[toml]>=1.7.5", "safety>=2.3.5", "semgrep>=1.45.0", "mkdocs>=1.5.3", "mkdocs-material>=9.4.0", "mkdocstrings[python]>=0.23.0", "mkdocs-gen-files>=0.5.0", "mkdocs-literate-nav>=0.6.1", "twine>=4.0.2", "build>=1.0.3", "hatch>=1.7.0", "pre-commit>=3.5.0", "pip-audit>=2.6.1", "pip-tools>=7.3.0",]
docs = [ "mkdocs>=1.5.3", "mkdocs-material>=9.4.0", "mkdocstrings[python]>=0.23.0", "mkdocs-gen-files>=0.5.0", "mkdocs-literate-nav>=0.6.1",]

[project.urls]
Homepage = "https://github.com/danielendler/datason"
Documentation = "https://datason.readthedocs.io"
Repository = "https://github.com/danielendler/datason"
"Bug Tracker" = "https://github.com/danielendler/datason/issues"
Changelog = "https://github.com/danielendler/datason/blob/main/CHANGELOG.md"
Discussions = "https://github.com/danielendler/datason/discussions"
Funding = "https://github.com/sponsors/danielendler"

[tool.ruff]
line-length = 120
target-version = "py38"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true
[[tool.mypy.overrides]]
module = [ "pandas.*", "numpy.*", "torch.*", "tensorflow.*", "sklearn.*", "scipy.*", "jax.*", "PIL.*", "transformers.*", "catboost.*", "keras.*", "optuna.*", "plotly.*", "polars.*",]
ignore_missing_imports = true

[tool.bandit]
exclude_dirs = [ "tests", "venv", ".venv", "scripts",]
skips = [ "B101",]

[tool.ruff.lint]
select = [ "E", "W", "F", "I", "B", "C4", "UP", "SIM",]
ignore = [ "E501", "B008", "C901", "SIM105", "SIM117", "B017", "B007",]

[tool.bandit.assert_used]
skips = [ "*/test_*.py", "*/tests/*",]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [ "-v", "--cov=datason", "--cov-report=term-missing", "--cov-report=html", "--cov-report=xml", "--strict-markers", "--strict-config", "--tb=short", "-m", "not benchmark",]
testpaths = [ "tests/unit", "tests/core", "tests/features", "tests/integration", "tests/coverage", "tests/test_new_ml_frameworks.py", "tests/test_modern_api.py", "tests/test_configurable_caching.py", "tests/test_unified_ml_handlers.py",]
python_files = [ "test_*.py",]
python_classes = [ "Test*",]
python_functions = [ "test_*",]
markers = [ "slow: marks tests as slow (deselect with '-m \"not slow\"')", "integration: marks tests as integration tests", "benchmark: marks tests as benchmarks (in tests/benchmarks/)", "core: marks core functionality tests (no optional dependencies)", "coverage: marks coverage boost tests (in tests/coverage/)", "features: marks feature-specific tests", "numpy: marks tests requiring numpy", "pandas: marks tests requiring pandas", "sklearn: marks tests requiring scikit-learn", "ml: marks tests requiring ML libraries (torch, tensorflow, etc.)", "catboost: marks tests requiring catboost", "keras: marks tests requiring keras", "optuna: marks tests requiring optuna", "plotly: marks tests requiring plotly", "polars: marks tests requiring polars", "optional: marks tests for optional dependency functionality", "fallback: marks tests for fallback behavior when dependencies are missing",]
filterwarnings = [ "error", "default::UserWarning", "ignore::DeprecationWarning", "ignore::PendingDeprecationWarning",]

[tool.coverage.run]
source = [ "datason",]
omit = [ "*/tests/*", "*/test_*.py", "scripts/*", "examples/*",]
branch = true

[tool.coverage.report]
exclude_lines = [ "pragma: no cover", "def __repr__", "if self.debug:", "if settings.DEBUG", "raise AssertionError", "raise NotImplementedError", "if 0:", "if __name__ == .__main__.:", "class .*\\bProtocol\\):", "@(abc\\.)?abstractmethod", "TYPE_CHECKING",]
show_missing = true
skip_covered = false

[tool.coverage.html]
directory = "htmlcov"

[tool.ruff.lint.per-file-ignores]
"examples/*.py" = [ "T201",]
"tests/test_benchmarks.py" = [ "T201",]
"tests/test_*.py" = [ "E402",]

[tool.hatch.build.targets.wheel]
packages = [ "datason",]

[tool.hatch.build.targets.sdist]
exclude = [ "/.git", "/.github", "/.mypy_cache", "/.pytest_cache", "/.ruff_cache", "/venv", "/htmlcov", "/.coverage", "/coverage.xml", "/dist", "/build", "*.egg-info", "__pycache__", "/examples", "/tests", "/.pre-commit-config.yaml",]
