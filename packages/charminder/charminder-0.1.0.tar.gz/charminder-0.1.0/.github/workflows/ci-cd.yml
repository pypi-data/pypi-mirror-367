name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PACKAGE_NAME: charminder

jobs:
  ci:
    name: Tests & Quality Checks
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.11", "3.12", "3.13"]
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
        
    - name: Install dependencies
      run: |
        uv sync --extra test
        
    - name: Run tests with coverage
      run: |
        uv run pytest -v --tb=short
        
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.11'
      uses: codecov/codecov-action@v4
      with:
        file: ./htmlcov/index.html
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Install dependencies and linting tools
      run: |
        uv sync --extra dev --extra test
        uv tool install ruff
        
    - name: Run ruff (format check)
      run: uv tool run ruff format --check .
      
    - name: Run ruff (lint)
      run: uv tool run ruff check .
      
    - name: Run mypy (type checking)
      run: uv run mypy src/

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [ci, lint]
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Build package
      run: |
        uv build
        
    - name: Check package metadata
      run: |
        uv tool install twine
        uv tool run twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
        retention-days: 7

  test-install:
    name: Test Installation
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/
        
    - name: Install package from wheel
      run: |
        python -m pip install --find-links dist/ ${{ env.PACKAGE_NAME }}
        
    - name: Test CLI functionality
      run: |
        charminder --help
        echo "Hello, World!" > test.txt
        charminder -f test.txt -e UTF8

  publish-test:
    name: Publish to TestPyPI
    runs-on: ubuntu-latest
    needs: [ci, lint, build, test-install]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      id-token: write  # Required for trusted publishing
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/
        
    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        verbose: true
        print-hash: true

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [ci, lint, build, test-install]
    if: github.event_name == 'release' && github.event.action == 'published'
    permissions:
      id-token: write  # Required for trusted publishing
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-packages
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        print-hash: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Install dependencies
      run: uv sync --extra test
      
    - name: Run safety check
      run: |
        uv tool install safety
        uv tool run safety check
        
    - name: Run bandit security scan
      run: |
        uv tool install bandit
        uv tool run bandit -r src/ -f json -o bandit-report.json
        
    - name: Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 30