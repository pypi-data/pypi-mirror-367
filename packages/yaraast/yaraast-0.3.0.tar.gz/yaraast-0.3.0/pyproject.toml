[project]
name = "yaraast"
version = "0.3.0"
description = "A Python library for parsing and manipulating YARA rules using Abstract Syntax Trees"
authors = [{name = "Marc Rivero", email = "mriverolopez@gmail.com"}]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.13"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "click>=8.1.0",
    "rich>=13.0.0",
    "attrs>=23.0.0",
    "PyYAML>=6.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.0.0",
    "hypothesis>=6.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=7.0.0",
    "flake8-docstrings>=1.7.0",
    "flake8-bugbear>=23.0.0",
    "flake8-comprehensions>=3.14.0",
    "flake8-simplify>=0.20.0",
    "ruff>=0.1.0",
    "mypy>=1.8.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    "pydocstyle>=6.3.0",
    "safety>=2.3.0",
    "types-PyYAML>=6.0.0",
    "types-requests>=2.31.0",
]
libyara = [
    "yara-python>=4.5.0",
]
performance = [
    "psutil>=5.9.0",
]
visualization = [
    "graphviz>=0.20.0",
]
quality = [
    "qlty>=0.1.0",
]
all = [
    "yaraast[dev,libyara,performance,visualization,quality]",
]

[project.scripts]
yaraast = "yaraast.cli.main:cli"

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["."]
include = ["yaraast*"]


# Black configuration
[tool.black]
line-length = 100
target-version = ['py313']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | venv
  | build
  | dist
  | _pb2\.py
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["venv/*", "build/*", "dist/*", "*_pb2.py"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=yaraast",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-branch",
    "-n", "auto",  # Use pytest-xdist for parallel testing
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "hypothesis: marks property-based tests using hypothesis",
    "libyara: marks tests that require yara-python",
    "quality: marks tests for code quality metrics",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning:.*yara.*",
    "ignore::DeprecationWarning:.*protobuf.*",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["yaraast"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/_version.py",
    "*/venv/*",
    "*/build/*",
    "*/dist/*",
    "*/_pb2.py",
    "*/_pb2_grpc.py",
]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
    "except ImportError:",
    "except ModuleNotFoundError:",
    "if TYPE_CHECKING:",
]
show_missing = true
precision = 2
fail_under = 90.0

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", "build", "dist"]
severity = "medium"
confidence = "medium"
skips = [
    "B101",  # assert_used - legitimate in tests
    "B110",  # try_except_pass - legitimate error handling patterns
    "B324",  # hashlib_insecure_function - MD5 used for non-security purposes (checksums)
    "B601",  # shell=True warnings
]

# Mypy configuration - Gradual typing for parser library
[tool.mypy]
python_version = "3.13"
# Use gradual typing approach - mypy.ini has the detailed config
strict = false
warn_return_any = false
warn_unused_configs = true
disallow_any_generics = false
disallow_subclassing_any = false
disallow_untyped_calls = false
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
implicit_reexport = true
strict_equality = true
strict_concatenate = false
show_error_codes = true
show_column_numbers = true

# Third-party modules without stubs
[[tool.mypy.overrides]]
module = [
    "yara.*",
    "rich.*",
    "click.*",
    "pytest.*",
    "hypothesis.*",
    "attrs.*",
    "protobuf.*",
    "yaml.*",
    "graphviz.*",
    "psutil.*",
]
ignore_missing_imports = true

# Pydocstyle configuration
[tool.pydocstyle]
add-ignore = ["D100", "D101", "D102", "D103", "D104", "D105", "D107", "D202", "D203", "D212", "D213", "D401", "D402", "D403", "D406", "D407", "D412", "D413"]
match-dir = "(?!tests|venv|build|dist).*"

# Ruff configuration (enhanced)
[tool.ruff]
line-length = 100
target-version = "py313"

# Strategic configuration for parser codebase
[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "SIM",    # flake8-simplify
    "RET",    # flake8-return
    "RUF",    # Ruff-specific rules
]

# Comprehensive ignore list for parser library
ignore = [
    # Parser-specific allowances
    "C901",   # Complex functions are acceptable in parsers
    "E402",   # Import placement flexibility for conditional imports
    "PTH108", # os.path usage acceptable in specific contexts
    # Code style
    "E203",   # whitespace before ':'
    "E501",   # line too long (handled by black)
    "RET504", # unnecessary variable assignment before return
    "RUF012", # mutable class attributes should be annotated
    # Import convenience
    "F403",   # star imports (used in __init__.py for convenience)
    "F405",   # undefined from star imports (expected with star imports)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["T20", "S101", "D", "PLR2004"]  # Allow prints, asserts, missing docs in tests
"__init__.py" = ["F401", "F403", "F405"]  # Allow unused imports and star imports in __init__.py
"examples/*" = ["T20", "F401", "E402"]  # Allow prints, unused imports, and imports not at top in examples
# Parser/generator complexity is inherent to the domain
"yaraast/parser/*" = ["C901"]  # Allow complex parser functions
"yaraast/cli/main.py" = ["C901"]  # Allow complex CLI functions for rich output
"yaraast/types/type_system.py" = ["C901"]  # Allow complex type checking
"yaraast/serialization/*" = ["C901"]  # Allow complex serialization
"yaraast/yarax/*" = ["C901"]  # Allow complex compatibility adapters

# Disable complexity warnings globally for this domain-specific library
[tool.ruff.lint.extend-per-file-ignores]
"*" = ["PLR0912", "PLR0913", "PLR0915"]  # Allow many branches, arguments, statements
