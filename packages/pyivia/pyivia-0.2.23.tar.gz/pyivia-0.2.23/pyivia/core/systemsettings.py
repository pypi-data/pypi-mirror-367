"""
@copyright: IBM
"""

from .system.adminsettings import AdminSettings, AdminSetting11010
from .system.advancedtuning import AdvancedTuning
from .system.configuration import Configuration
from .system.datetime import DateTime
from .system.dns import DNS
from .system.dsc import DSC
from .system.filedownloads import FileDownloads
from .system.firststeps import FirstSteps
from .system.hostsfile import HostsFile
from .system.interfaces import Interfaces, Interfaces10000
from .system.staticroutes import StaticRoutes, StaticRoutes10000
from .system.licensing import Licensing
from .system.restartshutdown import RestartShutdown
from .system.sslcertificates import SSLCertificates
from .system.clicommands import CLICommands
from .system.runtimedb import RuntimeDb
from .system.cluster import Cluster
from .system.docker import Docker
from .system.fixpacks import Fixpacks
from .system.general import General
from .system.sysaccount import SysAccount
from .system.managementauthorization import ManagementAuthorization
from .system.managementauthentication import ManagementAuthentication
from .system.containermanagement import ContainerManagement
from .system.snapshot import Snapshot
from .system.extensions import Extensions
from .system.fips import FIPS



class SystemSettings(object):
    '''
    Object is used to manage system wide settings for Verify Identity Access

    :var advanced_tuning: Create and manage :ref:`Advanced Tuning Parameters`.
    :var admin_settings: Manage :ref:`settings <Administrator Settings>` for the LMI.
    :var configuration: Manage the staged :ref:`pending changes<Configuration (deploy pending changes)>` for a deployment.
    :var date_time: Update the system :ref:`date and time<Date and Time>` settings.
    :var dns: Update the :ref:`DNS<Domain Name Service (DNS)>` settings used by Verify Identity Access.
    :var file_downloads: Fetch :ref:`files<File Downloads>` hosted by Verify Identity Access.
    :var first_steps: Complete the :ref:`first steps<First Steps>` of Verify Identity Access configuration and accept the EULA.
    :var hosts_file: Modify the :ref:`host file<Hosts File>` used by Verify Identity Access (Appliance only).
    :var interfaces: Manage the :ref:`networking interfaces<Interfaces>` used by Verify Identity Access (Appliance only).
    :var static_routes: Manage the networking :ref:`gateway settings<Static Routes>` used by Verify Identity Access.
    :var fixpacks: Upload and apply :ref:`Fixpacks` generated by support.
    :var general: Set the :ref:`General Networking` properties like the system hostname.
    :var extensions: Upload and install :ref:`Extensions` form the IBM App-Xchange.
    :var licensing: Apply license codes to :ref:`activate<Licensing>` Verify Identity Access modules.
    :var restartshutdown: Manage the state of Verify Identity Access :ref:`appliance <Restart and Shutdown>`.
    :var ssl_certificates: Create and manage the :ref:`SSL databases <SSL Certificates and Keystores>` used by Verify Identity Access components.
    :var cli_commands: Use the API interface to run :ref:`CLI commands <CLI Commands>`.
    :var snapshot: Manage the :ref:`snapshot <Snapshot>` generation.
    :var cluster: Manage the :ref:`cluster configuration<Cluster>` (including database configuration).
    :var fips: Manage the :ref:`fips <FIPS>` settings for Verify Identity Access appliances.
    :var mgmt_authentication: Manage the :ref:`authentication <Management Authentication>` to the management interface.
    :var mgmt_authorization: Manage :ref:`authorization <Management Authorization>` to the management interface.
    :var container_mgmt: Manage :ref:`containers <Container Management>` deployed to a Verify Identity Access appliance.

    '''

class SystemSettings9020(object):

    def __init__(self, base_url, username, password):
        super(SystemSettings9020, self).__init__()
        self.advanced_tuning = AdvancedTuning(base_url, username, password)
        self.admin_settings = AdminSettings(base_url, username, password)
        self.configuration = Configuration(base_url, username, password)
        self.date_time = DateTime(base_url, username, password)
        self.dns = DNS(base_url, username, password)
        self.file_downloads = FileDownloads(base_url, username, password)
        self.first_steps = FirstSteps(base_url, username, password)
        self.hosts_file = HostsFile(base_url, username, password)
        self.interfaces = Interfaces(base_url, username, password)
        self.static_routes = StaticRoutes(base_url, username, password)
        self.fixpacks = Fixpacks(base_url, username, password)
        self.general = General(base_url, username, password)
        self.extensions = Extensions(base_url, username, password)
        self.licensing = Licensing(base_url, username, password)
        self.restartshutdown = RestartShutdown(base_url, username, password)
        self.ssl_certificates = SSLCertificates(base_url, username, password)
        self.cli_commands = CLICommands(base_url, username, password)
        self.sysaccount = SysAccount(base_url, username, password)
        self.runtime_db = RuntimeDb(base_url, username, password)
        self.cluster = Cluster(base_url, username, password)
        self.dsc = DSC(base_url, username, password)


class SystemSettings9021(SystemSettings9020):

    def __init__(self, base_url, username, password):
        super(SystemSettings9021, self).__init__(base_url, username, password)


class SystemSettings9030(SystemSettings9021):

    def __init__(self, base_url, username, password):
        super(SystemSettings9030, self).__init__(base_url, username, password)


class SystemSettings9040(SystemSettings9030):

    def __init__(self, base_url, username, password):
        super(SystemSettings9040, self).__init__(base_url, username, password)
        
        self.docker = Docker(base_url, username, password)


class SystemSettings9050(SystemSettings9040):

    def __init__(self, base_url, username, password):
        super(SystemSettings9050, self).__init__(base_url, username, password)


class SystemSettings9060(SystemSettings9050):

    def __init__(self, base_url, username, password):
        super(SystemSettings9060, self).__init__(base_url, username, password)


class SystemSettings9070(SystemSettings9060):

    def __init__(self, base_url, username, password):
        super(SystemSettings9070, self).__init__(base_url, username, password)


class SystemSettings9071(SystemSettings9070):

    def __init__(self, base_url, username, password):
        super(SystemSettings9071, self).__init__(base_url, username, password)


class SystemSettings9072(SystemSettings9071):

    def __init__(self, base_url, username, password):
            super(SystemSettings9072, self).__init__(base_url, username, password)


class SystemSettings9073(SystemSettings9072):

    def __init__(self, base_url, username, password):
            super(SystemSettings9073, self).__init__(base_url, username, password)


class SystemSettings9080(SystemSettings9073):

    def __init__(self, base_url, username, password):
        super(SystemSettings9080, self).__init__(base_url, username, password)


class SystemSettings10000(SystemSettings9080):

    def __init__(self, base_url, username, password):
        super(SystemSettings10000, self).__init__(base_url, username, password)
        self.static_routes = StaticRoutes10000(base_url, username, password)
        self.interfaces = Interfaces10000(base_url, username, password)
        self.mgmt_authorization = ManagementAuthorization(base_url, username, password)
        self.mgmt_authentication = ManagementAuthentication(base_url, username, password)
        self.snapshot = Snapshot(base_url, username, password)
        self.fips = FIPS(base_url, username, password)


class SystemSettings10010(SystemSettings10000):

    def __init__(self, base_url, username, password):
        super(SystemSettings10010, self).__init__(base_url, username, password)


class SystemSettings10020(SystemSettings10010):

    def __init__(self, base_url, username, password):
            super(SystemSettings10020, self).__init__(base_url, username, password)


class SystemSettings10030(SystemSettings10020):

    def __init__(self, base_url, username, password):
            super(SystemSettings10030, self).__init__(base_url, username, password)


class SystemSettings10031(SystemSettings10030):

    def __init__(self, base_url, username, password):
            super(SystemSettings10031, self).__init__(base_url, username, password)


class SystemSettings10040(SystemSettings10031):

    def __init__(self, base_url, username, password):
            super(SystemSettings10040, self).__init__(base_url, username, password)


class SystemSettings10050(SystemSettings10040):

    def __init__(self, base_url, username, password):
            super(SystemSettings10050, self).__init__(base_url, username, password)


class SystemSettings10060(SystemSettings10050):

    def __init__(self, base_url, username, password):
            super(SystemSettings10060, self).__init__(base_url, username, password)

class SystemSettings10070(SystemSettings10060):

    def __init__(self, base_url, username, password):
        super(SystemSettings10070, self).__init__(base_url, username, password)
        self.container_mgmt = ContainerManagement(base_url, username, password)

class SystemSettings10080(SystemSettings10070):

    def __init__(self, base_url, username, password):
        super(SystemSettings10080, self).__init__(base_url, username, password)

class SystemSettings11000(SystemSettings10080):

    def __init__(self, base_url, username, password):
        super(SystemSettings11000, self).__init__(base_url, username, password)

class SystemSettings11010(SystemSettings11000):

    def __init__(self, base_url, username, password):
        super(SystemSettings11010, self).__init__(base_url, username, password)
        self.admin_settings = AdminSetting11010(base_url, username, password)

class SystemSettings11020(SystemSettings11010):

    def __init__(self, base_url, username, password):
        super(SystemSettings11020, self).__init__(base_url, username, password)
