"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from builtins import (
    bool,
    bytes,
    int,
)

from gm.pb.common_pb2 import (
    Error,
)

from google.protobuf.descriptor import (
    Descriptor,
    FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedScalarFieldContainer,
    ScalarMap,
)

from google.protobuf.message import (
    Message,
)

from typing import (
    Iterable,
    Mapping,
    Optional,
    Text,
)

from typing_extensions import (
    Literal,
)


DESCRIPTOR: FileDescriptor = ...

class RawFuncReq(Message):
    """功能号调用入参"""
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    SYS_ID_FIELD_NUMBER: int
    FUNC_ID_FIELD_NUMBER: int
    FUNC_ARGS_FIELD_NUMBER: int
    RID_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    account_id: Text = ...
    """账户ID"""

    account_name: Text = ...
    """资金账户"""

    channel_id: Text = ...
    sys_id: Text = ...
    """交易系统ID，如：金证集中柜台，顶点极速柜台，由掘金编制维护
    保留字段，当前不用填写
    """

    func_id: Text = ...
    """功能号"""

    func_args: bytes = ...
    """功能号参数"""

    rid: Text = ...
    """请求ID，唯一标识本次请求"""

    @property
    def properties(self) -> ScalarMap[Text, Text]:
        """扩展属性"""
        pass
    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        sys_id : Text = ...,
        func_id : Text = ...,
        func_args : bytes = ...,
        rid : Text = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"func_args",b"func_args",u"func_id",b"func_id",u"properties",b"properties",u"rid",b"rid",u"sys_id",b"sys_id"]) -> None: ...

class RawFuncRsp(Message):
    """功能号调用结果，通过推送的方式返回"""
    DESCRIPTOR: Descriptor = ...
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    DATA_FIELD_NUMBER: int
    ERROR_FIELD_NUMBER: int
    RID_FIELD_NUMBER: int
    account_id: Text = ...
    """账户ID"""

    account_name: Text = ...
    """资金账户"""

    channel_id: Text = ...
    data: bytes = ...
    """功能号调用返回数据。"""

    @property
    def error(self) -> Error:
        """功能号调用错误"""
        pass
    rid: Text = ...
    """请求ID，用于关联请求到本次回应"""

    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        data : bytes = ...,
        error : Optional[Error] = ...,
        rid : Text = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"error",b"error"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"data",b"data",u"error",b"error",u"rid",b"rid"]) -> None: ...

class RawFuncMetaReq(Message):
    """功能号元数据查询请求，得到功能号的ID以及出入参说明，json格式"""
    DESCRIPTOR: Descriptor = ...
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    TAGS_FIELD_NUMBER: int
    FUNC_IDS_FIELD_NUMBER: int
    account_id: Text = ...
    """账户ID"""

    account_name: Text = ...
    """资金账户"""

    channel_id: Text = ...
    @property
    def tags(self) -> RepeatedScalarFieldContainer[Text]:
        """按tag查询"""
        pass
    @property
    def func_ids(self) -> RepeatedScalarFieldContainer[Text]:
        """按功能号查询"""
        pass
    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        tags : Optional[Iterable[Text]] = ...,
        func_ids : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"func_ids",b"func_ids",u"tags",b"tags"]) -> None: ...

class RawFuncMetaRsp(Message):
    """功能号元数据查询结果"""
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    ERROR_FIELD_NUMBER: int
    data: Text = ...
    """功能号元数据, json 字符串"""

    @property
    def error(self) -> Error:
        """功能号元数据查询失败说明"""
        pass
    def __init__(self,
        *,
        data : Text = ...,
        error : Optional[Error] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"error",b"error"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"data",b"data",u"error",b"error"]) -> None: ...
