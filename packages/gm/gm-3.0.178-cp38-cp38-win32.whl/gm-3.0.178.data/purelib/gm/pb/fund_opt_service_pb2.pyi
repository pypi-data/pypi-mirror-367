"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from builtins import (
    float,
    int,
)

from google.protobuf.descriptor import (
    Descriptor,
    FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer,
)

from google.protobuf.message import (
    Message,
)

from typing import (
    Iterable,
    Optional,
    Text,
)

from typing_extensions import (
    Literal,
)


DESCRIPTOR: FileDescriptor = ...

class GetSymbolsByInAtOutReq(Message):
    """package data.fund.api;

    option go_package = "myquant.cn/platform/protobuf/go/ds_fund/api;fund_api";

    import "google/api/annotations.proto";
    import "google/protobuf/empty.proto";

    """
    DESCRIPTOR: Descriptor = ...
    UNDERLYING_SYMBOL_FIELD_NUMBER: int
    CALL_OR_PUT_FIELD_NUMBER: int
    EXECUTE_MONTH_FIELD_NUMBER: int
    IN_AT_OUT_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    S_FIELD_NUMBER: int
    S_TYPE_FIELD_NUMBER: int
    ADJUST_FLAG_FIELD_NUMBER: int
    underlying_symbol: Text = ...
    """合约标的物
    参数用法说明:
    必填，标的物symbol，全部大写，不指定具体到期月份，
    标的物为商品期货的，可参考主力合约代码，如：'CZCE.CF'
    标的物为股指的，可填：'CFFEX.IO'，'CFFEX.MO'
    标的物为ETF的，可填ETF的symbol，如：'SHSE.510050'
    """

    call_or_put: Text = ...
    """沽购类型
    参数用法说明:
    沽购类型，
    认购期权（看涨期权，买权）：'C'
    认沽期权（看跌期权，卖权）：'P'
    默认None表示不区分沽购类型，同时包括认购和认沽
    """

    execute_month: int = ...
    """合约月份
    参数用法说明:
    合约月份，按到期月份从近至远从小到大排序，支持最近交割的4个月份
    可选1，2，3，4
    默认None为全部月份
    """

    in_at_out: int = ...
    """档位计数
    参数用法说明:
    档位计数，实值档位为正，虚值档位为负，平值为0，
    默认None时为所有档位（含平值）
    """

    trade_date: Text = ...
    """交易日期
    参数用法说明:
    查询时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    s: float = ...
    """标的物价格
    参数用法说明:
    标的物价格，只能输入自定义具体价格
    """

    s_type: Text = ...
    """标的物价格类型
    参数用法说明:
    标的物价格s为None时，此参数才生效。'pre_close'为昨收价（默认），'open'为今开价，'last'为最新价，（3种价格均相对于trade_date时间，trade_date不含分钟就取当日
    收盘价，trade_date包含分钟就取该1分钟bar的close）默认None为昨收价。
    """

    adjust_flag: Text = ...
    """调整合约
    参数用法说明:
    表示是否过滤除权后的调整合约，'M'表示不返回调整合约，只返回标准合约（默认）'A'表示只返回调整合约 ''表示不做过滤都返回
    默认None为只返回标准合约。
    """

    def __init__(self,
        *,
        underlying_symbol : Text = ...,
        call_or_put : Text = ...,
        execute_month : int = ...,
        in_at_out : int = ...,
        trade_date : Text = ...,
        s : float = ...,
        s_type : Text = ...,
        adjust_flag : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"adjust_flag",b"adjust_flag",u"call_or_put",b"call_or_put",u"execute_month",b"execute_month",u"in_at_out",b"in_at_out",u"s",b"s",u"s_type",b"s_type",u"trade_date",b"trade_date",u"underlying_symbol",b"underlying_symbol"]) -> None: ...

class GetSymbolsByInAtOutRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedScalarFieldContainer[Text]:
        """返回值：list[symbol]列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetSymbolsByExchangeReq(Message):
    DESCRIPTOR: Descriptor = ...
    EXCHANGES_FIELD_NUMBER: int
    CALL_OR_PUT_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    ADJUST_FLAG_FIELD_NUMBER: int
    @property
    def exchanges(self) -> RepeatedScalarFieldContainer[Text]:
        """交易所代码
        参数用法说明:
        交易所代码列表, 必填参数, 且列表至少包含一个 exchange ,多个交易所代码示例：['SHSE', 'SZSE']
        """
        pass
    call_or_put: Text = ...
    """沽购类型
    参数用法说明:
    沽购类型，
    认购期权（看涨期权，买权）：'C'
    认沽期权（看跌期权，卖权）：'P'
    默认None表示不区分沽购类型，同时包括认购和认沽
    """

    trade_date: Text = ...
    """交易日期
    参数用法说明:
    查询时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    adjust_flag: Text = ...
    """调整合约
    参数用法说明:
    表示是否过滤除权后的调整合约，
    'M'表示不返回调整合约，只返回标准合约（默认）
    'A'表示只返回调整合约
    ''表示不做过滤都返回
    默认None为只返回标准合约。
    """

    def __init__(self,
        *,
        exchanges : Optional[Iterable[Text]] = ...,
        call_or_put : Text = ...,
        trade_date : Text = ...,
        adjust_flag : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"adjust_flag",b"adjust_flag",u"call_or_put",b"call_or_put",u"exchanges",b"exchanges",u"trade_date",b"trade_date"]) -> None: ...

class GetSymbolsByExchangeRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedScalarFieldContainer[Text]:
        """返回值：list[symbol]列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetDelistedDatesReq(Message):
    DESCRIPTOR: Descriptor = ...
    UNDERLYING_SYMBOL_FIELD_NUMBER: int
    EXECUTE_MONTH_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    underlying_symbol: Text = ...
    """合约标的物
    参数用法说明:
    必填，标的物symbol，全部大写，不指定具体到期月份，
    标的物为商品期货的，可参考主力合约代码，如：'CZCE.CF'
    标的物为股指的，可填：'CFFEX.IO'，'CFFEX.MO'
    标的物为ETF的，可填ETF的symbol，如：'SHSE.510050'
    """

    execute_month: int = ...
    """合约月份
    参数用法说明:
    合约月份，按到期月份从近至远从小到大排序，支持最近交割的4个月份
    可选1，2，3，4
    默认None为全部月份
    """

    trade_date: Text = ...
    """交易日期
    参数用法说明:
    查询时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    def __init__(self,
        *,
        underlying_symbol : Text = ...,
        execute_month : int = ...,
        trade_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"execute_month",b"execute_month",u"trade_date",b"trade_date",u"underlying_symbol",b"underlying_symbol"]) -> None: ...

class GetDelistedDatesRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedScalarFieldContainer[Text]:
        """返回值：list[datetime.date]"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetExercisePricesReq(Message):
    DESCRIPTOR: Descriptor = ...
    UNDERLYING_SYMBOL_FIELD_NUMBER: int
    EXECUTE_MONTH_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    ADJUST_FLAG_FIELD_NUMBER: int
    underlying_symbol: Text = ...
    """合约标的物
    参数用法说明:
    必填，标的物symbol，全部大写，不指定具体到期月份，
    标的物为商品期货的，可参考主力合约代码，如：'CZCE.CF'
    标的物为股指的，可填：'CFFEX.IO'，'CFFEX.MO'
    标的物为ETF的，可填ETF的symbol，如：'SHSE.510050'
    """

    execute_month: Text = ...
    """合约月份
    参数用法说明:
    合约月份，按到期月份从近至远从小到大排序，支持最近交割的4个月份
    可选1，2，3，4
    默认None为全部月份
    """

    trade_date: Text = ...
    """交易日期
    参数用法说明:
    查询时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    adjust_flag: Text = ...
    """调整合约
    参数用法说明:
    表示是否过滤除权后的调整合约，
    'M'表示不返回调整合约，只返回标准合约（默认）
    'A'表示只返回调整合约
    ''表示不做过滤都返回
    默认None为只返回标准合约。
    """

    def __init__(self,
        *,
        underlying_symbol : Text = ...,
        execute_month : Text = ...,
        trade_date : Text = ...,
        adjust_flag : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"adjust_flag",b"adjust_flag",u"execute_month",b"execute_month",u"trade_date",b"trade_date",u"underlying_symbol",b"underlying_symbol"]) -> None: ...

class GetExercisePricesRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedScalarFieldContainer[Text]:
        """返回值：list[exercise_price]"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetContractInfoReq(Message):
    DESCRIPTOR: Descriptor = ...
    UNDERLYING_SYMBOL_FIELD_NUMBER: int
    underlying_symbol: Text = ...
    """品种合约标的物
    参数用法说明:
    必填，标的物symbol，全部大写，不指定具体到期月份，
    标的物为商品期货的，可参考主力合约代码，如：'CZCE.CF'
    标的物为股指的，可填：'CFFEX.IO'，'CFFEX.MO'
    标的物为ETF的，可填ETF的symbol，如：'SHSE.510050'
    """

    def __init__(self,
        *,
        underlying_symbol : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"underlying_symbol",b"underlying_symbol"]) -> None: ...

class ContractInfo(Message):
    DESCRIPTOR: Descriptor = ...
    PRODUCT_CODE_FIELD_NUMBER: int
    UNDERLYING_FIELD_NUMBER: int
    MULTIPLIER_FIELD_NUMBER: int
    TRADE_UNIT_FIELD_NUMBER: int
    PRICE_UNIT_FIELD_NUMBER: int
    PRICE_TICK_FIELD_NUMBER: int
    DELIVERY_MONTH_FIELD_NUMBER: int
    TRADE_TIME_FIELD_NUMBER: int
    PRICE_RANGE_FIELD_NUMBER: int
    OPTION_TYPE_FIELD_NUMBER: int
    EXERCISE_PRICE_RULE_FIELD_NUMBER: int
    LAST_TRADE_DATE_FIELD_NUMBER: int
    DELIVERY_METHOD_FIELD_NUMBER: int
    EXCHANGE_NAME_FIELD_NUMBER: int
    EXCHANGE_FIELD_NUMBER: int
    product_code: Text = ...
    """交易代码"""

    underlying: Text = ...
    """合约标的物名称"""

    multiplier: int = ...
    """合约乘数"""

    trade_unit: Text = ...
    """交易单位"""

    price_unit: Text = ...
    """报价单位"""

    price_tick: float = ...
    """价格最小变动单位"""

    delivery_month: Text = ...
    """合约月份"""

    trade_time: Text = ...
    """交易时间"""

    price_range: Text = ...
    """涨跌幅限制"""

    option_type: Text = ...
    """行权方式"""

    exercise_price_rule: Text = ...
    """行权价格"""

    last_trade_date: Text = ...
    """最后交易日"""

    delivery_method: Text = ...
    """交割方式"""

    exchange_name: Text = ...
    """交易所名称"""

    exchange: Text = ...
    """交易所代码"""

    def __init__(self,
        *,
        product_code : Text = ...,
        underlying : Text = ...,
        multiplier : int = ...,
        trade_unit : Text = ...,
        price_unit : Text = ...,
        price_tick : float = ...,
        delivery_month : Text = ...,
        trade_time : Text = ...,
        price_range : Text = ...,
        option_type : Text = ...,
        exercise_price_rule : Text = ...,
        last_trade_date : Text = ...,
        delivery_method : Text = ...,
        exchange_name : Text = ...,
        exchange : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"delivery_method",b"delivery_method",u"delivery_month",b"delivery_month",u"exchange",b"exchange",u"exchange_name",b"exchange_name",u"exercise_price_rule",b"exercise_price_rule",u"last_trade_date",b"last_trade_date",u"multiplier",b"multiplier",u"option_type",b"option_type",u"price_range",b"price_range",u"price_tick",b"price_tick",u"price_unit",b"price_unit",u"product_code",b"product_code",u"trade_time",b"trade_time",u"trade_unit",b"trade_unit",u"underlying",b"underlying"]) -> None: ...

class GetContractInfoRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[ContractInfo]:
        """返回值：dataframe 查询期权标准品种信息所属的列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[ContractInfo]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetTransactionRankingReq(Message):
    DESCRIPTOR: Descriptor = ...
    UNDERLYING_SYMBOL_FIELD_NUMBER: int
    CALL_OR_PUT_FIELD_NUMBER: int
    EXECUTE_MONTH_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    INDICATOR_FIELD_NUMBER: int
    underlying_symbol: Text = ...
    """合约标的物
    参数用法说明
    必填，标的物symbol，全部大写，不指定具体到期月份，
    标的物为商品期货的，可参考主力合约代码，如：'CZCE.CF'
    标的物为股指的，可填：'CFFEX.IO'，'CFFEX.MO'
    标的物为ETF的，可填ETF的symbol，如：'SHSE.510050'
    """

    call_or_put: Text = ...
    """沽购类型
    参数用法说明
    必填，沽购类型
    认购期权（看涨期权，买权）：'C'
    认沽期权（看跌期权，卖权）：'P'
    """

    execute_month: int = ...
    """合约月份
    参数用法说明
    合约月份，按交割月份从近至远从小到大排序，支持最近交割的4个月份
    可选1，2，3，4
    默认None为1，即当月合约
    """

    trade_date: Text = ...
    """交易日期
    参数用法说明
    查询时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    indicator: Text = ...
    """排名指标
    参数用法说明
    排名指标，即用于排名的依据，可选：
    'volume'-成交量排名（默认）
    ‘long’-持买单量排名
    ‘short’-持卖单量排名
    默认None表示成交量排名
    """

    def __init__(self,
        *,
        underlying_symbol : Text = ...,
        call_or_put : Text = ...,
        execute_month : int = ...,
        trade_date : Text = ...,
        indicator : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"call_or_put",b"call_or_put",u"execute_month",b"execute_month",u"indicator",b"indicator",u"trade_date",b"trade_date",u"underlying_symbol",b"underlying_symbol"]) -> None: ...

class TransactionRankingInfo(Message):
    DESCRIPTOR: Descriptor = ...
    CALL_OR_PUT_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    MEMBER_NAME_FIELD_NUMBER: int
    INDICATOR_NUMBER_FIELD_NUMBER: int
    INDICATOR_CHANGE_FIELD_NUMBER: int
    RANKING_FIELD_NUMBER: int
    RANKING_CHANGE_FIELD_NUMBER: int
    call_or_put: Text = ...
    """沽购类型"""

    trade_date: Text = ...
    """交易日期"""

    member_name: Text = ...
    """会员公司简称"""

    indicator_number: int = ...
    """indicator_number :排名指标数值 --单位：手。视乎所选的排名指标indicator，分别为：
    成交量（indicator为'volume'时）
    持买单量（indicator为'long'时）
    持卖单量（indicator为‘short’时）
    """

    indicator_change: int = ...
    """排名指标比上交易日增减 --单位：手"""

    ranking: int = ...
    """排名名次 --指标具体排名"""

    ranking_change: int = ...
    """排名名次比上交易日增减"""

    def __init__(self,
        *,
        call_or_put : Text = ...,
        trade_date : Text = ...,
        member_name : Text = ...,
        indicator_number : int = ...,
        indicator_change : int = ...,
        ranking : int = ...,
        ranking_change : int = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"call_or_put",b"call_or_put",u"indicator_change",b"indicator_change",u"indicator_number",b"indicator_number",u"member_name",b"member_name",u"ranking",b"ranking",u"ranking_change",b"ranking_change",u"trade_date",b"trade_date"]) -> None: ...

class GetTransactionRankingRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[TransactionRankingInfo]:
        """返回值：dataframe 查询期权每日成交持仓排名所属的列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[TransactionRankingInfo]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetRiskValueRep(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    symbol: Text = ...
    """期权代码
    参数用法说明:
    必填，只能输入一个期权合约，使用时参考symbol
    """

    start_date: Text = ...
    """开始时间
    参数用法说明:
    查询时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    end_date: Text = ...
    """结束时间
    参数用法说明:
    查询时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    def __init__(self,
        *,
        symbol : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"end_date",b"end_date",u"start_date",b"start_date",u"symbol",b"symbol"]) -> None: ...

class RiskValueInfo(Message):
    DESCRIPTOR: Descriptor = ...
    TRADE_DATE_FIELD_NUMBER: int
    DELTA_FIELD_NUMBER: int
    THETA_FIELD_NUMBER: int
    GAMMA_FIELD_NUMBER: int
    VEGA_FIELD_NUMBER: int
    RHO_FIELD_NUMBER: int
    IV_FIELD_NUMBER: int
    trade_date: Text = ...
    """交易日期"""

    delta: float = ...
    """Delta"""

    theta: float = ...
    """Theta"""

    gamma: float = ...
    """Gamma"""

    vega: float = ...
    """Vega"""

    rho: float = ...
    """Rho"""

    iv: float = ...
    """隐含波动率"""

    def __init__(self,
        *,
        trade_date : Text = ...,
        delta : float = ...,
        theta : float = ...,
        gamma : float = ...,
        vega : float = ...,
        rho : float = ...,
        iv : float = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"delta",b"delta",u"gamma",b"gamma",u"iv",b"iv",u"rho",b"rho",u"theta",b"theta",u"trade_date",b"trade_date",u"vega",b"vega"]) -> None: ...

class GetRiskValueRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[RiskValueInfo]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[RiskValueInfo]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...
