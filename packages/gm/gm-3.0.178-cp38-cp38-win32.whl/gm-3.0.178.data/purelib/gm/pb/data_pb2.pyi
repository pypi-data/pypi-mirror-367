"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from builtins import (
    bool,
    float,
    int,
    type,
)

from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer,
    ScalarMap,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)

from google.protobuf.message import (
    Message,
)

from google.protobuf.timestamp_pb2 import (
    Timestamp,
)

from typing import (
    Iterable,
    Mapping,
    NewType,
    Optional,
    Text,
)

from typing_extensions import (
    Literal,
)


DESCRIPTOR: FileDescriptor = ...

class SecurityType(_SecurityType, metaclass=_SecurityTypeEnumTypeWrapper):
    """
    Tick L2Transaction      L2Order       L2OrderQueue
    市场级别 快照 逐笔成交           逐笔委托      委托队列
    上海L1   有   无                 无            无
    深圳L1   有   无                 无            无
    上海L2   有   有（不含撤单）     无            有
    深圳L2   有   有（含撤单）       有            有

    证券类型
    """
    pass
class _SecurityType:
    V = NewType('V', int)
class _SecurityTypeEnumTypeWrapper(_EnumTypeWrapper[_SecurityType.V], type):
    DESCRIPTOR: EnumDescriptor = ...
    SecurityType_Unknown = SecurityType.V(0)
    SecurityType_Stock = SecurityType.V(1)
    """股票"""

    SecurityType_Fund = SecurityType.V(2)
    """基金"""

    SecurityType_Index = SecurityType.V(3)
    """指数"""

    SecurityType_Future = SecurityType.V(4)
    """期货"""

    SecurityType_Option = SecurityType.V(5)
    """期权"""

    SecurityType_Credit = SecurityType.V(6)
    """两融"""

    SecurityType_Bond = SecurityType.V(7)
    """债券"""

    SecurityType_Bond_Convertible = SecurityType.V(8)
    """可债券"""


SecurityType_Unknown = SecurityType.V(0)
SecurityType_Stock = SecurityType.V(1)
"""股票"""

SecurityType_Fund = SecurityType.V(2)
"""基金"""

SecurityType_Index = SecurityType.V(3)
"""指数"""

SecurityType_Future = SecurityType.V(4)
"""期货"""

SecurityType_Option = SecurityType.V(5)
"""期权"""

SecurityType_Credit = SecurityType.V(6)
"""两融"""

SecurityType_Bond = SecurityType.V(7)
"""债券"""

SecurityType_Bond_Convertible = SecurityType.V(8)
"""可债券"""


class Quote(Message):
    DESCRIPTOR: Descriptor = ...
    class OrderQueue(Message):
        DESCRIPTOR: Descriptor = ...
        TOTAL_ORDERS_FIELD_NUMBER: int
        QUEUE_VOLUMES_FIELD_NUMBER: int
        total_orders: int = ...
        """委托总个数"""

        @property
        def queue_volumes(self) -> RepeatedScalarFieldContainer[int]:
            """委托量队列"""
            pass
        def __init__(self,
            *,
            total_orders : int = ...,
            queue_volumes : Optional[Iterable[int]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"queue_volumes",b"queue_volumes",u"total_orders",b"total_orders"]) -> None: ...

    BID_P_FIELD_NUMBER: int
    BID_V_FIELD_NUMBER: int
    ASK_P_FIELD_NUMBER: int
    ASK_V_FIELD_NUMBER: int
    BID_Q_FIELD_NUMBER: int
    ASK_Q_FIELD_NUMBER: int
    bid_p: float = ...
    bid_v: int = ...
    ask_p: float = ...
    ask_v: int = ...
    @property
    def bid_q(self) -> Quote.OrderQueue: ...
    @property
    def ask_q(self) -> Quote.OrderQueue: ...
    def __init__(self,
        *,
        bid_p : float = ...,
        bid_v : int = ...,
        ask_p : float = ...,
        ask_v : int = ...,
        bid_q : Optional[Quote.OrderQueue] = ...,
        ask_q : Optional[Quote.OrderQueue] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"ask_q",b"ask_q",u"bid_q",b"bid_q"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"ask_p",b"ask_p",u"ask_q",b"ask_q",u"ask_v",b"ask_v",u"bid_p",b"bid_p",u"bid_q",b"bid_q",u"bid_v",b"bid_v"]) -> None: ...

class L2OrderBook(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    QUOTES_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    symbol: Text = ...
    @property
    def quotes(self) -> RepeatedCompositeFieldContainer[Quote]: ...
    @property
    def created_at(self) -> Timestamp: ...
    def __init__(self,
        *,
        symbol : Text = ...,
        quotes : Optional[Iterable[Quote]] = ...,
        created_at : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"created_at",b"created_at",u"quotes",b"quotes",u"symbol",b"symbol"]) -> None: ...

class L2OrderBooks(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[L2OrderBook]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[L2OrderBook]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class L2OrderQueue(Message):
    """委托队列"""
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    SIDE_FIELD_NUMBER: int
    PRICE_FIELD_NUMBER: int
    VOLUME_FIELD_NUMBER: int
    TOTAL_ORDERS_FIELD_NUMBER: int
    QUEUE_ORDERS_FIELD_NUMBER: int
    QUEUE_VOLUMES_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    symbol: Text = ...
    side: Text = ...
    """委托方向"""

    price: float = ...
    """委托价"""

    volume: int = ...
    """委托量"""

    total_orders: int = ...
    """委托总个数"""

    queue_orders: int = ...
    """委托量队列中元素个数"""

    @property
    def queue_volumes(self) -> RepeatedScalarFieldContainer[int]:
        """委托量队列"""
        pass
    @property
    def created_at(self) -> Timestamp: ...
    def __init__(self,
        *,
        symbol : Text = ...,
        side : Text = ...,
        price : float = ...,
        volume : int = ...,
        total_orders : int = ...,
        queue_orders : int = ...,
        queue_volumes : Optional[Iterable[int]] = ...,
        created_at : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"created_at",b"created_at",u"price",b"price",u"queue_orders",b"queue_orders",u"queue_volumes",b"queue_volumes",u"side",b"side",u"symbol",b"symbol",u"total_orders",b"total_orders",u"volume",b"volume"]) -> None: ...

class L2OrderQueues(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[L2OrderQueue]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[L2OrderQueue]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class L2Order(Message):
    """逐笔委托"""
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    SIDE_FIELD_NUMBER: int
    PRICE_FIELD_NUMBER: int
    VOLUME_FIELD_NUMBER: int
    ORDER_TYPE_FIELD_NUMBER: int
    ORDER_INDEX_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    symbol: Text = ...
    side: Text = ...
    """委托方向"""

    price: float = ...
    """委托价"""

    volume: int = ...
    """委托量"""

    order_type: Text = ...
    """委托类型"""

    order_index: int = ...
    """委托编号"""

    @property
    def created_at(self) -> Timestamp: ...
    def __init__(self,
        *,
        symbol : Text = ...,
        side : Text = ...,
        price : float = ...,
        volume : int = ...,
        order_type : Text = ...,
        order_index : int = ...,
        created_at : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"created_at",b"created_at",u"order_index",b"order_index",u"order_type",b"order_type",u"price",b"price",u"side",b"side",u"symbol",b"symbol",u"volume",b"volume"]) -> None: ...

class L2Orders(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[L2Order]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[L2Order]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class L2Transaction(Message):
    """逐笔成交"""
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    SIDE_FIELD_NUMBER: int
    PRICE_FIELD_NUMBER: int
    VOLUME_FIELD_NUMBER: int
    EXEC_TYPE_FIELD_NUMBER: int
    EXEC_INDEX_FIELD_NUMBER: int
    ASK_ORDER_INDEX_FIELD_NUMBER: int
    BID_ORDER_INDEX_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    symbol: Text = ...
    side: Text = ...
    """内外盘标志"""

    price: float = ...
    """成交价"""

    volume: int = ...
    """成交量"""

    exec_type: Text = ...
    """成交类型"""

    exec_index: int = ...
    """成交编号"""

    ask_order_index: int = ...
    """叫卖委托编号"""

    bid_order_index: int = ...
    """叫买委托编号"""

    @property
    def created_at(self) -> Timestamp: ...
    def __init__(self,
        *,
        symbol : Text = ...,
        side : Text = ...,
        price : float = ...,
        volume : int = ...,
        exec_type : Text = ...,
        exec_index : int = ...,
        ask_order_index : int = ...,
        bid_order_index : int = ...,
        created_at : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"ask_order_index",b"ask_order_index",u"bid_order_index",b"bid_order_index",u"created_at",b"created_at",u"exec_index",b"exec_index",u"exec_type",b"exec_type",u"price",b"price",u"side",b"side",u"symbol",b"symbol",u"volume",b"volume"]) -> None: ...

class L2Transactions(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[L2Transaction]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[L2Transaction]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class Tick(Message):
    DESCRIPTOR: Descriptor = ...
    class Flag(_Flag, metaclass=_FlagEnumTypeWrapper):
        pass
    class _Flag:
        V = NewType('V', int)
    class _FlagEnumTypeWrapper(_EnumTypeWrapper[_Flag.V], type):
        DESCRIPTOR: EnumDescriptor = ...
        Flag_Default = Tick.Flag.V(0)
        """普通交易"""

        Flag_AfterHourTrading = Tick.Flag.V(1)
        """盘后交易"""


    Flag_Default = Tick.Flag.V(0)
    """普通交易"""

    Flag_AfterHourTrading = Tick.Flag.V(1)
    """盘后交易"""


    SYMBOL_FIELD_NUMBER: int
    OPEN_FIELD_NUMBER: int
    HIGH_FIELD_NUMBER: int
    LOW_FIELD_NUMBER: int
    PRICE_FIELD_NUMBER: int
    QUOTES_FIELD_NUMBER: int
    CUM_VOLUME_FIELD_NUMBER: int
    CUM_AMOUNT_FIELD_NUMBER: int
    CUM_POSITION_FIELD_NUMBER: int
    LAST_AMOUNT_FIELD_NUMBER: int
    LAST_VOLUME_FIELD_NUMBER: int
    TRADE_TYPE_FIELD_NUMBER: int
    FLAG_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    IOPV_FIELD_NUMBER: int
    symbol: Text = ...
    open: float = ...
    high: float = ...
    low: float = ...
    price: float = ...
    @property
    def quotes(self) -> RepeatedCompositeFieldContainer[Quote]: ...
    cum_volume: int = ...
    cum_amount: float = ...
    cum_position: int = ...
    last_amount: float = ...
    last_volume: int = ...
    trade_type: int = ...
    """交易类型(期货)
    1: 双开, 2: 双平, 3: 多开, 4: 空开, 5: 空平, 6: 多平, 7: 多换, 8: 空换
    """

    flag: int = ...
    """标志位，用于分类"""

    @property
    def created_at(self) -> Timestamp: ...
    iopv: float = ...
    """基金份额参考净值"""

    def __init__(self,
        *,
        symbol : Text = ...,
        open : float = ...,
        high : float = ...,
        low : float = ...,
        price : float = ...,
        quotes : Optional[Iterable[Quote]] = ...,
        cum_volume : int = ...,
        cum_amount : float = ...,
        cum_position : int = ...,
        last_amount : float = ...,
        last_volume : int = ...,
        trade_type : int = ...,
        flag : int = ...,
        created_at : Optional[Timestamp] = ...,
        iopv : float = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"created_at",b"created_at",u"cum_amount",b"cum_amount",u"cum_position",b"cum_position",u"cum_volume",b"cum_volume",u"flag",b"flag",u"high",b"high",u"iopv",b"iopv",u"last_amount",b"last_amount",u"last_volume",b"last_volume",u"low",b"low",u"open",b"open",u"price",b"price",u"quotes",b"quotes",u"symbol",b"symbol",u"trade_type",b"trade_type"]) -> None: ...

class Ticks(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[Tick]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[Tick]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class Bar(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    FREQUENCY_FIELD_NUMBER: int
    OPEN_FIELD_NUMBER: int
    HIGH_FIELD_NUMBER: int
    LOW_FIELD_NUMBER: int
    CLOSE_FIELD_NUMBER: int
    VOLUME_FIELD_NUMBER: int
    AMOUNT_FIELD_NUMBER: int
    POSITION_FIELD_NUMBER: int
    PRE_CLOSE_FIELD_NUMBER: int
    BOB_FIELD_NUMBER: int
    EOB_FIELD_NUMBER: int
    symbol: Text = ...
    frequency: Text = ...
    open: float = ...
    high: float = ...
    low: float = ...
    close: float = ...
    volume: int = ...
    amount: float = ...
    position: int = ...
    pre_close: float = ...
    @property
    def bob(self) -> Timestamp:
        """begin of bar"""
        pass
    @property
    def eob(self) -> Timestamp:
        """end of bar"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        frequency : Text = ...,
        open : float = ...,
        high : float = ...,
        low : float = ...,
        close : float = ...,
        volume : int = ...,
        amount : float = ...,
        position : int = ...,
        pre_close : float = ...,
        bob : Optional[Timestamp] = ...,
        eob : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"bob",b"bob",u"eob",b"eob"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"amount",b"amount",u"bob",b"bob",u"close",b"close",u"eob",b"eob",u"frequency",b"frequency",u"high",b"high",u"low",b"low",u"open",b"open",u"position",b"position",u"pre_close",b"pre_close",u"symbol",b"symbol",u"volume",b"volume"]) -> None: ...

class Bars(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[Bar]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[Bar]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class SimpleQuote(Message):
    DESCRIPTOR: Descriptor = ...
    PRICE_FIELD_NUMBER: int
    VOLUME_FIELD_NUMBER: int
    ACCUMULATE_FIELD_NUMBER: int
    UPDATED_AT_FIELD_NUMBER: int
    price: float = ...
    """报价"""

    volume: int = ...
    """委托量"""

    accumulate: int = ...
    """累计挂单量，是该档及之前的所有档位的挂单量之和"""

    @property
    def updated_at(self) -> Timestamp:
        """申报时间，做市商报价为委托时间，投资方报价为最后更新时间"""
        pass
    def __init__(self,
        *,
        price : float = ...,
        volume : int = ...,
        accumulate : int = ...,
        updated_at : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"updated_at",b"updated_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"accumulate",b"accumulate",u"price",b"price",u"updated_at",b"updated_at",u"volume",b"volume"]) -> None: ...

class Depth(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    POINTS_FIELD_NUMBER: int
    BIDS_MM_FIELD_NUMBER: int
    ASKS_MM_FIELD_NUMBER: int
    BIDS_FIELD_NUMBER: int
    ASKS_FIELD_NUMBER: int
    BIDS_MM_MG_FIELD_NUMBER: int
    ASKS_MM_MG_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    symbol: Text = ...
    points: int = ...
    """最大深度档位数，股转（基础层、创新层）做市业务统一为10"""

    @property
    def bids_mm(self) -> RepeatedCompositeFieldContainer[SimpleQuote]:
        """做市商买方报价列表（原始报价）"""
        pass
    @property
    def asks_mm(self) -> RepeatedCompositeFieldContainer[SimpleQuote]:
        """做市商卖方报价列表（原始报价）"""
        pass
    @property
    def bids(self) -> RepeatedCompositeFieldContainer[SimpleQuote]:
        """投资者买方报价列表"""
        pass
    @property
    def asks(self) -> RepeatedCompositeFieldContainer[SimpleQuote]:
        """投资者卖方报价列表"""
        pass
    @property
    def bids_mm_mg(self) -> RepeatedCompositeFieldContainer[SimpleQuote]:
        """做市商买方报价列表（合并报价）"""
        pass
    @property
    def asks_mm_mg(self) -> RepeatedCompositeFieldContainer[SimpleQuote]:
        """做市商卖方报价列表（合并报价）"""
        pass
    @property
    def created_at(self) -> Timestamp: ...
    def __init__(self,
        *,
        symbol : Text = ...,
        points : int = ...,
        bids_mm : Optional[Iterable[SimpleQuote]] = ...,
        asks_mm : Optional[Iterable[SimpleQuote]] = ...,
        bids : Optional[Iterable[SimpleQuote]] = ...,
        asks : Optional[Iterable[SimpleQuote]] = ...,
        bids_mm_mg : Optional[Iterable[SimpleQuote]] = ...,
        asks_mm_mg : Optional[Iterable[SimpleQuote]] = ...,
        created_at : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"asks",b"asks",u"asks_mm",b"asks_mm",u"asks_mm_mg",b"asks_mm_mg",u"bids",b"bids",u"bids_mm",b"bids_mm",u"bids_mm_mg",b"bids_mm_mg",u"created_at",b"created_at",u"points",b"points",u"symbol",b"symbol"]) -> None: ...

class VarietyInfo(Message):
    DESCRIPTOR: Descriptor = ...
    VARIETY_NAME_FIELD_NUMBER: int
    SEC_TYPE_FIELD_NUMBER: int
    SEC_TYPE_EXT_FIELD_NUMBER: int
    EXCHANGE_FIELD_NUMBER: int
    QUOTE_UNIT_FIELD_NUMBER: int
    PRICE_TICK_FIELD_NUMBER: int
    MULTIPLIER_FIELD_NUMBER: int
    TRADE_N_FIELD_NUMBER: int
    MARGIN_RATIO_FIELD_NUMBER: int
    OPTION_TYPE_FIELD_NUMBER: int
    OPTION_MARGIN_RATIO1_FIELD_NUMBER: int
    OPTION_MARGIN_RATIO2_FIELD_NUMBER: int
    variety_name: Text = ...
    sec_type: int = ...
    sec_type_ext: int = ...
    exchange: Text = ...
    quote_unit: Text = ...
    price_tick: float = ...
    multiplier: float = ...
    trade_n: int = ...
    margin_ratio: float = ...
    option_type: Text = ...
    option_margin_ratio1: float = ...
    option_margin_ratio2: float = ...
    def __init__(self,
        *,
        variety_name : Text = ...,
        sec_type : int = ...,
        sec_type_ext : int = ...,
        exchange : Text = ...,
        quote_unit : Text = ...,
        price_tick : float = ...,
        multiplier : float = ...,
        trade_n : int = ...,
        margin_ratio : float = ...,
        option_type : Text = ...,
        option_margin_ratio1 : float = ...,
        option_margin_ratio2 : float = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"exchange",b"exchange",u"margin_ratio",b"margin_ratio",u"multiplier",b"multiplier",u"option_margin_ratio1",b"option_margin_ratio1",u"option_margin_ratio2",b"option_margin_ratio2",u"option_type",b"option_type",u"price_tick",b"price_tick",u"quote_unit",b"quote_unit",u"sec_type",b"sec_type",u"sec_type_ext",b"sec_type_ext",u"trade_n",b"trade_n",u"variety_name",b"variety_name"]) -> None: ...

class VarietyInfos(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[VarietyInfo]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[VarietyInfo]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class InstrumentInfo(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    SEC_TYPE_FIELD_NUMBER: int
    EXCHANGE_FIELD_NUMBER: int
    SEC_ID_FIELD_NUMBER: int
    SEC_NAME_FIELD_NUMBER: int
    SEC_ABBR_FIELD_NUMBER: int
    PRICE_TICK_FIELD_NUMBER: int
    TRADE_N_FIELD_NUMBER: int
    BOARD_FIELD_NUMBER: int
    MULTIPLIER_FIELD_NUMBER: int
    QUOTE_UNIT_FIELD_NUMBER: int
    MARGIN_RATIO_FIELD_NUMBER: int
    OPTION_MARGIN_RATIO1_FIELD_NUMBER: int
    OPTION_MARGIN_RATIO2_FIELD_NUMBER: int
    SEC_TYPE_EXT_FIELD_NUMBER: int
    OPTION_TYPE_FIELD_NUMBER: int
    CALL_OR_PUT_FIELD_NUMBER: int
    UNDERLYING_SYMBOL_FIELD_NUMBER: int
    IS_STRIKE_PRICE_ADJUSTED_FIELD_NUMBER: int
    EXERCISE_PRICE_FIELD_NUMBER: int
    CONVERSION_PRICE_FIELD_NUMBER: int
    CONVERSION_START_DATE_FIELD_NUMBER: int
    LISTED_DATE_FIELD_NUMBER: int
    DELISTED_DATE_FIELD_NUMBER: int
    symbol: Text = ...
    sec_type: int = ...
    """refer to enum: SecurityType"""

    exchange: Text = ...
    sec_id: Text = ...
    sec_name: Text = ...
    sec_abbr: Text = ...
    price_tick: float = ...
    """Deprecated: 基本面数据库里无此字段
    string sec_asset = 10[(gogoproto.moretags) = "xorm:\"-\""];
    """

    trade_n: int = ...
    """trade+n: n=0,1,2..."""

    board: int = ...
    multiplier: float = ...
    """Deprecated: 废弃, 应使用 instrument 里的 multiplier 字段"""

    quote_unit: Text = ...
    """Deprecated: 废弃掉, 从未使用过, 且数据库里该值都为 null; 报价单位"""

    margin_ratio: float = ...
    """Deprecated: 保证金比率, 废弃, 应使用 instrument 里的 margin_ratio 字段"""

    option_margin_ratio1: float = ...
    option_margin_ratio2: float = ...
    sec_type_ext: int = ...
    """sec_type扩展类型; 目前只有广发的项目在使用; 取值参考: http://192.168.0.20/platform/risk/src/branch/master/v5risk/constant.go 中的 SecurityTypesMap 定义
    新的基本面数据库里, 没有此字段. 需要根据 sec_type1(大类) 和 sec_type2(子类) 进行映射转换
    sec_type1(大类) 和 sec_type2(子类) 文档参考: 投研库数据字典 https://gnuixbiqmy.feishu.cn/sheets/shtcn2wDWZsTiObwGQmjAcIVfRf?sheet=ADwlR9
    """

    option_type: Text = ...
    """OPTION
    E=欧式，A=美式
    """

    call_or_put: Text = ...
    """C=Call(认购或看涨), P=Put(认沽或看跌)"""

    underlying_symbol: Text = ...
    """合约标的symbol"""

    is_strike_price_adjusted: bool = ...
    """Deprecated: 行权价是否已经调整过, 废弃, 应使用 instrument 里的 is_strike_price_adjusted"""

    exercise_price: float = ...
    """Deprecated: 行权价; 废弃, 应使用 instrument 里的 strike_price"""

    conversion_price: float = ...
    """CONVERTIBLE BOND
    Deprecated: 转股价, 废弃, 应使用  instrument 里的 conversion_price 字段
    """

    @property
    def conversion_start_date(self) -> Timestamp:
        """开始转股时间"""
        pass
    @property
    def listed_date(self) -> Timestamp: ...
    @property
    def delisted_date(self) -> Timestamp: ...
    def __init__(self,
        *,
        symbol : Text = ...,
        sec_type : int = ...,
        exchange : Text = ...,
        sec_id : Text = ...,
        sec_name : Text = ...,
        sec_abbr : Text = ...,
        price_tick : float = ...,
        trade_n : int = ...,
        board : int = ...,
        multiplier : float = ...,
        quote_unit : Text = ...,
        margin_ratio : float = ...,
        option_margin_ratio1 : float = ...,
        option_margin_ratio2 : float = ...,
        sec_type_ext : int = ...,
        option_type : Text = ...,
        call_or_put : Text = ...,
        underlying_symbol : Text = ...,
        is_strike_price_adjusted : bool = ...,
        exercise_price : float = ...,
        conversion_price : float = ...,
        conversion_start_date : Optional[Timestamp] = ...,
        listed_date : Optional[Timestamp] = ...,
        delisted_date : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"conversion_start_date",b"conversion_start_date",u"delisted_date",b"delisted_date",u"listed_date",b"listed_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"board",b"board",u"call_or_put",b"call_or_put",u"conversion_price",b"conversion_price",u"conversion_start_date",b"conversion_start_date",u"delisted_date",b"delisted_date",u"exchange",b"exchange",u"exercise_price",b"exercise_price",u"is_strike_price_adjusted",b"is_strike_price_adjusted",u"listed_date",b"listed_date",u"margin_ratio",b"margin_ratio",u"multiplier",b"multiplier",u"option_margin_ratio1",b"option_margin_ratio1",u"option_margin_ratio2",b"option_margin_ratio2",u"option_type",b"option_type",u"price_tick",b"price_tick",u"quote_unit",b"quote_unit",u"sec_abbr",b"sec_abbr",u"sec_id",b"sec_id",u"sec_name",b"sec_name",u"sec_type",b"sec_type",u"sec_type_ext",b"sec_type_ext",u"symbol",b"symbol",u"trade_n",b"trade_n",u"underlying_symbol",b"underlying_symbol"]) -> None: ...

class InstrumentInfos(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[InstrumentInfo]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[InstrumentInfo]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class Instrument(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    SEC_LEVEL_FIELD_NUMBER: int
    IS_SUSPENDED_FIELD_NUMBER: int
    MULTIPLIER_FIELD_NUMBER: int
    MARGIN_RATIO_FIELD_NUMBER: int
    SETTLE_PRICE_FIELD_NUMBER: int
    POSITION_FIELD_NUMBER: int
    PRE_CLOSE_FIELD_NUMBER: int
    PRE_SETTLE_FIELD_NUMBER: int
    UPPER_LIMIT_FIELD_NUMBER: int
    LOWER_LIMIT_FIELD_NUMBER: int
    ADJ_FACTOR_FIELD_NUMBER: int
    STRIKE_PRICE_FIELD_NUMBER: int
    CONVERSION_PRICE_FIELD_NUMBER: int
    IS_STRIKE_PRICE_ADJUSTED_FIELD_NUMBER: int
    INFO_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    REDEMPTION_RECORD_DATE_FIELD_NUMBER: int
    symbol: Text = ...
    sec_level: int = ...
    """Deprecated: 废弃掉; 本身分类就不准确;"""

    is_suspended: int = ...
    multiplier: float = ...
    """对应 instrument 表里的 multiplier 字段, 表示该交易日所对应的合约乘数
    回测时使用此合约乘数
    """

    margin_ratio: float = ...
    """对应 instrument 表里的 margin_ratio 字段, 对应该交易日所对应的保证金比率"""

    settle_price: float = ...
    position: int = ...
    pre_close: float = ...
    pre_settle: float = ...
    upper_limit: float = ...
    lower_limit: float = ...
    adj_factor: float = ...
    strike_price: float = ...
    """期权的行权价(回测时使用此行权价)"""

    conversion_price: float = ...
    """CONVERTIBLE BOND
    转股价
    """

    is_strike_price_adjusted: bool = ...
    """行权价当天是否已经调整过"""

    @property
    def info(self) -> InstrumentInfo: ...
    @property
    def created_at(self) -> Timestamp: ...
    @property
    def redemption_record_date(self) -> Timestamp:
        """可转债赎回登记日期, 回测和仿真, 在 可转债赎回登记日期当天收盘后, 对于持有的相应可转债, 做类似的强平操作
        阿里云生产环境里, 数据库里没有对应的 redemption_record_date 字段, 所以先注释掉
        """
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        sec_level : int = ...,
        is_suspended : int = ...,
        multiplier : float = ...,
        margin_ratio : float = ...,
        settle_price : float = ...,
        position : int = ...,
        pre_close : float = ...,
        pre_settle : float = ...,
        upper_limit : float = ...,
        lower_limit : float = ...,
        adj_factor : float = ...,
        strike_price : float = ...,
        conversion_price : float = ...,
        is_strike_price_adjusted : bool = ...,
        info : Optional[InstrumentInfo] = ...,
        created_at : Optional[Timestamp] = ...,
        redemption_record_date : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at",u"info",b"info",u"redemption_record_date",b"redemption_record_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"adj_factor",b"adj_factor",u"conversion_price",b"conversion_price",u"created_at",b"created_at",u"info",b"info",u"is_strike_price_adjusted",b"is_strike_price_adjusted",u"is_suspended",b"is_suspended",u"lower_limit",b"lower_limit",u"margin_ratio",b"margin_ratio",u"multiplier",b"multiplier",u"position",b"position",u"pre_close",b"pre_close",u"pre_settle",b"pre_settle",u"redemption_record_date",b"redemption_record_date",u"sec_level",b"sec_level",u"settle_price",b"settle_price",u"strike_price",b"strike_price",u"symbol",b"symbol",u"upper_limit",b"upper_limit"]) -> None: ...

class Instruments(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[Instrument]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[Instrument]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class Dividend(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    CASH_DIV_FIELD_NUMBER: int
    SHARE_DIV_RATIO_FIELD_NUMBER: int
    SHARE_TRANS_RATIO_FIELD_NUMBER: int
    ALLOTMENT_RATIO_FIELD_NUMBER: int
    ALLOTMENT_PRICE_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    symbol: Text = ...
    cash_div: float = ...
    share_div_ratio: float = ...
    share_trans_ratio: float = ...
    allotment_ratio: float = ...
    allotment_price: float = ...
    @property
    def created_at(self) -> Timestamp: ...
    def __init__(self,
        *,
        symbol : Text = ...,
        cash_div : float = ...,
        share_div_ratio : float = ...,
        share_trans_ratio : float = ...,
        allotment_ratio : float = ...,
        allotment_price : float = ...,
        created_at : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"allotment_price",b"allotment_price",u"allotment_ratio",b"allotment_ratio",u"cash_div",b"cash_div",u"created_at",b"created_at",u"share_div_ratio",b"share_div_ratio",u"share_trans_ratio",b"share_trans_ratio",u"symbol",b"symbol"]) -> None: ...

class Dividends(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[Dividend]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[Dividend]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class ContinuousContract(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    symbol: Text = ...
    @property
    def created_at(self) -> Timestamp: ...
    def __init__(self,
        *,
        symbol : Text = ...,
        created_at : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"created_at",b"created_at",u"symbol",b"symbol"]) -> None: ...

class ContinuousContracts(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[ContinuousContract]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[ContinuousContract]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class Constituent(Message):
    DESCRIPTOR: Descriptor = ...
    class ConstituentsEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: float = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : float = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    CONSTITUENTS_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    @property
    def constituents(self) -> ScalarMap[Text, float]: ...
    @property
    def created_at(self) -> Timestamp: ...
    def __init__(self,
        *,
        constituents : Optional[Mapping[Text, float]] = ...,
        created_at : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"constituents",b"constituents",u"created_at",b"created_at"]) -> None: ...

class Constituents(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[Constituent]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[Constituent]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...
