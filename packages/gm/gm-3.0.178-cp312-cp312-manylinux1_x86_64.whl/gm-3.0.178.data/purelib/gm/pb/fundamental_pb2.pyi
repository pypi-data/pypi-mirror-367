"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from builtins import (
    bool,
    bytes,
    float,
    int,
)

from gm.pb.tradetime_pb2 import (
    ExchangeTradeTimeSection,
)

from google.protobuf.descriptor import (
    Descriptor,
    FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer,
    ScalarMap,
)

from google.protobuf.message import (
    Message,
)

from google.protobuf.timestamp_pb2 import (
    Timestamp,
)

from typing import (
    Iterable,
    Mapping,
    Optional,
    Text,
)

from typing_extensions import (
    Literal,
)


DESCRIPTOR: FileDescriptor = ...

class GetFundamentalsReq(Message):
    DESCRIPTOR: Descriptor = ...
    TABLE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    FILTER_FIELD_NUMBER: int
    SYMBOLS_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    ORDER_BY_FIELD_NUMBER: int
    LIMIT_FIELD_NUMBER: int
    table: Text = ...
    fields: Text = ...
    filter: Text = ...
    symbols: Text = ...
    start_date: Text = ...
    end_date: Text = ...
    order_by: Text = ...
    limit: int = ...
    def __init__(self,
        *,
        table : Text = ...,
        fields : Text = ...,
        filter : Text = ...,
        symbols : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        order_by : Text = ...,
        limit : int = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"end_date",b"end_date",u"fields",b"fields",u"filter",b"filter",u"limit",b"limit",u"order_by",b"order_by",u"start_date",b"start_date",u"symbols",b"symbols",u"table",b"table"]) -> None: ...

class GetFundamentalsNReq(Message):
    DESCRIPTOR: Descriptor = ...
    TABLE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    FILTER_FIELD_NUMBER: int
    SYMBOLS_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    ORDER_BY_FIELD_NUMBER: int
    COUNT_FIELD_NUMBER: int
    table: Text = ...
    fields: Text = ...
    filter: Text = ...
    symbols: Text = ...
    end_date: Text = ...
    order_by: Text = ...
    count: int = ...
    def __init__(self,
        *,
        table : Text = ...,
        fields : Text = ...,
        filter : Text = ...,
        symbols : Text = ...,
        end_date : Text = ...,
        order_by : Text = ...,
        count : int = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"count",b"count",u"end_date",b"end_date",u"fields",b"fields",u"filter",b"filter",u"order_by",b"order_by",u"symbols",b"symbols",u"table",b"table"]) -> None: ...

class GetFundamentalsRsp(Message):
    DESCRIPTOR: Descriptor = ...
    class Fundamental(Message):
        DESCRIPTOR: Descriptor = ...
        class FieldsEntry(Message):
            DESCRIPTOR: Descriptor = ...
            KEY_FIELD_NUMBER: int
            VALUE_FIELD_NUMBER: int
            key: Text = ...
            value: float = ...
            def __init__(self,
                *,
                key : Text = ...,
                value : float = ...,
                ) -> None: ...
            def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

        SYMBOL_FIELD_NUMBER: int
        FIELDS_FIELD_NUMBER: int
        PUB_DATE_FIELD_NUMBER: int
        END_DATE_FIELD_NUMBER: int
        symbol: Text = ...
        @property
        def fields(self) -> ScalarMap[Text, float]: ...
        @property
        def pub_date(self) -> Timestamp: ...
        @property
        def end_date(self) -> Timestamp: ...
        def __init__(self,
            *,
            symbol : Text = ...,
            fields : Optional[Mapping[Text, float]] = ...,
            pub_date : Optional[Timestamp] = ...,
            end_date : Optional[Timestamp] = ...,
            ) -> None: ...
        def HasField(self, field_name: Literal[u"end_date",b"end_date",u"pub_date",b"pub_date"]) -> bool: ...
        def ClearField(self, field_name: Literal[u"end_date",b"end_date",u"fields",b"fields",u"pub_date",b"pub_date",u"symbol",b"symbol"]) -> None: ...

    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[GetFundamentalsRsp.Fundamental]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[GetFundamentalsRsp.Fundamental]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetInstrumentInfosReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    EXCHANGES_FIELD_NUMBER: int
    SEC_TYPES_FIELD_NUMBER: int
    NAMES_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    IF_MODIFIED_SINCE_FIELD_NUMBER: int
    TRADABLE_ON_DATE_FIELD_NUMBER: int
    symbols: Text = ...
    exchanges: Text = ...
    sec_types: Text = ...
    names: Text = ...
    fields: Text = ...
    @property
    def if_modified_since(self) -> Timestamp: ...
    @property
    def tradable_on_date(self) -> Timestamp: ...
    def __init__(self,
        *,
        symbols : Text = ...,
        exchanges : Text = ...,
        sec_types : Text = ...,
        names : Text = ...,
        fields : Text = ...,
        if_modified_since : Optional[Timestamp] = ...,
        tradable_on_date : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"if_modified_since",b"if_modified_since",u"tradable_on_date",b"tradable_on_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"exchanges",b"exchanges",u"fields",b"fields",u"if_modified_since",b"if_modified_since",u"names",b"names",u"sec_types",b"sec_types",u"symbols",b"symbols",u"tradable_on_date",b"tradable_on_date"]) -> None: ...

class GetFuzzyMatchInstrumentInfosReq(Message):
    DESCRIPTOR: Descriptor = ...
    FUZZY_MATCH_FIELD_FIELD_NUMBER: int
    COUNT_FIELD_NUMBER: int
    FILTER_FIELD_NUMBER: int
    fuzzy_match_field: Text = ...
    """option of [pinyin, symbol, sec_name etc.]"""

    count: int = ...
    """max matched records of each sec_type"""

    filter: Text = ...
    """e.g. filter outdated future contract"""

    def __init__(self,
        *,
        fuzzy_match_field : Text = ...,
        count : int = ...,
        filter : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"count",b"count",u"filter",b"filter",u"fuzzy_match_field",b"fuzzy_match_field"]) -> None: ...

class GetInstrumentsReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    EXCHANGES_FIELD_NUMBER: int
    SEC_TYPES_FIELD_NUMBER: int
    NAMES_FIELD_NUMBER: int
    SKIP_SUSPENDED_FIELD_NUMBER: int
    SKIP_ST_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    IF_MODIFIED_SINCE_FIELD_NUMBER: int
    TRADABLE_ON_DATE_FIELD_NUMBER: int
    symbols: Text = ...
    exchanges: Text = ...
    sec_types: Text = ...
    names: Text = ...
    skip_suspended: bool = ...
    skip_st: bool = ...
    fields: Text = ...
    @property
    def if_modified_since(self) -> Timestamp: ...
    @property
    def tradable_on_date(self) -> Timestamp: ...
    def __init__(self,
        *,
        symbols : Text = ...,
        exchanges : Text = ...,
        sec_types : Text = ...,
        names : Text = ...,
        skip_suspended : bool = ...,
        skip_st : bool = ...,
        fields : Text = ...,
        if_modified_since : Optional[Timestamp] = ...,
        tradable_on_date : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"if_modified_since",b"if_modified_since",u"tradable_on_date",b"tradable_on_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"exchanges",b"exchanges",u"fields",b"fields",u"if_modified_since",b"if_modified_since",u"names",b"names",u"sec_types",b"sec_types",u"skip_st",b"skip_st",u"skip_suspended",b"skip_suspended",u"symbols",b"symbols",u"tradable_on_date",b"tradable_on_date"]) -> None: ...

class GetHistoryInstrumentsReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    symbols: Text = ...
    fields: Text = ...
    start_date: Text = ...
    end_date: Text = ...
    def __init__(self,
        *,
        symbols : Text = ...,
        fields : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"end_date",b"end_date",u"fields",b"fields",u"start_date",b"start_date",u"symbols",b"symbols"]) -> None: ...

class GetConstituentsReq(Message):
    DESCRIPTOR: Descriptor = ...
    INDEX_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    index: Text = ...
    fields: Text = ...
    start_date: Text = ...
    end_date: Text = ...
    def __init__(self,
        *,
        index : Text = ...,
        fields : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"end_date",b"end_date",u"fields",b"fields",u"index",b"index",u"start_date",b"start_date"]) -> None: ...

class GetSectorReq(Message):
    DESCRIPTOR: Descriptor = ...
    CODE_FIELD_NUMBER: int
    code: Text = ...
    """string start_date = 2;"""

    def __init__(self,
        *,
        code : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"code",b"code"]) -> None: ...

class GetSectorRsp(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]: ...
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"symbols",b"symbols"]) -> None: ...

class GetIndustryReq(Message):
    DESCRIPTOR: Descriptor = ...
    CODE_FIELD_NUMBER: int
    code: Text = ...
    def __init__(self,
        *,
        code : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"code",b"code"]) -> None: ...

class GetIndustryRsp(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]: ...
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"symbols",b"symbols"]) -> None: ...

class GetConceptReq(Message):
    DESCRIPTOR: Descriptor = ...
    CODE_FIELD_NUMBER: int
    code: Text = ...
    def __init__(self,
        *,
        code : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"code",b"code"]) -> None: ...

class GetConceptRsp(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]: ...
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"symbols",b"symbols"]) -> None: ...

class GetTradingDatesReq(Message):
    DESCRIPTOR: Descriptor = ...
    EXCHANGE_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    exchange: Text = ...
    start_date: Text = ...
    end_date: Text = ...
    def __init__(self,
        *,
        exchange : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"end_date",b"end_date",u"exchange",b"exchange",u"start_date",b"start_date"]) -> None: ...

class GetTradingDatesRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATES_FIELD_NUMBER: int
    @property
    def dates(self) -> RepeatedCompositeFieldContainer[Timestamp]: ...
    def __init__(self,
        *,
        dates : Optional[Iterable[Timestamp]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"dates",b"dates"]) -> None: ...

class GetTradingTimesReq(Message):
    DESCRIPTOR: Descriptor = ...
    def __init__(self,
        ) -> None: ...

class GetTradingTimesRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[ExchangeTradeTimeSection]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[ExchangeTradeTimeSection]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetTradingTimesExtReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    VARIETY_NAMES_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]: ...
    @property
    def variety_names(self) -> RepeatedScalarFieldContainer[Text]: ...
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        variety_names : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"symbols",b"symbols",u"variety_names",b"variety_names"]) -> None: ...

class GetTradingTimesExtRsp(Message):
    DESCRIPTOR: Descriptor = ...
    class TTE(Message):
        DESCRIPTOR: Descriptor = ...
        SYMBOL_FIELD_NUMBER: int
        VARIETY_NAME_FIELD_NUMBER: int
        SECTIONS_FIELD_NUMBER: int
        AUCTIONS_FIELD_NUMBER: int
        symbol: Text = ...
        variety_name: Text = ...
        @property
        def sections(self) -> RepeatedScalarFieldContainer[Text]: ...
        @property
        def auctions(self) -> RepeatedScalarFieldContainer[Text]: ...
        def __init__(self,
            *,
            symbol : Text = ...,
            variety_name : Text = ...,
            sections : Optional[Iterable[Text]] = ...,
            auctions : Optional[Iterable[Text]] = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"auctions",b"auctions",u"sections",b"sections",u"symbol",b"symbol",u"variety_name",b"variety_name"]) -> None: ...

    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[GetTradingTimesExtRsp.TTE]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[GetTradingTimesExtRsp.TTE]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetPreviousTradingDateReq(Message):
    DESCRIPTOR: Descriptor = ...
    EXCHANGE_FIELD_NUMBER: int
    DATE_FIELD_NUMBER: int
    exchange: Text = ...
    date: Text = ...
    def __init__(self,
        *,
        exchange : Text = ...,
        date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"date",b"date",u"exchange",b"exchange"]) -> None: ...

class GetPreviousTradingDateRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATE_FIELD_NUMBER: int
    @property
    def date(self) -> Timestamp: ...
    def __init__(self,
        *,
        date : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"date",b"date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"date",b"date"]) -> None: ...

class GetNextTradingDateReq(Message):
    DESCRIPTOR: Descriptor = ...
    EXCHANGE_FIELD_NUMBER: int
    DATE_FIELD_NUMBER: int
    exchange: Text = ...
    date: Text = ...
    def __init__(self,
        *,
        exchange : Text = ...,
        date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"date",b"date",u"exchange",b"exchange"]) -> None: ...

class GetNextTradingDateRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATE_FIELD_NUMBER: int
    @property
    def date(self) -> Timestamp: ...
    def __init__(self,
        *,
        date : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"date",b"date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"date",b"date"]) -> None: ...

class GetDividendsReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    symbol: Text = ...
    start_date: Text = ...
    end_date: Text = ...
    def __init__(self,
        *,
        symbol : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"end_date",b"end_date",u"start_date",b"start_date",u"symbol",b"symbol"]) -> None: ...

class GetDividendsSnapshotReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """get all symbols if argument is empty"""
        pass
    date: Text = ...
    """snapshot date(as start date if end date is filled)"""

    end_date: Text = ...
    """snapshot end date"""

    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        date : Text = ...,
        end_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"date",b"date",u"end_date",b"end_date",u"symbols",b"symbols"]) -> None: ...

class GetContinuousContractsReq(Message):
    DESCRIPTOR: Descriptor = ...
    CSYMBOL_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    csymbol: Text = ...
    start_date: Text = ...
    end_date: Text = ...
    def __init__(self,
        *,
        csymbol : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"csymbol",b"csymbol",u"end_date",b"end_date",u"start_date",b"start_date"]) -> None: ...

class GetVarietyInfosReq(Message):
    DESCRIPTOR: Descriptor = ...
    VARIETY_NAMES_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    @property
    def variety_names(self) -> RepeatedScalarFieldContainer[Text]: ...
    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]: ...
    def __init__(self,
        *,
        variety_names : Optional[Iterable[Text]] = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"fields",b"fields",u"variety_names",b"variety_names"]) -> None: ...

class GetOptionSymbolsByExchangeReq(Message):
    DESCRIPTOR: Descriptor = ...
    EXCHANGE_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    CALL_OR_PUT_FIELD_NUMBER: int
    ADJUST_FLAG_FIELD_NUMBER: int
    exchange: Text = ...
    trade_date: Text = ...
    call_or_put: Text = ...
    adjust_flag: Text = ...
    """表示是否过滤除权后合约(带A合约），不填默认为''（空字符串）
    'M' 表示不返回带A合约
    'A' 表示只返回带A合约
    ''  表示不做过滤都返回
    """

    def __init__(self,
        *,
        exchange : Text = ...,
        trade_date : Text = ...,
        call_or_put : Text = ...,
        adjust_flag : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"adjust_flag",b"adjust_flag",u"call_or_put",b"call_or_put",u"exchange",b"exchange",u"trade_date",b"trade_date"]) -> None: ...

class GetOptionSymbolsByExchangeRsp(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]: ...
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"symbols",b"symbols"]) -> None: ...

class GetOptionSymbolsByInAtOutReq(Message):
    DESCRIPTOR: Descriptor = ...
    UNDERLYING_SYMBOL_FIELD_NUMBER: int
    TRADE_TIME_FIELD_NUMBER: int
    EXECUTE_MONTH_FIELD_NUMBER: int
    CALL_OR_PUT_FIELD_NUMBER: int
    IN_AT_OUT_FIELD_NUMBER: int
    PRICE_FIELD_NUMBER: int
    PRICE_TYPE_FIELD_NUMBER: int
    ADJUST_FLAG_FIELD_NUMBER: int
    underlying_symbol: Text = ...
    trade_time: Text = ...
    execute_month: int = ...
    call_or_put: Text = ...
    in_at_out: Text = ...
    """档位计数, 必须为整数;
    正数时为实值
    负数是位虚值
    等于 0 时为平值
    如果为空字符串时, 为所有档位
    """

    price: float = ...
    price_type: Text = ...
    adjust_flag: Text = ...
    """表示是否过滤除权后合约(带A合约），不填默认为''（空字符串）
    'M' 表示不返回带A合约
    'A' 表示只返回带A合约
    ''  表示不做过滤都返回
    """

    def __init__(self,
        *,
        underlying_symbol : Text = ...,
        trade_time : Text = ...,
        execute_month : int = ...,
        call_or_put : Text = ...,
        in_at_out : Text = ...,
        price : float = ...,
        price_type : Text = ...,
        adjust_flag : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"adjust_flag",b"adjust_flag",u"call_or_put",b"call_or_put",u"execute_month",b"execute_month",u"in_at_out",b"in_at_out",u"price",b"price",u"price_type",b"price_type",u"trade_time",b"trade_time",u"underlying_symbol",b"underlying_symbol"]) -> None: ...

class GetOptionSymbolsByInAtOutRsp(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]: ...
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"symbols",b"symbols"]) -> None: ...

class GetOptionDelistedDatesReq(Message):
    DESCRIPTOR: Descriptor = ...
    UNDERLYING_SYMBOL_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    EXECUTE_MONTH_FIELD_NUMBER: int
    underlying_symbol: Text = ...
    trade_date: Text = ...
    execute_month: int = ...
    def __init__(self,
        *,
        underlying_symbol : Text = ...,
        trade_date : Text = ...,
        execute_month : int = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"execute_month",b"execute_month",u"trade_date",b"trade_date",u"underlying_symbol",b"underlying_symbol"]) -> None: ...

class GetOptionDelistedDatesRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DELISTED_DATE_FIELD_NUMBER: int
    @property
    def delisted_date(self) -> RepeatedCompositeFieldContainer[Timestamp]: ...
    def __init__(self,
        *,
        delisted_date : Optional[Iterable[Timestamp]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"delisted_date",b"delisted_date"]) -> None: ...

class GetOptionExercisePricesReq(Message):
    DESCRIPTOR: Descriptor = ...
    UNDERLYING_SYMBOL_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    EXECUTE_MONTH_FIELD_NUMBER: int
    ADJUST_FLAG_FIELD_NUMBER: int
    underlying_symbol: Text = ...
    trade_date: Text = ...
    execute_month: int = ...
    adjust_flag: Text = ...
    def __init__(self,
        *,
        underlying_symbol : Text = ...,
        trade_date : Text = ...,
        execute_month : int = ...,
        adjust_flag : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"adjust_flag",b"adjust_flag",u"execute_month",b"execute_month",u"trade_date",b"trade_date",u"underlying_symbol",b"underlying_symbol"]) -> None: ...

class GetOptionExercisePricesRsp(Message):
    DESCRIPTOR: Descriptor = ...
    EXERCISE_PRICES_FIELD_NUMBER: int
    @property
    def exercise_prices(self) -> RepeatedScalarFieldContainer[float]: ...
    def __init__(self,
        *,
        exercise_prices : Optional[Iterable[float]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"exercise_prices",b"exercise_prices"]) -> None: ...

class RawInstrumentFile(Message):
    DESCRIPTOR: Descriptor = ...
    FILE_NAME_FIELD_NUMBER: int
    FILE_SHA1_FIELD_NUMBER: int
    FILE_DATA_FIELD_NUMBER: int
    FILE_STATUS_FIELD_NUMBER: int
    ERR_MSG_FIELD_NUMBER: int
    file_name: Text = ...
    """文件名, 客户端调用方指定"""

    file_sha1: Text = ...
    """文件内容的sha1值"""

    file_data: bytes = ...
    """文件内容"""

    file_status: int = ...
    """0: 读取OK; 1: 文件内容未变化(根据file_sha1对比检查) 101: 文件不存在 102: 文件读取发生错误"""

    err_msg: Text = ...
    """当读取文件发生错误时, 填入对应error的info"""

    def __init__(self,
        *,
        file_name : Text = ...,
        file_sha1 : Text = ...,
        file_data : bytes = ...,
        file_status : int = ...,
        err_msg : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"err_msg",b"err_msg",u"file_data",b"file_data",u"file_name",b"file_name",u"file_sha1",b"file_sha1",u"file_status",b"file_status"]) -> None: ...

class GetRawInstrumentsReq(Message):
    DESCRIPTOR: Descriptor = ...
    FILES_FIELD_NUMBER: int
    @property
    def files(self) -> RepeatedCompositeFieldContainer[RawInstrumentFile]: ...
    def __init__(self,
        *,
        files : Optional[Iterable[RawInstrumentFile]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"files",b"files"]) -> None: ...

class GetRawInstrumentsRsp(Message):
    DESCRIPTOR: Descriptor = ...
    FILES_FIELD_NUMBER: int
    @property
    def files(self) -> RepeatedCompositeFieldContainer[RawInstrumentFile]: ...
    def __init__(self,
        *,
        files : Optional[Iterable[RawInstrumentFile]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"files",b"files"]) -> None: ...

class GetConvertibleBondCallInfoReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]: ...
    start_date: Text = ...
    end_date: Text = ...
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"end_date",b"end_date",u"start_date",b"start_date",u"symbols",b"symbols"]) -> None: ...

class GetConvertibleBondCallInfoRsp(Message):
    DESCRIPTOR: Descriptor = ...
    class CBCallInfo(Message):
        DESCRIPTOR: Descriptor = ...
        SYMBOL_FIELD_NUMBER: int
        PUB_DATE_FIELD_NUMBER: int
        REDEMPTION_DATE_FIELD_NUMBER: int
        RECORD_DATE_FIELD_NUMBER: int
        CASH_DATE_FIELD_NUMBER: int
        REDEMPTION_PRICE_FIELD_NUMBER: int
        symbol: Text = ...
        @property
        def pub_date(self) -> Timestamp: ...
        @property
        def redemption_date(self) -> Timestamp: ...
        @property
        def record_date(self) -> Timestamp: ...
        @property
        def cash_date(self) -> Timestamp: ...
        redemption_price: float = ...
        def __init__(self,
            *,
            symbol : Text = ...,
            pub_date : Optional[Timestamp] = ...,
            redemption_date : Optional[Timestamp] = ...,
            record_date : Optional[Timestamp] = ...,
            cash_date : Optional[Timestamp] = ...,
            redemption_price : float = ...,
            ) -> None: ...
        def HasField(self, field_name: Literal[u"cash_date",b"cash_date",u"pub_date",b"pub_date",u"record_date",b"record_date",u"redemption_date",b"redemption_date"]) -> bool: ...
        def ClearField(self, field_name: Literal[u"cash_date",b"cash_date",u"pub_date",b"pub_date",u"record_date",b"record_date",u"redemption_date",b"redemption_date",u"redemption_price",b"redemption_price",u"symbol",b"symbol"]) -> None: ...

    INFOS_FIELD_NUMBER: int
    @property
    def infos(self) -> RepeatedCompositeFieldContainer[GetConvertibleBondCallInfoRsp.CBCallInfo]: ...
    def __init__(self,
        *,
        infos : Optional[Iterable[GetConvertibleBondCallInfoRsp.CBCallInfo]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"infos",b"infos"]) -> None: ...
