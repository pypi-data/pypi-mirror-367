"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from builtins import (
    bool,
    float,
    int,
    type,
)

from gm.pb.common_pb2 import (
    ConnectionAddress,
    ConnectionStatus,
    Property,
)

from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)

from google.protobuf.internal.containers import (
    MessageMap,
    RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer,
    ScalarMap,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)

from google.protobuf.message import (
    Message,
)

from google.protobuf.timestamp_pb2 import (
    Timestamp,
)

from typing import (
    Iterable,
    Mapping,
    NewType,
    Optional,
    Text,
)

from typing_extensions import (
    Literal,
)


DESCRIPTOR: FileDescriptor = ...

class ExecType(_ExecType, metaclass=_ExecTypeEnumTypeWrapper):
    """委托回报类型"""
    pass
class _ExecType:
    V = NewType('V', int)
class _ExecTypeEnumTypeWrapper(_EnumTypeWrapper[_ExecType.V], type):
    DESCRIPTOR: EnumDescriptor = ...
    ExecType_Unknown = ExecType.V(0)
    ExecType_New = ExecType.V(1)
    """已报"""

    ExecType_DoneForDay = ExecType.V(4)
    """"""

    ExecType_Canceled = ExecType.V(5)
    """已撤销"""

    ExecType_PendingCancel = ExecType.V(6)
    """待撤销"""

    ExecType_Stopped = ExecType.V(7)
    """"""

    ExecType_Rejected = ExecType.V(8)
    """已拒绝"""

    ExecType_Suspended = ExecType.V(9)
    """挂起"""

    ExecType_PendingNew = ExecType.V(10)
    """待报"""

    ExecType_Calculated = ExecType.V(11)
    """"""

    ExecType_Expired = ExecType.V(12)
    """过期"""

    ExecType_Restated = ExecType.V(13)
    """"""

    ExecType_PendingReplace = ExecType.V(14)
    """"""

    ExecType_Trade = ExecType.V(15)
    """成交"""

    ExecType_TradeCorrect = ExecType.V(16)
    """"""

    ExecType_TradeCancel = ExecType.V(17)
    """"""

    ExecType_OrderStatus = ExecType.V(18)
    """委托状态"""

    ExecType_CancelRejected = ExecType.V(19)
    """撤单被拒绝"""


ExecType_Unknown = ExecType.V(0)
ExecType_New = ExecType.V(1)
"""已报"""

ExecType_DoneForDay = ExecType.V(4)
""""""

ExecType_Canceled = ExecType.V(5)
"""已撤销"""

ExecType_PendingCancel = ExecType.V(6)
"""待撤销"""

ExecType_Stopped = ExecType.V(7)
""""""

ExecType_Rejected = ExecType.V(8)
"""已拒绝"""

ExecType_Suspended = ExecType.V(9)
"""挂起"""

ExecType_PendingNew = ExecType.V(10)
"""待报"""

ExecType_Calculated = ExecType.V(11)
""""""

ExecType_Expired = ExecType.V(12)
"""过期"""

ExecType_Restated = ExecType.V(13)
""""""

ExecType_PendingReplace = ExecType.V(14)
""""""

ExecType_Trade = ExecType.V(15)
"""成交"""

ExecType_TradeCorrect = ExecType.V(16)
""""""

ExecType_TradeCancel = ExecType.V(17)
""""""

ExecType_OrderStatus = ExecType.V(18)
"""委托状态"""

ExecType_CancelRejected = ExecType.V(19)
"""撤单被拒绝"""


class OrderStatus(_OrderStatus, metaclass=_OrderStatusEnumTypeWrapper):
    """委托状态"""
    pass
class _OrderStatus:
    V = NewType('V', int)
class _OrderStatusEnumTypeWrapper(_EnumTypeWrapper[_OrderStatus.V], type):
    DESCRIPTOR: EnumDescriptor = ...
    OrderStatus_Unknown = OrderStatus.V(0)
    OrderStatus_New = OrderStatus.V(1)
    """已报"""

    OrderStatus_PartiallyFilled = OrderStatus.V(2)
    """部成"""

    OrderStatus_Filled = OrderStatus.V(3)
    """已成"""

    OrderStatus_DoneForDay = OrderStatus.V(4)
    """"""

    OrderStatus_Canceled = OrderStatus.V(5)
    """已撤"""

    OrderStatus_PendingCancel = OrderStatus.V(6)
    """待撤"""

    OrderStatus_Stopped = OrderStatus.V(7)
    """"""

    OrderStatus_Rejected = OrderStatus.V(8)
    """已拒绝"""

    OrderStatus_Suspended = OrderStatus.V(9)
    """挂起"""

    OrderStatus_PendingNew = OrderStatus.V(10)
    """待报"""

    OrderStatus_Calculated = OrderStatus.V(11)
    """"""

    OrderStatus_Expired = OrderStatus.V(12)
    """已过期"""

    OrderStatus_AcceptedForBidding = OrderStatus.V(13)
    """"""

    OrderStatus_PendingReplace = OrderStatus.V(14)
    """"""


OrderStatus_Unknown = OrderStatus.V(0)
OrderStatus_New = OrderStatus.V(1)
"""已报"""

OrderStatus_PartiallyFilled = OrderStatus.V(2)
"""部成"""

OrderStatus_Filled = OrderStatus.V(3)
"""已成"""

OrderStatus_DoneForDay = OrderStatus.V(4)
""""""

OrderStatus_Canceled = OrderStatus.V(5)
"""已撤"""

OrderStatus_PendingCancel = OrderStatus.V(6)
"""待撤"""

OrderStatus_Stopped = OrderStatus.V(7)
""""""

OrderStatus_Rejected = OrderStatus.V(8)
"""已拒绝"""

OrderStatus_Suspended = OrderStatus.V(9)
"""挂起"""

OrderStatus_PendingNew = OrderStatus.V(10)
"""待报"""

OrderStatus_Calculated = OrderStatus.V(11)
""""""

OrderStatus_Expired = OrderStatus.V(12)
"""已过期"""

OrderStatus_AcceptedForBidding = OrderStatus.V(13)
""""""

OrderStatus_PendingReplace = OrderStatus.V(14)
""""""


class OrderRejectReason(_OrderRejectReason, metaclass=_OrderRejectReasonEnumTypeWrapper):
    """委托拒绝原因"""
    pass
class _OrderRejectReason:
    V = NewType('V', int)
class _OrderRejectReasonEnumTypeWrapper(_EnumTypeWrapper[_OrderRejectReason.V], type):
    DESCRIPTOR: EnumDescriptor = ...
    OrderRejectReason_Unknown = OrderRejectReason.V(0)
    """未知原因"""

    OrderRejectReason_RiskRuleCheckFailed = OrderRejectReason.V(1)
    """不符合风控规则"""

    OrderRejectReason_NoEnoughCash = OrderRejectReason.V(2)
    """资金不足"""

    OrderRejectReason_NoEnoughPosition = OrderRejectReason.V(3)
    """仓位不足"""

    OrderRejectReason_IllegalAccountId = OrderRejectReason.V(4)
    """非法账户ID"""

    OrderRejectReason_IllegalStrategyId = OrderRejectReason.V(5)
    """非法策略ID"""

    OrderRejectReason_IllegalSymbol = OrderRejectReason.V(6)
    """非法交易代码"""

    OrderRejectReason_IllegalVolume = OrderRejectReason.V(7)
    """非法委托量"""

    OrderRejectReason_IllegalPrice = OrderRejectReason.V(8)
    """非法委托价"""

    OrderRejectReason_AccountDisabled = OrderRejectReason.V(10)
    """交易账号被禁止交易"""

    OrderRejectReason_AccountDisconnected = OrderRejectReason.V(11)
    """交易账号未连接"""

    OrderRejectReason_AccountLoggedout = OrderRejectReason.V(12)
    """交易账号未登录"""

    OrderRejectReason_NotInTradingSession = OrderRejectReason.V(13)
    """非交易时段"""

    OrderRejectReason_OrderTypeNotSupported = OrderRejectReason.V(14)
    """委托类型不支持"""

    OrderRejectReason_OrderStyleNotSupported = OrderRejectReason.V(17)
    """委托方式不支持"""

    OrderRejectReason_Throttle = OrderRejectReason.V(15)
    """流控限制"""

    OrderRejectReason_SymbolSusppended = OrderRejectReason.V(16)
    """交易代码停牌"""

    OrderRejectReason_Internal = OrderRejectReason.V(999)
    """内部错误"""

    CancelOrderRejectReason_OrderFinalized = OrderRejectReason.V(101)
    """委托已完成"""

    CancelOrderRejectReason_UnknownOrder = OrderRejectReason.V(102)
    """未知委托"""

    CancelOrderRejectReason_BrokerOption = OrderRejectReason.V(103)
    """柜台设置"""

    CancelOrderRejectReason_AlreadyInPendingCancel = OrderRejectReason.V(104)
    """委托撤销中"""


OrderRejectReason_Unknown = OrderRejectReason.V(0)
"""未知原因"""

OrderRejectReason_RiskRuleCheckFailed = OrderRejectReason.V(1)
"""不符合风控规则"""

OrderRejectReason_NoEnoughCash = OrderRejectReason.V(2)
"""资金不足"""

OrderRejectReason_NoEnoughPosition = OrderRejectReason.V(3)
"""仓位不足"""

OrderRejectReason_IllegalAccountId = OrderRejectReason.V(4)
"""非法账户ID"""

OrderRejectReason_IllegalStrategyId = OrderRejectReason.V(5)
"""非法策略ID"""

OrderRejectReason_IllegalSymbol = OrderRejectReason.V(6)
"""非法交易代码"""

OrderRejectReason_IllegalVolume = OrderRejectReason.V(7)
"""非法委托量"""

OrderRejectReason_IllegalPrice = OrderRejectReason.V(8)
"""非法委托价"""

OrderRejectReason_AccountDisabled = OrderRejectReason.V(10)
"""交易账号被禁止交易"""

OrderRejectReason_AccountDisconnected = OrderRejectReason.V(11)
"""交易账号未连接"""

OrderRejectReason_AccountLoggedout = OrderRejectReason.V(12)
"""交易账号未登录"""

OrderRejectReason_NotInTradingSession = OrderRejectReason.V(13)
"""非交易时段"""

OrderRejectReason_OrderTypeNotSupported = OrderRejectReason.V(14)
"""委托类型不支持"""

OrderRejectReason_OrderStyleNotSupported = OrderRejectReason.V(17)
"""委托方式不支持"""

OrderRejectReason_Throttle = OrderRejectReason.V(15)
"""流控限制"""

OrderRejectReason_SymbolSusppended = OrderRejectReason.V(16)
"""交易代码停牌"""

OrderRejectReason_Internal = OrderRejectReason.V(999)
"""内部错误"""

CancelOrderRejectReason_OrderFinalized = OrderRejectReason.V(101)
"""委托已完成"""

CancelOrderRejectReason_UnknownOrder = OrderRejectReason.V(102)
"""未知委托"""

CancelOrderRejectReason_BrokerOption = OrderRejectReason.V(103)
"""柜台设置"""

CancelOrderRejectReason_AlreadyInPendingCancel = OrderRejectReason.V(104)
"""委托撤销中"""


class OrderSide(_OrderSide, metaclass=_OrderSideEnumTypeWrapper):
    """委托方向
    仅当OrderBusiness==Normal时有效
    """
    pass
class _OrderSide:
    V = NewType('V', int)
class _OrderSideEnumTypeWrapper(_EnumTypeWrapper[_OrderSide.V], type):
    DESCRIPTOR: EnumDescriptor = ...
    OrderSide_Unknown = OrderSide.V(0)
    OrderSide_Buy = OrderSide.V(1)
    """买入"""

    OrderSide_Sell = OrderSide.V(2)
    """卖出"""


OrderSide_Unknown = OrderSide.V(0)
OrderSide_Buy = OrderSide.V(1)
"""买入"""

OrderSide_Sell = OrderSide.V(2)
"""卖出"""


class OrderType(_OrderType, metaclass=_OrderTypeEnumTypeWrapper):
    """委托类型"""
    pass
class _OrderType:
    V = NewType('V', int)
class _OrderTypeEnumTypeWrapper(_EnumTypeWrapper[_OrderType.V], type):
    DESCRIPTOR: EnumDescriptor = ...
    OrderType_Unknown = OrderType.V(0)
    OrderType_Limit = OrderType.V(1)
    """限价"""

    OrderType_Limit_FAK = OrderType.V(10)
    """限价FAK"""

    OrderType_Limit_FOK = OrderType.V(11)
    """限价FOK"""

    OrderType_Market = OrderType.V(2)
    """市价"""

    OrderType_Market_BOC = OrderType.V(20)
    """市价对方最优价格(best of counterparty)"""

    OrderType_Market_BOP = OrderType.V(21)
    """市价己方最优价格(best of party)"""

    OrderType_Market_FAK = OrderType.V(22)
    """市价即时成交剩余撤销(fill and kill)"""

    OrderType_Market_FOK = OrderType.V(23)
    """市价即时全额成交或撤销(fill or kill)"""

    OrderType_Market_B5TC = OrderType.V(24)
    """市价最优五档剩余撤销(best 5 then cancel)"""

    OrderType_Market_B5TL = OrderType.V(25)
    """市价最优五档剩余转限价(best 5 then limit)"""

    OrderType_Market_FAL = OrderType.V(26)
    """市价剩余转限价(fill and limit)"""

    OrderType_Market_BOPC = OrderType.V(27)
    """市价最优价成交剩余撤销(best of price fill and kill)"""

    OrderType_Market_BOPL = OrderType.V(28)
    """市价最优价成交剩余撤销(best of price then limit)"""

    OrderType_Stop = OrderType.V(3)
    """止损止盈委托"""

    OrderType_AHT = OrderType.V(4)
    """盘后定价交易(after hour trading)"""


OrderType_Unknown = OrderType.V(0)
OrderType_Limit = OrderType.V(1)
"""限价"""

OrderType_Limit_FAK = OrderType.V(10)
"""限价FAK"""

OrderType_Limit_FOK = OrderType.V(11)
"""限价FOK"""

OrderType_Market = OrderType.V(2)
"""市价"""

OrderType_Market_BOC = OrderType.V(20)
"""市价对方最优价格(best of counterparty)"""

OrderType_Market_BOP = OrderType.V(21)
"""市价己方最优价格(best of party)"""

OrderType_Market_FAK = OrderType.V(22)
"""市价即时成交剩余撤销(fill and kill)"""

OrderType_Market_FOK = OrderType.V(23)
"""市价即时全额成交或撤销(fill or kill)"""

OrderType_Market_B5TC = OrderType.V(24)
"""市价最优五档剩余撤销(best 5 then cancel)"""

OrderType_Market_B5TL = OrderType.V(25)
"""市价最优五档剩余转限价(best 5 then limit)"""

OrderType_Market_FAL = OrderType.V(26)
"""市价剩余转限价(fill and limit)"""

OrderType_Market_BOPC = OrderType.V(27)
"""市价最优价成交剩余撤销(best of price fill and kill)"""

OrderType_Market_BOPL = OrderType.V(28)
"""市价最优价成交剩余撤销(best of price then limit)"""

OrderType_Stop = OrderType.V(3)
"""止损止盈委托"""

OrderType_AHT = OrderType.V(4)
"""盘后定价交易(after hour trading)"""


class OrderDuration(_OrderDuration, metaclass=_OrderDurationEnumTypeWrapper):
    """委托时间属性"""
    pass
class _OrderDuration:
    V = NewType('V', int)
class _OrderDurationEnumTypeWrapper(_EnumTypeWrapper[_OrderDuration.V], type):
    DESCRIPTOR: EnumDescriptor = ...
    OrderDuration_Unknown = OrderDuration.V(0)
    OrderDuration_FAK = OrderDuration.V(1)
    """即时成交剩余撤销(fill and kill)"""

    OrderDuration_FOK = OrderDuration.V(2)
    """即时全额成交或撤销(fill or kill)"""

    OrderDuration_GFD = OrderDuration.V(3)
    """当日有效(good for day)"""

    OrderDuration_GFS = OrderDuration.V(4)
    """本节有效(good for section)"""

    OrderDuration_GTD = OrderDuration.V(5)
    """指定日期前有效(good till date)"""

    OrderDuration_GTC = OrderDuration.V(6)
    """撤销前有效(good till cancel)"""

    OrderDuration_GFA = OrderDuration.V(7)
    """集合竞价前有效(good for auction)"""

    OrderDuration_AHT = OrderDuration.V(8)
    """盘后定价交易(after hour trading)"""


OrderDuration_Unknown = OrderDuration.V(0)
OrderDuration_FAK = OrderDuration.V(1)
"""即时成交剩余撤销(fill and kill)"""

OrderDuration_FOK = OrderDuration.V(2)
"""即时全额成交或撤销(fill or kill)"""

OrderDuration_GFD = OrderDuration.V(3)
"""当日有效(good for day)"""

OrderDuration_GFS = OrderDuration.V(4)
"""本节有效(good for section)"""

OrderDuration_GTD = OrderDuration.V(5)
"""指定日期前有效(good till date)"""

OrderDuration_GTC = OrderDuration.V(6)
"""撤销前有效(good till cancel)"""

OrderDuration_GFA = OrderDuration.V(7)
"""集合竞价前有效(good for auction)"""

OrderDuration_AHT = OrderDuration.V(8)
"""盘后定价交易(after hour trading)"""


class OrderQualifier(_OrderQualifier, metaclass=_OrderQualifierEnumTypeWrapper):
    """委托成交属性"""
    pass
class _OrderQualifier:
    V = NewType('V', int)
class _OrderQualifierEnumTypeWrapper(_EnumTypeWrapper[_OrderQualifier.V], type):
    DESCRIPTOR: EnumDescriptor = ...
    OrderQualifier_Unknown = OrderQualifier.V(0)
    OrderQualifier_BOC = OrderQualifier.V(1)
    """对方最优价格(best of counterparty)"""

    OrderQualifier_BOP = OrderQualifier.V(2)
    """己方最优价格(best of party)"""

    OrderQualifier_B5TC = OrderQualifier.V(3)
    """最优五档剩余撤销(best 5 then cancel)"""

    OrderQualifier_B5TL = OrderQualifier.V(4)
    """最优五档剩余转限价(best 5 then limit)"""


OrderQualifier_Unknown = OrderQualifier.V(0)
OrderQualifier_BOC = OrderQualifier.V(1)
"""对方最优价格(best of counterparty)"""

OrderQualifier_BOP = OrderQualifier.V(2)
"""己方最优价格(best of party)"""

OrderQualifier_B5TC = OrderQualifier.V(3)
"""最优五档剩余撤销(best 5 then cancel)"""

OrderQualifier_B5TL = OrderQualifier.V(4)
"""最优五档剩余转限价(best 5 then limit)"""


class OrderStyle(_OrderStyle, metaclass=_OrderStyleEnumTypeWrapper):
    """委托方式属性"""
    pass
class _OrderStyle:
    V = NewType('V', int)
class _OrderStyleEnumTypeWrapper(_EnumTypeWrapper[_OrderStyle.V], type):
    DESCRIPTOR: EnumDescriptor = ...
    OrderStyle_Unknown = OrderStyle.V(0)
    OrderStyle_Volume = OrderStyle.V(1)
    OrderStyle_Value = OrderStyle.V(2)
    OrderStyle_Percent = OrderStyle.V(3)
    OrderStyle_TargetVolume = OrderStyle.V(4)
    OrderStyle_TargetValue = OrderStyle.V(5)
    OrderStyle_TargetPercent = OrderStyle.V(6)

OrderStyle_Unknown = OrderStyle.V(0)
OrderStyle_Volume = OrderStyle.V(1)
OrderStyle_Value = OrderStyle.V(2)
OrderStyle_Percent = OrderStyle.V(3)
OrderStyle_TargetVolume = OrderStyle.V(4)
OrderStyle_TargetValue = OrderStyle.V(5)
OrderStyle_TargetPercent = OrderStyle.V(6)

class OrderBusiness(_OrderBusiness, metaclass=_OrderBusinessEnumTypeWrapper):
    """委托业务属性"""
    pass
class _OrderBusiness:
    V = NewType('V', int)
class _OrderBusinessEnumTypeWrapper(_EnumTypeWrapper[_OrderBusiness.V], type):
    DESCRIPTOR: EnumDescriptor = ...
    OrderBusiness_NORMAL = OrderBusiness.V(0)
    """普通交易。默认值为空，以保持向前兼容"""

    OrderBusiness_STOCK_BUY = OrderBusiness.V(1)
    """///////////////////////////
    股票交易
    ///////////////////////////
    股票买入
    """

    OrderBusiness_STOCK_SELL = OrderBusiness.V(2)
    """股票卖出"""

    OrderBusiness_MARKET_MAKING = OrderBusiness.V(6)
    """作市交易"""

    OrderBusiness_FUTURE_BUY_OPEN = OrderBusiness.V(10)
    """///////////////////////////
    期货交易
    ///////////////////////////
    买入开仓
    """

    OrderBusiness_FUTURE_SELL_CLOSE = OrderBusiness.V(11)
    """卖出平仓"""

    OrderBusiness_FUTURE_SELL_CLOSE_TODAY = OrderBusiness.V(12)
    """卖出平仓，优先平今"""

    OrderBusiness_FUTURE_SELL_CLOSE_YESTERDAY = OrderBusiness.V(13)
    """卖出平仓，优先平昨"""

    OrderBusiness_FUTURE_SELL_OPEN = OrderBusiness.V(14)
    """卖出开仓"""

    OrderBusiness_FUTURE_BUY_CLOSE = OrderBusiness.V(15)
    """买入平仓"""

    OrderBusiness_FUTURE_BUY_CLOSE_TODAY = OrderBusiness.V(16)
    """买入平仓，优先平今"""

    OrderBusiness_FUTURE_BUY_CLOSE_YESTERDAY = OrderBusiness.V(17)
    """买入平仓，优先平昨"""

    OrderBusiness_IPO_BUY = OrderBusiness.V(100)
    """///////////////////////////
    新股交易(IPO)
    ///////////////////////////
    新股申购
    """

    OrderBusiness_CREDIT_BOM = OrderBusiness.V(200)
    """///////////////////////////
    信用交易
    ///////////////////////////
    融资买入(buying on margin)
    """

    OrderBusiness_CREDIT_SS = OrderBusiness.V(201)
    """融券卖出(short selling)"""

    OrderBusiness_CREDIT_RSBBS = OrderBusiness.V(202)
    """买券还券(repay share by buying share)"""

    OrderBusiness_CREDIT_RCBSS = OrderBusiness.V(203)
    """卖券还款(repay cash by selling share)"""

    OrderBusiness_CREDIT_DRS = OrderBusiness.V(204)
    """直接还券(directly repay share)"""

    OrderBusiness_CREDIT_DRC = OrderBusiness.V(211)
    """直接还款(directly repay cash)
    直接还款有专有接口，柜台也有专用功能号，不通过委托请求
    此枚举定义为兼容部分柜台(顶点），其在查询委托时会包含直接还款的记录
    """

    OrderBusiness_CREDIT_CPOM = OrderBusiness.V(205)
    """融资平仓(close position on margin)"""

    OrderBusiness_CREDIT_CPOSS = OrderBusiness.V(206)
    """融券平仓(close position on short selling)"""

    OrderBusiness_CREDIT_BOC = OrderBusiness.V(207)
    """担保品买入(buying on collateral)"""

    OrderBusiness_CREDIT_SOC = OrderBusiness.V(208)
    """担保品卖出(selling on collateral)"""

    OrderBusiness_CREDIT_CI = OrderBusiness.V(209)
    """担保品转入(collateral in)"""

    OrderBusiness_CREDIT_CO = OrderBusiness.V(210)
    """担保品转出(collateral out)"""

    OrderBusiness_CREDIT_BOM_VIP = OrderBusiness.V(212)
    """专项融资买入(buying on margin for vip)"""

    OrderBusiness_CREDIT_SS_VIP = OrderBusiness.V(213)
    """专项融券卖出(short selling for vip)"""

    OrderBusiness_CREDIT_RSBBS_VIP = OrderBusiness.V(214)
    """专项买券还券(repay share by buying share for vip)"""

    OrderBusiness_CREDIT_RCBSS_VIP = OrderBusiness.V(215)
    """专项卖券还款(repay cash by selling share for vip)"""

    OrderBusiness_CREDIT_DRS_VIP = OrderBusiness.V(216)
    """专项直接还券(directly repay share for vip)"""

    OrderBusiness_CREDIT_DRC_VIP = OrderBusiness.V(217)
    """专项直接还款(directly repay cash for vip)
    直接还款有专有接口，柜台也有专用功能号，不通过委托请求
    此枚举定义为兼容部分柜台(顶点），其在查询委托时会包含直接还款的记录
    """

    OrderBusiness_ETF_BUY = OrderBusiness.V(301)
    """///////////////////////////
    基金申赎
    ///////////////////////////
    ETF申购(purchase)
    """

    OrderBusiness_ETF_RED = OrderBusiness.V(302)
    """ETF赎回(redemption)"""

    OrderBusiness_FUND_SUB = OrderBusiness.V(303)
    """基金认购(subscribing)"""

    OrderBusiness_FUND_BUY = OrderBusiness.V(304)
    """基金申购(purchase)"""

    OrderBusiness_FUND_RED = OrderBusiness.V(305)
    """基金赎回(redemption)"""

    OrderBusiness_FUND_CONVERT = OrderBusiness.V(306)
    """基金转换(convert)"""

    OrderBusiness_FUND_SPLIT = OrderBusiness.V(307)
    """基金分拆(split)"""

    OrderBusiness_FUND_MERGE = OrderBusiness.V(308)
    """基金合并(merge)"""

    OrderBusiness_BOND_RRP = OrderBusiness.V(400)
    """///////////////////////////
    债券交易
    ///////////////////////////
    债券逆回购(reverse repurchase agreement (RRP) or reverse repo)
    """

    OrderBusiness_BOND_CONVERTIBLE_BUY = OrderBusiness.V(401)
    """可转债申购(purchase)"""

    OrderBusiness_BOND_CONVERTIBLE_CALL = OrderBusiness.V(402)
    """可转债转股"""

    OrderBusiness_BOND_CONVERTIBLE_PUT = OrderBusiness.V(403)
    """可转债回售"""

    OrderBusiness_BOND_CONVERTIBLE_PUT_CANCEL = OrderBusiness.V(404)
    """可转债回售撤销"""

    OrderBusiness_OPTION_BUY_OPEN = OrderBusiness.V(500)
    """///////////////////////////
    期权交易
    ///////////////////////////
    期权买入开仓
    """

    OrderBusiness_OPTION_SELL_CLOSE = OrderBusiness.V(501)
    """期权卖出平仓"""

    OrderBusiness_OPTION_SELL_OPEN = OrderBusiness.V(502)
    """期权卖出开仓"""

    OrderBusiness_OPTION_BUY_CLOSE = OrderBusiness.V(503)
    """期权买入平仓"""

    OrderBusiness_OPTION_COVERED_SELL_OPEN = OrderBusiness.V(504)
    """期权备兑开仓(备兑卖出开仓，只适用认购合约)"""

    OrderBusiness_OPTION_COVERED_BUY_CLOSE = OrderBusiness.V(505)
    """期权备兑平仓(备兑买入平仓，只适用认购合约)"""

    OrderBusiness_OPTION_EXERCISE = OrderBusiness.V(506)
    """期权行权"""


OrderBusiness_NORMAL = OrderBusiness.V(0)
"""普通交易。默认值为空，以保持向前兼容"""

OrderBusiness_STOCK_BUY = OrderBusiness.V(1)
"""///////////////////////////
股票交易
///////////////////////////
股票买入
"""

OrderBusiness_STOCK_SELL = OrderBusiness.V(2)
"""股票卖出"""

OrderBusiness_MARKET_MAKING = OrderBusiness.V(6)
"""作市交易"""

OrderBusiness_FUTURE_BUY_OPEN = OrderBusiness.V(10)
"""///////////////////////////
期货交易
///////////////////////////
买入开仓
"""

OrderBusiness_FUTURE_SELL_CLOSE = OrderBusiness.V(11)
"""卖出平仓"""

OrderBusiness_FUTURE_SELL_CLOSE_TODAY = OrderBusiness.V(12)
"""卖出平仓，优先平今"""

OrderBusiness_FUTURE_SELL_CLOSE_YESTERDAY = OrderBusiness.V(13)
"""卖出平仓，优先平昨"""

OrderBusiness_FUTURE_SELL_OPEN = OrderBusiness.V(14)
"""卖出开仓"""

OrderBusiness_FUTURE_BUY_CLOSE = OrderBusiness.V(15)
"""买入平仓"""

OrderBusiness_FUTURE_BUY_CLOSE_TODAY = OrderBusiness.V(16)
"""买入平仓，优先平今"""

OrderBusiness_FUTURE_BUY_CLOSE_YESTERDAY = OrderBusiness.V(17)
"""买入平仓，优先平昨"""

OrderBusiness_IPO_BUY = OrderBusiness.V(100)
"""///////////////////////////
新股交易(IPO)
///////////////////////////
新股申购
"""

OrderBusiness_CREDIT_BOM = OrderBusiness.V(200)
"""///////////////////////////
信用交易
///////////////////////////
融资买入(buying on margin)
"""

OrderBusiness_CREDIT_SS = OrderBusiness.V(201)
"""融券卖出(short selling)"""

OrderBusiness_CREDIT_RSBBS = OrderBusiness.V(202)
"""买券还券(repay share by buying share)"""

OrderBusiness_CREDIT_RCBSS = OrderBusiness.V(203)
"""卖券还款(repay cash by selling share)"""

OrderBusiness_CREDIT_DRS = OrderBusiness.V(204)
"""直接还券(directly repay share)"""

OrderBusiness_CREDIT_DRC = OrderBusiness.V(211)
"""直接还款(directly repay cash)
直接还款有专有接口，柜台也有专用功能号，不通过委托请求
此枚举定义为兼容部分柜台(顶点），其在查询委托时会包含直接还款的记录
"""

OrderBusiness_CREDIT_CPOM = OrderBusiness.V(205)
"""融资平仓(close position on margin)"""

OrderBusiness_CREDIT_CPOSS = OrderBusiness.V(206)
"""融券平仓(close position on short selling)"""

OrderBusiness_CREDIT_BOC = OrderBusiness.V(207)
"""担保品买入(buying on collateral)"""

OrderBusiness_CREDIT_SOC = OrderBusiness.V(208)
"""担保品卖出(selling on collateral)"""

OrderBusiness_CREDIT_CI = OrderBusiness.V(209)
"""担保品转入(collateral in)"""

OrderBusiness_CREDIT_CO = OrderBusiness.V(210)
"""担保品转出(collateral out)"""

OrderBusiness_CREDIT_BOM_VIP = OrderBusiness.V(212)
"""专项融资买入(buying on margin for vip)"""

OrderBusiness_CREDIT_SS_VIP = OrderBusiness.V(213)
"""专项融券卖出(short selling for vip)"""

OrderBusiness_CREDIT_RSBBS_VIP = OrderBusiness.V(214)
"""专项买券还券(repay share by buying share for vip)"""

OrderBusiness_CREDIT_RCBSS_VIP = OrderBusiness.V(215)
"""专项卖券还款(repay cash by selling share for vip)"""

OrderBusiness_CREDIT_DRS_VIP = OrderBusiness.V(216)
"""专项直接还券(directly repay share for vip)"""

OrderBusiness_CREDIT_DRC_VIP = OrderBusiness.V(217)
"""专项直接还款(directly repay cash for vip)
直接还款有专有接口，柜台也有专用功能号，不通过委托请求
此枚举定义为兼容部分柜台(顶点），其在查询委托时会包含直接还款的记录
"""

OrderBusiness_ETF_BUY = OrderBusiness.V(301)
"""///////////////////////////
基金申赎
///////////////////////////
ETF申购(purchase)
"""

OrderBusiness_ETF_RED = OrderBusiness.V(302)
"""ETF赎回(redemption)"""

OrderBusiness_FUND_SUB = OrderBusiness.V(303)
"""基金认购(subscribing)"""

OrderBusiness_FUND_BUY = OrderBusiness.V(304)
"""基金申购(purchase)"""

OrderBusiness_FUND_RED = OrderBusiness.V(305)
"""基金赎回(redemption)"""

OrderBusiness_FUND_CONVERT = OrderBusiness.V(306)
"""基金转换(convert)"""

OrderBusiness_FUND_SPLIT = OrderBusiness.V(307)
"""基金分拆(split)"""

OrderBusiness_FUND_MERGE = OrderBusiness.V(308)
"""基金合并(merge)"""

OrderBusiness_BOND_RRP = OrderBusiness.V(400)
"""///////////////////////////
债券交易
///////////////////////////
债券逆回购(reverse repurchase agreement (RRP) or reverse repo)
"""

OrderBusiness_BOND_CONVERTIBLE_BUY = OrderBusiness.V(401)
"""可转债申购(purchase)"""

OrderBusiness_BOND_CONVERTIBLE_CALL = OrderBusiness.V(402)
"""可转债转股"""

OrderBusiness_BOND_CONVERTIBLE_PUT = OrderBusiness.V(403)
"""可转债回售"""

OrderBusiness_BOND_CONVERTIBLE_PUT_CANCEL = OrderBusiness.V(404)
"""可转债回售撤销"""

OrderBusiness_OPTION_BUY_OPEN = OrderBusiness.V(500)
"""///////////////////////////
期权交易
///////////////////////////
期权买入开仓
"""

OrderBusiness_OPTION_SELL_CLOSE = OrderBusiness.V(501)
"""期权卖出平仓"""

OrderBusiness_OPTION_SELL_OPEN = OrderBusiness.V(502)
"""期权卖出开仓"""

OrderBusiness_OPTION_BUY_CLOSE = OrderBusiness.V(503)
"""期权买入平仓"""

OrderBusiness_OPTION_COVERED_SELL_OPEN = OrderBusiness.V(504)
"""期权备兑开仓(备兑卖出开仓，只适用认购合约)"""

OrderBusiness_OPTION_COVERED_BUY_CLOSE = OrderBusiness.V(505)
"""期权备兑平仓(备兑买入平仓，只适用认购合约)"""

OrderBusiness_OPTION_EXERCISE = OrderBusiness.V(506)
"""期权行权"""


class PositionSide(_PositionSide, metaclass=_PositionSideEnumTypeWrapper):
    """持仓方向"""
    pass
class _PositionSide:
    V = NewType('V', int)
class _PositionSideEnumTypeWrapper(_EnumTypeWrapper[_PositionSide.V], type):
    DESCRIPTOR: EnumDescriptor = ...
    PositionSide_Unknown = PositionSide.V(0)
    PositionSide_Long = PositionSide.V(1)
    """多方向"""

    PositionSide_Short = PositionSide.V(2)
    """空方向"""


PositionSide_Unknown = PositionSide.V(0)
PositionSide_Long = PositionSide.V(1)
"""多方向"""

PositionSide_Short = PositionSide.V(2)
"""空方向"""


class PositionEffect(_PositionEffect, metaclass=_PositionEffectEnumTypeWrapper):
    """开平标志
    仅当OrderBusiness==Normal时有效
    """
    pass
class _PositionEffect:
    V = NewType('V', int)
class _PositionEffectEnumTypeWrapper(_EnumTypeWrapper[_PositionEffect.V], type):
    DESCRIPTOR: EnumDescriptor = ...
    PositionEffect_Unknown = PositionEffect.V(0)
    PositionEffect_Open = PositionEffect.V(1)
    """开仓"""

    PositionEffect_Close = PositionEffect.V(2)
    """平仓,具体语义取决于对应的交易所"""

    PositionEffect_CloseToday = PositionEffect.V(3)
    """平今仓"""

    PositionEffect_CloseYesterday = PositionEffect.V(4)
    """平昨仓"""


PositionEffect_Unknown = PositionEffect.V(0)
PositionEffect_Open = PositionEffect.V(1)
"""开仓"""

PositionEffect_Close = PositionEffect.V(2)
"""平仓,具体语义取决于对应的交易所"""

PositionEffect_CloseToday = PositionEffect.V(3)
"""平今仓"""

PositionEffect_CloseYesterday = PositionEffect.V(4)
"""平昨仓"""


class CashPositionChangeReason(_CashPositionChangeReason, metaclass=_CashPositionChangeReasonEnumTypeWrapper):
    """资金持仓变更原因"""
    pass
class _CashPositionChangeReason:
    V = NewType('V', int)
class _CashPositionChangeReasonEnumTypeWrapper(_EnumTypeWrapper[_CashPositionChangeReason.V], type):
    DESCRIPTOR: EnumDescriptor = ...
    CashPositionChangeReason_Unknown = CashPositionChangeReason.V(0)
    CashPositionChangeReason_Trade = CashPositionChangeReason.V(1)
    """交易"""

    CashPositionChangeReason_Inout = CashPositionChangeReason.V(2)
    """出入金/出入持仓"""

    CashPositionChangeReason_Dividend = CashPositionChangeReason.V(3)
    """分红送股"""

    CashPositionChangeReason_Delivery = CashPositionChangeReason.V(4)
    """交割合约"""


CashPositionChangeReason_Unknown = CashPositionChangeReason.V(0)
CashPositionChangeReason_Trade = CashPositionChangeReason.V(1)
"""交易"""

CashPositionChangeReason_Inout = CashPositionChangeReason.V(2)
"""出入金/出入持仓"""

CashPositionChangeReason_Dividend = CashPositionChangeReason.V(3)
"""分红送股"""

CashPositionChangeReason_Delivery = CashPositionChangeReason.V(4)
"""交割合约"""


class AlgoOrderStatus(_AlgoOrderStatus, metaclass=_AlgoOrderStatusEnumTypeWrapper):
    """算法单状态,暂停/恢复算法单时有效"""
    pass
class _AlgoOrderStatus:
    V = NewType('V', int)
class _AlgoOrderStatusEnumTypeWrapper(_EnumTypeWrapper[_AlgoOrderStatus.V], type):
    DESCRIPTOR: EnumDescriptor = ...
    AlgoOrderStatus_Unknown = AlgoOrderStatus.V(0)
    AlgoOrderStatus_Resume = AlgoOrderStatus.V(1)
    """恢复母单"""

    AlgoOrderStatus_Pause = AlgoOrderStatus.V(2)
    """暂停母单"""

    AlgoOrderStatus_PauseAndCancelSubOrders = AlgoOrderStatus.V(3)
    """暂停母单并撤子单"""


AlgoOrderStatus_Unknown = AlgoOrderStatus.V(0)
AlgoOrderStatus_Resume = AlgoOrderStatus.V(1)
"""恢复母单"""

AlgoOrderStatus_Pause = AlgoOrderStatus.V(2)
"""暂停母单"""

AlgoOrderStatus_PauseAndCancelSubOrders = AlgoOrderStatus.V(3)
"""暂停母单并撤子单"""


class PositionSrc(_PositionSrc, metaclass=_PositionSrcEnumTypeWrapper):
    """头寸来源(仅适用融资融券)"""
    pass
class _PositionSrc:
    V = NewType('V', int)
class _PositionSrcEnumTypeWrapper(_EnumTypeWrapper[_PositionSrc.V], type):
    DESCRIPTOR: EnumDescriptor = ...
    PositionSrc_Unknown = PositionSrc.V(0)
    PositionSrc_L1 = PositionSrc.V(1)
    """普通券"""

    PositionSrc_L2 = PositionSrc.V(2)
    """专项券"""


PositionSrc_Unknown = PositionSrc.V(0)
PositionSrc_L1 = PositionSrc.V(1)
"""普通券"""

PositionSrc_L2 = PositionSrc.V(2)
"""专项券"""


class AlgoOrder(Message):
    """算法母单"""
    DESCRIPTOR: Descriptor = ...
    class AlgoParamsEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    STRATEGY_ID_FIELD_NUMBER: int
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    CL_ORD_ID_FIELD_NUMBER: int
    ORDER_ID_FIELD_NUMBER: int
    EX_ORD_ID_FIELD_NUMBER: int
    SYMBOL_FIELD_NUMBER: int
    SIDE_FIELD_NUMBER: int
    POSITION_EFFECT_FIELD_NUMBER: int
    POSITION_SIDE_FIELD_NUMBER: int
    ORDER_TYPE_FIELD_NUMBER: int
    ORDER_BUSINESS_FIELD_NUMBER: int
    ORDER_DURATION_FIELD_NUMBER: int
    ORDER_QUALIFIER_FIELD_NUMBER: int
    ORDER_SRC_FIELD_NUMBER: int
    POSITION_SRC_FIELD_NUMBER: int
    STATUS_FIELD_NUMBER: int
    ORD_REJ_REASON_FIELD_NUMBER: int
    ORD_REJ_REASON_DETAIL_FIELD_NUMBER: int
    PRICE_FIELD_NUMBER: int
    STOP_PRICE_FIELD_NUMBER: int
    ORDER_STYLE_FIELD_NUMBER: int
    VOLUME_FIELD_NUMBER: int
    VALUE_FIELD_NUMBER: int
    PERCENT_FIELD_NUMBER: int
    TARGET_VOLUME_FIELD_NUMBER: int
    TARGET_VALUE_FIELD_NUMBER: int
    TARGET_PERCENT_FIELD_NUMBER: int
    FILLED_VOLUME_FIELD_NUMBER: int
    FILLED_VWAP_FIELD_NUMBER: int
    FILLED_AMOUNT_FIELD_NUMBER: int
    FILLED_COMMISSION_FIELD_NUMBER: int
    ALGO_NAME_FIELD_NUMBER: int
    ALGO_PROVIDER_FIELD_NUMBER: int
    ALGO_PARAMS_FIELD_NUMBER: int
    ALGO_PARAM_FIELD_NUMBER: int
    ALGO_STATUS_FIELD_NUMBER: int
    ALGO_COMMENT_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    UPDATED_AT_FIELD_NUMBER: int
    strategy_id: Text = ...
    """策略ID"""

    account_id: Text = ...
    """账号ID"""

    account_name: Text = ...
    """账户登录名"""

    channel_id: Text = ...
    cl_ord_id: Text = ...
    """委托客户端ID"""

    order_id: Text = ...
    """委托柜台ID"""

    ex_ord_id: Text = ...
    """委托交易所ID"""

    symbol: Text = ...
    """symbol"""

    side: int = ...
    """买卖方向，取值参考enum OrderSide"""

    position_effect: int = ...
    """开平标志，取值参考enum PositionEffect"""

    position_side: int = ...
    """持仓方向，取值参考enum PositionSide"""

    order_type: int = ...
    """委托类型，取值参考enum OrderType"""

    order_business: int = ...
    """委托业务分类，取值参考enum OrderBusiness"""

    order_duration: int = ...
    """委托时间属性，取值参考enum OrderDuration"""

    order_qualifier: int = ...
    """委托成交属性，取值参考enum OrderQualifier"""

    order_src: int = ...
    """委托来源，取值参考enum OrderSrc"""

    position_src: int = ...
    """头寸来源(仅适用融资融券)，取值参考enum PositionSrc"""

    status: int = ...
    """委托状态，取值参考enum OrderStatus"""

    ord_rej_reason: int = ...
    """委托拒绝原因，取值参考enum OrderRejectReason"""

    ord_rej_reason_detail: Text = ...
    """委托拒绝原因描述"""

    price: float = ...
    """委托价格"""

    stop_price: float = ...
    """委托止损/止盈触发价格"""

    order_style: int = ...
    """委托风格，取值参考 enum OrderStyle"""

    volume: int = ...
    """委托量"""

    value: float = ...
    """委托额"""

    percent: float = ...
    """委托百分比"""

    target_volume: int = ...
    """委托目标量"""

    target_value: float = ...
    """委托目标额"""

    target_percent: float = ...
    """委托目标百分比"""

    filled_volume: int = ...
    """已成量"""

    filled_vwap: float = ...
    """已成均价"""

    filled_amount: float = ...
    """已成金额"""

    filled_commission: float = ...
    """已成手续费"""

    algo_name: Text = ...
    """算法策略名"""

    algo_provider: Text = ...
    """算法供应商名称"""

    @property
    def algo_params(self) -> ScalarMap[Text, Text]:
        """算法参数"""
        pass
    algo_param: Text = ...
    """deprecated: replaced by algo_params
    算法策略参数
    """

    algo_status: int = ...
    """算法策略状态,仅作为AlgoOrder Pause请求入参，取值参考 enum AlgoOrderStatus"""

    algo_comment: Text = ...
    """算法单备注"""

    @property
    def properties(self) -> ScalarMap[Text, Text]:
        """扩展字段"""
        pass
    @property
    def created_at(self) -> Timestamp:
        """委托创建时间"""
        pass
    @property
    def updated_at(self) -> Timestamp:
        """委托更新时间"""
        pass
    def __init__(self,
        *,
        strategy_id : Text = ...,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        cl_ord_id : Text = ...,
        order_id : Text = ...,
        ex_ord_id : Text = ...,
        symbol : Text = ...,
        side : int = ...,
        position_effect : int = ...,
        position_side : int = ...,
        order_type : int = ...,
        order_business : int = ...,
        order_duration : int = ...,
        order_qualifier : int = ...,
        order_src : int = ...,
        position_src : int = ...,
        status : int = ...,
        ord_rej_reason : int = ...,
        ord_rej_reason_detail : Text = ...,
        price : float = ...,
        stop_price : float = ...,
        order_style : int = ...,
        volume : int = ...,
        value : float = ...,
        percent : float = ...,
        target_volume : int = ...,
        target_value : float = ...,
        target_percent : float = ...,
        filled_volume : int = ...,
        filled_vwap : float = ...,
        filled_amount : float = ...,
        filled_commission : float = ...,
        algo_name : Text = ...,
        algo_provider : Text = ...,
        algo_params : Optional[Mapping[Text, Text]] = ...,
        algo_param : Text = ...,
        algo_status : int = ...,
        algo_comment : Text = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        created_at : Optional[Timestamp] = ...,
        updated_at : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at",u"updated_at",b"updated_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"algo_comment",b"algo_comment",u"algo_name",b"algo_name",u"algo_param",b"algo_param",u"algo_params",b"algo_params",u"algo_provider",b"algo_provider",u"algo_status",b"algo_status",u"channel_id",b"channel_id",u"cl_ord_id",b"cl_ord_id",u"created_at",b"created_at",u"ex_ord_id",b"ex_ord_id",u"filled_amount",b"filled_amount",u"filled_commission",b"filled_commission",u"filled_volume",b"filled_volume",u"filled_vwap",b"filled_vwap",u"ord_rej_reason",b"ord_rej_reason",u"ord_rej_reason_detail",b"ord_rej_reason_detail",u"order_business",b"order_business",u"order_duration",b"order_duration",u"order_id",b"order_id",u"order_qualifier",b"order_qualifier",u"order_src",b"order_src",u"order_style",b"order_style",u"order_type",b"order_type",u"percent",b"percent",u"position_effect",b"position_effect",u"position_side",b"position_side",u"position_src",b"position_src",u"price",b"price",u"properties",b"properties",u"side",b"side",u"status",b"status",u"stop_price",b"stop_price",u"strategy_id",b"strategy_id",u"symbol",b"symbol",u"target_percent",b"target_percent",u"target_value",b"target_value",u"target_volume",b"target_volume",u"updated_at",b"updated_at",u"value",b"value",u"volume",b"volume"]) -> None: ...

class AlgoOrders(Message):
    """算法母单集合"""
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    DATA_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[AlgoOrder]: ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[AlgoOrder]] = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data",u"properties",b"properties"]) -> None: ...

class Order(Message):
    """委托定义"""
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    STRATEGY_ID_FIELD_NUMBER: int
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    CL_ORD_ID_FIELD_NUMBER: int
    ORDER_ID_FIELD_NUMBER: int
    EX_ORD_ID_FIELD_NUMBER: int
    ALGO_ORDER_ID_FIELD_NUMBER: int
    SYMBOL_FIELD_NUMBER: int
    SIDE_FIELD_NUMBER: int
    POSITION_EFFECT_FIELD_NUMBER: int
    POSITION_SIDE_FIELD_NUMBER: int
    ORDER_TYPE_FIELD_NUMBER: int
    ORDER_BUSINESS_FIELD_NUMBER: int
    ORDER_DURATION_FIELD_NUMBER: int
    ORDER_QUALIFIER_FIELD_NUMBER: int
    ORDER_SRC_FIELD_NUMBER: int
    POSITION_SRC_FIELD_NUMBER: int
    STATUS_FIELD_NUMBER: int
    ORD_REJ_REASON_FIELD_NUMBER: int
    ORD_REJ_REASON_DETAIL_FIELD_NUMBER: int
    PRICE_FIELD_NUMBER: int
    STOP_PRICE_FIELD_NUMBER: int
    ORDER_STYLE_FIELD_NUMBER: int
    VOLUME_FIELD_NUMBER: int
    VALUE_FIELD_NUMBER: int
    PERCENT_FIELD_NUMBER: int
    TARGET_VOLUME_FIELD_NUMBER: int
    TARGET_VALUE_FIELD_NUMBER: int
    TARGET_PERCENT_FIELD_NUMBER: int
    FILLED_VOLUME_FIELD_NUMBER: int
    FILLED_VWAP_FIELD_NUMBER: int
    FILLED_AMOUNT_FIELD_NUMBER: int
    FILLED_COMMISSION_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    DEBTSNO_FIELD_NUMBER: int
    REPAY_TYPE_FIELD_NUMBER: int
    BUY_PRICE_FIELD_NUMBER: int
    BUY_VOLUME_FIELD_NUMBER: int
    BUY_FILLED_VOLUME_FIELD_NUMBER: int
    BUY_CANCELLED_VOLUME_FIELD_NUMBER: int
    SELL_PRICE_FIELD_NUMBER: int
    SELL_VOLUME_FIELD_NUMBER: int
    SELL_FILLED_VOLUME_FIELD_NUMBER: int
    SELL_CANCELLED_VOLUME_FIELD_NUMBER: int
    FLOAT_BR_FIELD_NUMBER: int
    ORDER_AUTO_FILL_FIELD_NUMBER: int
    TRIGGER_TYPE_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    UPDATED_AT_FIELD_NUMBER: int
    strategy_id: Text = ...
    """策略ID"""

    account_id: Text = ...
    """账号ID"""

    account_name: Text = ...
    """账户登录名"""

    channel_id: Text = ...
    cl_ord_id: Text = ...
    """委托客户端ID"""

    order_id: Text = ...
    """委托柜台ID"""

    ex_ord_id: Text = ...
    """委托交易所ID"""

    algo_order_id: Text = ...
    """算法母单ID"""

    symbol: Text = ...
    """symbol"""

    side: int = ...
    """买卖方向，取值参考enum OrderSide"""

    position_effect: int = ...
    """开平标志，取值参考enum PositionEffect"""

    position_side: int = ...
    """持仓方向，取值参考enum PositionSide"""

    order_type: int = ...
    """委托类型，取值参考enum OrderType"""

    order_business: int = ...
    """委托业务分类，取值参考enum OrderBusiness"""

    order_duration: int = ...
    """委托时间属性，取值参考enum OrderDuration"""

    order_qualifier: int = ...
    """委托成交属性，取值参考enum OrderQualifier"""

    order_src: int = ...
    """委托来源，取值参考enum OrderSrc"""

    position_src: int = ...
    """头寸来源(仅适用融资融券)，取值参考enum PositionSrc"""

    status: int = ...
    """委托状态，取值参考enum OrderStatus"""

    ord_rej_reason: int = ...
    """委托拒绝原因，取值参考enum OrderRejectReason"""

    ord_rej_reason_detail: Text = ...
    """委托拒绝原因描述"""

    price: float = ...
    """委托价格"""

    stop_price: float = ...
    """委托止损/止盈触发价格"""

    order_style: int = ...
    """委托风格，取值参考 enum OrderStyle"""

    volume: int = ...
    """委托量"""

    value: float = ...
    """委托额"""

    percent: float = ...
    """委托百分比"""

    target_volume: int = ...
    """委托目标量"""

    target_value: float = ...
    """委托目标额"""

    target_percent: float = ...
    """委托目标百分比"""

    filled_volume: int = ...
    """已成量"""

    filled_vwap: float = ...
    """已成均价"""

    filled_amount: float = ...
    """已成金额"""

    filled_commission: float = ...
    """已成手续费"""

    @property
    def properties(self) -> ScalarMap[Text, Text]:
        """扩展字段"""
        pass
    debtsno: Text = ...
    """两融业务, 还款/还卷时对应的合约编号"""

    repay_type: int = ...
    """两融业务, 还款时是否只还利息 0-否，1-是"""

    buy_price: float = ...
    """报买价（做市报价）"""

    buy_volume: int = ...
    """报买量（做市报价）"""

    buy_filled_volume: int = ...
    """买成量（做市报价）"""

    buy_cancelled_volume: int = ...
    """买已撤量（做市报价）"""

    sell_price: float = ...
    """报卖价（做市报价）"""

    sell_volume: int = ...
    """报卖量（做市报价）"""

    sell_filled_volume: int = ...
    """卖成量（做市报价）"""

    sell_cancelled_volume: int = ...
    """卖已撤量（做市报价）"""

    float_br: float = ...
    """自动报价偏移量(做市报价)"""

    order_auto_fill: int = ...
    """自动报价开关(做市报价)"""

    trigger_type: int = ...
    """条件委托触发方式，适用于CTP条件单"""

    @property
    def created_at(self) -> Timestamp:
        """委托创建时间"""
        pass
    @property
    def updated_at(self) -> Timestamp:
        """委托更新时间"""
        pass
    def __init__(self,
        *,
        strategy_id : Text = ...,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        cl_ord_id : Text = ...,
        order_id : Text = ...,
        ex_ord_id : Text = ...,
        algo_order_id : Text = ...,
        symbol : Text = ...,
        side : int = ...,
        position_effect : int = ...,
        position_side : int = ...,
        order_type : int = ...,
        order_business : int = ...,
        order_duration : int = ...,
        order_qualifier : int = ...,
        order_src : int = ...,
        position_src : int = ...,
        status : int = ...,
        ord_rej_reason : int = ...,
        ord_rej_reason_detail : Text = ...,
        price : float = ...,
        stop_price : float = ...,
        order_style : int = ...,
        volume : int = ...,
        value : float = ...,
        percent : float = ...,
        target_volume : int = ...,
        target_value : float = ...,
        target_percent : float = ...,
        filled_volume : int = ...,
        filled_vwap : float = ...,
        filled_amount : float = ...,
        filled_commission : float = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        debtsno : Text = ...,
        repay_type : int = ...,
        buy_price : float = ...,
        buy_volume : int = ...,
        buy_filled_volume : int = ...,
        buy_cancelled_volume : int = ...,
        sell_price : float = ...,
        sell_volume : int = ...,
        sell_filled_volume : int = ...,
        sell_cancelled_volume : int = ...,
        float_br : float = ...,
        order_auto_fill : int = ...,
        trigger_type : int = ...,
        created_at : Optional[Timestamp] = ...,
        updated_at : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at",u"updated_at",b"updated_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"algo_order_id",b"algo_order_id",u"buy_cancelled_volume",b"buy_cancelled_volume",u"buy_filled_volume",b"buy_filled_volume",u"buy_price",b"buy_price",u"buy_volume",b"buy_volume",u"channel_id",b"channel_id",u"cl_ord_id",b"cl_ord_id",u"created_at",b"created_at",u"debtsno",b"debtsno",u"ex_ord_id",b"ex_ord_id",u"filled_amount",b"filled_amount",u"filled_commission",b"filled_commission",u"filled_volume",b"filled_volume",u"filled_vwap",b"filled_vwap",u"float_br",b"float_br",u"ord_rej_reason",b"ord_rej_reason",u"ord_rej_reason_detail",b"ord_rej_reason_detail",u"order_auto_fill",b"order_auto_fill",u"order_business",b"order_business",u"order_duration",b"order_duration",u"order_id",b"order_id",u"order_qualifier",b"order_qualifier",u"order_src",b"order_src",u"order_style",b"order_style",u"order_type",b"order_type",u"percent",b"percent",u"position_effect",b"position_effect",u"position_side",b"position_side",u"position_src",b"position_src",u"price",b"price",u"properties",b"properties",u"repay_type",b"repay_type",u"sell_cancelled_volume",b"sell_cancelled_volume",u"sell_filled_volume",b"sell_filled_volume",u"sell_price",b"sell_price",u"sell_volume",b"sell_volume",u"side",b"side",u"status",b"status",u"stop_price",b"stop_price",u"strategy_id",b"strategy_id",u"symbol",b"symbol",u"target_percent",b"target_percent",u"target_value",b"target_value",u"target_volume",b"target_volume",u"trigger_type",b"trigger_type",u"updated_at",b"updated_at",u"value",b"value",u"volume",b"volume"]) -> None: ...

class Orders(Message):
    """委托集合"""
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    DATA_FIELD_NUMBER: int
    IS_COMBINED_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[Order]: ...
    is_combined: int = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[Order]] = ...,
        is_combined : int = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data",u"is_combined",b"is_combined",u"properties",b"properties"]) -> None: ...

class ExecRpt(Message):
    """委托执行回报定义"""
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    STRATEGY_ID_FIELD_NUMBER: int
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    CL_ORD_ID_FIELD_NUMBER: int
    ORDER_ID_FIELD_NUMBER: int
    EXEC_ID_FIELD_NUMBER: int
    SYMBOL_FIELD_NUMBER: int
    ORDER_BUSINESS_FIELD_NUMBER: int
    POSITION_EFFECT_FIELD_NUMBER: int
    SIDE_FIELD_NUMBER: int
    ORD_REJ_REASON_FIELD_NUMBER: int
    ORD_REJ_REASON_DETAIL_FIELD_NUMBER: int
    EXEC_TYPE_FIELD_NUMBER: int
    PRICE_FIELD_NUMBER: int
    VOLUME_FIELD_NUMBER: int
    AMOUNT_FIELD_NUMBER: int
    COMMISSION_FIELD_NUMBER: int
    COST_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    SNO_FIELD_NUMBER: int
    strategy_id: Text = ...
    """策略ID"""

    account_id: Text = ...
    """账号ID"""

    account_name: Text = ...
    """账户登录名"""

    channel_id: Text = ...
    cl_ord_id: Text = ...
    """委托客户端ID"""

    order_id: Text = ...
    """委托柜台ID"""

    exec_id: Text = ...
    """委托回报ID"""

    symbol: Text = ...
    """symbol"""

    order_business: int = ...
    """委托业务分类，取值参考enum OrderBusiness"""

    position_effect: int = ...
    """开平标志，取值参考enum PositionEffect"""

    side: int = ...
    """买卖方向，取值参考enum OrderSide"""

    ord_rej_reason: int = ...
    """委托拒绝原因，取值参考enum OrderRejectReason"""

    ord_rej_reason_detail: Text = ...
    """委托拒绝原因描述"""

    exec_type: int = ...
    """执行回报类型, 取值参考enum ExecType"""

    price: float = ...
    """委托成交价格"""

    volume: int = ...
    """委托成交量"""

    amount: float = ...
    """委托成交金额"""

    commission: float = ...
    """委托成交手续费"""

    cost: float = ...
    """委托成交成本金额"""

    @property
    def properties(self) -> ScalarMap[Text, Text]:
        """扩展字段"""
        pass
    @property
    def created_at(self) -> Timestamp:
        """回报创建时间"""
        pass
    sno: int = ...
    """流水号"""

    def __init__(self,
        *,
        strategy_id : Text = ...,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        cl_ord_id : Text = ...,
        order_id : Text = ...,
        exec_id : Text = ...,
        symbol : Text = ...,
        order_business : int = ...,
        position_effect : int = ...,
        side : int = ...,
        ord_rej_reason : int = ...,
        ord_rej_reason_detail : Text = ...,
        exec_type : int = ...,
        price : float = ...,
        volume : int = ...,
        amount : float = ...,
        commission : float = ...,
        cost : float = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        created_at : Optional[Timestamp] = ...,
        sno : int = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"amount",b"amount",u"channel_id",b"channel_id",u"cl_ord_id",b"cl_ord_id",u"commission",b"commission",u"cost",b"cost",u"created_at",b"created_at",u"exec_id",b"exec_id",u"exec_type",b"exec_type",u"ord_rej_reason",b"ord_rej_reason",u"ord_rej_reason_detail",b"ord_rej_reason_detail",u"order_business",b"order_business",u"order_id",b"order_id",u"position_effect",b"position_effect",u"price",b"price",u"properties",b"properties",u"side",b"side",u"sno",b"sno",u"strategy_id",b"strategy_id",u"symbol",b"symbol",u"volume",b"volume"]) -> None: ...

class ExecRpts(Message):
    """成交回报集合"""
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[ExecRpt]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[ExecRpt]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class Cash(Message):
    """资金定义"""
    DESCRIPTOR: Descriptor = ...
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    CURRENCY_FIELD_NUMBER: int
    NAV_FIELD_NUMBER: int
    PNL_FIELD_NUMBER: int
    FPNL_FIELD_NUMBER: int
    FPNL_DILUTED_FIELD_NUMBER: int
    FROZEN_FIELD_NUMBER: int
    ORDER_FROZEN_FIELD_NUMBER: int
    AVAILABLE_FIELD_NUMBER: int
    BALANCE_FIELD_NUMBER: int
    MARKET_VALUE_FIELD_NUMBER: int
    CUM_INOUT_FIELD_NUMBER: int
    CUM_TRADE_FIELD_NUMBER: int
    CUM_PNL_FIELD_NUMBER: int
    CUM_COMMISSION_FIELD_NUMBER: int
    LAST_TRADE_FIELD_NUMBER: int
    LAST_PNL_FIELD_NUMBER: int
    LAST_COMMISSION_FIELD_NUMBER: int
    LAST_INOUT_FIELD_NUMBER: int
    CHANGE_REASON_FIELD_NUMBER: int
    CHANGE_EVENT_ID_FIELD_NUMBER: int
    MARKET_VALUE_LONG_FIELD_NUMBER: int
    MARKET_VALUE_SHORT_FIELD_NUMBER: int
    USED_BAIL_FIELD_NUMBER: int
    ENABLE_BAIL_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    UPDATED_AT_FIELD_NUMBER: int
    account_id: Text = ...
    """账号ID"""

    account_name: Text = ...
    """账户登录名"""

    channel_id: Text = ...
    currency: int = ...
    """币种"""

    nav: float = ...
    """净值(cum_inout + cum_pnl + fpnl - cum_commission)"""

    pnl: float = ...
    """净收益(nav-cum_inout)"""

    fpnl: float = ...
    """浮动盈亏(sum(each position fpnl))"""

    fpnl_diluted: float = ...
    """持仓浮动盈亏,基于摊薄持仓均价((price-vwap_diluted)*volume*multiplier)"""

    frozen: float = ...
    """持仓占用资金"""

    order_frozen: float = ...
    """挂单冻结资金"""

    available: float = ...
    """可用资金"""

    balance: float = ...
    """no  leverage:  available=(cum_inout + cum_pnl - cum_commission - frozen - order_frozen)
    has leverage:  fpnl     =(fpnl>0 ? fpnl : (frozen < |fpnl|) ? (frozen-|fpnl|) : 0)
                  available=(cum_inout + cum_pnl - cum_commission - frozen - order_frozen + fpnl)
    资金余额
    """

    market_value: float = ...
    """持仓市值"""

    cum_inout: float = ...
    """累计出入金"""

    cum_trade: float = ...
    """累计交易额"""

    cum_pnl: float = ...
    """累计平仓收益(没扣除手续费)"""

    cum_commission: float = ...
    """累计手续费"""

    last_trade: float = ...
    """上一次交易额"""

    last_pnl: float = ...
    """上一次收益"""

    last_commission: float = ...
    """上一次手续费"""

    last_inout: float = ...
    """上一次出入金"""

    change_reason: int = ...
    """资金变更原因，取值参考enum CashPositionChangeReason"""

    change_event_id: Text = ...
    """触发资金变更事件的ID"""

    market_value_long: float = ...
    """期权字段
    权利仓市值
    """

    market_value_short: float = ...
    """义务仓市值"""

    used_bail: float = ...
    """已用保证金"""

    enable_bail: float = ...
    """可用保证金"""

    @property
    def created_at(self) -> Timestamp:
        """资金初始时间"""
        pass
    @property
    def updated_at(self) -> Timestamp:
        """资金变更时间"""
        pass
    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        currency : int = ...,
        nav : float = ...,
        pnl : float = ...,
        fpnl : float = ...,
        fpnl_diluted : float = ...,
        frozen : float = ...,
        order_frozen : float = ...,
        available : float = ...,
        balance : float = ...,
        market_value : float = ...,
        cum_inout : float = ...,
        cum_trade : float = ...,
        cum_pnl : float = ...,
        cum_commission : float = ...,
        last_trade : float = ...,
        last_pnl : float = ...,
        last_commission : float = ...,
        last_inout : float = ...,
        change_reason : int = ...,
        change_event_id : Text = ...,
        market_value_long : float = ...,
        market_value_short : float = ...,
        used_bail : float = ...,
        enable_bail : float = ...,
        created_at : Optional[Timestamp] = ...,
        updated_at : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at",u"updated_at",b"updated_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"available",b"available",u"balance",b"balance",u"change_event_id",b"change_event_id",u"change_reason",b"change_reason",u"channel_id",b"channel_id",u"created_at",b"created_at",u"cum_commission",b"cum_commission",u"cum_inout",b"cum_inout",u"cum_pnl",b"cum_pnl",u"cum_trade",b"cum_trade",u"currency",b"currency",u"enable_bail",b"enable_bail",u"fpnl",b"fpnl",u"fpnl_diluted",b"fpnl_diluted",u"frozen",b"frozen",u"last_commission",b"last_commission",u"last_inout",b"last_inout",u"last_pnl",b"last_pnl",u"last_trade",b"last_trade",u"market_value",b"market_value",u"market_value_long",b"market_value_long",u"market_value_short",b"market_value_short",u"nav",b"nav",u"order_frozen",b"order_frozen",u"pnl",b"pnl",u"updated_at",b"updated_at",u"used_bail",b"used_bail"]) -> None: ...

class Cashes(Message):
    """资金集合"""
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[Cash]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[Cash]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class Position(Message):
    """持仓定义"""
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    SYMBOL_FIELD_NUMBER: int
    SIDE_FIELD_NUMBER: int
    VOLUME_FIELD_NUMBER: int
    VOLUME_TODAY_FIELD_NUMBER: int
    VWAP_FIELD_NUMBER: int
    VWAP_DILUTED_FIELD_NUMBER: int
    VWAP_OPEN_FIELD_NUMBER: int
    AMOUNT_FIELD_NUMBER: int
    PRICE_FIELD_NUMBER: int
    FPNL_FIELD_NUMBER: int
    FPNL_DILUTED_FIELD_NUMBER: int
    FPNL_OPEN_FIELD_NUMBER: int
    COST_FIELD_NUMBER: int
    ORDER_FROZEN_FIELD_NUMBER: int
    ORDER_FROZEN_TODAY_FIELD_NUMBER: int
    AVAILABLE_FIELD_NUMBER: int
    AVAILABLE_TODAY_FIELD_NUMBER: int
    AVAILABLE_NOW_FIELD_NUMBER: int
    MARKET_VALUE_FIELD_NUMBER: int
    LAST_PRICE_FIELD_NUMBER: int
    LAST_VOLUME_FIELD_NUMBER: int
    LAST_INOUT_FIELD_NUMBER: int
    CHANGE_REASON_FIELD_NUMBER: int
    CHANGE_EVENT_ID_FIELD_NUMBER: int
    HAS_DIVIDEND_FIELD_NUMBER: int
    COVERED_FLAG_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    UPDATED_AT_FIELD_NUMBER: int
    account_id: Text = ...
    """账号ID"""

    account_name: Text = ...
    """账户登录名"""

    channel_id: Text = ...
    symbol: Text = ...
    """symbol"""

    side: int = ...
    """持仓方向，取值参考enum PositionSide"""

    volume: int = ...
    """总持仓量; 昨持仓量(volume-volume_today)"""

    volume_today: int = ...
    """今日持仓量"""

    vwap: float = ...
    """持仓均价(股票为基于开仓价的持仓均价，期货为基于结算价的持仓均价)"""

    vwap_diluted: float = ...
    """摊薄持仓均价"""

    vwap_open: float = ...
    """基于开仓价的持仓均价(期货)"""

    amount: float = ...
    """持仓额(volume*vwap*multiplier)"""

    price: float = ...
    """当前行情价格"""

    fpnl: float = ...
    """持仓浮动盈亏,基于持仓均价((price-vwap)*volume*multiplier)"""

    fpnl_diluted: float = ...
    """持仓浮动盈亏,基于持仓均价((price-vwap_diluted)*volume*multiplier)"""

    fpnl_open: float = ...
    """持仓浮动盈亏,基于开仓均价((price-vwap_open)*volume*multiplier)，适用于期货"""

    cost: float = ...
    """持仓成本(vwap*volume*multiplier*margin_ratio)"""

    order_frozen: int = ...
    """挂单冻结仓位"""

    order_frozen_today: int = ...
    """挂单冻结今仓仓位"""

    available: int = ...
    """可平总仓位(volume-order_frozen); 可平昨仓位(available-available_today)"""

    available_today: int = ...
    """可平今仓位(volume_today-order_frozen_today)"""

    available_now: int = ...
    """当前可平仓位(根据标的的T+N属性计算)"""

    market_value: float = ...
    """持仓市值"""

    last_price: float = ...
    """上一次成交价"""

    last_volume: int = ...
    """上一次成交量"""

    last_inout: int = ...
    """上一次出入持仓量"""

    change_reason: int = ...
    """仓位变更原因，取值参考enum CashPositionChangeReason"""

    change_event_id: Text = ...
    """触发资金变更事件的ID"""

    has_dividend: int = ...
    """持仓区间有分红配送"""

    covered_flag: int = ...
    """备兑标志, 0: 普通仓; 1: 备兑仓"""

    @property
    def properties(self) -> ScalarMap[Text, Text]:
        """扩展字段"""
        pass
    @property
    def created_at(self) -> Timestamp:
        """建仓时间"""
        pass
    @property
    def updated_at(self) -> Timestamp:
        """仓位变更时间"""
        pass
    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        symbol : Text = ...,
        side : int = ...,
        volume : int = ...,
        volume_today : int = ...,
        vwap : float = ...,
        vwap_diluted : float = ...,
        vwap_open : float = ...,
        amount : float = ...,
        price : float = ...,
        fpnl : float = ...,
        fpnl_diluted : float = ...,
        fpnl_open : float = ...,
        cost : float = ...,
        order_frozen : int = ...,
        order_frozen_today : int = ...,
        available : int = ...,
        available_today : int = ...,
        available_now : int = ...,
        market_value : float = ...,
        last_price : float = ...,
        last_volume : int = ...,
        last_inout : int = ...,
        change_reason : int = ...,
        change_event_id : Text = ...,
        has_dividend : int = ...,
        covered_flag : int = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        created_at : Optional[Timestamp] = ...,
        updated_at : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at",u"updated_at",b"updated_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"amount",b"amount",u"available",b"available",u"available_now",b"available_now",u"available_today",b"available_today",u"change_event_id",b"change_event_id",u"change_reason",b"change_reason",u"channel_id",b"channel_id",u"cost",b"cost",u"covered_flag",b"covered_flag",u"created_at",b"created_at",u"fpnl",b"fpnl",u"fpnl_diluted",b"fpnl_diluted",u"fpnl_open",b"fpnl_open",u"has_dividend",b"has_dividend",u"last_inout",b"last_inout",u"last_price",b"last_price",u"last_volume",b"last_volume",u"market_value",b"market_value",u"order_frozen",b"order_frozen",u"order_frozen_today",b"order_frozen_today",u"price",b"price",u"properties",b"properties",u"side",b"side",u"symbol",b"symbol",u"updated_at",b"updated_at",u"volume",b"volume",u"volume_today",b"volume_today",u"vwap",b"vwap",u"vwap_diluted",b"vwap_diluted",u"vwap_open",b"vwap_open"]) -> None: ...

class Positions(Message):
    """持仓集合"""
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[Position]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[Position]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class Account(Message):
    """账号定义"""
    DESCRIPTOR: Descriptor = ...
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    TITLE_FIELD_NUMBER: int
    INTRO_FIELD_NUMBER: int
    COMMENT_FIELD_NUMBER: int
    EXCHANGES_FIELD_NUMBER: int
    SEC_TYPES_FIELD_NUMBER: int
    INFO_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    UPDATED_AT_FIELD_NUMBER: int
    account_id: Text = ...
    """账号ID"""

    account_name: Text = ...
    """账户登录名"""

    title: Text = ...
    """账号名称"""

    intro: Text = ...
    """账号描述"""

    comment: Text = ...
    """账号备注"""

    @property
    def exchanges(self) -> RepeatedScalarFieldContainer[Text]:
        """支持的交易所"""
        pass
    @property
    def sec_types(self) -> RepeatedScalarFieldContainer[int]:
        """支持的品种类型: A股，期货，期权等。定义见: message SecurityType(platform/data/api/data.proto)"""
        pass
    @property
    def info(self) -> AccountInfo: ...
    @property
    def created_at(self) -> Timestamp: ...
    @property
    def updated_at(self) -> Timestamp: ...
    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        title : Text = ...,
        intro : Text = ...,
        comment : Text = ...,
        exchanges : Optional[Iterable[Text]] = ...,
        sec_types : Optional[Iterable[int]] = ...,
        info : Optional[AccountInfo] = ...,
        created_at : Optional[Timestamp] = ...,
        updated_at : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at",u"info",b"info",u"updated_at",b"updated_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"comment",b"comment",u"created_at",b"created_at",u"exchanges",b"exchanges",u"info",b"info",u"intro",b"intro",u"sec_types",b"sec_types",u"title",b"title",u"updated_at",b"updated_at"]) -> None: ...

class AccountInfo(Message):
    """账户的扩展属性"""
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    IS_ACTIVE_FIELD_NUMBER: int
    APPID_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    is_active: bool = ...
    """账户是否激活"""

    appid: Text = ...
    """创建账户的appid"""

    @property
    def properties(self) -> ScalarMap[Text, Text]:
        """动态扩展属性"""
        pass
    def __init__(self,
        *,
        is_active : bool = ...,
        appid : Text = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"appid",b"appid",u"is_active",b"is_active",u"properties",b"properties"]) -> None: ...

class Accounts(Message):
    """账户集合"""
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[Account]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[Account]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class AccountStatus(Message):
    DESCRIPTOR: Descriptor = ...
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    STATUS_FIELD_NUMBER: int
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    @property
    def status(self) -> ConnectionStatus: ...
    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        status : Optional[ConnectionStatus] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"status",b"status"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"status",b"status"]) -> None: ...

class AccountStatuses(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[AccountStatus]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[AccountStatus]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class AccountChannel(Message):
    """账号通道"""
    DESCRIPTOR: Descriptor = ...
    class Mode(_Mode, metaclass=_ModeEnumTypeWrapper):
        pass
    class _Mode:
        V = NewType('V', int)
    class _ModeEnumTypeWrapper(_EnumTypeWrapper[_Mode.V], type):
        DESCRIPTOR: EnumDescriptor = ...
        Mode_Unknown = AccountChannel.Mode.V(0)
        Mode_Local = AccountChannel.Mode.V(1)
        Mode_Remote = AccountChannel.Mode.V(2)
        Mode_RemoteShare = AccountChannel.Mode.V(3)
        Mode_LocalPipe = AccountChannel.Mode.V(4)
        """本地跨进程管道通讯方式"""

        Mode_Natsgw = AccountChannel.Mode.V(5)
        """走 natsgw 总线架构的通讯方式"""


    Mode_Unknown = AccountChannel.Mode.V(0)
    Mode_Local = AccountChannel.Mode.V(1)
    Mode_Remote = AccountChannel.Mode.V(2)
    Mode_RemoteShare = AccountChannel.Mode.V(3)
    Mode_LocalPipe = AccountChannel.Mode.V(4)
    """本地跨进程管道通讯方式"""

    Mode_Natsgw = AccountChannel.Mode.V(5)
    """走 natsgw 总线架构的通讯方式"""


    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        pass
    class _Type:
        V = NewType('V', int)
    class _TypeEnumTypeWrapper(_EnumTypeWrapper[_Type.V], type):
        DESCRIPTOR: EnumDescriptor = ...
        Type_Unknown = AccountChannel.Type.V(0)
        Type_Simulate = AccountChannel.Type.V(1)
        Type_Live = AccountChannel.Type.V(2)

    Type_Unknown = AccountChannel.Type.V(0)
    Type_Simulate = AccountChannel.Type.V(1)
    Type_Live = AccountChannel.Type.V(2)

    class ChannelType(_ChannelType, metaclass=_ChannelTypeEnumTypeWrapper):
        """交易通道连接的柜台类型"""
        pass
    class _ChannelType:
        V = NewType('V', int)
    class _ChannelTypeEnumTypeWrapper(_EnumTypeWrapper[_ChannelType.V], type):
        DESCRIPTOR: EnumDescriptor = ...
        ChannelType_Unknown = AccountChannel.ChannelType.V(0)
        ChannelType_Normal = AccountChannel.ChannelType.V(1)
        """现货柜台"""

        ChannelType_Credit = AccountChannel.ChannelType.V(2)
        """信用柜台"""

        ChannelType_Future = AccountChannel.ChannelType.V(3)
        """期货(包括商品期权)柜台"""

        ChannelType_Option = AccountChannel.ChannelType.V(4)
        """ETF期权柜台"""


    ChannelType_Unknown = AccountChannel.ChannelType.V(0)
    ChannelType_Normal = AccountChannel.ChannelType.V(1)
    """现货柜台"""

    ChannelType_Credit = AccountChannel.ChannelType.V(2)
    """信用柜台"""

    ChannelType_Future = AccountChannel.ChannelType.V(3)
    """期货(包括商品期权)柜台"""

    ChannelType_Option = AccountChannel.ChannelType.V(4)
    """ETF期权柜台"""


    class ConnConfEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    class ConnPropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        @property
        def value(self) -> Property: ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Optional[Property] = ...,
            ) -> None: ...
        def HasField(self, field_name: Literal[u"value",b"value"]) -> bool: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    CHANNEL_ID_FIELD_NUMBER: int
    CHANNEL_TYPE_FIELD_NUMBER: int
    TITLE_FIELD_NUMBER: int
    INTRO_FIELD_NUMBER: int
    LOGO_FIELD_NUMBER: int
    MODE_FIELD_NUMBER: int
    EXCHANGES_FIELD_NUMBER: int
    SEC_TYPES_FIELD_NUMBER: int
    CONN_ADDR_FIELD_NUMBER: int
    CONN_ADDR_FIXED_FIELD_NUMBER: int
    CONN_CONF_FIELD_NUMBER: int
    CONN_TYPE_FIELD_NUMBER: int
    CONN_PROPERTIES_FIELD_NUMBER: int
    CONN_SSL_FIELD_NUMBER: int
    TAGS_FIELD_NUMBER: int
    channel_id: Text = ...
    """通道ID: CTP,飞马,SimNow,金证,恒生等"""

    channel_type: int = ...
    """通道类型：现货，期货，信用，期权。见enum ChannelType"""

    title: Text = ...
    """通道名称"""

    intro: Text = ...
    """通道描述"""

    logo: Text = ...
    """通道logo"""

    mode: int = ...
    """通道接入模式: local/remote/remote_share"""

    @property
    def exchanges(self) -> RepeatedScalarFieldContainer[Text]:
        """通道支持的交易所"""
        pass
    @property
    def sec_types(self) -> RepeatedScalarFieldContainer[int]:
        """通道支持的品种类型: A股，期货，期权等"""
        pass
    @property
    def conn_addr(self) -> RepeatedCompositeFieldContainer[ConnectionAddress]:
        """通道默认连接地址"""
        pass
    conn_addr_fixed: bool = ...
    """不允许用户修改连接地址"""

    @property
    def conn_conf(self) -> ScalarMap[Text, Text]:
        """deprecated"""
        pass
    conn_type: int = ...
    """通道默认的仿真/实盘属性"""

    @property
    def conn_properties(self) -> MessageMap[Text, Property]:
        """通道默认的其他配置"""
        pass
    conn_ssl: bool = ...
    """是否使用ssl"""

    @property
    def tags(self) -> RepeatedScalarFieldContainer[Text]:
        """标签分组"""
        pass
    def __init__(self,
        *,
        channel_id : Text = ...,
        channel_type : int = ...,
        title : Text = ...,
        intro : Text = ...,
        logo : Text = ...,
        mode : int = ...,
        exchanges : Optional[Iterable[Text]] = ...,
        sec_types : Optional[Iterable[int]] = ...,
        conn_addr : Optional[Iterable[ConnectionAddress]] = ...,
        conn_addr_fixed : bool = ...,
        conn_conf : Optional[Mapping[Text, Text]] = ...,
        conn_type : int = ...,
        conn_properties : Optional[Mapping[Text, Property]] = ...,
        conn_ssl : bool = ...,
        tags : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"channel_id",b"channel_id",u"channel_type",b"channel_type",u"conn_addr",b"conn_addr",u"conn_addr_fixed",b"conn_addr_fixed",u"conn_conf",b"conn_conf",u"conn_properties",b"conn_properties",u"conn_ssl",b"conn_ssl",u"conn_type",b"conn_type",u"exchanges",b"exchanges",u"intro",b"intro",u"logo",b"logo",u"mode",b"mode",u"sec_types",b"sec_types",u"tags",b"tags",u"title",b"title"]) -> None: ...

class AccountChannels(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[AccountChannel]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[AccountChannel]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class AccountConnection(Message):
    DESCRIPTOR: Descriptor = ...
    class ConnPropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        @property
        def value(self) -> Property: ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Optional[Property] = ...,
            ) -> None: ...
        def HasField(self, field_name: Literal[u"value",b"value"]) -> bool: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    ACCOUNT_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    CONN_ADDR_FIELD_NUMBER: int
    CONN_PROPERTIES_FIELD_NUMBER: int
    CONN_TYPE_FIELD_NUMBER: int
    @property
    def account(self) -> Account: ...
    channel_id: Text = ...
    @property
    def conn_addr(self) -> RepeatedCompositeFieldContainer[ConnectionAddress]:
        """如果channel.conn_addr_fixed=false, 则以下overided字段有效,允许用户改写连接地址和属性等信息。
        否则，overrided字段无效。应始终使用channel中的连接地址和属性信息。
        """
        pass
    @property
    def conn_properties(self) -> MessageMap[Text, Property]: ...
    conn_type: int = ...
    """inherit from attached account channel."""

    def __init__(self,
        *,
        account : Optional[Account] = ...,
        channel_id : Text = ...,
        conn_addr : Optional[Iterable[ConnectionAddress]] = ...,
        conn_properties : Optional[Mapping[Text, Property]] = ...,
        conn_type : int = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"account",b"account"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account",b"account",u"channel_id",b"channel_id",u"conn_addr",b"conn_addr",u"conn_properties",b"conn_properties",u"conn_type",b"conn_type"]) -> None: ...

class AccountConnections(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[AccountConnection]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[AccountConnection]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...
