"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from builtins import (
    bool,
    int,
)

from gm.pb.common_pb2 import (
    Filter,
)

from google.protobuf.descriptor import (
    Descriptor,
    FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedScalarFieldContainer,
    ScalarMap,
)

from google.protobuf.message import (
    Message,
)

from typing import (
    Iterable,
    Mapping,
    Optional,
    Text,
)

from typing_extensions import (
    Literal,
)


DESCRIPTOR: FileDescriptor = ...

class GetAlgoOrdersReq(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    FILTER_FIELD_NUMBER: int
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    SYMBOLS_FIELD_NUMBER: int
    CL_ORD_IDS_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    @property
    def filter(self) -> Filter: ...
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]: ...
    @property
    def cl_ord_ids(self) -> RepeatedScalarFieldContainer[Text]: ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    def __init__(self,
        *,
        filter : Optional[Filter] = ...,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        symbols : Optional[Iterable[Text]] = ...,
        cl_ord_ids : Optional[Iterable[Text]] = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"filter",b"filter"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"cl_ord_ids",b"cl_ord_ids",u"filter",b"filter",u"properties",b"properties",u"symbols",b"symbols"]) -> None: ...
