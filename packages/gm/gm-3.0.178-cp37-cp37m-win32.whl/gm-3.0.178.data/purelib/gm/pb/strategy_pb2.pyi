"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from builtins import (
    bool,
    int,
    type,
)

from gm.pb.common_pb2 import (
    ConnectionStatus,
    Property,
)

from google.protobuf.descriptor import (
    Descriptor,
    EnumDescriptor,
    FileDescriptor,
)

from google.protobuf.internal.containers import (
    MessageMap,
    RepeatedCompositeFieldContainer,
)

from google.protobuf.internal.enum_type_wrapper import (
    _EnumTypeWrapper,
)

from google.protobuf.message import (
    Message,
)

from google.protobuf.timestamp_pb2 import (
    Timestamp,
)

from typing import (
    Iterable,
    Mapping,
    NewType,
    Optional,
    Text,
)

from typing_extensions import (
    Literal,
)


DESCRIPTOR: FileDescriptor = ...

class Strategy(Message):
    """策略定义"""
    DESCRIPTOR: Descriptor = ...
    class Stage(_Stage, metaclass=_StageEnumTypeWrapper):
        pass
    class _Stage:
        V = NewType('V', int)
    class _StageEnumTypeWrapper(_EnumTypeWrapper[_Stage.V], type):
        DESCRIPTOR: EnumDescriptor = ...
        Stage_Unknown = Strategy.Stage.V(0)
        Stage_Backtest = Strategy.Stage.V(1)
        Stage_Simulation = Strategy.Stage.V(2)
        Stage_Live = Strategy.Stage.V(3)

    Stage_Unknown = Strategy.Stage.V(0)
    Stage_Backtest = Strategy.Stage.V(1)
    Stage_Simulation = Strategy.Stage.V(2)
    Stage_Live = Strategy.Stage.V(3)

    class Type(_Type, metaclass=_TypeEnumTypeWrapper):
        pass
    class _Type:
        V = NewType('V', int)
    class _TypeEnumTypeWrapper(_EnumTypeWrapper[_Type.V], type):
        DESCRIPTOR: EnumDescriptor = ...
        Type_Default = Strategy.Type.V(0)
        """标准策略"""

        Type_Scanner = Strategy.Type.V(1)
        """扫单策略"""

        Type_External = Strategy.Type.V(2)
        """外部策略"""


    Type_Default = Strategy.Type.V(0)
    """标准策略"""

    Type_Scanner = Strategy.Type.V(1)
    """扫单策略"""

    Type_External = Strategy.Type.V(2)
    """外部策略"""


    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        @property
        def value(self) -> Property: ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Optional[Property] = ...,
            ) -> None: ...
        def HasField(self, field_name: Literal[u"value",b"value"]) -> bool: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    STRATEGY_ID_FIELD_NUMBER: int
    NAME_FIELD_NUMBER: int
    INTRO_FIELD_NUMBER: int
    LANGUAGE_FIELD_NUMBER: int
    STAGE_FIELD_NUMBER: int
    STRATEGY_TYPE_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    CREATED_AT_FIELD_NUMBER: int
    UPDATED_AT_FIELD_NUMBER: int
    strategy_id: Text = ...
    """策略ID"""

    name: Text = ...
    """策略名"""

    intro: Text = ...
    """策略描述"""

    language: Text = ...
    """策略使用的程序语言"""

    stage: int = ...
    """策略当前阶段"""

    strategy_type: int = ...
    """策略类型"""

    @property
    def properties(self) -> MessageMap[Text, Property]:
        """策略定制参数"""
        pass
    @property
    def created_at(self) -> Timestamp:
        """策略创建时间"""
        pass
    @property
    def updated_at(self) -> Timestamp:
        """策略更新时间"""
        pass
    def __init__(self,
        *,
        strategy_id : Text = ...,
        name : Text = ...,
        intro : Text = ...,
        language : Text = ...,
        stage : int = ...,
        strategy_type : int = ...,
        properties : Optional[Mapping[Text, Property]] = ...,
        created_at : Optional[Timestamp] = ...,
        updated_at : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"created_at",b"created_at",u"updated_at",b"updated_at"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"created_at",b"created_at",u"intro",b"intro",u"language",b"language",u"name",b"name",u"properties",b"properties",u"stage",b"stage",u"strategy_id",b"strategy_id",u"strategy_type",b"strategy_type",u"updated_at",b"updated_at"]) -> None: ...

class Strategies(Message):
    """策略集合"""
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[Strategy]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[Strategy]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class StrategyStatus(Message):
    """策略状态"""
    DESCRIPTOR: Descriptor = ...
    STRATEGY_ID_FIELD_NUMBER: int
    STATUS_FIELD_NUMBER: int
    strategy_id: Text = ...
    @property
    def status(self) -> ConnectionStatus:
        """策略状态"""
        pass
    def __init__(self,
        *,
        strategy_id : Text = ...,
        status : Optional[ConnectionStatus] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"status",b"status"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"status",b"status",u"strategy_id",b"strategy_id"]) -> None: ...

class StrategyStatuses(Message):
    """策略状态集合"""
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[StrategyStatus]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[StrategyStatus]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class StopCommand(Message):
    """策略终止命令"""
    DESCRIPTOR: Descriptor = ...
    STRATEGY_ID_FIELD_NUMBER: int
    REASON_FIELD_NUMBER: int
    REASON_DETAIL_FIELD_NUMBER: int
    strategy_id: Text = ...
    """策略ID"""

    reason: int = ...
    """终止原因代码"""

    reason_detail: Text = ...
    """终止原因描述"""

    def __init__(self,
        *,
        strategy_id : Text = ...,
        reason : int = ...,
        reason_detail : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"reason",b"reason",u"reason_detail",b"reason_detail",u"strategy_id",b"strategy_id"]) -> None: ...

class StartCommand(Message):
    """策略启动命令"""
    DESCRIPTOR: Descriptor = ...
    STRATEGY_ID_FIELD_NUMBER: int
    COMMAND_FIELD_NUMBER: int
    DIRECTORY_FIELD_NUMBER: int
    PATH_FIELD_NUMBER: int
    INTERPRETER_PATH_FIELD_NUMBER: int
    INTERPRETER_VENV_PATH_FIELD_NUMBER: int
    strategy_id: Text = ...
    command: Text = ...
    """启动策略命令行(e.g. python strategy.py param1 param2)"""

    directory: Text = ...
    """策略目录"""

    path: Text = ...
    """策略完整路径"""

    interpreter_path: Text = ...
    """解释器路径"""

    interpreter_venv_path: Text = ...
    """解释器虚拟环境路径"""

    def __init__(self,
        *,
        strategy_id : Text = ...,
        command : Text = ...,
        directory : Text = ...,
        path : Text = ...,
        interpreter_path : Text = ...,
        interpreter_venv_path : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"command",b"command",u"directory",b"directory",u"interpreter_path",b"interpreter_path",u"interpreter_venv_path",b"interpreter_venv_path",u"path",b"path",u"strategy_id",b"strategy_id"]) -> None: ...

class StartCommands(Message):
    """策略启动命令集合"""
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[StartCommand]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[StartCommand]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...
