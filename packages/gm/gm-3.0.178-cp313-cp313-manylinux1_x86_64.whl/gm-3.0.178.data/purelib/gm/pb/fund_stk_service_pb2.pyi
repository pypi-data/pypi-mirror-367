"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from builtins import (
    bool,
    float,
    int,
)

from google.protobuf.descriptor import (
    Descriptor,
    FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
    RepeatedScalarFieldContainer,
    ScalarMap,
)

from google.protobuf.message import (
    Message,
)

from google.protobuf.timestamp_pb2 import (
    Timestamp,
)

from typing import (
    Iterable,
    Mapping,
    Optional,
    Text,
)

from typing_extensions import (
    Literal,
)


DESCRIPTOR: FileDescriptor = ...

class GetIndustryCategoryReq(Message):
    DESCRIPTOR: Descriptor = ...
    SOURCE_FIELD_NUMBER: int
    LEVEL_FIELD_NUMBER: int
    source: Text = ...
    """行业来源, 非必填;
    证监会行业分类2012: 'zjh2012', 申万行业分类2021: 'sw2021';
    为空时, 表示'zjh2012'
    """

    level: int = ...
    """行业分级, 非必填
    1:一级行业, 2:二级行业, 3:三级行业
    默认值 0, 表示 一级行业
    查询日期字符串, 本地时间, 格式为: YYYY-MM-DD, 非必填
    为空时, 表示当前日期
    string date = 3;
    """

    def __init__(self,
        *,
        source : Text = ...,
        level : int = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"level",b"level",u"source",b"source"]) -> None: ...

class IndustryCategory(Message):
    DESCRIPTOR: Descriptor = ...
    INDUSTRY_CODE_FIELD_NUMBER: int
    INDUSTRY_NAME_FIELD_NUMBER: int
    industry_code: Text = ...
    """行业代码"""

    industry_name: Text = ...
    """行业名称"""

    def __init__(self,
        *,
        industry_code : Text = ...,
        industry_name : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"industry_code",b"industry_code",u"industry_name",b"industry_name"]) -> None: ...

class GetIndustryCategoryRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[IndustryCategory]:
        """行业分类列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[IndustryCategory]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetIndustryConstituentsReq(Message):
    DESCRIPTOR: Descriptor = ...
    INDUSTRY_CODE_FIELD_NUMBER: int
    DATE_FIELD_NUMBER: int
    industry_code: Text = ...
    """行业代码, 必填"""

    date: Text = ...
    """查询日期字符串, 本地时间, 格式为: YYYY-MM-DD, 非必填
    为空时, 表示当前日期
    """

    def __init__(self,
        *,
        industry_code : Text = ...,
        date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"date",b"date",u"industry_code",b"industry_code"]) -> None: ...

class IndustryConstituent(Message):
    DESCRIPTOR: Descriptor = ...
    INDUSTRY_CODE_FIELD_NUMBER: int
    INDUSTRY_NAME_FIELD_NUMBER: int
    SYMBOL_FIELD_NUMBER: int
    SEC_NAME_FIELD_NUMBER: int
    DATE_IN_FIELD_NUMBER: int
    DATE_OUT_FIELD_NUMBER: int
    industry_code: Text = ...
    """行业代码"""

    industry_name: Text = ...
    """行业名称"""

    symbol: Text = ...
    """成分股票代码, 格式: exchange.sec_id"""

    sec_name: Text = ...
    """成分股票名称"""

    @property
    def date_in(self) -> Timestamp:
        """纳入日期, 本地时间, 格式为: YYYY-MM-DD"""
        pass
    @property
    def date_out(self) -> Timestamp:
        """剔除日期, 本地时间, 格式为: YYYY-MM-DD"""
        pass
    def __init__(self,
        *,
        industry_code : Text = ...,
        industry_name : Text = ...,
        symbol : Text = ...,
        sec_name : Text = ...,
        date_in : Optional[Timestamp] = ...,
        date_out : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"date_in",b"date_in",u"date_out",b"date_out"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"date_in",b"date_in",u"date_out",b"date_out",u"industry_code",b"industry_code",u"industry_name",b"industry_name",u"sec_name",b"sec_name",u"symbol",b"symbol"]) -> None: ...

class GetIndustryConstituentsRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[IndustryConstituent]:
        """成分股列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[IndustryConstituent]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetSymbolIndustryReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    SOURCE_FIELD_NUMBER: int
    LEVEL_FIELD_NUMBER: int
    DATE_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """股票代码列表, 必填参数, 且列表至少包含一个 symbol"""
        pass
    source: Text = ...
    """行业来源, 非必填;
    证监会行业分类2012: 'zjh2012'; 申万行业分类2021: 'sw2021'
    为空时, 表示‘zjh2012'
    """

    level: int = ...
    """行业分级, 非必填
    1:一级行业; 2:二级行业; 3:三级行业
    为 0 时, 表示 一级行业
    """

    date: Text = ...
    """查询时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        source : Text = ...,
        level : int = ...,
        date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"date",b"date",u"level",b"level",u"source",b"source",u"symbols",b"symbols"]) -> None: ...

class SymbolIndustry(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    SEC_NAME_FIELD_NUMBER: int
    INDUSTRY_CODE_FIELD_NUMBER: int
    INDUSTRY_NAME_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码, 格式: exchange.sec_id"""

    sec_name: Text = ...
    """股票名称"""

    industry_code: Text = ...
    """行业代码"""

    industry_name: Text = ...
    """行业名称"""

    def __init__(self,
        *,
        symbol : Text = ...,
        sec_name : Text = ...,
        industry_code : Text = ...,
        industry_name : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"industry_code",b"industry_code",u"industry_name",b"industry_name",u"sec_name",b"sec_name",u"symbol",b"symbol"]) -> None: ...

class GetSymbolIndustryRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[SymbolIndustry]:
        """股票所属的行业列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[SymbolIndustry]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetSectorCategoryReq(Message):
    DESCRIPTOR: Descriptor = ...
    SECTOR_TYPE_FIELD_NUMBER: int
    DATE_FIELD_NUMBER: int
    sector_type: Text = ...
    """板块类型, 必填
    东财板块类型, 1001:市场类; 1002:地域类; 1003:概念类;
    """

    date: Text = ...
    """查询时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    def __init__(self,
        *,
        sector_type : Text = ...,
        date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"date",b"date",u"sector_type",b"sector_type"]) -> None: ...

class SectorCategory(Message):
    DESCRIPTOR: Descriptor = ...
    SECTOR_CODE_FIELD_NUMBER: int
    SECTOR_NAME_FIELD_NUMBER: int
    sector_code: Text = ...
    """板块代码"""

    sector_name: Text = ...
    """板块名称"""

    def __init__(self,
        *,
        sector_code : Text = ...,
        sector_name : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"sector_code",b"sector_code",u"sector_name",b"sector_name"]) -> None: ...

class GetSectorCategoryRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[SectorCategory]:
        """指定类型的板块列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[SectorCategory]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetSectorConstituentsReq(Message):
    DESCRIPTOR: Descriptor = ...
    SECTOR_CODE_FIELD_NUMBER: int
    DATE_FIELD_NUMBER: int
    sector_code: Text = ...
    """需要查询成分股的板块代码, 必填;"""

    date: Text = ...
    """查询时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    def __init__(self,
        *,
        sector_code : Text = ...,
        date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"date",b"date",u"sector_code",b"sector_code"]) -> None: ...

class SectorConstituent(Message):
    DESCRIPTOR: Descriptor = ...
    SECTOR_CODE_FIELD_NUMBER: int
    SECTOR_NAME_FIELD_NUMBER: int
    SYMBOL_FIELD_NUMBER: int
    SEC_NAME_FIELD_NUMBER: int
    sector_code: Text = ...
    """板块代码"""

    sector_name: Text = ...
    """板块名称"""

    symbol: Text = ...
    """股票代码, 格式: exchange.sec_id"""

    sec_name: Text = ...
    """成分股票名称"""

    def __init__(self,
        *,
        sector_code : Text = ...,
        sector_name : Text = ...,
        symbol : Text = ...,
        sec_name : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"sec_name",b"sec_name",u"sector_code",b"sector_code",u"sector_name",b"sector_name",u"symbol",b"symbol"]) -> None: ...

class GetSectorConstituentsRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[SectorConstituent]:
        """板块成分股列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[SectorConstituent]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetSymbolSectorReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    SECTOR_TYPE_FIELD_NUMBER: int
    DATE_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """股票代码列表, 必填参数, 且列表至少包含一个 symbol"""
        pass
    sector_type: Text = ...
    """板块类型"""

    date: Text = ...
    """查询时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        sector_type : Text = ...,
        date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"date",b"date",u"sector_type",b"sector_type",u"symbols",b"symbols"]) -> None: ...

class SymbolSector(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    SEC_NAME_FIELD_NUMBER: int
    SECTOR_CODE_FIELD_NUMBER: int
    SECTOR_NAME_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码, 格式: exchange.sec_id"""

    sec_name: Text = ...
    """股票名称"""

    sector_code: Text = ...
    """板块代码"""

    sector_name: Text = ...
    """板块名称"""

    def __init__(self,
        *,
        symbol : Text = ...,
        sec_name : Text = ...,
        sector_code : Text = ...,
        sector_name : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"sec_name",b"sec_name",u"sector_code",b"sector_code",u"sector_name",b"sector_name",u"symbol",b"symbol"]) -> None: ...

class GetSymbolSectorRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[SymbolSector]:
        """股票所属的板块列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[SymbolSector]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetIndexConstituentsReq(Message):
    DESCRIPTOR: Descriptor = ...
    INDEX_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    index: Text = ...
    """指数代码, 必填"""

    trade_date: Text = ...
    """交易日期, %Y-%m-%d 格式, 空值代表最新交易日"""

    def __init__(self,
        *,
        index : Text = ...,
        trade_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"index",b"index",u"trade_date",b"trade_date"]) -> None: ...

class IndexConstituent(Message):
    DESCRIPTOR: Descriptor = ...
    INDEX_FIELD_NUMBER: int
    SYMBOL_FIELD_NUMBER: int
    WEIGHT_FIELD_NUMBER: int
    MARKET_VALUE_TOTAL_FIELD_NUMBER: int
    MARKET_VALUE_CIRC_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    index: Text = ...
    """指数代码"""

    symbol: Text = ...
    """成分股代码"""

    weight: float = ...
    """成分股权重"""

    market_value_total: float = ...
    """总市值, 单位: 亿元"""

    market_value_circ: float = ...
    """流通市值, 单位: 亿元"""

    @property
    def trade_date(self) -> Timestamp:
        """交易日期, 本地时间, 格式为: YYYY-MM-DD"""
        pass
    def __init__(self,
        *,
        index : Text = ...,
        symbol : Text = ...,
        weight : float = ...,
        market_value_total : float = ...,
        market_value_circ : float = ...,
        trade_date : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"trade_date",b"trade_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"index",b"index",u"market_value_circ",b"market_value_circ",u"market_value_total",b"market_value_total",u"symbol",b"symbol",u"trade_date",b"trade_date",u"weight",b"weight"]) -> None: ...

class GetIndexConstituentsRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[IndexConstituent]:
        """指数成分股列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[IndexConstituent]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetIndexHistoryConstituentsReq(Message):
    DESCRIPTOR: Descriptor = ...
    INDEX_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    index: Text = ...
    """指数代码, 必填"""

    start_date: Text = ...
    """开始时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    end_date: Text = ...
    """结束时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    def __init__(self,
        *,
        index : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"end_date",b"end_date",u"index",b"index",u"start_date",b"start_date"]) -> None: ...

class IndexHistoryConstituent(Message):
    DESCRIPTOR: Descriptor = ...
    INDEX_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    SYMBOL_FIELD_NUMBER: int
    WEIGHT_FIELD_NUMBER: int
    index: Text = ...
    """指数代码"""

    @property
    def trade_date(self) -> Timestamp:
        """交易日期"""
        pass
    symbol: Text = ...
    """成分股代码"""

    weight: float = ...
    """成分股权重"""

    def __init__(self,
        *,
        index : Text = ...,
        trade_date : Optional[Timestamp] = ...,
        symbol : Text = ...,
        weight : float = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"trade_date",b"trade_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"index",b"index",u"symbol",b"symbol",u"trade_date",b"trade_date",u"weight",b"weight"]) -> None: ...

class GetIndexHistoryConstituentsRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[IndexHistoryConstituent]:
        """指定指数在历史交易日的成分股和权重数据列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[IndexHistoryConstituent]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetDividendReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    DATE_TYPE_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    start_date: Text = ...
    """开始时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    end_date: Text = ...
    """结束时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    date_type: Text = ...
    """日期类型, 可选: 公告日（默认）、股权登记日、除权除息日
    为空时表示日期类型为 公告日
    """

    def __init__(self,
        *,
        symbol : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        date_type : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"date_type",b"date_type",u"end_date",b"end_date",u"start_date",b"start_date",u"symbol",b"symbol"]) -> None: ...

class StockDividend(Message):
    """股票分红配送信息
    todo: 重新Review 下列 double 类型的字段, 根据数据库的字段类型, 判断是否修正为 int64
    """
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    SCHEME_TYPE_FIELD_NUMBER: int
    PUB_DATE_FIELD_NUMBER: int
    EQUITY_REG_DATE_FIELD_NUMBER: int
    EX_DATE_FIELD_NUMBER: int
    CASH_PAY_DATE_FIELD_NUMBER: int
    SHARE_ACCT_DATE_FIELD_NUMBER: int
    SHARE_LST_DATE_FIELD_NUMBER: int
    CASH_AF_TAX_FIELD_NUMBER: int
    CASH_BF_TAX_FIELD_NUMBER: int
    BONUS_RATIO_FIELD_NUMBER: int
    CONVERT_RATIO_FIELD_NUMBER: int
    BASE_DATE_FIELD_NUMBER: int
    BASE_SHARE_FIELD_NUMBER: int
    DB_ID_FIELD_NUMBER: int
    DVD_TARGET_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    scheme_type: Text = ...
    """分配方案, 如现金分红, 送股, 配股, 转增"""

    @property
    def pub_date(self) -> Timestamp:
        """公告日, 本地时间, 格式为: YYYY-MM-DD"""
        pass
    @property
    def equity_reg_date(self) -> Timestamp:
        """股权登记日, 本地时间, 格式为: YYYY-MM-DD"""
        pass
    @property
    def ex_date(self) -> Timestamp:
        """除权除息日, 本地时间, 格式为: YYYY-MM-DD"""
        pass
    @property
    def cash_pay_date(self) -> Timestamp:
        """现金红利发放日(派息日), 本地时间, 格式为: YYYY-MM-DD"""
        pass
    @property
    def share_acct_date(self) -> Timestamp:
        """送（转增）股份到账日, 本地时间, 格式为: YYYY-MM-DD"""
        pass
    @property
    def share_lst_date(self) -> Timestamp:
        """红股上市日, 送（转增）股份上市交易日, 本地时间, 格式为: YYYY-MM-DD"""
        pass
    cash_af_tax: float = ...
    """税后红利（元/10股）"""

    cash_bf_tax: float = ...
    """税前红利（元/10股）"""

    bonus_ratio: float = ...
    """送股比例, 10:X"""

    convert_ratio: float = ...
    """转增比例, 10:X"""

    @property
    def base_date(self) -> Timestamp:
        """股本基准日"""
        pass
    base_share: float = ...
    """股本基数(基准股本)"""

    db_id: int = ...
    """[KK] 数据库表里的id, 数据记录的唯一性标识; 数据分发服务, 本地缓存代理需要使用此字段;"""

    dvd_target: Text = ...
    """[KK] 新增字段,分派对象
    股票根据分派对象进行过滤,只处理 全体股东, 流通股股东, A股股东, A股流通股股东的分红记录
    基金不对分派对象进行过滤,会处理全部分红记录
    """

    def __init__(self,
        *,
        symbol : Text = ...,
        scheme_type : Text = ...,
        pub_date : Optional[Timestamp] = ...,
        equity_reg_date : Optional[Timestamp] = ...,
        ex_date : Optional[Timestamp] = ...,
        cash_pay_date : Optional[Timestamp] = ...,
        share_acct_date : Optional[Timestamp] = ...,
        share_lst_date : Optional[Timestamp] = ...,
        cash_af_tax : float = ...,
        cash_bf_tax : float = ...,
        bonus_ratio : float = ...,
        convert_ratio : float = ...,
        base_date : Optional[Timestamp] = ...,
        base_share : float = ...,
        db_id : int = ...,
        dvd_target : Text = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"base_date",b"base_date",u"cash_pay_date",b"cash_pay_date",u"equity_reg_date",b"equity_reg_date",u"ex_date",b"ex_date",u"pub_date",b"pub_date",u"share_acct_date",b"share_acct_date",u"share_lst_date",b"share_lst_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"base_date",b"base_date",u"base_share",b"base_share",u"bonus_ratio",b"bonus_ratio",u"cash_af_tax",b"cash_af_tax",u"cash_bf_tax",b"cash_bf_tax",u"cash_pay_date",b"cash_pay_date",u"convert_ratio",b"convert_ratio",u"db_id",b"db_id",u"dvd_target",b"dvd_target",u"equity_reg_date",b"equity_reg_date",u"ex_date",b"ex_date",u"pub_date",b"pub_date",u"scheme_type",b"scheme_type",u"share_acct_date",b"share_acct_date",u"share_lst_date",b"share_lst_date",u"symbol",b"symbol"]) -> None: ...

class GetDividendRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[StockDividend]:
        """股票分红送配信息记录列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[StockDividend]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetRationReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    symbol: Text = ...
    """标的代码"""

    start_date: Text = ...
    """开始时间"""

    end_date: Text = ...
    """结束时间"""

    def __init__(self,
        *,
        symbol : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"end_date",b"end_date",u"start_date",b"start_date",u"symbol",b"symbol"]) -> None: ...

class StockRation(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    PUB_DATE_FIELD_NUMBER: int
    EQUITY_REG_DATE_FIELD_NUMBER: int
    EX_DATE_FIELD_NUMBER: int
    RATION_RATIO_FIELD_NUMBER: int
    RATION_PRICE_FIELD_NUMBER: int
    symbol: Text = ...
    """标的代码"""

    @property
    def pub_date(self) -> Timestamp:
        """公告日"""
        pass
    @property
    def equity_reg_date(self) -> Timestamp:
        """股权登记日"""
        pass
    @property
    def ex_date(self) -> Timestamp:
        """除权除息日"""
        pass
    ration_ratio: float = ...
    """配股比例"""

    ration_price: float = ...
    """配股价格"""

    def __init__(self,
        *,
        symbol : Text = ...,
        pub_date : Optional[Timestamp] = ...,
        equity_reg_date : Optional[Timestamp] = ...,
        ex_date : Optional[Timestamp] = ...,
        ration_ratio : float = ...,
        ration_price : float = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"equity_reg_date",b"equity_reg_date",u"ex_date",b"ex_date",u"pub_date",b"pub_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"equity_reg_date",b"equity_reg_date",u"ex_date",b"ex_date",u"pub_date",b"pub_date",u"ration_price",b"ration_price",u"ration_ratio",b"ration_ratio",u"symbol",b"symbol"]) -> None: ...

class GetRationRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[StockRation]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[StockRation]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetAdjFactorReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    BASE_DATE_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码, 必填"""

    start_date: Text = ...
    """开始时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    end_date: Text = ...
    """结束时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    base_date: Text = ...
    """复权基准日
    前复权的基准日, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示使用 end_date 的日期
    """

    def __init__(self,
        *,
        symbol : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        base_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"base_date",b"base_date",u"end_date",b"end_date",u"start_date",b"start_date",u"symbol",b"symbol"]) -> None: ...

class AdjFactor(Message):
    """复权因子"""
    DESCRIPTOR: Descriptor = ...
    TRADE_DATE_FIELD_NUMBER: int
    ADJ_FACTOR_BWD_FIELD_NUMBER: int
    ADJ_FACTOR_BWD_ACC_FIELD_NUMBER: int
    ADJ_FACTOR_FWD_FIELD_NUMBER: int
    ADJ_FACTOR_FWD_ACC_FIELD_NUMBER: int
    @property
    def trade_date(self) -> Timestamp:
        """交易日期"""
        pass
    adj_factor_bwd: float = ...
    """当日后复权因子, T日后复权因子=T-1日的收盘价/T日前收价"""

    adj_factor_bwd_acc: float = ...
    """当日累计后复权因子, T日累计后复权因子=T日后复权因子*T-1日累计后复权因子
    （第一个累计后复权因子=第一个后复权因子）
    """

    adj_factor_fwd: float = ...
    """当日前复权因子, T日前复权因子=T日后复权因子/复权基准日后复权因子"""

    adj_factor_fwd_acc: float = ...
    """当日累计前复权因子, T日累计前复权因子=T日后复权因子
    T-1日累计前复权因子=T日后复权因子*T-1日后复权因子
    （第一个累计前复权因子=最新累计后复权因子）
    """

    def __init__(self,
        *,
        trade_date : Optional[Timestamp] = ...,
        adj_factor_bwd : float = ...,
        adj_factor_bwd_acc : float = ...,
        adj_factor_fwd : float = ...,
        adj_factor_fwd_acc : float = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"trade_date",b"trade_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"adj_factor_bwd",b"adj_factor_bwd",u"adj_factor_bwd_acc",b"adj_factor_bwd_acc",u"adj_factor_fwd",b"adj_factor_fwd",u"adj_factor_fwd_acc",b"adj_factor_fwd_acc",u"trade_date",b"trade_date"]) -> None: ...

class GetAdjFactorRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[AdjFactor]:
        """指定股票在一段时间内的复权因子列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[AdjFactor]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetShareholderNumReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码, 必填"""

    start_date: Text = ...
    """开始时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    end_date: Text = ...
    """结束时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    def __init__(self,
        *,
        symbol : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"end_date",b"end_date",u"start_date",b"start_date",u"symbol",b"symbol"]) -> None: ...

class ShareholderNum(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    SEC_NAME_FIELD_NUMBER: int
    PUB_DATE_FIELD_NUMBER: int
    EXPIRY_DATE_FIELD_NUMBER: int
    TOTAL_SHARE_FIELD_NUMBER: int
    TOTAL_SHARE_A_FIELD_NUMBER: int
    TOTAL_SHARE_B_FIELD_NUMBER: int
    TOTAL_SHARE_H_FIELD_NUMBER: int
    OTHER_SHARE_FIELD_NUMBER: int
    TOTAL_SHARE_PFD_FIELD_NUMBER: int
    TOTAL_SHARE_MGN_FIELD_NUMBER: int
    TOTAL_SHARE_NO_MGN_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    sec_name: Text = ...
    """股票名称"""

    @property
    def pub_date(self) -> Timestamp:
        """公告日期"""
        pass
    @property
    def expiry_date(self) -> Timestamp:
        """截止日期"""
        pass
    total_share: int = ...
    """股东总数"""

    total_share_a: int = ...
    """A股股东总数"""

    total_share_b: int = ...
    """流通B股股东总数"""

    total_share_h: int = ...
    """流通H股股东总数"""

    other_share: int = ...
    """其他股东户数"""

    total_share_pfd: int = ...
    """优先股股东总数（表决权恢复）"""

    total_share_mgn: int = ...
    """股东户数（含融资融券）"""

    total_share_no_mgn: int = ...
    """股东户数（不含融资融券）"""

    def __init__(self,
        *,
        symbol : Text = ...,
        sec_name : Text = ...,
        pub_date : Optional[Timestamp] = ...,
        expiry_date : Optional[Timestamp] = ...,
        total_share : int = ...,
        total_share_a : int = ...,
        total_share_b : int = ...,
        total_share_h : int = ...,
        other_share : int = ...,
        total_share_pfd : int = ...,
        total_share_mgn : int = ...,
        total_share_no_mgn : int = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"expiry_date",b"expiry_date",u"pub_date",b"pub_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"expiry_date",b"expiry_date",u"other_share",b"other_share",u"pub_date",b"pub_date",u"sec_name",b"sec_name",u"symbol",b"symbol",u"total_share",b"total_share",u"total_share_a",b"total_share_a",u"total_share_b",b"total_share_b",u"total_share_h",b"total_share_h",u"total_share_mgn",b"total_share_mgn",u"total_share_no_mgn",b"total_share_no_mgn",u"total_share_pfd",b"total_share_pfd"]) -> None: ...

class GetShareholderNumRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[ShareholderNum]:
        """指定股票,指定日期范围内的股东数据信息列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[ShareholderNum]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetTopShareholderReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    TRADABLE_HOLDER_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码, 必填"""

    start_date: Text = ...
    """开始时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    end_date: Text = ...
    """结束时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    tradable_holder: bool = ...
    """是否流通股东: False-十大股东（默认）; True-十大流通股东"""

    def __init__(self,
        *,
        symbol : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        tradable_holder : bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"end_date",b"end_date",u"start_date",b"start_date",u"symbol",b"symbol",u"tradable_holder",b"tradable_holder"]) -> None: ...

class Shareholder(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    SEC_NAME_FIELD_NUMBER: int
    PUB_DATE_FIELD_NUMBER: int
    EXPIRY_DATE_FIELD_NUMBER: int
    HOLDER_NAME_FIELD_NUMBER: int
    HOLDER_RANK_FIELD_NUMBER: int
    HOLDER_TYPE_FIELD_NUMBER: int
    HOLDER_ATTR_FIELD_NUMBER: int
    SHARE_TYPE_FIELD_NUMBER: int
    SHARE_NUM_FIELD_NUMBER: int
    SHARE_RATIO1_FIELD_NUMBER: int
    SHARE_RATIO2_FIELD_NUMBER: int
    SHARE_PLEDGE_FIELD_NUMBER: int
    SHARE_FREEZE_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    sec_name: Text = ...
    """股票名称"""

    @property
    def pub_date(self) -> Timestamp:
        """公告日期"""
        pass
    @property
    def expiry_date(self) -> Timestamp:
        """截止日期"""
        pass
    holder_name: Text = ...
    """股东名称"""

    holder_rank: int = ...
    """股东序号（名次）"""

    holder_type: Text = ...
    """股东类型"""

    holder_attr: Text = ...
    """股东性质"""

    share_type: Text = ...
    """股份类型(股份性质)"""

    share_num: float = ...
    """持有数量（股）"""

    share_ratio1: float = ...
    """持股比例1, 持股占总股本比例（%）"""

    share_ratio2: float = ...
    """持股比例2, 持股占已上市流通股比例（%）"""

    share_pledge: float = ...
    """质押股份数量, 股权质押涉及股数（股）"""

    share_freeze: float = ...
    """冻结股份数量, 股权冻结涉及股数（股）"""

    def __init__(self,
        *,
        symbol : Text = ...,
        sec_name : Text = ...,
        pub_date : Optional[Timestamp] = ...,
        expiry_date : Optional[Timestamp] = ...,
        holder_name : Text = ...,
        holder_rank : int = ...,
        holder_type : Text = ...,
        holder_attr : Text = ...,
        share_type : Text = ...,
        share_num : float = ...,
        share_ratio1 : float = ...,
        share_ratio2 : float = ...,
        share_pledge : float = ...,
        share_freeze : float = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"expiry_date",b"expiry_date",u"pub_date",b"pub_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"expiry_date",b"expiry_date",u"holder_attr",b"holder_attr",u"holder_name",b"holder_name",u"holder_rank",b"holder_rank",u"holder_type",b"holder_type",u"pub_date",b"pub_date",u"sec_name",b"sec_name",u"share_freeze",b"share_freeze",u"share_num",b"share_num",u"share_pledge",b"share_pledge",u"share_ratio1",b"share_ratio1",u"share_ratio2",b"share_ratio2",u"share_type",b"share_type",u"symbol",b"symbol"]) -> None: ...

class GetTopShareholderRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[Shareholder]:
        """十大股东列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[Shareholder]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetShareChangeReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码, 必填"""

    start_date: Text = ...
    """开始时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    end_date: Text = ...
    """结束时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    def __init__(self,
        *,
        symbol : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"end_date",b"end_date",u"start_date",b"start_date",u"symbol",b"symbol"]) -> None: ...

class ShareChange(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    COMPANY_NAME_FIELD_NUMBER: int
    PUB_DATE_FIELD_NUMBER: int
    CHG_DATE_FIELD_NUMBER: int
    CHG_REASON_FIELD_NUMBER: int
    CHG_EVENT_FIELD_NUMBER: int
    SHARE_TOTAL_FIELD_NUMBER: int
    SHARE_TOTAL_NLF_FIELD_NUMBER: int
    SHARE_PROM_FIELD_NUMBER: int
    SHARE_PROM_STATE_FIELD_NUMBER: int
    SHARE_STATE_FIELD_NUMBER: int
    SHARE_STATE_LP_FIELD_NUMBER: int
    SHARE_PROM_SOC_FIELD_NUMBER: int
    SHARE_DC_LP_FIELD_NUMBER: int
    SHARE_OS_LP_FIELD_NUMBER: int
    SHARE_PROM_OTHER_FIELD_NUMBER: int
    SHARE_RS_FIELD_NUMBER: int
    SHARE_RS_STATE_FIELD_NUMBER: int
    SHARE_RS_DC_LP_FIELD_NUMBER: int
    SHARE_RS_STATE_LP_FIELD_NUMBER: int
    SHARE_RS_SOC_LP_FIELD_NUMBER: int
    SHARE_RS_OS_LP_FIELD_NUMBER: int
    SHARE_EMP_NLF_FIELD_NUMBER: int
    SHARE_PFD_NLF_FIELD_NUMBER: int
    SHARE_OTH_NLF_FIELD_NUMBER: int
    SHARE_CIRC_FIELD_NUMBER: int
    SHARE_TTL_UNL_FIELD_NUMBER: int
    SHARE_A_UNL_FIELD_NUMBER: int
    SHARE_B_UNL_FIELD_NUMBER: int
    SHARE_H_UNL_FIELD_NUMBER: int
    SHARE_OTH_UNL_FIELD_NUMBER: int
    SHARE_TTL_LTD_FIELD_NUMBER: int
    SHARE_GEN_LTD_FIELD_NUMBER: int
    SHARE_STATE_LTD_FIELD_NUMBER: int
    SHARE_STATE_LP_LTD_FIELD_NUMBER: int
    SHARE_OTH_DC_LTD_FIELD_NUMBER: int
    SHARE_NST_DC_LP_LTD_FIELD_NUMBER: int
    SHARE_DC_NP_LTD_FIELD_NUMBER: int
    SHARE_FORN_LTD_FIELD_NUMBER: int
    SHARE_OS_LP_LTD_FIELD_NUMBER: int
    SHARE_OS_NP_LTD_FIELD_NUMBER: int
    SHARE_LK_LTD_FIELD_NUMBER: int
    SHARE_GM_LTD_FIELD_NUMBER: int
    SHARE_PLC_LP_LTD_FIELD_NUMBER: int
    SHARE_PLC_SI_LTD_FIELD_NUMBER: int
    SHARE_PLC_LP_GEN_LTD_FIELD_NUMBER: int
    SHARE_PLC_FND_LTD_FIELD_NUMBER: int
    SHARE_A_LTD_FIELD_NUMBER: int
    SHARE_B_LTD_FIELD_NUMBER: int
    SHARE_H_LTD_FIELD_NUMBER: int
    SHARE_OTH_LTD_FIELD_NUMBER: int
    SHARE_LIST_DATE_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    company_name: Text = ...
    """公司名称"""

    @property
    def pub_date(self) -> Timestamp:
        """发布日期"""
        pass
    @property
    def chg_date(self) -> Timestamp:
        """股本变动日期"""
        pass
    chg_reason: Text = ...
    """股本变动原因"""

    chg_event: Text = ...
    """股本变动事件"""

    share_total: float = ...
    """总股本, 未流通股份+已流通股份, 单位: 股"""

    share_total_nlf: float = ...
    """未流通股份"""

    share_prom: float = ...
    """发起人股份: 国有发起人股 + 发起社会法人股 + 其他发起人股份, 单位: 股"""

    share_prom_state: float = ...
    """国有发起人股: 国家持股+国有法人股, 单位: 股"""

    share_state: float = ...
    """国家股"""

    share_state_lp: float = ...
    """国有法人股"""

    share_prom_soc: float = ...
    """发起社会法人股: 境内社会法人股+境外法人股, 单位: 股"""

    share_dc_lp: float = ...
    """境内社会法人股"""

    share_os_lp: float = ...
    """境外法人股"""

    share_prom_other: float = ...
    """其他发起人股份"""

    share_rs: float = ...
    """募集人股份: 募集国家股+募集境内法人股+募集境外法人股, 单位: 股"""

    share_rs_state: float = ...
    """募集国家股"""

    share_rs_dc_lp: float = ...
    """募集境内法人股: 募集境内国有法人股+募集境内社会法人股, 单位: 股"""

    share_rs_state_lp: float = ...
    """募集境内国有法人股"""

    share_rs_soc_lp: float = ...
    """募集境内社会法人股"""

    share_rs_os_lp: float = ...
    """募集境外法人股"""

    share_emp_nlf: float = ...
    """内部职工股"""

    share_pfd_nlf: float = ...
    """优先股"""

    share_oth_nlf: float = ...
    """其他未流通股份"""

    share_circ: float = ...
    """流通股份"""

    share_ttl_unl: float = ...
    """无限售条件股份"""

    share_a_unl: float = ...
    """人民币普通股（A股）"""

    share_b_unl: float = ...
    """境内上市外资股（B股）"""

    share_h_unl: float = ...
    """境外上市外资股（H股）"""

    share_oth_unl: float = ...
    """其他已流通股份"""

    share_ttl_ltd: float = ...
    """有限售条件股份"""

    share_gen_ltd: float = ...
    """一般有限售条件股份: 限售国家持股+ 限售国有法人持股+ 限售其他内资持股+ 限售外资持股+ 锁定股份+ 高管持股, 单位: 股"""

    share_state_ltd: float = ...
    """限售国家持股"""

    share_state_lp_ltd: float = ...
    """限售国有法人持股"""

    share_oth_dc_ltd: float = ...
    """限售其他内资持股: 限售境内非国有法人持股+限售境内自然人持股, 单位: 股"""

    share_nst_dc_lp_ltd: float = ...
    """限售境内非国有法人持股"""

    share_dc_np_ltd: float = ...
    """限售境内自然人持股"""

    share_forn_ltd: float = ...
    """限售外资持股: 限售境外法人持股+限售境外自然人持股, 单位: 股"""

    share_os_lp_ltd: float = ...
    """限售境外法人持股"""

    share_os_np_ltd: float = ...
    """限售境外自然人持股"""

    share_lk_ltd: float = ...
    """锁定股份"""

    share_gm_ltd: float = ...
    """高管持股(原始披露)"""

    share_plc_lp_ltd: float = ...
    """配售法人持股: 战略投资者配售股份+一般法人投资者配售+ 证券投资基金配售股份, 单位: 股"""

    share_plc_si_ltd: float = ...
    """战略投资者配售股份"""

    share_plc_lp_gen_ltd: float = ...
    """一般法人投资者配售股份"""

    share_plc_fnd_ltd: float = ...
    """证券投资基金配售股份"""

    share_a_ltd: float = ...
    """限售流通A股"""

    share_b_ltd: float = ...
    """限售流通B股"""

    share_h_ltd: float = ...
    """限售流通H股"""

    share_oth_ltd: float = ...
    """其他限售股份"""

    @property
    def share_list_date(self) -> Timestamp:
        """变动股份上市日"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        company_name : Text = ...,
        pub_date : Optional[Timestamp] = ...,
        chg_date : Optional[Timestamp] = ...,
        chg_reason : Text = ...,
        chg_event : Text = ...,
        share_total : float = ...,
        share_total_nlf : float = ...,
        share_prom : float = ...,
        share_prom_state : float = ...,
        share_state : float = ...,
        share_state_lp : float = ...,
        share_prom_soc : float = ...,
        share_dc_lp : float = ...,
        share_os_lp : float = ...,
        share_prom_other : float = ...,
        share_rs : float = ...,
        share_rs_state : float = ...,
        share_rs_dc_lp : float = ...,
        share_rs_state_lp : float = ...,
        share_rs_soc_lp : float = ...,
        share_rs_os_lp : float = ...,
        share_emp_nlf : float = ...,
        share_pfd_nlf : float = ...,
        share_oth_nlf : float = ...,
        share_circ : float = ...,
        share_ttl_unl : float = ...,
        share_a_unl : float = ...,
        share_b_unl : float = ...,
        share_h_unl : float = ...,
        share_oth_unl : float = ...,
        share_ttl_ltd : float = ...,
        share_gen_ltd : float = ...,
        share_state_ltd : float = ...,
        share_state_lp_ltd : float = ...,
        share_oth_dc_ltd : float = ...,
        share_nst_dc_lp_ltd : float = ...,
        share_dc_np_ltd : float = ...,
        share_forn_ltd : float = ...,
        share_os_lp_ltd : float = ...,
        share_os_np_ltd : float = ...,
        share_lk_ltd : float = ...,
        share_gm_ltd : float = ...,
        share_plc_lp_ltd : float = ...,
        share_plc_si_ltd : float = ...,
        share_plc_lp_gen_ltd : float = ...,
        share_plc_fnd_ltd : float = ...,
        share_a_ltd : float = ...,
        share_b_ltd : float = ...,
        share_h_ltd : float = ...,
        share_oth_ltd : float = ...,
        share_list_date : Optional[Timestamp] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"chg_date",b"chg_date",u"pub_date",b"pub_date",u"share_list_date",b"share_list_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"chg_date",b"chg_date",u"chg_event",b"chg_event",u"chg_reason",b"chg_reason",u"company_name",b"company_name",u"pub_date",b"pub_date",u"share_a_ltd",b"share_a_ltd",u"share_a_unl",b"share_a_unl",u"share_b_ltd",b"share_b_ltd",u"share_b_unl",b"share_b_unl",u"share_circ",b"share_circ",u"share_dc_lp",b"share_dc_lp",u"share_dc_np_ltd",b"share_dc_np_ltd",u"share_emp_nlf",b"share_emp_nlf",u"share_forn_ltd",b"share_forn_ltd",u"share_gen_ltd",b"share_gen_ltd",u"share_gm_ltd",b"share_gm_ltd",u"share_h_ltd",b"share_h_ltd",u"share_h_unl",b"share_h_unl",u"share_list_date",b"share_list_date",u"share_lk_ltd",b"share_lk_ltd",u"share_nst_dc_lp_ltd",b"share_nst_dc_lp_ltd",u"share_os_lp",b"share_os_lp",u"share_os_lp_ltd",b"share_os_lp_ltd",u"share_os_np_ltd",b"share_os_np_ltd",u"share_oth_dc_ltd",b"share_oth_dc_ltd",u"share_oth_ltd",b"share_oth_ltd",u"share_oth_nlf",b"share_oth_nlf",u"share_oth_unl",b"share_oth_unl",u"share_pfd_nlf",b"share_pfd_nlf",u"share_plc_fnd_ltd",b"share_plc_fnd_ltd",u"share_plc_lp_gen_ltd",b"share_plc_lp_gen_ltd",u"share_plc_lp_ltd",b"share_plc_lp_ltd",u"share_plc_si_ltd",b"share_plc_si_ltd",u"share_prom",b"share_prom",u"share_prom_other",b"share_prom_other",u"share_prom_soc",b"share_prom_soc",u"share_prom_state",b"share_prom_state",u"share_rs",b"share_rs",u"share_rs_dc_lp",b"share_rs_dc_lp",u"share_rs_os_lp",b"share_rs_os_lp",u"share_rs_soc_lp",b"share_rs_soc_lp",u"share_rs_state",b"share_rs_state",u"share_rs_state_lp",b"share_rs_state_lp",u"share_state",b"share_state",u"share_state_lp",b"share_state_lp",u"share_state_lp_ltd",b"share_state_lp_ltd",u"share_state_ltd",b"share_state_ltd",u"share_total",b"share_total",u"share_total_nlf",b"share_total_nlf",u"share_ttl_ltd",b"share_ttl_ltd",u"share_ttl_unl",b"share_ttl_unl",u"symbol",b"symbol"]) -> None: ...

class GetShareChangeRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[ShareChange]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[ShareChange]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetFundamentalsBalanceReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    RPT_TYPE_FIELD_NUMBER: int
    DATA_TYPE_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码, 必填"""

    rpt_type: int = ...
    """报表类型, 默认为不限
    1-一季度报
    2-二季度报
    3-三季度报
    4-四季度报
    6-中报
    9-前三季报
    12-年报
    """

    data_type: int = ...
    """数据类型; 在发布原始财务报告以后，上市公司可能会对数据进行修正, 默认为不限
    101 (合并原始)
    102 (合并调整)
    201 (母公司原始)
    202 (母公司调整)
    """

    start_date: Text = ...
    """开始时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    end_date: Text = ...
    """结束时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]:
        """返回字段"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        rpt_type : int = ...,
        data_type : int = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data_type",b"data_type",u"end_date",b"end_date",u"fields",b"fields",u"rpt_type",b"rpt_type",u"start_date",b"start_date",u"symbol",b"symbol"]) -> None: ...

class FundamentalsBalance(Message):
    """资产负责数据"""
    DESCRIPTOR: Descriptor = ...
    class DataEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    SYMBOL_FIELD_NUMBER: int
    PUB_DATE_FIELD_NUMBER: int
    RPT_DATE_FIELD_NUMBER: int
    DATA_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    @property
    def pub_date(self) -> Timestamp:
        """发布日期
        在指定时间段[开始时间,结束时间]内的最新发布日期,
        若数据类型选择合并原始(data_type=101)，则返回原始发布的发布日期
        若数据类型选择合并调整(data_type=102)，则返回调整后最新发布日期
        """
        pass
    @property
    def rpt_date(self) -> Timestamp:
        """报告截止日期，财报统计的最后一天"""
        pass
    @property
    def data(self) -> ScalarMap[Text, Text]:
        """相应指定查询 fields字段的值. 字典key值请参考 资产负债表"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        pub_date : Optional[Timestamp] = ...,
        rpt_date : Optional[Timestamp] = ...,
        data : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"pub_date",b"pub_date",u"rpt_date",b"rpt_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"data",b"data",u"pub_date",b"pub_date",u"rpt_date",b"rpt_date",u"symbol",b"symbol"]) -> None: ...

class GetFundamentalsBalanceRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[FundamentalsBalance]:
        """指定股票在指定时间范围内的资产负责数据列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[FundamentalsBalance]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetFundamentalsBalancePtReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    RPT_TYPE_FIELD_NUMBER: int
    DATA_TYPE_FIELD_NUMBER: int
    DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """股票代码"""
        pass
    rpt_type: int = ...
    """报表类型, 默认为不限
    1-一季度报
    2-二季度报
    3-三季度报
    4-四季度报
    6-中报
    9-前三季报
    12-年报
    """

    data_type: int = ...
    """数据类型; 在发布原始财务报告以后，上市公司可能会对数据进行修正, 默认为不限
    101 (合并原始)
    102 (合并调整)
    201 (母公司原始)
    202 (母公司调整)
    """

    date: Text = ...
    """查询日期, 格式为: YYYY-MM-DD"""

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]:
        """返回字段"""
        pass
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        rpt_type : int = ...,
        data_type : int = ...,
        date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data_type",b"data_type",u"date",b"date",u"fields",b"fields",u"rpt_type",b"rpt_type",u"symbols",b"symbols"]) -> None: ...

class GetFundamentalsBalancePtRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[FundamentalsBalance]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[FundamentalsBalance]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetFundamentalsCashflowReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    RPT_TYPE_FIELD_NUMBER: int
    DATA_TYPE_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码, 必填"""

    rpt_type: int = ...
    """报表类型, 默认为不限
    1-一季度报
    2-二季度报
    3-三季度报
    4-四季度报
    6-中报
    9-前三季报
    12-年报
    """

    data_type: int = ...
    """数据类型; 在发布原始财务报告以后，上市公司可能会对数据进行修正, 默认为不限
    101 (合并原始)
    102 (合并调整)
    201 (母公司原始)
    202 (母公司调整)
    """

    start_date: Text = ...
    """开始时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    end_date: Text = ...
    """结束时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]:
        """返回字段"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        rpt_type : int = ...,
        data_type : int = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data_type",b"data_type",u"end_date",b"end_date",u"fields",b"fields",u"rpt_type",b"rpt_type",u"start_date",b"start_date",u"symbol",b"symbol"]) -> None: ...

class FundamentalsCashflow(Message):
    DESCRIPTOR: Descriptor = ...
    class DataEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    SYMBOL_FIELD_NUMBER: int
    PUB_DATE_FIELD_NUMBER: int
    RPT_DATE_FIELD_NUMBER: int
    DATA_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    @property
    def pub_date(self) -> Timestamp:
        """发布日期
        在指定时间段[开始时间,结束时间]内的最新发布日期,
        若数据类型选择合并原始(data_type=101)，则返回原始发布的发布日期
        若数据类型选择合并调整(data_type=102)，则返回调整后最新发布日期
        """
        pass
    @property
    def rpt_date(self) -> Timestamp:
        """报告截止日期，财报统计的最后一天"""
        pass
    @property
    def data(self) -> ScalarMap[Text, Text]:
        """相应指定查询 fields字段的值. 字典key值请参考 现金流量表"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        pub_date : Optional[Timestamp] = ...,
        rpt_date : Optional[Timestamp] = ...,
        data : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"pub_date",b"pub_date",u"rpt_date",b"rpt_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"data",b"data",u"pub_date",b"pub_date",u"rpt_date",b"rpt_date",u"symbol",b"symbol"]) -> None: ...

class GetFundamentalsCashflowRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[FundamentalsCashflow]:
        """指定股票在指定时间范围内的现金流量表数据列表"""
        pass
    def __init__(self,
        *,
        data : Optional[Iterable[FundamentalsCashflow]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetFundamentalsCashflowPtReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    RPT_TYPE_FIELD_NUMBER: int
    DATA_TYPE_FIELD_NUMBER: int
    DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """股票代码"""
        pass
    rpt_type: int = ...
    """报表类型, 默认为不限
    1-一季度报
    2-二季度报
    3-三季度报
    4-四季度报
    6-中报
    9-前三季报
    12-年报
    """

    data_type: int = ...
    """数据类型; 在发布原始财务报告以后，上市公司可能会对数据进行修正, 默认为不限
    101 (合并原始)
    102 (合并调整)
    201 (母公司原始)
    202 (母公司调整)
    """

    date: Text = ...
    """查询日期, 格式为: YYYY-MM-DD"""

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]:
        """返回字段"""
        pass
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        rpt_type : int = ...,
        data_type : int = ...,
        date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data_type",b"data_type",u"date",b"date",u"fields",b"fields",u"rpt_type",b"rpt_type",u"symbols",b"symbols"]) -> None: ...

class GetFundamentalsCashflowPtRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[FundamentalsCashflow]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[FundamentalsCashflow]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetFundamentalsIncomeReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    RPT_TYPE_FIELD_NUMBER: int
    DATA_TYPE_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码, 必填"""

    rpt_type: int = ...
    """报表类型, 默认为不限
    1-一季度报
    2-二季度报
    3-三季度报
    4-四季度报
    6-中报
    9-前三季报
    12-年报
    """

    data_type: int = ...
    """数据类型; 在发布原始财务报告以后，上市公司可能会对数据进行修正, 默认为不限
    101 (合并原始)
    102 (合并调整)
    201 (母公司原始)
    202 (母公司调整)
    """

    start_date: Text = ...
    """开始时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    end_date: Text = ...
    """结束时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]:
        """返回字段"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        rpt_type : int = ...,
        data_type : int = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data_type",b"data_type",u"end_date",b"end_date",u"fields",b"fields",u"rpt_type",b"rpt_type",u"start_date",b"start_date",u"symbol",b"symbol"]) -> None: ...

class FundamentalsIncome(Message):
    DESCRIPTOR: Descriptor = ...
    class DataEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    SYMBOL_FIELD_NUMBER: int
    PUB_DATE_FIELD_NUMBER: int
    RPT_DATE_FIELD_NUMBER: int
    DATA_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    @property
    def pub_date(self) -> Timestamp:
        """发布日期
        在指定时间段[开始时间,结束时间]内的最新发布日期,
        若数据类型选择合并原始(data_type=101)，则返回原始发布的发布日期
        若数据类型选择合并调整(data_type=102)，则返回调整后最新发布日期
        """
        pass
    @property
    def rpt_date(self) -> Timestamp:
        """报告截止日期，财报统计的最后一天"""
        pass
    @property
    def data(self) -> ScalarMap[Text, Text]:
        """相应指定查询 fields字段的值. 字典key值请参考 现金流量表"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        pub_date : Optional[Timestamp] = ...,
        rpt_date : Optional[Timestamp] = ...,
        data : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"pub_date",b"pub_date",u"rpt_date",b"rpt_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"data",b"data",u"pub_date",b"pub_date",u"rpt_date",b"rpt_date",u"symbol",b"symbol"]) -> None: ...

class GetFundamentalsIncomeRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[FundamentalsIncome]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[FundamentalsIncome]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetFundamentalsIncomePtReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    RPT_TYPE_FIELD_NUMBER: int
    DATA_TYPE_FIELD_NUMBER: int
    DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """股票代码"""
        pass
    rpt_type: int = ...
    """报表类型, 默认为不限
    1-一季度报
    2-二季度报
    3-三季度报
    4-四季度报
    6-中报
    9-前三季报
    12-年报
    """

    data_type: int = ...
    """数据类型; 在发布原始财务报告以后，上市公司可能会对数据进行修正, 默认为不限
    101 (合并原始)
    102 (合并调整)
    201 (母公司原始)
    202 (母公司调整)
    """

    date: Text = ...
    """查询日期, 格式为: YYYY-MM-DD"""

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]:
        """返回字段"""
        pass
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        rpt_type : int = ...,
        data_type : int = ...,
        date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data_type",b"data_type",u"date",b"date",u"fields",b"fields",u"rpt_type",b"rpt_type",u"symbols",b"symbols"]) -> None: ...

class GetFundamentalsIncomePtRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[FundamentalsIncome]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[FundamentalsIncome]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetFinancePrimeReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    RPT_TYPE_FIELD_NUMBER: int
    DATA_TYPE_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码, 必填, 只能填一个股票标的"""

    rpt_type: int = ...
    """报表类型, 默认为不限
    1-一季度报
    6-中报
    9-前三季报
    12-年报
    """

    data_type: int = ...
    """数据类型; 在发布原始财务报告以后，上市公司可能会对数据进行修正,
    默认返回当期合并调整，如果没有调整返回合并原始
    101 (合并原始)
    102 (合并调整)
    """

    start_date: Text = ...
    """开始时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    end_date: Text = ...
    """结束时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]:
        """返回字段"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        rpt_type : int = ...,
        data_type : int = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data_type",b"data_type",u"end_date",b"end_date",u"fields",b"fields",u"rpt_type",b"rpt_type",u"start_date",b"start_date",u"symbol",b"symbol"]) -> None: ...

class FinancePrime(Message):
    DESCRIPTOR: Descriptor = ...
    class DataEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    SYMBOL_FIELD_NUMBER: int
    PUB_DATE_FIELD_NUMBER: int
    RPT_DATE_FIELD_NUMBER: int
    RPT_TYPE_FIELD_NUMBER: int
    DATA_TYPE_FIELD_NUMBER: int
    DATA_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    @property
    def pub_date(self) -> Timestamp:
        """发布日期
        在指定时间段[开始时间,结束时间]内的最新发布日期,
        若数据类型选择合并原始(data_type=101)，则返回原始发布的发布日期
        若数据类型选择合并调整(data_type=102)，则返回调整后最新发布日期
        """
        pass
    @property
    def rpt_date(self) -> Timestamp:
        """在指定时间段[开始时间,结束时间]内的报告截止日期，
        报告截止日期，财报统计的最后一天
        """
        pass
    rpt_type: int = ...
    """报表类型"""

    data_type: int = ...
    """数据类型"""

    @property
    def data(self) -> ScalarMap[Text, Text]:
        """相应指定查询 fields字段的值. 字典key值请参考 财务主要指标"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        pub_date : Optional[Timestamp] = ...,
        rpt_date : Optional[Timestamp] = ...,
        rpt_type : int = ...,
        data_type : int = ...,
        data : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"pub_date",b"pub_date",u"rpt_date",b"rpt_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"data",b"data",u"data_type",b"data_type",u"pub_date",b"pub_date",u"rpt_date",b"rpt_date",u"rpt_type",b"rpt_type",u"symbol",b"symbol"]) -> None: ...

class GetFinancePrimeRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[FinancePrime]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[FinancePrime]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetFinancePrimePtReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    RPT_TYPE_FIELD_NUMBER: int
    DATA_TYPE_FIELD_NUMBER: int
    DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """股票代码, 必填, 可输入多个"""
        pass
    rpt_type: int = ...
    """报表类型, 默认为不限
    1-一季度报
    6-中报
    9-前三季报
    12-年报
    """

    data_type: int = ...
    """数据类型; 在发布原始财务报告以后，上市公司可能会对数据进行修正,
    默认返回当期合并调整，如果没有调整返回合并原始
    101 (合并原始)
    102 (合并调整)
    """

    date: Text = ...
    """查询日期, 格式为: YYYY-MM-DD, 默认表示最新时间"""

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]:
        """返回字段"""
        pass
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        rpt_type : int = ...,
        data_type : int = ...,
        date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data_type",b"data_type",u"date",b"date",u"fields",b"fields",u"rpt_type",b"rpt_type",u"symbols",b"symbols"]) -> None: ...

class GetFinancePrimePtRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[FinancePrime]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[FinancePrime]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetFinanceDerivReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    RPT_TYPE_FIELD_NUMBER: int
    DATA_TYPE_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码, 必填, 只能填一个股票标的"""

    rpt_type: int = ...
    """报表类型, 默认为不限
    1-一季度报
    6-中报
    9-前三季报
    12-年报
    """

    data_type: int = ...
    """数据类型; 在发布原始财务报告以后，上市公司可能会对数据进行修正,
    默认返回当期合并调整，如果没有调整返回合并原始
    101 (合并原始)
    102 (合并调整)
    """

    start_date: Text = ...
    """开始时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    end_date: Text = ...
    """结束时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]:
        """返回字段"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        rpt_type : int = ...,
        data_type : int = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data_type",b"data_type",u"end_date",b"end_date",u"fields",b"fields",u"rpt_type",b"rpt_type",u"start_date",b"start_date",u"symbol",b"symbol"]) -> None: ...

class FinanceDeriv(Message):
    DESCRIPTOR: Descriptor = ...
    class DataEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    SYMBOL_FIELD_NUMBER: int
    PUB_DATE_FIELD_NUMBER: int
    RPT_DATE_FIELD_NUMBER: int
    RPT_TYPE_FIELD_NUMBER: int
    DATA_TYPE_FIELD_NUMBER: int
    DATA_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    @property
    def pub_date(self) -> Timestamp:
        """发布日期
        在指定时间段[开始时间,结束时间]内的最新发布日期,
        若数据类型选择合并原始(data_type=101)，则返回原始发布的发布日期
        若数据类型选择合并调整(data_type=102)，则返回调整后最新发布日期
        """
        pass
    @property
    def rpt_date(self) -> Timestamp:
        """在指定时间段[开始时间,结束时间]内的报告截止日期，
        报告截止日期，财报统计的最后一天
        """
        pass
    rpt_type: int = ...
    """报表类型"""

    data_type: int = ...
    """数据类型"""

    @property
    def data(self) -> ScalarMap[Text, Text]:
        """相应指定查询 fields字段的值. 字典key值请参考 财务衍生指标"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        pub_date : Optional[Timestamp] = ...,
        rpt_date : Optional[Timestamp] = ...,
        rpt_type : int = ...,
        data_type : int = ...,
        data : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"pub_date",b"pub_date",u"rpt_date",b"rpt_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"data",b"data",u"data_type",b"data_type",u"pub_date",b"pub_date",u"rpt_date",b"rpt_date",u"rpt_type",b"rpt_type",u"symbol",b"symbol"]) -> None: ...

class GetFinanceDerivRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[FinanceDeriv]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[FinanceDeriv]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetFinanceDerivPtReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    RPT_TYPE_FIELD_NUMBER: int
    DATA_TYPE_FIELD_NUMBER: int
    DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """股票代码, 必填, 可输入多个"""
        pass
    rpt_type: int = ...
    """报表类型, 默认为不限
    1-一季度报
    6-中报
    9-前三季报
    12-年报
    """

    data_type: int = ...
    """数据类型; 在发布原始财务报告以后，上市公司可能会对数据进行修正,
    默认返回当期合并调整，如果没有调整返回合并原始
    101 (合并原始)
    102 (合并调整)
    """

    date: Text = ...
    """查询日期, 格式为: YYYY-MM-DD, 默认表示最新时间"""

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]:
        """返回字段"""
        pass
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        rpt_type : int = ...,
        data_type : int = ...,
        date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data_type",b"data_type",u"date",b"date",u"fields",b"fields",u"rpt_type",b"rpt_type",u"symbols",b"symbols"]) -> None: ...

class GetFinanceDerivPtRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[FinanceDeriv]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[FinanceDeriv]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetDailyValuationReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码, 必填, 只能填一个股票标的"""

    start_date: Text = ...
    """开始时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    end_date: Text = ...
    """结束时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]:
        """返回字段"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"end_date",b"end_date",u"fields",b"fields",u"start_date",b"start_date",u"symbol",b"symbol"]) -> None: ...

class DailyValuation(Message):
    DESCRIPTOR: Descriptor = ...
    class DataEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    SYMBOL_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    DATA_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    @property
    def trade_date(self) -> Timestamp:
        """交易日期"""
        pass
    @property
    def data(self) -> ScalarMap[Text, Text]:
        """相应指定查询 fields字段的值. 字典key值请参考 交易衍生指标-估值类"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        trade_date : Optional[Timestamp] = ...,
        data : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"trade_date",b"trade_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"data",b"data",u"symbol",b"symbol",u"trade_date",b"trade_date"]) -> None: ...

class GetDailyValuationRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[DailyValuation]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[DailyValuation]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetDailyValuationPtReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """股票代码, 必填, 可输入多个"""
        pass
    trade_date: Text = ...
    """查询日期, 格式为: YYYY-MM-DD, 默认表示最新时间"""

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]: ...
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        trade_date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"fields",b"fields",u"symbols",b"symbols",u"trade_date",b"trade_date"]) -> None: ...

class GetDailyValuationPtRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[DailyValuation]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[DailyValuation]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetDailyMktvalueReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码, 必填, 只能填一个股票标的"""

    start_date: Text = ...
    """开始时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    end_date: Text = ...
    """结束时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]:
        """返回字段"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"end_date",b"end_date",u"fields",b"fields",u"start_date",b"start_date",u"symbol",b"symbol"]) -> None: ...

class DailyMktvalue(Message):
    DESCRIPTOR: Descriptor = ...
    class DataEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    SYMBOL_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    DATA_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    @property
    def trade_date(self) -> Timestamp:
        """交易日期"""
        pass
    @property
    def data(self) -> ScalarMap[Text, Text]:
        """相应指定查询 fields字段的值. 字典key值请参考 交易衍生指标-市值类"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        trade_date : Optional[Timestamp] = ...,
        data : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"trade_date",b"trade_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"data",b"data",u"symbol",b"symbol",u"trade_date",b"trade_date"]) -> None: ...

class GetDailyMktvalueRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[DailyMktvalue]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[DailyMktvalue]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetDailyMktvaluePtReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """股票代码, 必填, 可输入多个"""
        pass
    trade_date: Text = ...
    """查询日期, 格式为: YYYY-MM-DD, 默认表示最新时间"""

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]: ...
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        trade_date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"fields",b"fields",u"symbols",b"symbols",u"trade_date",b"trade_date"]) -> None: ...

class GetDailyMktvaluePtRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[DailyMktvalue]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[DailyMktvalue]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetDailyBasicReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码, 必填, 只能填一个股票标的"""

    start_date: Text = ...
    """开始时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    end_date: Text = ...
    """结束时间, 本地时间, 格式为: YYYY-MM-DD
    为空时, 表示当前日期
    """

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]:
        """返回字段"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"end_date",b"end_date",u"fields",b"fields",u"start_date",b"start_date",u"symbol",b"symbol"]) -> None: ...

class DailyBasic(Message):
    DESCRIPTOR: Descriptor = ...
    class DataEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    SYMBOL_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    DATA_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    @property
    def trade_date(self) -> Timestamp:
        """交易日期"""
        pass
    @property
    def data(self) -> ScalarMap[Text, Text]:
        """相应指定查询 fields字段的值. 字典key值请参考 交易衍生指标-基础类"""
        pass
    def __init__(self,
        *,
        symbol : Text = ...,
        trade_date : Optional[Timestamp] = ...,
        data : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"trade_date",b"trade_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"data",b"data",u"symbol",b"symbol",u"trade_date",b"trade_date"]) -> None: ...

class GetDailyBasicRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[DailyBasic]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[DailyBasic]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetDailyBasicPtReq(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """股票代码, 必填, 可输入多个"""
        pass
    trade_date: Text = ...
    """查询日期, 格式为: YYYY-MM-DD, 默认表示最新时间"""

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]: ...
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        trade_date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"fields",b"fields",u"symbols",b"symbols",u"trade_date",b"trade_date"]) -> None: ...

class GetDailyBasicPtRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[DailyBasic]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[DailyBasic]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class AbnorChangeStocks(Message):
    """龙虎榜股票数据"""
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    CHANGE_TYPE_FIELD_NUMBER: int
    CHANGE_TYPE_NAME_FIELD_NUMBER: int
    ABNOR_START_DATE_FIELD_NUMBER: int
    ABNOR_END_DATE_FIELD_NUMBER: int
    CLOSE_FIELD_NUMBER: int
    CUM_VOLUME_FIELD_NUMBER: int
    CUM_AMOUNT_FIELD_NUMBER: int
    PRC_CHANGE_RATE_FIELD_NUMBER: int
    AVG_TURN_RATE_FIELD_NUMBER: int
    STAT_VALUE_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    @property
    def trade_date(self) -> Timestamp:
        """交易日期"""
        pass
    change_type: Text = ...
    """异动类型"""

    change_type_name: Text = ...
    """异动类型说明"""

    @property
    def abnor_start_date(self) -> Timestamp:
        """异动开始日期"""
        pass
    @property
    def abnor_end_date(self) -> Timestamp:
        """异动结束日期"""
        pass
    close: float = ...
    """收盘价"""

    cum_volume: int = ...
    """累计成交量"""

    cum_amount: float = ...
    """累计成交额"""

    prc_change_rate: float = ...
    """涨跌幅 %"""

    avg_turn_rate: float = ...
    """日均换手率比值"""

    stat_value: float = ...
    """统计值"""

    def __init__(self,
        *,
        symbol : Text = ...,
        trade_date : Optional[Timestamp] = ...,
        change_type : Text = ...,
        change_type_name : Text = ...,
        abnor_start_date : Optional[Timestamp] = ...,
        abnor_end_date : Optional[Timestamp] = ...,
        close : float = ...,
        cum_volume : int = ...,
        cum_amount : float = ...,
        prc_change_rate : float = ...,
        avg_turn_rate : float = ...,
        stat_value : float = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"abnor_end_date",b"abnor_end_date",u"abnor_start_date",b"abnor_start_date",u"trade_date",b"trade_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"abnor_end_date",b"abnor_end_date",u"abnor_start_date",b"abnor_start_date",u"avg_turn_rate",b"avg_turn_rate",u"change_type",b"change_type",u"change_type_name",b"change_type_name",u"close",b"close",u"cum_amount",b"cum_amount",u"cum_volume",b"cum_volume",u"prc_change_rate",b"prc_change_rate",u"stat_value",b"stat_value",u"symbol",b"symbol",u"trade_date",b"trade_date"]) -> None: ...

class GetAbnorChangeStocksReq(Message):
    """查询龙虎榜股票数据"""
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    CHANGE_TYPES_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """股票代码, 必填, 可输入多个"""
        pass
    @property
    def change_types(self) -> RepeatedScalarFieldContainer[Text]:
        """异动类型"""
        pass
    trade_date: Text = ...
    """交易日期, %Y-%m-%d 格式"""

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]:
        """返回字段"""
        pass
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        change_types : Optional[Iterable[Text]] = ...,
        trade_date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"change_types",b"change_types",u"fields",b"fields",u"symbols",b"symbols",u"trade_date",b"trade_date"]) -> None: ...

class GetAbnorChangeStocksRsp(Message):
    """查询龙虎榜股票数据"""
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[AbnorChangeStocks]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[AbnorChangeStocks]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class AbnorChangeDetail(Message):
    """龙虎榜营业部数据"""
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    CHANGE_TYPE_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    SIDE_FIELD_NUMBER: int
    SALES_DEPT_FIELD_NUMBER: int
    BUY_AMOUNT_FIELD_NUMBER: int
    SELL_AMOUNT_FIELD_NUMBER: int
    RANK_FIELD_NUMBER: int
    STAT_DAYS_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    change_type: Text = ...
    """异动类型"""

    @property
    def trade_date(self) -> Timestamp:
        """交易日期"""
        pass
    side: int = ...
    """交易方向"""

    sales_dept: Text = ...
    """营业部名称"""

    buy_amount: float = ...
    """买入金额"""

    sell_amount: float = ...
    """卖出金额"""

    rank: int = ...
    """排名"""

    stat_days: Text = ...
    """统计天数"""

    def __init__(self,
        *,
        symbol : Text = ...,
        change_type : Text = ...,
        trade_date : Optional[Timestamp] = ...,
        side : int = ...,
        sales_dept : Text = ...,
        buy_amount : float = ...,
        sell_amount : float = ...,
        rank : int = ...,
        stat_days : Text = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"trade_date",b"trade_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"buy_amount",b"buy_amount",u"change_type",b"change_type",u"rank",b"rank",u"sales_dept",b"sales_dept",u"sell_amount",b"sell_amount",u"side",b"side",u"stat_days",b"stat_days",u"symbol",b"symbol",u"trade_date",b"trade_date"]) -> None: ...

class GetAbnorChangeDetailReq(Message):
    """查询龙虎榜营业部数据"""
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    CHANGE_TYPES_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    FIELDS_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """股票代码, 必填, 可输入多个"""
        pass
    @property
    def change_types(self) -> RepeatedScalarFieldContainer[Text]:
        """异动类型"""
        pass
    trade_date: Text = ...
    """交易日期, %Y-%m-%d 格式"""

    @property
    def fields(self) -> RepeatedScalarFieldContainer[Text]:
        """返回字段"""
        pass
    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        change_types : Optional[Iterable[Text]] = ...,
        trade_date : Text = ...,
        fields : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"change_types",b"change_types",u"fields",b"fields",u"symbols",b"symbols",u"trade_date",b"trade_date"]) -> None: ...

class GetAbnorChangeDetailRsp(Message):
    """查询龙虎榜营业部数据"""
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[AbnorChangeDetail]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[AbnorChangeDetail]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class QuotaShszhkInfos(Message):
    """沪深港通额度数据"""
    DESCRIPTOR: Descriptor = ...
    TYPE_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    DAILY_QUOTA_FIELD_NUMBER: int
    DAY_BALANCE_FIELD_NUMBER: int
    DAY_USED_FIELD_NUMBER: int
    DAY_USED_RATE_FIELD_NUMBER: int
    DAY_BUY_AMOUNT_FIELD_NUMBER: int
    DAY_BUY_VOLUME_FIELD_NUMBER: int
    DAY_SELL_AMOUNT_FIELD_NUMBER: int
    DAY_SELL_VOLUME_FIELD_NUMBER: int
    DAY_NET_AMOUNT_FIELD_NUMBER: int
    SETTLE_EXRATE_BUY_FIELD_NUMBER: int
    SETTLE_EXRATE_SELL_FIELD_NUMBER: int
    type: Text = ...
    """类型, 可输入多个, 空为全部"""

    @property
    def trade_date(self) -> Timestamp:
        """最新交易日期"""
        pass
    daily_quota: float = ...
    """每日额度上限(亿元)"""

    day_balance: float = ...
    """当日余额(亿元)"""

    day_used: float = ...
    """当日使用额度(亿元)"""

    day_used_rate: float = ...
    """当日额度使用率(%)"""

    day_buy_amount: float = ...
    """当日买入成交金额(亿元)"""

    day_buy_volume: float = ...
    """当日买入成交笔数(笔)"""

    day_sell_amount: float = ...
    """当日卖出成交金额(亿元)"""

    day_sell_volume: float = ...
    """当日卖出成交笔数(笔)"""

    day_net_amount: float = ...
    """当日买卖成交净额(亿元)"""

    settle_exrate_buy: float = ...
    """沪深港通结算汇率(买入)"""

    settle_exrate_sell: float = ...
    """沪深港通结算汇率(卖出)"""

    def __init__(self,
        *,
        type : Text = ...,
        trade_date : Optional[Timestamp] = ...,
        daily_quota : float = ...,
        day_balance : float = ...,
        day_used : float = ...,
        day_used_rate : float = ...,
        day_buy_amount : float = ...,
        day_buy_volume : float = ...,
        day_sell_amount : float = ...,
        day_sell_volume : float = ...,
        day_net_amount : float = ...,
        settle_exrate_buy : float = ...,
        settle_exrate_sell : float = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"trade_date",b"trade_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"daily_quota",b"daily_quota",u"day_balance",b"day_balance",u"day_buy_amount",b"day_buy_amount",u"day_buy_volume",b"day_buy_volume",u"day_net_amount",b"day_net_amount",u"day_sell_amount",b"day_sell_amount",u"day_sell_volume",b"day_sell_volume",u"day_used",b"day_used",u"day_used_rate",b"day_used_rate",u"settle_exrate_buy",b"settle_exrate_buy",u"settle_exrate_sell",b"settle_exrate_sell",u"trade_date",b"trade_date",u"type",b"type"]) -> None: ...

class GetQuotaShszhkInfosReq(Message):
    """查询沪深港通额度数据"""
    DESCRIPTOR: Descriptor = ...
    TYPES_FIELD_NUMBER: int
    START_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    COUNT_FIELD_NUMBER: int
    @property
    def types(self) -> RepeatedScalarFieldContainer[Text]:
        """类型, 可输入多个, 空为全部"""
        pass
    start_date: Text = ...
    """开始日期, %Y-%m-%d 格式, 空表示最新交易日期"""

    end_date: Text = ...
    """结束日期, %Y-%m-%d 格式, 空表示最新交易日期"""

    count: int = ...
    """交易日数量, 数量(正整数)，不能与start_date同时使用，否则返回报错"""

    def __init__(self,
        *,
        types : Optional[Iterable[Text]] = ...,
        start_date : Text = ...,
        end_date : Text = ...,
        count : int = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"count",b"count",u"end_date",b"end_date",u"start_date",b"start_date",u"types",b"types"]) -> None: ...

class GetQuotaShszhkInfosRsp(Message):
    """查询沪深港通额度数据"""
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[QuotaShszhkInfos]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[QuotaShszhkInfos]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class HkInstHoldingDetailInfo(Message):
    """沪深港通标的港股机构持股明细数据"""
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    SEC_NAME_FIELD_NUMBER: int
    PARTICIPANT_NAME_FIELD_NUMBER: int
    SHARE_HOLDING_FIELD_NUMBER: int
    SHARES_RATE_FIELD_NUMBER: int
    symbol: Text = ...
    """证券代码"""

    @property
    def trade_date(self) -> Timestamp:
        """交易日"""
        pass
    sec_name: Text = ...
    """证券简称"""

    participant_name: Text = ...
    """参与者名称"""

    share_holding: int = ...
    """持股量(股)"""

    shares_rate: float = ...
    """占已发行股份(%)"""

    def __init__(self,
        *,
        symbol : Text = ...,
        trade_date : Optional[Timestamp] = ...,
        sec_name : Text = ...,
        participant_name : Text = ...,
        share_holding : int = ...,
        shares_rate : float = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"trade_date",b"trade_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"participant_name",b"participant_name",u"sec_name",b"sec_name",u"share_holding",b"share_holding",u"shares_rate",b"shares_rate",u"symbol",b"symbol",u"trade_date",b"trade_date"]) -> None: ...

class GetHkInstHoldingDetailInfoReq(Message):
    """查询沪深港通标的港股机构持股明细数据"""
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """股票代码, 可输入多个, 空表示所有标的"""
        pass
    trade_date: Text = ...
    """交易日期, %Y-%m-%d 格式, 空表示最近交易日期"""

    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        trade_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"symbols",b"symbols",u"trade_date",b"trade_date"]) -> None: ...

class GetHkInstHoldingDetailInfoRsp(Message):
    """查询沪深港通标的港股机构持股明细数据"""
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[HkInstHoldingDetailInfo]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[HkInstHoldingDetailInfo]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class HkInstHoldingInfo(Message):
    """沪深港通标的港股机构持股数据"""
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    SEC_NAME_FIELD_NUMBER: int
    CUM_SHARE_HOLDING_FIELD_NUMBER: int
    CUM_SHARES_RATE_FIELD_NUMBER: int
    symbol: Text = ...
    """证券代码"""

    @property
    def trade_date(self) -> Timestamp:
        """交易日"""
        pass
    sec_name: Text = ...
    """证券简称"""

    cum_share_holding: int = ...
    """累计持股量(股)"""

    cum_shares_rate: float = ...
    """累计占已发行股份(%)"""

    def __init__(self,
        *,
        symbol : Text = ...,
        trade_date : Optional[Timestamp] = ...,
        sec_name : Text = ...,
        cum_share_holding : int = ...,
        cum_shares_rate : float = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"trade_date",b"trade_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"cum_share_holding",b"cum_share_holding",u"cum_shares_rate",b"cum_shares_rate",u"sec_name",b"sec_name",u"symbol",b"symbol",u"trade_date",b"trade_date"]) -> None: ...

class GetHkInstHoldingInfoReq(Message):
    """查询沪深港通标的港股机构持股数据"""
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """股票代码, 可输入多个, 空表示所有标的"""
        pass
    trade_date: Text = ...
    """交易日期, %Y-%m-%d 格式, 空表示最近交易日期"""

    def __init__(self,
        *,
        symbols : Optional[Iterable[Text]] = ...,
        trade_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"symbols",b"symbols",u"trade_date",b"trade_date"]) -> None: ...

class GetHkInstHoldingInfoRsp(Message):
    """查询沪深港通标的港股机构持股数据"""
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[HkInstHoldingInfo]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[HkInstHoldingInfo]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class ActiveStockTop10ShszhkInfo(Message):
    """沪深港通十大活跃成交股数据"""
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    RANK_FIELD_NUMBER: int
    TYPE_FIELD_NUMBER: int
    SEC_NAME_FIELD_NUMBER: int
    CLOSE_FIELD_NUMBER: int
    PRICE_RANGE_FIELD_NUMBER: int
    BUY_AMOUNT_FIELD_NUMBER: int
    SELL_AMOUNT_FIELD_NUMBER: int
    TOTAL_AMOUNT_FIELD_NUMBER: int
    STOCK_TOTAL_AMOUNT_FIELD_NUMBER: int
    TRANSACTION_RATE_FIELD_NUMBER: int
    MARKET_VALUE_TOTAL_FIELD_NUMBER: int
    CUM_NUMBER_OF_TIMES_FIELD_NUMBER: int
    CURRENCY_FIELD_NUMBER: int
    symbol: Text = ...
    """代码"""

    @property
    def trade_date(self) -> Timestamp:
        """交易日"""
        pass
    rank: int = ...
    """排名"""

    type: Text = ...
    """类型"""

    sec_name: Text = ...
    """名称"""

    close: float = ...
    """收盘价格(元)"""

    price_range: float = ...
    """涨跌幅(%)"""

    buy_amount: float = ...
    """买入金额(万元)"""

    sell_amount: float = ...
    """卖出金额(万元)"""

    total_amount: float = ...
    """成交金额(万元)"""

    stock_total_amount: float = ...
    """股票成交金额(万元)"""

    transaction_rate: float = ...
    """成交占比(%)"""

    market_value_total: float = ...
    """总市值(亿元)"""

    cum_number_of_times: int = ...
    """累计上榜次数"""

    currency: Text = ...
    """币种"""

    def __init__(self,
        *,
        symbol : Text = ...,
        trade_date : Optional[Timestamp] = ...,
        rank : int = ...,
        type : Text = ...,
        sec_name : Text = ...,
        close : float = ...,
        price_range : float = ...,
        buy_amount : float = ...,
        sell_amount : float = ...,
        total_amount : float = ...,
        stock_total_amount : float = ...,
        transaction_rate : float = ...,
        market_value_total : float = ...,
        cum_number_of_times : int = ...,
        currency : Text = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"trade_date",b"trade_date"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"buy_amount",b"buy_amount",u"close",b"close",u"cum_number_of_times",b"cum_number_of_times",u"currency",b"currency",u"market_value_total",b"market_value_total",u"price_range",b"price_range",u"rank",b"rank",u"sec_name",b"sec_name",u"sell_amount",b"sell_amount",u"stock_total_amount",b"stock_total_amount",u"symbol",b"symbol",u"total_amount",b"total_amount",u"trade_date",b"trade_date",u"transaction_rate",b"transaction_rate",u"type",b"type"]) -> None: ...

class GetActiveStockTop10ShszhkInfoReq(Message):
    """查询沪深港通十大活跃成交股数据"""
    DESCRIPTOR: Descriptor = ...
    TYPES_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    @property
    def types(self) -> RepeatedScalarFieldContainer[Text]:
        """类型, 可输入多个, 空表示所有"""
        pass
    trade_date: Text = ...
    """交易日期, %Y-%m-%d 格式, 空表示最近交易日期"""

    def __init__(self,
        *,
        types : Optional[Iterable[Text]] = ...,
        trade_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"trade_date",b"trade_date",u"types",b"types"]) -> None: ...

class GetActiveStockTop10ShszhkInfoRsp(Message):
    """查询沪深港通十大活跃成交股数据"""
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[ActiveStockTop10ShszhkInfo]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[ActiveStockTop10ShszhkInfo]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetMoneyFlowReq(Message):
    """查询股票交易资金流向
    https://gnuixbiqmy.feishu.cn/wiki/VoQywN33eiPdvHkUGr1cTKnGnlv#share-OzjtdFjG6o5vXlxWCIYcgZpbngr
    """
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    symbols: Text = ...
    """股票代码;多个股票代码必须用英文逗号分割"""

    trade_date: Text = ...
    """交易日期,%Y-%m-%d 格式,为空时表示最新交易日"""

    def __init__(self,
        *,
        symbols : Text = ...,
        trade_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"symbols",b"symbols",u"trade_date",b"trade_date"]) -> None: ...

class MoneyFlowRecord(Message):
    """资金流向记录"""
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    TRADE_DATE_FIELD_NUMBER: int
    MAIN_IN_FIELD_NUMBER: int
    MAIN_OUT_FIELD_NUMBER: int
    MAIN_NET_IN_FIELD_NUMBER: int
    MAIN_NET_IN_RATE_FIELD_NUMBER: int
    SUPER_IN_FIELD_NUMBER: int
    SUPER_OUT_FIELD_NUMBER: int
    SUPER_NET_IN_FIELD_NUMBER: int
    SUPER_NET_IN_RATE_FIELD_NUMBER: int
    LARGE_IN_FIELD_NUMBER: int
    LARGE_OUT_FIELD_NUMBER: int
    LARGE_NET_IN_FIELD_NUMBER: int
    LARGE_NET_IN_RATE_FIELD_NUMBER: int
    MID_IN_FIELD_NUMBER: int
    MID_OUT_FIELD_NUMBER: int
    MID_NET_IN_FIELD_NUMBER: int
    MID_NET_IN_RATE_FIELD_NUMBER: int
    SMALL_IN_FIELD_NUMBER: int
    SMALL_OUT_FIELD_NUMBER: int
    SMALL_NET_IN_FIELD_NUMBER: int
    SMALL_NET_IN_RATE_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    trade_date: Text = ...
    """交易日期"""

    main_in: float = ...
    """主力流入资金"""

    main_out: float = ...
    """主力流出资金"""

    main_net_in: float = ...
    """主力净流入资金"""

    main_net_in_rate: float = ...
    """主力资金净流入率"""

    super_in: float = ...
    """超大单流入资金"""

    super_out: float = ...
    """超大单流出资金"""

    super_net_in: float = ...
    """超大单净流入资金"""

    super_net_in_rate: float = ...
    """超大单净流入率"""

    large_in: float = ...
    """大单流入资金"""

    large_out: float = ...
    """大单流出资金"""

    large_net_in: float = ...
    """大单净流入资金"""

    large_net_in_rate: float = ...
    """大单净流入率"""

    mid_in: float = ...
    """中单流入资金"""

    mid_out: float = ...
    """中单流出资金"""

    mid_net_in: float = ...
    """中单净流入资金"""

    mid_net_in_rate: float = ...
    """中单净流入率"""

    small_in: float = ...
    """小单流入资金"""

    small_out: float = ...
    """小单流出资金"""

    small_net_in: float = ...
    """小单净流入资金"""

    small_net_in_rate: float = ...
    """小单净流入率"""

    def __init__(self,
        *,
        symbol : Text = ...,
        trade_date : Text = ...,
        main_in : float = ...,
        main_out : float = ...,
        main_net_in : float = ...,
        main_net_in_rate : float = ...,
        super_in : float = ...,
        super_out : float = ...,
        super_net_in : float = ...,
        super_net_in_rate : float = ...,
        large_in : float = ...,
        large_out : float = ...,
        large_net_in : float = ...,
        large_net_in_rate : float = ...,
        mid_in : float = ...,
        mid_out : float = ...,
        mid_net_in : float = ...,
        mid_net_in_rate : float = ...,
        small_in : float = ...,
        small_out : float = ...,
        small_net_in : float = ...,
        small_net_in_rate : float = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"large_in",b"large_in",u"large_net_in",b"large_net_in",u"large_net_in_rate",b"large_net_in_rate",u"large_out",b"large_out",u"main_in",b"main_in",u"main_net_in",b"main_net_in",u"main_net_in_rate",b"main_net_in_rate",u"main_out",b"main_out",u"mid_in",b"mid_in",u"mid_net_in",b"mid_net_in",u"mid_net_in_rate",b"mid_net_in_rate",u"mid_out",b"mid_out",u"small_in",b"small_in",u"small_net_in",b"small_net_in",u"small_net_in_rate",b"small_net_in_rate",u"small_out",b"small_out",u"super_in",b"super_in",u"super_net_in",b"super_net_in",u"super_net_in_rate",b"super_net_in_rate",u"super_out",b"super_out",u"symbol",b"symbol",u"trade_date",b"trade_date"]) -> None: ...

class GetMoneyFlowRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[MoneyFlowRecord]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[MoneyFlowRecord]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetFinanceAuditReq(Message):
    """查询财务审计意见
    https://gnuixbiqmy.feishu.cn/wiki/VoQywN33eiPdvHkUGr1cTKnGnlv#share-JtftdwWeDoEcJax11p2cBLlRnUd
    """
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    DATE_FIELD_NUMBER: int
    RPT_DATE_FIELD_NUMBER: int
    symbols: Text = ...
    """股票代码;多个股票代码必须用英文逗号分割"""

    date: Text = ...
    """查询日期,%Y-%m-%d 格式,为空时表示最新日期"""

    rpt_date: Text = ...
    """报告截止日期，%Y-%m-%d 格式,为空时表示不限"""

    def __init__(self,
        *,
        symbols : Text = ...,
        date : Text = ...,
        rpt_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"date",b"date",u"rpt_date",b"rpt_date",u"symbols",b"symbols"]) -> None: ...

class FinanceAuditRecord(Message):
    """财务审计记录"""
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    PUB_DATE_FIELD_NUMBER: int
    FIRST_PUB_DATE_FIELD_NUMBER: int
    RPT_DATE_FIELD_NUMBER: int
    AUDIT_DATE_FIELD_NUMBER: int
    ACCT_STANDARD_FIELD_NUMBER: int
    ACCT_AGENCY_FIELD_NUMBER: int
    CPA_FIELD_NUMBER: int
    AUDIT_OPINION_FIELD_NUMBER: int
    AUDIT_OPINION_CODE_FIELD_NUMBER: int
    AUDIT_OPINION_TEXT_FIELD_NUMBER: int
    AUDIT_NO_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    pub_date: Text = ...
    """最新公告日期"""

    first_pub_date: Text = ...
    """首次公告日期"""

    rpt_date: Text = ...
    """报告日期"""

    audit_date: Text = ...
    """审计日期"""

    acct_standard: Text = ...
    """会计准则"""

    acct_agency: Text = ...
    """会计师事务所名称"""

    cpa: Text = ...
    """注册会计师"""

    audit_opinion: Text = ...
    """审计意见"""

    audit_opinion_code: Text = ...
    """审计意见类型代码"""

    audit_opinion_text: Text = ...
    """审计意见正文"""

    audit_no: Text = ...
    """审计文号"""

    def __init__(self,
        *,
        symbol : Text = ...,
        pub_date : Text = ...,
        first_pub_date : Text = ...,
        rpt_date : Text = ...,
        audit_date : Text = ...,
        acct_standard : Text = ...,
        acct_agency : Text = ...,
        cpa : Text = ...,
        audit_opinion : Text = ...,
        audit_opinion_code : Text = ...,
        audit_opinion_text : Text = ...,
        audit_no : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"acct_agency",b"acct_agency",u"acct_standard",b"acct_standard",u"audit_date",b"audit_date",u"audit_no",b"audit_no",u"audit_opinion",b"audit_opinion",u"audit_opinion_code",b"audit_opinion_code",u"audit_opinion_text",b"audit_opinion_text",u"cpa",b"cpa",u"first_pub_date",b"first_pub_date",u"pub_date",b"pub_date",u"rpt_date",b"rpt_date",u"symbol",b"symbol"]) -> None: ...

class GetFinanceAuditRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[FinanceAuditRecord]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[FinanceAuditRecord]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...

class GetFinanceForecastReq(Message):
    """查询公司业绩预告
    https://gnuixbiqmy.feishu.cn/wiki/VoQywN33eiPdvHkUGr1cTKnGnlv#share-B5YZdxscVoRsirx7Pk5cuceZnWb
    """
    DESCRIPTOR: Descriptor = ...
    SYMBOLS_FIELD_NUMBER: int
    RPT_TYPE_FIELD_NUMBER: int
    DATE_FIELD_NUMBER: int
    symbols: Text = ...
    """股票代码;多个股票代码必须用英文逗号分割"""

    rpt_type: Text = ...
    """预测报表类型;为空表示不限"""

    date: Text = ...
    """查询日期,%Y-%m-%d 格式,为空时表示最新日期"""

    def __init__(self,
        *,
        symbols : Text = ...,
        rpt_type : Text = ...,
        date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"date",b"date",u"rpt_type",b"rpt_type",u"symbols",b"symbols"]) -> None: ...

class FinanceForecastRecord(Message):
    """上市公司业绩报告记录"""
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    PUB_DATE_FIELD_NUMBER: int
    BEGIN_DATE_FIELD_NUMBER: int
    END_DATE_FIELD_NUMBER: int
    RPT_TYPE_FIELD_NUMBER: int
    FCST_TYPE_FIELD_NUMBER: int
    FCST_FIELD_FIELD_NUMBER: int
    FCST_AMOUNT_MAX_FIELD_NUMBER: int
    FCST_AMOUNT_MIN_FIELD_NUMBER: int
    AMOUNT_LY_FIELD_NUMBER: int
    INCREASE_PCT_MAX_FIELD_NUMBER: int
    INCREASE_PCT_MIN_FIELD_NUMBER: int
    FCST_CONTENT_FIELD_NUMBER: int
    ANN_FCST_AMOUNT_UNIT_FIELD_NUMBER: int
    ANN_FCST_AMOUNT_MAX_FIELD_NUMBER: int
    ANN_FCST_AMOUNT_MIN_FIELD_NUMBER: int
    ANN_AMOUNT_LY_FIELD_NUMBER: int
    ANN_INCREASE_MAX_FIELD_NUMBER: int
    ANN_INCREASE_MIN_FIELD_NUMBER: int
    IS_CHANGE_FIELD_NUMBER: int
    CHANGE_REASON_FIELD_NUMBER: int
    symbol: Text = ...
    """股票代码"""

    pub_date: Text = ...
    """公告日期"""

    begin_date: Text = ...
    """预测起始日"""

    end_date: Text = ...
    """预测截止日"""

    rpt_type: Text = ...
    """预测报表类型"""

    fcst_type: Text = ...
    """业绩预告类型"""

    fcst_field: Text = ...
    """预测财务指标"""

    fcst_amount_max: float = ...
    """预测金额元(上限)"""

    fcst_amount_min: float = ...
    """预测金额元(下限)"""

    amount_ly: float = ...
    """上年同期元"""

    increase_pct_max: float = ...
    """增长幅度(上限)"""

    increase_pct_min: float = ...
    """增长幅度(下限)"""

    fcst_content: Text = ...
    """财务指标预告内容"""

    ann_fcst_amount_unit: Text = ...
    """公告预测金融单位"""

    ann_fcst_amount_max: float = ...
    """公告原始预测金额(上限)"""

    ann_fcst_amount_min: float = ...
    """公告原始预测金额(下限)"""

    ann_amount_ly: float = ...
    """上年原始同期"""

    ann_increase_max: float = ...
    """公告增长金额(上限)"""

    ann_increase_min: float = ...
    """公告增长金额(下限)"""

    is_change: bool = ...
    """是否变化"""

    change_reason: Text = ...
    """业绩变动原因说明"""

    def __init__(self,
        *,
        symbol : Text = ...,
        pub_date : Text = ...,
        begin_date : Text = ...,
        end_date : Text = ...,
        rpt_type : Text = ...,
        fcst_type : Text = ...,
        fcst_field : Text = ...,
        fcst_amount_max : float = ...,
        fcst_amount_min : float = ...,
        amount_ly : float = ...,
        increase_pct_max : float = ...,
        increase_pct_min : float = ...,
        fcst_content : Text = ...,
        ann_fcst_amount_unit : Text = ...,
        ann_fcst_amount_max : float = ...,
        ann_fcst_amount_min : float = ...,
        ann_amount_ly : float = ...,
        ann_increase_max : float = ...,
        ann_increase_min : float = ...,
        is_change : bool = ...,
        change_reason : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"amount_ly",b"amount_ly",u"ann_amount_ly",b"ann_amount_ly",u"ann_fcst_amount_max",b"ann_fcst_amount_max",u"ann_fcst_amount_min",b"ann_fcst_amount_min",u"ann_fcst_amount_unit",b"ann_fcst_amount_unit",u"ann_increase_max",b"ann_increase_max",u"ann_increase_min",b"ann_increase_min",u"begin_date",b"begin_date",u"change_reason",b"change_reason",u"end_date",b"end_date",u"fcst_amount_max",b"fcst_amount_max",u"fcst_amount_min",b"fcst_amount_min",u"fcst_content",b"fcst_content",u"fcst_field",b"fcst_field",u"fcst_type",b"fcst_type",u"increase_pct_max",b"increase_pct_max",u"increase_pct_min",b"increase_pct_min",u"is_change",b"is_change",u"pub_date",b"pub_date",u"rpt_type",b"rpt_type",u"symbol",b"symbol"]) -> None: ...

class GetFinanceForecastRsp(Message):
    DESCRIPTOR: Descriptor = ...
    DATA_FIELD_NUMBER: int
    @property
    def data(self) -> RepeatedCompositeFieldContainer[FinanceForecastRecord]: ...
    def __init__(self,
        *,
        data : Optional[Iterable[FinanceForecastRecord]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"data",b"data"]) -> None: ...
