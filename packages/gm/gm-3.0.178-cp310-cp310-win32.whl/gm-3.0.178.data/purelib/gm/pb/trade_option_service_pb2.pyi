"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from builtins import (
    bool,
    float,
    int,
)

from google.protobuf.descriptor import (
    Descriptor,
    FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedCompositeFieldContainer,
    ScalarMap,
)

from google.protobuf.message import (
    Message,
)

from typing import (
    Iterable,
    Mapping,
    Optional,
    Text,
)

from typing_extensions import (
    Literal,
)


DESCRIPTOR: FileDescriptor = ...

class OptionCombEntrustReq(Message):
    """package trade.api;

    option go_package = "myquant.cn/platform/core/api/trade;trade_api";

    import "google/api/annotations.proto";

    """
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    RID_FIELD_NUMBER: int
    OPTCOMB_CODE_FIELD_NUMBER: int
    FIRST_OPTION_CODE_FIELD_NUMBER: int
    FIRST_OPTHOLD_SIDE_FIELD_NUMBER: int
    FIRST_OPTHOLD_COVERED_FLAG_FIELD_NUMBER: int
    SECOND_OPTION_CODE_FIELD_NUMBER: int
    SECOND_OPTHOLD_SIDE_FIELD_NUMBER: int
    SECOND_OPTHOLD_COVERED_FLAG_FIELD_NUMBER: int
    VOLUME_FIELD_NUMBER: int
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    rid: Text = ...
    optcomb_code: Text = ...
    """组合策略编码"""

    first_option_code: Text = ...
    """第一腿期权合约编码"""

    first_opthold_side: int = ...
    """第一腿合约持仓方向(多/空)"""

    first_opthold_covered_flag: int = ...
    """第一腿合约持仓备兑标记"""

    second_option_code: Text = ...
    """第二腿期权合约编码"""

    second_opthold_side: int = ...
    """第二腿合约持仓方向(多/空)"""

    second_opthold_covered_flag: int = ...
    """第二腿合约持仓备兑标记"""

    volume: int = ...
    """委托数量"""

    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        rid : Text = ...,
        optcomb_code : Text = ...,
        first_option_code : Text = ...,
        first_opthold_side : int = ...,
        first_opthold_covered_flag : int = ...,
        second_option_code : Text = ...,
        second_opthold_side : int = ...,
        second_opthold_covered_flag : int = ...,
        volume : int = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"first_opthold_covered_flag",b"first_opthold_covered_flag",u"first_opthold_side",b"first_opthold_side",u"first_option_code",b"first_option_code",u"optcomb_code",b"optcomb_code",u"properties",b"properties",u"rid",b"rid",u"second_opthold_covered_flag",b"second_opthold_covered_flag",u"second_opthold_side",b"second_opthold_side",u"second_option_code",b"second_option_code",u"volume",b"volume"]) -> None: ...

class OptionCombEntrustRsp(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    RID_FIELD_NUMBER: int
    ERROR_CODE_FIELD_NUMBER: int
    ERROR_DESC_FIELD_NUMBER: int
    ORDER_ID_FIELD_NUMBER: int
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    rid: Text = ...
    error_code: int = ...
    """委托结果，0表示成功，非0为错误码"""

    error_desc: Text = ...
    """错误描述信息，error_code 非0时有效"""

    order_id: Text = ...
    """委托编号"""

    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        rid : Text = ...,
        error_code : int = ...,
        error_desc : Text = ...,
        order_id : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"error_code",b"error_code",u"error_desc",b"error_desc",u"order_id",b"order_id",u"properties",b"properties",u"rid",b"rid"]) -> None: ...

class OptionSepEntrustReq(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    RID_FIELD_NUMBER: int
    OPTCOMB_ID_FIELD_NUMBER: int
    VOLUME_FIELD_NUMBER: int
    OPTCOMB_CODE_FIELD_NUMBER: int
    FIRST_OPTION_CODE_FIELD_NUMBER: int
    FIRST_OPTHOLD_SIDE_FIELD_NUMBER: int
    FIRST_OPTHOLD_COVERED_FLAG_FIELD_NUMBER: int
    SECOND_OPTION_CODE_FIELD_NUMBER: int
    SECOND_OPTHOLD_SIDE_FIELD_NUMBER: int
    SECOND_OPTHOLD_COVERED_FLAG_FIELD_NUMBER: int
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    rid: Text = ...
    optcomb_id: Text = ...
    """组合编码"""

    volume: int = ...
    """委托数量"""

    optcomb_code: Text = ...
    """组合策略编码"""

    first_option_code: Text = ...
    """第一腿期权合约编码"""

    first_opthold_side: int = ...
    """第一腿合约持仓方向(多/空)"""

    first_opthold_covered_flag: int = ...
    """第一腿合约持仓备兑标记"""

    second_option_code: Text = ...
    """第二腿期权合约编码"""

    second_opthold_side: int = ...
    """第二腿合约持仓方向(多/空)"""

    second_opthold_covered_flag: int = ...
    """第二腿合约持仓备兑标记"""

    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        rid : Text = ...,
        optcomb_id : Text = ...,
        volume : int = ...,
        optcomb_code : Text = ...,
        first_option_code : Text = ...,
        first_opthold_side : int = ...,
        first_opthold_covered_flag : int = ...,
        second_option_code : Text = ...,
        second_opthold_side : int = ...,
        second_opthold_covered_flag : int = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"first_opthold_covered_flag",b"first_opthold_covered_flag",u"first_opthold_side",b"first_opthold_side",u"first_option_code",b"first_option_code",u"optcomb_code",b"optcomb_code",u"optcomb_id",b"optcomb_id",u"properties",b"properties",u"rid",b"rid",u"second_opthold_covered_flag",b"second_opthold_covered_flag",u"second_opthold_side",b"second_opthold_side",u"second_option_code",b"second_option_code",u"volume",b"volume"]) -> None: ...

class OptionSepEntrustRsp(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    RID_FIELD_NUMBER: int
    ERROR_CODE_FIELD_NUMBER: int
    ERROR_DESC_FIELD_NUMBER: int
    ORDER_ID_FIELD_NUMBER: int
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    rid: Text = ...
    error_code: int = ...
    """委托结果，0表示成功，非0为错误码"""

    error_desc: Text = ...
    """错误描述信息，error_code 非0时有效"""

    order_id: Text = ...
    """委托编号"""

    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        rid : Text = ...,
        error_code : int = ...,
        error_desc : Text = ...,
        order_id : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"error_code",b"error_code",u"error_desc",b"error_desc",u"order_id",b"order_id",u"properties",b"properties",u"rid",b"rid"]) -> None: ...

class GetOptionCombinableReq(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    RID_FIELD_NUMBER: int
    COMB_CODE_FIELD_NUMBER: int
    EXCHANGE_FIELD_NUMBER: int
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    rid: Text = ...
    comb_code: Text = ...
    """组合策略编码"""

    exchange: Text = ...
    """市场(SHSE/SZSE)"""

    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        rid : Text = ...,
        comb_code : Text = ...,
        exchange : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"comb_code",b"comb_code",u"exchange",b"exchange",u"properties",b"properties",u"rid",b"rid"]) -> None: ...

class OptionCombinablePosition(Message):
    DESCRIPTOR: Descriptor = ...
    SYMBOL_FIELD_NUMBER: int
    OPTHOLD_SIDE_FIELD_NUMBER: int
    OPTION_CODE_FIELD_NUMBER: int
    STOCK_CODE_FIELD_NUMBER: int
    OPTCONTRACT_ID_FIELD_NUMBER: int
    OPTION_NAME_FIELD_NUMBER: int
    OPTION_TYPE_FIELD_NUMBER: int
    CURRENT_AMOUNT_FIELD_NUMBER: int
    HOLD_AMOUNT_FIELD_NUMBER: int
    ENABLE_AMOUNT_FIELD_NUMBER: int
    OPTCOMB_USED_AMOUNT_FIELD_NUMBER: int
    REAL_OPEN_AMOUNT_FIELD_NUMBER: int
    REAL_DROP_AMOUNT_FIELD_NUMBER: int
    ENTRUST_DROP_AMOUNT_FIELD_NUMBER: int
    LAST_PRICE_FIELD_NUMBER: int
    OPT_LAST_PRICE_FIELD_NUMBER: int
    OPT_COST_PRICE_FIELD_NUMBER: int
    EXERCISE_PRICE_FIELD_NUMBER: int
    MARKET_VALUE_FIELD_NUMBER: int
    COST_BALANCE_FIELD_NUMBER: int
    INCOME_BALANCE_FIELD_NUMBER: int
    EXERCISE_INCOME_FIELD_NUMBER: int
    EXERCISE_PROFIT_RATIO_FIELD_NUMBER: int
    DUTY_USED_BAIL_FIELD_NUMBER: int
    REAL_HOLD_MARGIN_FIELD_NUMBER: int
    STATIC_HOLD_MARGIN_FIELD_NUMBER: int
    EXERCISE_DATE_FIELD_NUMBER: int
    AMOUNT_PER_HAND_FIELD_NUMBER: int
    SUM_BUY_BALANCE_FIELD_NUMBER: int
    COVERED_FLAG_FIELD_NUMBER: int
    EXPIRE_DAY_FIELD_NUMBER: int
    OPT_HEDGE_AMOUNT_FIELD_NUMBER: int
    MARKET_PROFIT_FLOAT_FIELD_NUMBER: int
    symbol: Text = ...
    opthold_side: int = ...
    """期权持仓类别"""

    option_code: Text = ...
    """期权合约编码"""

    stock_code: Text = ...
    """证券代码"""

    optcontract_id: Text = ...
    """合约交易代码"""

    option_name: Text = ...
    """期权合约简称"""

    option_type: Text = ...
    """期权种类"""

    current_amount: int = ...
    """当前数量"""

    hold_amount: int = ...
    """持有数量"""

    enable_amount: int = ...
    """可用数量"""

    optcomb_used_amount: int = ...
    """组合策略占用数量"""

    real_open_amount: int = ...
    """回报开仓数量"""

    real_drop_amount: int = ...
    """回报平仓数量"""

    entrust_drop_amount: int = ...
    """委托平仓数量"""

    last_price: float = ...
    """最新价"""

    opt_last_price: float = ...
    """期权最新价"""

    opt_cost_price: float = ...
    """开仓均价"""

    exercise_price: float = ...
    """行权价格"""

    market_value: float = ...
    """证券市值"""

    cost_balance: float = ...
    """持仓成本"""

    income_balance: float = ...
    """盈亏金额"""

    exercise_income: float = ...
    """行权盈亏"""

    exercise_profit_ratio: float = ...
    """行权盈亏比例"""

    duty_used_bail: float = ...
    """义务仓占用保证金"""

    real_hold_margin: float = ...
    """动态持仓保证金"""

    static_hold_margin: float = ...
    """静态持仓保证金"""

    exercise_date: Text = ...
    """行权日期"""

    amount_per_hand: int = ...
    """合约乘数"""

    sum_buy_balance: float = ...
    """20190218 新增"""

    covered_flag: int = ...
    """20190218 新增 备兑标志"""

    expire_day: int = ...
    """20190319 新增 到期天数"""

    opt_hedge_amount: int = ...
    """对冲后持仓量"""

    market_profit_float: float = ...
    """浮动盈亏"""

    def __init__(self,
        *,
        symbol : Text = ...,
        opthold_side : int = ...,
        option_code : Text = ...,
        stock_code : Text = ...,
        optcontract_id : Text = ...,
        option_name : Text = ...,
        option_type : Text = ...,
        current_amount : int = ...,
        hold_amount : int = ...,
        enable_amount : int = ...,
        optcomb_used_amount : int = ...,
        real_open_amount : int = ...,
        real_drop_amount : int = ...,
        entrust_drop_amount : int = ...,
        last_price : float = ...,
        opt_last_price : float = ...,
        opt_cost_price : float = ...,
        exercise_price : float = ...,
        market_value : float = ...,
        cost_balance : float = ...,
        income_balance : float = ...,
        exercise_income : float = ...,
        exercise_profit_ratio : float = ...,
        duty_used_bail : float = ...,
        real_hold_margin : float = ...,
        static_hold_margin : float = ...,
        exercise_date : Text = ...,
        amount_per_hand : int = ...,
        sum_buy_balance : float = ...,
        covered_flag : int = ...,
        expire_day : int = ...,
        opt_hedge_amount : int = ...,
        market_profit_float : float = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"amount_per_hand",b"amount_per_hand",u"cost_balance",b"cost_balance",u"covered_flag",b"covered_flag",u"current_amount",b"current_amount",u"duty_used_bail",b"duty_used_bail",u"enable_amount",b"enable_amount",u"entrust_drop_amount",b"entrust_drop_amount",u"exercise_date",b"exercise_date",u"exercise_income",b"exercise_income",u"exercise_price",b"exercise_price",u"exercise_profit_ratio",b"exercise_profit_ratio",u"expire_day",b"expire_day",u"hold_amount",b"hold_amount",u"income_balance",b"income_balance",u"last_price",b"last_price",u"market_profit_float",b"market_profit_float",u"market_value",b"market_value",u"opt_cost_price",b"opt_cost_price",u"opt_hedge_amount",b"opt_hedge_amount",u"opt_last_price",b"opt_last_price",u"optcomb_used_amount",b"optcomb_used_amount",u"optcontract_id",b"optcontract_id",u"opthold_side",b"opthold_side",u"option_code",b"option_code",u"option_name",b"option_name",u"option_type",b"option_type",u"real_drop_amount",b"real_drop_amount",u"real_hold_margin",b"real_hold_margin",u"real_open_amount",b"real_open_amount",u"static_hold_margin",b"static_hold_margin",u"stock_code",b"stock_code",u"sum_buy_balance",b"sum_buy_balance",u"symbol",b"symbol"]) -> None: ...

class OptionCombinable(Message):
    DESCRIPTOR: Descriptor = ...
    OPTCOMBCODE_FIELD_NUMBER: int
    OPTCOMBNAME_FIELD_NUMBER: int
    OPTCOMBID_FIELD_NUMBER: int
    ENABLEAMOUNT_FIELD_NUMBER: int
    RELEASEMARGIN_FIELD_NUMBER: int
    FROZENMARGIN_FIELD_NUMBER: int
    FIRST_LEG_FIELD_NUMBER: int
    SECOND_LEG_FIELD_NUMBER: int
    optcombCode: Text = ...
    optcombName: Text = ...
    optcombId: Text = ...
    enableAmount: int = ...
    releaseMargin: float = ...
    frozenMargin: float = ...
    @property
    def first_leg(self) -> OptionCombinablePosition: ...
    @property
    def second_leg(self) -> OptionCombinablePosition: ...
    def __init__(self,
        *,
        optcombCode : Text = ...,
        optcombName : Text = ...,
        optcombId : Text = ...,
        enableAmount : int = ...,
        releaseMargin : float = ...,
        frozenMargin : float = ...,
        first_leg : Optional[OptionCombinablePosition] = ...,
        second_leg : Optional[OptionCombinablePosition] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"first_leg",b"first_leg",u"second_leg",b"second_leg"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"enableAmount",b"enableAmount",u"first_leg",b"first_leg",u"frozenMargin",b"frozenMargin",u"optcombCode",b"optcombCode",u"optcombId",b"optcombId",u"optcombName",b"optcombName",u"releaseMargin",b"releaseMargin",u"second_leg",b"second_leg"]) -> None: ...

class GetOptionCombinableRsp(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    RID_FIELD_NUMBER: int
    ERROR_CODE_FIELD_NUMBER: int
    ERROR_DESC_FIELD_NUMBER: int
    DATA_FIELD_NUMBER: int
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    rid: Text = ...
    error_code: int = ...
    """查询结果，0表示成功，非0为错误码"""

    error_desc: Text = ...
    """错误描述信息，error_code 非0时有效"""

    @property
    def data(self) -> RepeatedCompositeFieldContainer[OptionCombinable]: ...
    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        rid : Text = ...,
        error_code : int = ...,
        error_desc : Text = ...,
        data : Optional[Iterable[OptionCombinable]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"data",b"data",u"error_code",b"error_code",u"error_desc",b"error_desc",u"properties",b"properties",u"rid",b"rid"]) -> None: ...

class OptionCombinPosition(Message):
    DESCRIPTOR: Descriptor = ...
    OPTCOMB_ID_FIELD_NUMBER: int
    OPTCOMB_CODE_FIELD_NUMBER: int
    OPTCOMB_NAME_FIELD_NUMBER: int
    CURRENT_AMOUNT_FIELD_NUMBER: int
    ENABLE_AMOUNT_FIELD_NUMBER: int
    REAL_COMB_AMOUNT_FIELD_NUMBER: int
    REAL_SPLIT_AMOUNT_FIELD_NUMBER: int
    ENTRUST_SPLIT_AMOUNT_FIELD_NUMBER: int
    FIRST_SYMBOL_FIELD_NUMBER: int
    FIRST_OPTION_TYPE_FIELD_NUMBER: int
    FIRST_OPTION_NAME_FIELD_NUMBER: int
    FIRST_OPTHOLD_SIDE_FIELD_NUMBER: int
    FIRST_OPTHOLD_COVERED_FLAG_FIELD_NUMBER: int
    FIRST_OPT_AMOUNT_FIELD_NUMBER: int
    SECOND_SYMBOL_FIELD_NUMBER: int
    SECOND_OPTION_TYPE_FIELD_NUMBER: int
    SECOND_OPTHOLD_SIDE_FIELD_NUMBER: int
    SECOND_OPTHOLD_COVERED_FLAG_FIELD_NUMBER: int
    SECOND_OPTION_NAME_FIELD_NUMBER: int
    SECOND_OPT_AMOUNT_FIELD_NUMBER: int
    COMB_BAIL_BALANCE_FIELD_NUMBER: int
    SPLIT_COMB_MARGIN_FIELD_NUMBER: int
    COMB_AUTO_SPLIT_DATE_FIELD_NUMBER: int
    optcomb_id: Text = ...
    """组合编码"""

    optcomb_code: Text = ...
    """组合策略编码"""

    optcomb_name: Text = ...
    """组合策略名称"""

    current_amount: int = ...
    """当前数量"""

    enable_amount: int = ...
    """可用数量"""

    real_comb_amount: int = ...
    """回报组合数量"""

    real_split_amount: int = ...
    """回报拆分数量"""

    entrust_split_amount: int = ...
    """委托拆分数量"""

    first_symbol: Text = ...
    """第一腿期权合约编码"""

    first_option_type: Text = ...
    """第一腿合约种类"""

    first_option_name: Text = ...
    """第一腿期权合约简称"""

    first_opthold_side: int = ...
    """第一腿合约持仓类型"""

    first_opthold_covered_flag: int = ...
    """第一腿合约持仓备兑标记"""

    first_opt_amount: int = ...
    """第一腿合约数量"""

    second_symbol: Text = ...
    """第二腿期权合约编码"""

    second_option_type: Text = ...
    """第二腿合约种类"""

    second_opthold_side: int = ...
    """第二腿合约持仓类型"""

    second_opthold_covered_flag: int = ...
    """第二腿合约持仓备兑标记"""

    second_option_name: Text = ...
    """第二腿期权合约简称"""

    second_opt_amount: int = ...
    """第二腿合约数量"""

    comb_bail_balance: float = ...
    """组合占用保证金"""

    split_comb_margin: float = ...
    """组合拆分后保证金"""

    comb_auto_split_date: Text = ...
    """组合自动拆分日期"""

    def __init__(self,
        *,
        optcomb_id : Text = ...,
        optcomb_code : Text = ...,
        optcomb_name : Text = ...,
        current_amount : int = ...,
        enable_amount : int = ...,
        real_comb_amount : int = ...,
        real_split_amount : int = ...,
        entrust_split_amount : int = ...,
        first_symbol : Text = ...,
        first_option_type : Text = ...,
        first_option_name : Text = ...,
        first_opthold_side : int = ...,
        first_opthold_covered_flag : int = ...,
        first_opt_amount : int = ...,
        second_symbol : Text = ...,
        second_option_type : Text = ...,
        second_opthold_side : int = ...,
        second_opthold_covered_flag : int = ...,
        second_option_name : Text = ...,
        second_opt_amount : int = ...,
        comb_bail_balance : float = ...,
        split_comb_margin : float = ...,
        comb_auto_split_date : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"comb_auto_split_date",b"comb_auto_split_date",u"comb_bail_balance",b"comb_bail_balance",u"current_amount",b"current_amount",u"enable_amount",b"enable_amount",u"entrust_split_amount",b"entrust_split_amount",u"first_opt_amount",b"first_opt_amount",u"first_opthold_covered_flag",b"first_opthold_covered_flag",u"first_opthold_side",b"first_opthold_side",u"first_option_name",b"first_option_name",u"first_option_type",b"first_option_type",u"first_symbol",b"first_symbol",u"optcomb_code",b"optcomb_code",u"optcomb_id",b"optcomb_id",u"optcomb_name",b"optcomb_name",u"real_comb_amount",b"real_comb_amount",u"real_split_amount",b"real_split_amount",u"second_opt_amount",b"second_opt_amount",u"second_opthold_covered_flag",b"second_opthold_covered_flag",u"second_opthold_side",b"second_opthold_side",u"second_option_name",b"second_option_name",u"second_option_type",b"second_option_type",u"second_symbol",b"second_symbol",u"split_comb_margin",b"split_comb_margin"]) -> None: ...

class GetOptionCombPositionReq(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    RID_FIELD_NUMBER: int
    COMB_CODE_FIELD_NUMBER: int
    COMB_ID_FIELD_NUMBER: int
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    rid: Text = ...
    comb_code: Text = ...
    """组合策略编码"""

    comb_id: Text = ...
    """组合编码"""

    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        rid : Text = ...,
        comb_code : Text = ...,
        comb_id : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"comb_code",b"comb_code",u"comb_id",b"comb_id",u"properties",b"properties",u"rid",b"rid"]) -> None: ...

class GetOptionCombPositionRsp(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    RID_FIELD_NUMBER: int
    ERROR_CODE_FIELD_NUMBER: int
    ERROR_DESC_FIELD_NUMBER: int
    DATA_FIELD_NUMBER: int
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    rid: Text = ...
    error_code: int = ...
    """查询结果，0表示成功，非0为错误码"""

    error_desc: Text = ...
    """错误描述信息，error_code 非0时有效"""

    @property
    def data(self) -> RepeatedCompositeFieldContainer[OptionCombinPosition]: ...
    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        rid : Text = ...,
        error_code : int = ...,
        error_desc : Text = ...,
        data : Optional[Iterable[OptionCombinPosition]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"data",b"data",u"error_code",b"error_code",u"error_desc",b"error_desc",u"properties",b"properties",u"rid",b"rid"]) -> None: ...
