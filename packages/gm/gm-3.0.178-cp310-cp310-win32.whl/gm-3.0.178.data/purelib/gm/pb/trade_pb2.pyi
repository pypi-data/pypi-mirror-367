"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
from builtins import (
    bool,
    int,
)

from gm.pb.account_pb2 import (
    AccountStatus,
)

from gm.pb.common_pb2 import (
    Filter,
)

from google.protobuf.descriptor import (
    Descriptor,
    FileDescriptor,
)

from google.protobuf.internal.containers import (
    RepeatedScalarFieldContainer,
    ScalarMap,
)

from google.protobuf.message import (
    Message,
)

from typing import (
    Iterable,
    Mapping,
    Optional,
    Text,
)

from typing_extensions import (
    Literal,
)


DESCRIPTOR: FileDescriptor = ...

class LoginReq(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    PASSWORD_FIELD_NUMBER: int
    CAPTCHA_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    USE_CACHED_CREDENTAIL_FIELD_NUMBER: int
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    password: Text = ...
    captcha: Text = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    use_cached_credentail: bool = ...
    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        password : Text = ...,
        captcha : Text = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        use_cached_credentail : bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"captcha",b"captcha",u"channel_id",b"channel_id",u"password",b"password",u"properties",b"properties",u"use_cached_credentail",b"use_cached_credentail"]) -> None: ...

class LoginRsp(Message):
    DESCRIPTOR: Descriptor = ...
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    TOKEN_FIELD_NUMBER: int
    STATUS_FIELD_NUMBER: int
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    token: Text = ...
    @property
    def status(self) -> AccountStatus: ...
    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        token : Text = ...,
        status : Optional[AccountStatus] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"status",b"status"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"status",b"status",u"token",b"token"]) -> None: ...

class LogoutReq(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"properties",b"properties"]) -> None: ...

class LogoutRsp(Message):
    DESCRIPTOR: Descriptor = ...
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    STATUS_FIELD_NUMBER: int
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    @property
    def status(self) -> AccountStatus: ...
    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        status : Optional[AccountStatus] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"status",b"status"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"status",b"status"]) -> None: ...

class GetOrdersReq(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    FILTER_FIELD_NUMBER: int
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    SYMBOLS_FIELD_NUMBER: int
    CL_ORD_IDS_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    @property
    def filter(self) -> Filter: ...
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """按照 symbol 进行过滤"""
        pass
    @property
    def cl_ord_ids(self) -> RepeatedScalarFieldContainer[Text]:
        """按照 cl_ord_id 进行过滤"""
        pass
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    def __init__(self,
        *,
        filter : Optional[Filter] = ...,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        symbols : Optional[Iterable[Text]] = ...,
        cl_ord_ids : Optional[Iterable[Text]] = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"filter",b"filter"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"cl_ord_ids",b"cl_ord_ids",u"filter",b"filter",u"properties",b"properties",u"symbols",b"symbols"]) -> None: ...

class GetUnfinishedOrdersReq(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    FILTER_FIELD_NUMBER: int
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    SYMBOLS_FIELD_NUMBER: int
    CL_ORD_IDS_FIELD_NUMBER: int
    @property
    def filter(self) -> Filter: ...
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """按照 symbol 进行过滤"""
        pass
    @property
    def cl_ord_ids(self) -> RepeatedScalarFieldContainer[Text]:
        """按照 cl_ord_id 进行过滤"""
        pass
    def __init__(self,
        *,
        filter : Optional[Filter] = ...,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        symbols : Optional[Iterable[Text]] = ...,
        cl_ord_ids : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"filter",b"filter"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"cl_ord_ids",b"cl_ord_ids",u"filter",b"filter",u"properties",b"properties",u"symbols",b"symbols"]) -> None: ...

class GetIntradayOrdersReq(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    FILTER_FIELD_NUMBER: int
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    SYMBOLS_FIELD_NUMBER: int
    CL_ORD_IDS_FIELD_NUMBER: int
    @property
    def filter(self) -> Filter: ...
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    @property
    def symbols(self) -> RepeatedScalarFieldContainer[Text]:
        """按照 symbol 进行过滤"""
        pass
    @property
    def cl_ord_ids(self) -> RepeatedScalarFieldContainer[Text]:
        """按照 cl_ord_id 进行过滤"""
        pass
    def __init__(self,
        *,
        filter : Optional[Filter] = ...,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        symbols : Optional[Iterable[Text]] = ...,
        cl_ord_ids : Optional[Iterable[Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"filter",b"filter"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"cl_ord_ids",b"cl_ord_ids",u"filter",b"filter",u"properties",b"properties",u"symbols",b"symbols"]) -> None: ...

class GetExecrptsReq(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    FILTER_FIELD_NUMBER: int
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    CL_ORD_ID_FIELD_NUMBER: int
    EXEC_TYPE_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    @property
    def filter(self) -> Filter: ...
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    cl_ord_id: Text = ...
    exec_type: int = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    def __init__(self,
        *,
        filter : Optional[Filter] = ...,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        cl_ord_id : Text = ...,
        exec_type : int = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"filter",b"filter"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"cl_ord_id",b"cl_ord_id",u"exec_type",b"exec_type",u"filter",b"filter",u"properties",b"properties"]) -> None: ...

class GetIntradayExecrptsReq(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    FILTER_FIELD_NUMBER: int
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    EXEC_TYPE_FIELD_NUMBER: int
    SNO_SINCE_FIELD_NUMBER: int
    SNO_SINCE_END_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    @property
    def filter(self) -> Filter: ...
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    exec_type: int = ...
    sno_since: int = ...
    sno_since_end: int = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    def __init__(self,
        *,
        filter : Optional[Filter] = ...,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        exec_type : int = ...,
        sno_since : int = ...,
        sno_since_end : int = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"filter",b"filter"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"exec_type",b"exec_type",u"filter",b"filter",u"properties",b"properties",u"sno_since",b"sno_since",u"sno_since_end",b"sno_since_end"]) -> None: ...

class GetCashReq(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    FILTER_FIELD_NUMBER: int
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    @property
    def filter(self) -> Filter: ...
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    def __init__(self,
        *,
        filter : Optional[Filter] = ...,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"filter",b"filter"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"filter",b"filter",u"properties",b"properties"]) -> None: ...

class GetPositionsReq(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    FILTER_FIELD_NUMBER: int
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    SYMBOL_FIELD_NUMBER: int
    SIDE_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    @property
    def filter(self) -> Filter: ...
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    symbol: Text = ...
    side: int = ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    def __init__(self,
        *,
        filter : Optional[Filter] = ...,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        symbol : Text = ...,
        side : int = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def HasField(self, field_name: Literal[u"filter",b"filter"]) -> bool: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id",u"filter",b"filter",u"properties",b"properties",u"side",b"side",u"symbol",b"symbol"]) -> None: ...

class CancelAllOrdersReq(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    ACCOUNT_IDS_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    @property
    def account_ids(self) -> RepeatedScalarFieldContainer[Text]: ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    def __init__(self,
        *,
        account_ids : Optional[Iterable[Text]] = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"account_ids",b"account_ids",u"properties",b"properties"]) -> None: ...

class CloseAllPositionsReq(Message):
    DESCRIPTOR: Descriptor = ...
    class PropertiesEntry(Message):
        DESCRIPTOR: Descriptor = ...
        KEY_FIELD_NUMBER: int
        VALUE_FIELD_NUMBER: int
        key: Text = ...
        value: Text = ...
        def __init__(self,
            *,
            key : Text = ...,
            value : Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: Literal[u"key",b"key",u"value",b"value"]) -> None: ...

    OPERATOR_ID_FIELD_NUMBER: int
    ACCOUNT_IDS_FIELD_NUMBER: int
    PROPERTIES_FIELD_NUMBER: int
    operator_id: Text = ...
    @property
    def account_ids(self) -> RepeatedScalarFieldContainer[Text]: ...
    @property
    def properties(self) -> ScalarMap[Text, Text]: ...
    def __init__(self,
        *,
        operator_id : Text = ...,
        account_ids : Optional[Iterable[Text]] = ...,
        properties : Optional[Mapping[Text, Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"account_ids",b"account_ids",u"operator_id",b"operator_id",u"properties",b"properties"]) -> None: ...

class GetAccountStatusReq(Message):
    DESCRIPTOR: Descriptor = ...
    ACCOUNT_ID_FIELD_NUMBER: int
    ACCOUNT_NAME_FIELD_NUMBER: int
    CHANNEL_ID_FIELD_NUMBER: int
    account_id: Text = ...
    account_name: Text = ...
    channel_id: Text = ...
    def __init__(self,
        *,
        account_id : Text = ...,
        account_name : Text = ...,
        channel_id : Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: Literal[u"account_id",b"account_id",u"account_name",b"account_name",u"channel_id",b"channel_id"]) -> None: ...
