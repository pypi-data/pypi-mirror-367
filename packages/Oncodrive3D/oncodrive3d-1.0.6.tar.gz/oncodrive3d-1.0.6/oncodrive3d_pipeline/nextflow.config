// Global default params, used in configs

trace_timestamp = new java.util.Date().format('yyyy-MM-dd_HH-mm-ss')

params {
    // Pipeline Options
    outdir                = "./"
    outsubdir             = "run_${trace_timestamp}"
    cohort_pattern        = "*"
    data_dir              = "${baseDir}/../datasets"                                                // CHANGE TO YOUR PATH
    annotations_dir       = "${baseDir}/../annotations"                                             // CHANGE TO YOUR PATH
    conda_env             = '/path/to/conda/environment/with/oncodrive3d'                           // CHANGE TO YOUR PATH
    cores                 = 10
    memory                = "70G"
    max_running           = 5
    vep_input             = false
    mane                  = false
    ignore_mapping_issues = false
    plot                  = false                                                   // Requires the Oncodrive3D build_annotations step 
    chimerax_plot         = false                                                   // Requires the Oncodrive3D build_annotations step 
    seed                  = 128
    verbose               = false

    // Max resource options
    max_memory                 = '256.GB'
    max_cpus                   = 56
    max_time                   = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
    validate_params                  = true
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Profiles
profiles {

    standard {
        process.executor = 'slurm'
        singularity {
            enabled = true
            autoMounts = true
        }
    }

    container {
        process.executor = 'slurm'
        singularity {
            enabled = true
            autoMounts = true
        }
    }

    conda {
        process.executor = 'slurm'
        singularity.enabled = false
        conda.enabled = true
        process.conda = "${params.conda_env}"
    }

    test {
        process.executor = 'slurm'
        includeConfig 'conf/test.config'
    }
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Nextflow runtime settings

timeline {
    enabled = true
    file    = "${params.outdir}/run_${trace_timestamp}/pipeline_info/timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/run_${trace_timestamp}/pipeline_info/report_${trace_timestamp}.html"
}
trace {
    enabled = true
    fields = 'process,task_id,hash,name,attempt,status,exit,realtime,%cpu,vmem,rss,submit,start,complete,duration,realtime,rchar,wchar'
    file    = "${params.outdir}/run_${trace_timestamp}/pipeline_info/trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/run_${trace_timestamp}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

// Manifest
manifest {
    name            = 'bbglab/Oncodrive3D'
    author          = "Stefano Pellegrini"
    homePage        = 'https://github.com/bbg/clustering_3d'
    description     = "Oncodrive3D : Oncodrive3D is a method designed to analyse patterns of somatic mutations across tumors and normal tissues to identify three-dimensional clusters of missense mutations and detect genes that are under positive selection."
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0dev'
    doi             = ''
}

// Function to ensure that resource requirements don't go beyond a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}