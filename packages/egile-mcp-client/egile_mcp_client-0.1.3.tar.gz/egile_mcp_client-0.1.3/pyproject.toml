[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[project]
name = "egile-mcp-client"
version = "0.1.3"
description = "A comprehensive MCP client with direct connection and AI agent modes, including web interface"
authors = [{name = "Jean-Baptiste Poullet", email = "egile@gmail.com"}]
readme = "README.md"
requires-python = ">=3.10"
keywords = ["mcp", "model-context-protocol", "client", "ai", "agent", "chat", "web"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    "anyio>=4.4.0",
    "click>=8.0.0",
    "httpx>=0.25.0",
    "websockets>=11.0.0",
    "pydantic>=2.0.0",
    "openai>=1.0.0",
    "anthropic>=0.8.0",
    "fastapi>=0.115.0",
    "uvicorn>=0.24.0",
    "jinja2>=3.1.0",
    "aiofiles>=23.0.0",
    "python-multipart>=0.0.18",
    "asyncio-mqtt>=0.11.0",
    "pyyaml>=6.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "sse-starlette>=1.6.0",
    "python-dotenv (>=1.1.1,<2.0.0)",
]

[project.urls]
Homepage = "https://github.com/jpoullet2000/egile-mcp-client"
Repository = "https://github.com/jpoullet2000/egile-mcp-client"

[project.scripts]
egile-mcp-client = "egile_mcp_client.cli:main"

[tool.poetry]
packages = [{include = "egile_mcp_client"}]

[tool.poetry.dependencies]
python = "^3.10"
anyio = "^4.4.0"
click = "^8.0.0"
httpx = "^0.25.0"
websockets = "^11.0.0"
pydantic = "^2.0.0"
openai = "^1.0.0"
anthropic = "^0.8.0"
fastapi = "^0.115.0"
uvicorn = "^0.24.0"
jinja2 = "^3.1.0"
aiofiles = "^23.0.0"
python-multipart = "^0.0.18"
pyyaml = "^6.0.0"
rich = "^13.0.0"
typer = "^0.9.0"
sse-starlette = "^1.6.0"
python-dotenv = "^1.1.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.0"
pytest-asyncio = "^0.21.0"
pytest-cov = "^4.1.0"
black = "^24.3.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"
pre-commit = "^3.4.0"
isort = "^5.12.0"
bandit = "^1.7.5"
safety = "^2.3.0"
radon = "^6.0.1"
xenon = "^0.9.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.0.0"
sphinx-rtd-theme = "^1.3.0"
myst-parser = "^2.0.0"
sphinx-autodoc-typehints = "^1.24.0"
sphinxcontrib-napoleon = "^0.7"

[tool.black]
line-length = 88
target-version = ["py310", "py311", "py312"]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --disable-warnings"
testpaths = ["tests"]
markers = [
    "integration: marks tests as integration tests",
    "slow: marks tests as slow",
    "unit: marks tests as unit tests"
]

[tool.coverage.run]
source = ["egile_mcp_client"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.flake8]
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "build",
    "dist",
    "DEVELOPMENT_SUMMARY.md",
    "FINAL_IMPLEMENTATION_SUMMARY.md"
]
max-line-length = 88
ignore = ["E203", "W503"]
